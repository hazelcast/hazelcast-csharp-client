#
# Reusable Workflow: Build&Test
#
# Builds the code and run tests on the specified OS and for the specified frameworks,
# but only if the user is a member of the Hazelcast organization, as running the tests
# may end up running unsafe user code or expose secrets such as the enterprise key.
#
# Results are uploaded as artifacts.
#

name: Build&Test
on: 

  # called by upper-level workflow
  workflow_call:
    inputs:

      # the OS to run on e.g. 'ubuntu-latest'
      os:
        required: true
        type: string

      # the json-serialized array of frameworks to test
      fwks:
        required: true
        type: string

      # the optional ref to checkout
      ref:
        required: false
        type: string
        default: ''

      # the optional merged-ref to validate
      merged-ref:
        required: false
        type: string
        default: ''

      # whether this is a release build
      release:
        required: false
        type: boolean
        default: false

      # the release version, when release is true
      version:
        required: false
        type: string
        default: ""

jobs:

  # build and test
  build-and-test:
    name: ${{ inputs.os }}+${{ matrix.fwk }}
    runs-on: ${{ inputs.os }}

    strategy:
      fail-fast: false
      matrix:
        fwk: ${{ fromJson(inputs.fwks) }}

    steps:

      # checkout the hazelcast/hazelcast-csharp-client repository
      # including all submodules, we are going to need them
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}
          submodules: true

      # Install our environment
      - name: Install environment
        uses: ./.github/actions/install
        with:
          os: ${{ inputs.os }}
          dotnet: true
          java: true

      # validate code
      - name: Validate code
        if: inputs.release == false && inputs.merged-ref != ''
        shell: bash
        run: |
          git rev-list --parents -n 1 HEAD | grep -q ${{ inputs.merged-ref }}
          if [ $? -eq 0 ]; then
            echo "Code is valid, found merged-ref as parent of HEAD."
          else
            echo "Code is NOT valid, could not find merged-ref as parent of HEAD."
            echo "::error::Invalid merged-ref."
            exit 1
          fi

      # verify the code version (release only)
      - name: Verify the code version
        if: inputs.release == true
        shell: pwsh
        run: ./hz.ps1 -version ${{ inputs.version }} -localRestore verify-version

      # obtain the snk file required to sign assemblies (release only)
      # the snk is avail as secrets.HAZELCAST_SNK as a Base64 string
      - name: Obtain assembly signature key
        if: inputs.release == true
        id: getsnk
        shell: bash
        run: |
          echo "${{ secrets.HAZELCAST_SNK }}" | base64 -d > ./build/hazelcast.snk
          ls -l ./build/hazelcast.snk

        # determine whether to build the release artifacts (need only to do it once)
        # ie whether we are building for the latest framework version on windows
        # assumes that frameworks obtained by getfwks-json are ordered with latest last
      - name: Determine Build Release Artifacts
        id: release-artifacts
        shell: pwsh
        run: |
            $arr = ConvertFrom-Json (.\hz.ps1 getfwks-json)
            $is_latest = ("${{ matrix.fwk }}" -eq $arr[-1])
            $build = ($isWindows -and $is_latest -and ("${{ inputs.release }}" -eq "true")).ToString().ToLower()
            write-output "build=$build"
            write-output "build=$build" >> $env:GITHUB_OUTPUT

      # debugging
      - name: Report Build Release Artifacts
        shell: bash
        run: |
            echo "RELEASE-ARTIFACTS=${{ steps.release-artifacts.outputs.build }}"

      # build
      - name: Build
        id: build
        shell: pwsh
        run: |
          $release = ("${{ inputs.release }}" -eq "true")
          $cmd = "build"
          if ($release) { $cmd += ",build-docs" }
          $a = @( $cmd, "-localRestore" )
          if ($release) { 
            $a += "-sign"
            $a += "-repro"
          }
          ./hz.ps1 @a

      # clear the snk file (release only)
      - name: Clear assembly signature key
        if: (success() || failure()) && steps.getsnk.conclusion == 'success'
        shell: bash
        run: |
          if [ -f ./build/hazelcast.snk ]; then rm ./build/hazelcast.snk; fi

      # test (with coverage)
      # -enterprise only if the key is available, we do not share it outside of the HZ org
      - name: Test
        id: test
        env:
          HAZELCAST_ENTERPRISE_KEY: ${{ secrets.HAZELCAST_ENTERPRISE_KEY }}
          GITHUB_TOKEN_DEVOPS: ${{ secrets.HAZELCAST_GITHUB_TOKEN_DEVOPS }}
        shell: pwsh
        run: |
          $release = ("${{ inputs.release }}" -eq "true")
          $cmd = "test"
          #if ($release) { $cmd += ",cover-to-docs" }
          $a = @( "$cmd", "-noRestore", "-localRestore", "-cover", "-f", "${{matrix.fwk}}" )
          if ($release -or -not [string]::IsNullOrWhiteSpace($env:HAZELCAST_ENTERPRISE_KEY)) { 
            $a += "-enterprise"
            if (-not [string]::IsNullOrWhiteSpace($env:GITHUB_TOKEN_DEVOPS)) {
              $a += $env:GITHUB_TOKEN_DEVOPS
            }
          }
          ./hz.ps1 @a

      # test results & coverage: we cannot report here as this workflow doesn't have
      # the required permissions nor tokens to write back to our resources (since it runs
      # on a PR) - so we upload everything as artifacts, and the report-pr workflow will
      # take care of reporting.

      # upload test results artifact
      - name: Upload test results artifact
        if: (success() || failure()) && steps.build.conclusion == 'success'
        uses: actions/upload-artifact@v3
        with:
          name: Test-Results ${{ inputs.os }}-${{ matrix.fwk }}
          path: './temp/tests/results/*.trx'

      # upload test coverage artifact
      - name: Upload test coverage artifact
        if: steps.test.conclusion == 'success'
        uses: actions/upload-artifact@v3
        with:
          name: Test-Coverage ${{ inputs.os }}-${{ matrix.fwk }}
          path: './temp/tests/cover/' # entire directory

      # and then, everything below is for releases only
      # and need only be done on 1 environment (windows-latest + latest fwk) 

      # create nuget packages
      - name: Pack NuGet packages
        if: steps.release-artifacts.outputs.build == 'true'
        shell: pwsh
        run: ./hz.ps1 -noRestore -localRestore pack-nuget

      # upload nuget packages
      - name: Upload NuGet packages artifact
        if: steps.release-artifacts.outputs.build == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: NuGet-Packages
          path: './temp/output/Hazelcast.Net.*pkg'

      # publish examples (inc. soak tests) (windows only so we have framework too)
      - name: Publish examples
        if: steps.release-artifacts.outputs.build == 'true'
        shell: pwsh
        run: ./hz.ps1 -noRestore -localRestore publish-examples

      # archive examples (windows only)
      - name: Archive examples artifact
        if: steps.release-artifacts.outputs.build == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: Examples
          path: './temp/examples/*.zip'

      # git the docs, create the patch
      - name: Create docs patch
        if: steps.release-artifacts.outputs.build == 'true'
        shell: pwsh
        run: |
          ./hz.ps1 -noRestore -localRestore git-docs git-docs.user.email="github-actions@hazelcast.com" git-docs.user.name="GitHub Actions"
          mkdir ./temp/gh-pages-patches >$null 2>&1
          echo "Create git patch"
          git -C ./temp/gh-pages format-patch -1 -o ../gh-pages-patches
          echo "Patch files:"
          ls ./temp/gh-pages-patches/

      # archive docs patch
      - name: Upload docs patch artifact
        if: steps.release-artifacts.outputs.build == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: Docs-Patch
          path: './temp/gh-pages-patches/*.patch'