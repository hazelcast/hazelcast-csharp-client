#
# Reusable Workflow: Build&Test
#
# Builds the code and run tests on the specified OS and for the specified frameworks,
# but only if the user is a member of the Hazelcast organization, as running the tests
# may end up running unsafe user code or expose secrets such as the enterprise key.
#
# Results are uploaded as artifacts.
#

name: Build&Test
on: 

  # called by upper-level workflow
  workflow_call:
    inputs:

      # the OS to run on e.g. 'ubuntu-latest'
      os:
        required: true
        type: string

      # the json-serialized array of frameworks to test
      fwks:
        required: true
        type: string

      # the optional ref to checkout
      ref:
        required: false
        type: string
        default: ''

      # the optional merged-ref to validate
      merged-ref:
        required: false
        type: string
        default: ''

jobs:

  # build and test
  build-and-test:
    name: ${{ inputs.os }}+${{ matrix.fwk }}
    runs-on: ${{ inputs.os }}

    strategy:
      fail-fast: false
      matrix:
        fwk: ${{ fromJson(inputs.fwks) }}

    steps:

      # checkout the hazelcast/hazelcast-csharp-client repository
      # including all submodules, we are going to need them
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}
          submodules: true

      # Install our environment
      - name: Install environment
        uses: ./.github/actions/install
        with:
          os: ${{ inputs.os }}
          dotnet: true
          java: true

      # validate code
      - name: Validate code
        if: inputs.merged-ref != ''
        shell: bash
        run: |
          git rev-list --parents -n 1 HEAD | grep -q ${{ inputs.merged-ref }}
          if [ $? -eq 0 ]; then
            echo "Code is valid, found merged-ref as parent of HEAD."
          else
            echo "Code is NOT valid, could not find merged-ref as parent of HEAD."
            echo "::error::Invalid merged-ref."
            exit 1
          fi

      # build
      - name: Build
        id: build
        shell: pwsh
        run: ./hz.ps1 -localRestore build #,docs,pubdocs

      # test (with coverage)
      # -enterprise only if the key is available, we do not share it outside of the HZ org
      - name: Test
        id: test
        env:
          HAZELCAST_ENTERPRISE_KEY: ${{ secrets.HAZELCAST_ENTERPRISE_KEY }}
          GITHUB_TOKEN_DEVOPS: ${{ secrets.HAZELCAST_GITHUB_TOKEN_DEVOPS }}
        shell: pwsh
        run: |
          $a = @( "test", "-noRestore", "-localRestore", "-cover", "-f", "${{matrix.fwk}}" )
          if (-not [string]::IsNullOrWhiteSpace($env:HAZELCAST_ENTERPRISE_KEY)) { 
            $a += "-enterprise"
            if (-not [string]::IsNullOrWhiteSpace($env:GITHUB_TOKEN_DEVOPS)) {
              $a += $env:GITHUB_TOKEN_DEVOPS
            }
          }
          ./hz.ps1 @a

      # test results & coverage: we cannot report here as this workflow doesn't have
      # the required permissions nor tokens to write back to our resources (since it runs
      # on a PR) - so we upload everything as artifacts, and the report-pr workflow will
      # take care of reporting.

      # upload test results artifact
      - name: Upload test results artifact
        if: (success() || failure()) && steps.build.conclusion == 'success'
        uses: actions/upload-artifact@v3
        with:
          name: Test-Results ${{ inputs.os }}-${{ matrix.fwk }}
          path: './temp/tests/results/*.trx'

      # upload test coverage artifact
      - name: Upload test coverage artifact
        if: steps.test.conclusion == 'success'
        uses: actions/upload-artifact@v3
        with:
          name: Test-Coverage ${{ inputs.os }}-${{ matrix.fwk }}
          path: './temp/tests/cover/' # entire directory
