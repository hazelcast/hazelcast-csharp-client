#
# Reusable Workflow: Create Checks
#
# Creates the checks (test results, code coverage).
#

name: Create Checks
on: 

  # called by upper-level workflow
  workflow_call:
    inputs:

      # the conclusion of the build & test
      conclusion:
        required: true
        type: string

      # the identifier of the run which should receive the checks
      run_id:
        required: false
        type: string
        default: ''

      # the sha of the commit for which the checks were run
      head_sha:
        required: true
        type: string

      # whether to report test coverage
      coverage:
        required: false
        type: boolean
        default: true

jobs:

  create-checks:
    name: Create Checks
    runs-on: ubuntu-latest

    steps:

      # checkout the hazelcast/hazelcast-csharp-client repository
      # no need for submodules, but we need the .github directory
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          submodules: false

      # create required directories, etc
      - name: Prepare
        shell: bash
        run: |
          echo "Build&Test conclusion = ${{ inputs.conclusion }}"
          mkdir ./temp
          mkdir ./temp/test-results
          mkdir ./temp/test-results/ubuntu
          mkdir ./temp/test-results/windows
          mkdir ./temp/test-coverage
          mkdir ./temp/test-coverage/ubuntu
          mkdir ./temp/test-coverage/windows
          mkdir ./temp/artifacts

      # download all the tests results and coverage artifacts (this run)
      # cannot use script because we get artifacts from same run
      - name: Download tests results and coverage artifacts (this run)
        if: inputs.run_id == ''
        uses: actions/download-artifact@v4
        with:
          # don't specify name = download all available artifacts
          path: ./temp/artifacts

      # move artifacts to their right place (this run)
      - name: Move tests results and coverage artifacts (this run)
        id: move
        if: inputs.run_id == ''
        shell: bash
        run: |
          found=0
          for i in ./temp/artifacts/Test-Results\ ubuntu-latest-*; do
            echo "Move $i"
            found=1
            echo "MOVE:"
            mv "$i/"* "./temp/test-results/ubuntu/"
          done
          for i in ./temp/artifacts/Test-Results\ windows-latest-*; do
            echo "Move $i"
            found=1
            mv "$i/"* "./temp/test-results/windows/"
          done
          if [ $found -eq 1 ]; then
            echo "results=true" >> $GITHUB_OUTPUT
          else
            echo "results=false" >> $GITHUB_OUTPUT
            echo "(missing)"
          fi

          found=0
          for i in ./temp/artifacts/Test-Coverage\ ubuntu-latest-*; do
            echo "Move $i"
            found=1
            mv "$i/"* "./temp/test-coverage/ubuntu/"
          done
          for i in ./temp/artifacts/Test-Coverage\ windows-latest-*; do
            echo "Move $i"
            found=1
            mv "$i/"* "./temp/test-coverage/windows/"
          done
          if [ $found -eq 1 ]; then
            echo "coverage=true" >> $GITHUB_OUTPUT
          else
            echo "coverage=false" >> $GITHUB_OUTPUT
            echo "(missing)"
          fi

      # download all the tests results and coverage artifacts (other run)
      # cannot use download action because we get artifacts from another run
      - name: Download tests results and coverage artifacts (other run)
        if: inputs.run_id != ''
        uses: actions/github-script@v6
        with:
          script: |
            const restapi = github.rest
            console.log(`Downloading artifacts for repo ${context.repo.owner}/${context.repo.repo} run ${{inputs.run_id}}`)
            var fs = require('fs');
            var artifacts = await restapi.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: ${{ inputs.run_id }},
            });
            console.log(`Found ${artifacts.data.artifacts.length} artifacts:`)
            for (const artifact of artifacts.data.artifacts) {
                console.log(`Artifact: ${artifact.name}`);
            }
            async function download(prefix, path) {
              var filtered = artifacts.data.artifacts.filter((x) => {
                return x.name.startsWith(prefix);
              });
              for (const artifact of filtered) {
                var download = await restapi.actions.downloadArtifact({
                   owner: context.repo.owner,
                   repo: context.repo.repo,
                   artifact_id: artifact.id,
                   archive_format: 'zip',
                });
                var xxxx = artifact.name.substring(prefix.length).replace(/\(|\)/g, '');
                var path2 = path.replace('XXXX', xxxx);
                await fs.promises.writeFile(process.env.GITHUB_WORKSPACE + path2, Buffer.from(download.data));
                console.log(`Downloaded: ${artifact.name} -> ${path2}`);
              }
            }
            await download('Test-Results ', '/temp/test-results/test-results-XXXX.zip');
            await download('Test-Coverage ', '/temp/test-coverage/test-coverage-XXXX.zip');

      # unzip artifacts (other run)
      - name: Unzip artifacts (other run)
        if: inputs.run_id != ''
        id: unzip
        shell: bash
        run: |
          echo "Tests results:"
          shopt -s nullglob # 'for f in ...' should do nothing if no file is found
          found=0
          for f in temp/test-results/test-results-*.zip;
          do
            found=1
            echo "unzip $f"
            k=${f##*/} # path/to/test-results-ubuntu-latest[-net00].zip -> test-results-ubuntu-latest[-net00].zip
            k=${k#test-results-} # test-results-ubuntu-latest[-net00].zip -> ubuntu-latest[-net00].zip
            k=${k%.*} # ubuntu-latest[-net00].zip -> ubuntu-latest[-net00]
            k=${k//-latest} # ubuntu-latest[-net00] -> ubuntu[-net00]
            os=${k%-*} # ubuntu[-net00] -> ubuntu
            unzip $f -d temp/test-results/$os # linux results-net5.0.trx goes into temp/test-results/ubuntu/results-net5.0.trx
          done
          if [ $found -eq 1 ]; then
            echo "results=true" >> $GITHUB_OUTPUT
          else
            echo "results=false" >> $GITHUB_OUTPUT
            echo "(missing)"
          fi

          echo "Tests coverage:"
          found=0
          for f in temp/test-coverage/test-coverage-*.zip;
          do
            found=1
            echo "unzip $f"
            k=${f##*/} # path/to/test-coverage-ubuntu-latest[-net00].zip -> test-coverage-ubuntu-latest[-net00].zip
            k=${k#test-coverage-} # test-coverage-ubuntu-latest[-net00].zip -> ubuntu-latest[-net00].zip
            k=${k%.*} # ubuntu-latest[-net00].zip -> ubuntu-latest[-net00]
            k=${k//-latest} # ubuntu-latest[-net00] -> ubuntu[-net00]
            os=${k%-*} # ubuntu[-net00] -> ubuntu
            unzip $f -d temp/test-coverage/$os # linux cover-net6.0.json goes into temp/test-coverage/ubuntu/cover-net6.0.json
          done
          if [ $found -eq 1 ]; then
            echo "coverage=true" >> $GITHUB_OUTPUT
          else
            echo "coverage=false" >> $GITHUB_OUTPUT
            echo "(missing)"
          fi

      # log
      - name: Log
        shell: bash
        run: |
          echo "inputs.coverage   = ${{ inputs.coverage }}"
          echo "inputs.conclusion = ${{ inputs.conclusion }}"
          echo "inputs.head_sha   = ${{ inputs.head_sha }}"
          echo "unzip.results     = ${{ steps.unzip.outputs.results }}"
          echo "unzip.coverage    = ${{ steps.unzip.outputs.coverage }}"
          echo "move.results      = ${{ steps.move.outputs.results }}"
          echo "move.coverage     = ${{ steps.move.outputs.coverage }}"

      # report test results - always
      # see https://github.com/marketplace/actions/test-reporter
      - name: Report test results
        if: steps.unzip.outputs.results == 'true' || steps.move.outputs.results == 'true'
        uses: dorny/test-reporter@v1
        with:
          name: Test Results
          path: ./temp/test-results/*/results-*.trx
          reporter: dotnet-trx
          list-suites: failed
          list-tests: failed
          fail-on-error: false

      # report test coverage - if build&test was successful
      - name: Report test coverage
        if: inputs.coverage && inputs.conclusion == 'success' && (steps.unzip.outputs.coverage == 'true' || steps.move.outputs.coverage == 'true')
        uses: ./.github/actions/dotcover-report
        with:
          name: Test Coverage
          path: ./temp/test-coverage
          sha: ${{ inputs.head_sha }} # required since report runs on 'master'

      # publish to codecov - if build&test was successful
      # see https://github.com/marketplace/actions/codecov
      - name: Publish to Codecov
        if: inputs.coverage && inputs.conclusion == 'success' && (steps.unzip.outputs.coverage == 'true' || steps.move.outputs.coverage == 'true')
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./temp/test-coverage/windows/cover-net6.0.xml
          override_commit: ${{ inputs.head_sha }} # required since report runs on 'master'