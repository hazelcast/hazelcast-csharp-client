#
# Workflow: Build PR
#

name: Build PR
on: pull_request

jobs:

  # get frameworks
  get_fwks:

    name: Get Frameworks / ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]

    outputs:
      # beware! this cannot be dynamic = must match the OS matrix
      fwks-ubuntu-latest: ${{ steps.get_fwks.outputs.fwks-ubuntu-latest }}
      fwks-windows-latest: ${{ steps.get_fwks.outputs.fwks-windows-latest }}

    steps:

      # checkout the hazelcast/hazelcast-csharp-client repository
      # no need for submodules here
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # install powershell
      - name: Install utilities (Linux only)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          wget -q https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          rm packages-microsoft-prod.deb
          sudo apt-get update
          sudo add-apt-repository universe
          sudo apt-get install -y powershell

      # get frameworks
      - name: Get Frameworks
        id: get_fwks
        shell: bash
        run: |
          FWKS=$(pwsh ./hz.ps1 getfwks-json)
          echo "fwks-${{ matrix.os }}=$FWKS"
          echo "::set-output name=fwks-${{ matrix.os }}::$FWKS"

  # build & test
  build_test:
    name: Build&Test / ${{ matrix.os }}
    needs: get_fwks
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest ]
    uses: ./.github/workflows/build-pr-on.yml
    secrets: inherit
    with:
      os: ${{ matrix.os }}
      fwks: ${{ needs.get_fwks.outputs[format('fwks-{0}', matrix.os)] }}

  # report build & test result
  # -> GitHub is configured to require the 'Build&Test Result' check
  report:
    name: Build&Test Result
    runs-on: ubuntu-latest
    if: always()
    needs: build_test
    steps:
    - name: report
      shell: bash
      run: |
        if [ "${{ needs.build_test.conclusion }}" == "success" ]; then
          echo "All Build&Test checks completed successfully."
        else
          echo "At least one Build&Test check has failed."
          echo "::error::At least one Build&Test check has failed."
        fi
      
