#
# Workflow: Build PR
#

name: Build PR
on: pull_request

jobs:

  # build and test the PR
  build-pr:

    name: Build PR (${{ matrix.os }})
    runs-on: ${{ matrix.os }}

    if: github.repository == 'hazelcast/hazelcast-csharp-client'

    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]

    steps:

      # Install Linux utilities
      - name: Install utilities (Linux only)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          sudo apt-get update 
          # ubuntu-latest does not have proper git installed so we have to install it
          sudo apt-get install --yes --no-install-recommends \
            git
          # we need various misc stuff
          sudo apt-get install --yes --no-install-recommends \
            wget \
            curl \
            apt-transport-https \
            software-properties-common
          # we need pwsh
          wget -q https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          rm packages-microsoft-prod.deb
          sudo apt-get update
          sudo add-apt-repository universe
          sudo apt-get install -y powershell

      # Install .NET (complete)
      - name: Install .NET 2.1.x
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '2.1.x'
      - name: Install .NET 3.1.x
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.x'
      - name: Install .NET 5.0.x
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.x'

      ## Install .NET Framework stuff for docfx
      #- name: Install .NET Framework MSBUILD
      #  if: matrix.os == 'windows-latest'
      #  uses: microsoft/setup-msbuild@v1.0.2
      #  with:
      #    vs-version: '[15.0,16.0)'

      ## Install .NET Framework stuff for docfx
      #- name: Install .NET Framework NUGET
      #  if: matrix.os == 'windows-latest'
      #  uses: nuget/setup-nuget@v1

      # Install Java
      - name: Install JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'
          
      # checkout the hazelcast/hazelcast-csharp-client repository
      # including all submodules, we are going to need them
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          submodules: true

      # build
      - name: Build
        id: build
        shell: pwsh
        run: ./hz.ps1 -localRestore build #,docs,pubdocs

      # test (with coverage)
      # -enterprise only if the key is available, we do not share it outside of the HZ org
      - name: Test
        id: test
        env:
          HAZELCAST_ENTERPRISE_KEY: ${{ secrets.HAZELCAST_ENTERPRISE_KEY }}
        shell: pwsh
        run: |
          $a = @( "test", "-noRestore", "-localRestore", "-cover" )
          if (-not [string]::IsNullOrWhiteSpace($env:HAZELCAST_ENTERPRISE_KEY)) { $a += "-enterprise"}
          ./hz.ps1 @a

      # report
      # we cannot report here as this workflow isn't allowed to write back
      # so are just going to upload the test results, which will be used by report-pr
      - name: Archive test results artifact
        uses: actions/upload-artifact@v2
        with:
          name: Test-Results (${{ matrix.os }})
          path: './temp/tests/results/*.trx'

      # upload test coverage artifact
      # we cannot report either
      - name: Archive test coverage artifact
        uses: actions/upload-artifact@v2
        with:
          name: Test-Coverage (${{ matrix.os }})
          path: './temp/tests/cover/' # entire directory
