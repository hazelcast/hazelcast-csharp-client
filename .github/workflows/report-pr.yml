#
# Workflow: Report PR
#

# beware! for workflow_run workflow to run, it must exist on the master or default branch!

name: Report PR
on:
  workflow_run:
    workflows: [ "Build PR" ]
    types:
      - completed

jobs:

  report-pr:

    name: Report PR (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    if: >
      ${{ github.event.workflow_run.event == 'pull_request' &&
      github.event.workflow_run.conclusion == 'success' }}

    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]

    steps:

      - name: Prepare
        shell: bash
        run: |
          echo "Build PR conclusion: ${{ github.event.workflow_run.conclusion }}"
          mkdir ./test-results
          mkdir ./test-coverage
          git init # ensure we have a dummy repo, reporter wants it

      # cannot use download action because we get artifacts from another run
      - name: Download tests results and coverage artifacts (${{ matrix.os }})
        uses: actions/github-script@v4
        with:
          script: |
            var fs = require('fs');
            var artifacts = await github.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: ${{ github.event.workflow_run.id }},
            });
            function download(name, path) {
                var artifact = artifacts.data.artifacts.filter((art) => {
                  return art.name == name + 
                })[0];
                var download = await github.actions.downloadArtifact({
                   owner: context.repo.owner,
                   repo: context.repo.repo,
                   artifact_id: artifact.id,
                   archive_format: 'zip',
                });
                fs.writeFileSync(process.env.GITHUB_WORKSPACE + path, Buffer.from(download.data));
            }
            download('Test-Results (${{ matrix.os }})', '/test-results/test-results.zip');
            download('Test-Coverage (${{ matrix.os }})', '/test-coverage/test-coverage.zip');

      # unzip artifacts
      - name: Unzip artifacts
        shell: bash
        run: |
          echo "Tests results:"
          unzip test-results/test-results.zip -d test-results
          ls ./test-results
          echo "Tests coverage:"
          unzip test-coverage/test-coverage.zip -d test-coverage
          ls ./test-coverage

      # report test results
      - name: Report test results
        uses: dorny/test-reporter@v1
        with:
          name: Test Results (${{ matrix.os }})
          path: ./test-results/results-*.trx
          reporter: dotnet-trx
          list-suites: failed
          list-tests: failed
          fail-on-error: false

      # report test coverage
      - name: Report test coverage
        uses: ./.github/actions/dotcover-report
        with:
          name: Test Coverage (${{ matrix.os }})
          path: ./test-coverage
          sha: ${{ github.sha }}

      # publish to codecov
      - name: Publish to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secret.CODECOV_TOKEN }}
          files: ./test-coverage/cover-netcoreapp3.1.json