#
# Workflow: Report PR
#

# beware! for workflow_run workflow to run, it must exist on the master or default branch!
# see https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#workflow_run

name: Report PR
on:
  workflow_run:
    workflows: [ "Build PR" ]
    types:
      - completed

jobs:

  report-pr:

    name: Report PR
    runs-on: ubuntu-latest
    if: >
      ${{ github.event.workflow_run.event == 'pull_request' }}

    steps:

      # checkout the hazelcast/hazelcast-csharp-client repository
      # no need for submodules, but we need the .github directory
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          submodules: false

      - name: Prepare
        shell: bash
        run: |
          echo "Build PR conclusion: ${{ github.event.workflow_run.conclusion }}"
          mkdir ./temp
          mkdir ./temp/test-results
          mkdir ./temp/test-coverage

      # cannot use download action because we get artifacts from another run
      - name: Download tests results and coverage artifacts
        uses: actions/github-script@v4
        with:
          script: |
            var fs = require('fs');
            var artifacts = await github.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: ${{ github.event.workflow_run.id }},
            });
            for (const artifact of artifacts.data.artifacts) {
                console.log(`Artifact: ${artifact.name}`);
            }
            async function download(prefix, path) {
              var filtered = artifacts.data.artifacts.filter((x) => {
                return x.name.startsWith(prefix);
              });
              for (const artifact of filtered) {
                var download = await github.actions.downloadArtifact({
                   owner: context.repo.owner,
                   repo: context.repo.repo,
                   artifact_id: artifact.id,
                   archive_format: 'zip',
                });
                var xxxx = artifact.name.substring(prefix.length).replace(/\(|\)/g, '');
                var path2 = path.replace('XXXX', xxxx);
                await fs.promises.writeFile(process.env.GITHUB_WORKSPACE + path2, Buffer.from(download.data));
                console.log(`Downloaded: ${artifact.name} -> ${path2}`);
              }
            }
            await download('Test-Results ', '/temp/test-results/test-results-XXXX.zip');
            await download('Test-Coverage ', '/temp/test-coverage/test-coverage-XXXX.zip');

      # unzip artifacts
      - name: Unzip artifacts
        id: unzip
        shell: bash
        run: |
          echo "Tests results:"
          found=0
          for f in temp/test-results/test-results-*.zip;
          do
            found=1
            echo "unzip $f"
            k=${f##*/} # path/to/test-results-ubuntu-latest[-net00].zip -> test-results-ubuntu-latest[-net00].zip
            k=${k#test-results-} # test-results-ubuntu-latest[-net00].zip -> ubuntu-latest[-net00].zip
            k=${k%.*} # ubuntu-latest[-net00].zip -> ubuntu-latest[-net00]
            k=${k//-latest} # ubuntu-latest[-net00] -> ubuntu[-net00]
            os=${k%-*} # ubuntu[-net00] -> ubuntu
            unzip $f -d temp/test-results/$os # linux results-net5.0.trx goes into temp/test-results/ubuntu/results-net5.0.trx
          done
          if [ $found -eq 1 ]; then
            echo "::set-output name=results::true"
          else
            echo "::set-output name=results::false"
            echo "(missing)"
          fi

          echo "Tests coverage:"
          found=0
          for f in temp/test-coverage/test-coverage-*.zip;
          do
            found=1
            echo "unzip $f"
            k=${f##*/} # path/to/test-coverage-ubuntu-latest[-net00].zip -> test-coverage-ubuntu-latest[-net00].zip
            k=${k#test-coverage-} # test-coverage-ubuntu-latest[-net00].zip -> ubuntu-latest[-net00].zip
            k=${k%.*} # ubuntu-latest[-net00].zip -> ubuntu-latest[-net00]
            k=${k//-latest} # ubuntu-latest[-net00] -> ubuntu[-net00]
            os=${k%-*} # ubuntu[-net00] -> ubuntu
            unzip $f -d temp/test-coverage/$os # linux cover-net6.0.json goes into temp/test-coverage/ubuntu/cover-net6.0.json
          done
          if [ $found -eq 1 ]; then
            echo "::set-output name=coverage::true"
          else
            echo "::set-output name=coverage::false"
            echo "(missing)"
          fi

      # report test results (all os/framework)
      - name: Report test results
        if: steps.unzip.outputs.results == 'true'
        uses: dorny/test-reporter@v1
        with:
          name: Test Results
          path: ./temp/test-results/*/results-*.trx
          reporter: dotnet-trx
          list-suites: failed
          list-tests: failed
          fail-on-error: false

      # report test coverage (windows/net6.0)
      - name: Report test coverage
        if: steps.unzip.outputs.coverage == 'true'
        uses: ./.github/actions/dotcover-report
        with:
          name: Test Coverage
          path: ./temp/test-coverage
          sha: ${{ github.event.workflow_run.head_sha }} # required since report runs on 'master'

      # publish to codecov (windows/net6.0)
      # see https://github.com/marketplace/actions/codecov
      - name: Publish to Codecov
        if: steps.unzip.outputs.coverage == 'true'
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./temp/test-coverage/windows/cover-net6.0.xml
          override_commit: ${{ github.event.workflow_run.head_sha }} # required since report runs on 'master'