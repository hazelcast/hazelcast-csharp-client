#
# Workflow: Build Release
#

name: Build Release
on:

  # build release branch on push to release/* branch
  # where * is expected to be a release version eg 2.1.4
  # trigger on push to release/<version> branch or push of v<version> tag on that branch
  # when pushing a tagged commit, only one event triggers, for the tag
  push:
    branches:
      - 'release/*'
    tags:
      - 'v*'

  ## manually build release branch, optionally release when version matches the branch
  #workflow_dispatch:
  #  branches:
  #    - 'release/*'
  #  inputs:
  #    version:
  #      description: Copy version (eg "2.1.4") to trigger release. CAREFUL!
  #      required: false
  #      default: ""

jobs:

  # verify what has been pushed and determine what to do
  analyze:

    name: Analyze
    runs-on: ubuntu-latest

    if: github.repository == 'hazelcast/hazelcast-csharp-client'

    outputs:
      todo: ${{ steps.analyze.outputs.todo}} # 'build' when pushing to release/2.1.4, 'release' when pushing v2.1.4 tag, otherwise 'nothing'
      version: ${{ steps.analyze.outputs.version}} # 2.1.4 or 2.1.4-preview.1 - matches the branch/tag and the code

    steps:

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Analyze
        id: analyze
        shell: bash
        run: |
          set +e # don't die whenever a command returns non-zero $?

          echo "Triggered by ${{ github.ref }} at ${{ github.sha }}"
          HZREF="${{ github.ref }}"
          HZBRANCH=${HZREF#refs/heads/}

          if [ "$HZBRANCH" != "$HZREF" ]; then # it is a branch push
            HZVERSION=${HZBRANCH#release/}
            if [ "$HZVERSION" != "$HZBRANCH" ]; then # it is a release branch push
                echo "Triggered by commit in version $HZVERSION release branch $HZBRANCH"
                git fetch origin refs/tags/v$HZVERSION:refs/tags/v$HZVERSION >/dev/null 2>&1
                if [ $? -ne 0 ]; then
                    echo "Tag v$HZVERSION does not exist, proceed with build"
                    # set step/job output
                    echo "::set-output name=todo::build"
                    echo "::set-output name=version::$HZVERSION"
                else
                    HZTAGSHA=$(git rev-parse v$HZVERSION >/dev/null 2>&1)
                    if [ "$HZTAGSHA" != "${{ github.sha }}" ]; then
                        echo "::error::Tag v$HZVERSION exists, but on another commit ($HZTAGSHA)"
                        exit 1
                    else
                        echo "Tag v$HZVERSION exists on this commit, nothing to do"
                        # set step/job output
                        echo "::set-output name=todo::nothing"
                        echo "::set-output name=version::$HZVERSION"
                    fi
                fi
            else
                echo "::error::Triggered by commit in non-release branch $HZBRANCH"
                exit 1
            fi
            exit 0
          fi

          HZTAG=${HZREF#refs/tags/}
          if [ "$HZTAG" != "$HZREF" ]; then
            HZVERSION=${HZTAG#v}
            if [ "$HZVERSION" != "$HZTAG" ]; then # it is a version tag
                echo "Triggered by version tag $HZTAG"
                git fetch origin refs/heads/release/$HZVERSION:refs/heads/release/$HZVERSION >/dev/null 2>&1
                if [ $? -ne 0 ]; then
                    echo "::error::Branch release/$HZVERSION does not exist"
                    exit 1
                else
                    HZBRANCHSHA=$(git rev-parse release/$HZVERSION 2>&1)
                    HZTAGSHA=${{ github.sha }}
                    if [ "$HZBRANCHSHA" != "$HZTAGSHA" ]; then
                      echo "::error::Tag parent is not HEAD of release/$HZVERSION at $HZBRANCHSHA but $HZTAGSHA"
                      exit 1
                    else
                        echo "Tag parent is HEAD of release/$HZVERSION at $HZBRANCHSHA, proceed with release"
                        # set step/job output
                        echo "::set-output name=todo::release"
                        echo "::set-output name=version::$HZVERSION"
                    fi
                fi
            else
                echo "::error::Triggered by non-version tag $HZTAG"
                exit 1
            fi
            exit 0
          fi

          echo "::error::I am confused"
          exit 1



  # build and test the release
  build-release:

    name: Build Release (${{ matrix.os }})
    runs-on: ${{ matrix.os }}

    needs: analyze
    if: needs.analyze.outputs.todo != 'nothing'

    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest ]

    steps:

      # Install Linux utilities
      - name: Install utilities (Linux only)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          sudo apt-get update
          # ubuntu-latest does not have proper git installed so we have to install it
          sudo apt-get install --yes --no-install-recommends \
            git
          # we need various misc stuff
          sudo apt-get install --yes --no-install-recommends \
            wget \
            curl \
            apt-transport-https \
            software-properties-common
          # we need pwsh
          wget -q https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          rm packages-microsoft-prod.deb
          sudo apt-get update
          sudo add-apt-repository universe
          sudo apt-get install -y powershell

      # Install .NET (complete)
      - name: Install .NET 3.1.x
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.x'
      - name: Install .NET 5.0.x
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.x'

      # Install Java
      - name: Install JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'

      # checkout the hazelcast/hazelcast-csharp-client repository
      # including all submodules, we are going to need them
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          submodules: true

      # configure Git so that we can commit
      - name: Configure repository
        shell: bash
        run: |
          git config user.email "github-actions@hazelcast.com"
          git config user.name "GitHub Actions"
          dotnet --version

      # verify the code version
      - name: Verify the code version
        shell: pwsh
        run: ./hz.ps1 -version ${{ needs.analyze.outputs.version }} -localRestore verify-version

      # obtain the snk file required to sign assemblies
      # the snk is avail as secrets.HZ_SNK as a Base64 string
      - name: Obtain assembly signature key
        id: getsnk
        shell: bash
        run: |
          echo "${{ secrets.HAZELCAST_SNK }}" | base64 -d > ./build/hazelcast.snk
          ls -l ./build/hazelcast.snk

      # build signed and reproducible assemblies + docs (skipped on Linux)
      - name: Build
        id: build
        shell: pwsh
        run: ./hz.ps1 -localRestore -sign -repro build,build-docs

      # clear the snk file
      - name: Clear assembly signature key
        if: (success() || failure()) && steps.getsnk.conclusion == 'success'
        shell: bash
        run: |
          if [ -f ./build/hazelcast.snk ]; then rm ./build/hazelcast.snk; fi

      # test (with coverage)
      - name: Test
        id: test
        env:
          HAZELCAST_ENTERPRISE_KEY: ${{ secrets.HAZELCAST_ENTERPRISE_KEY }}
        shell: pwsh
        run: ./hz.ps1 -noRestore -localRestore -cover -enterprise test,cover-to-docs

      # report tests results
      - name: Report tests results
        uses: dorny/test-reporter@v1
        if: (success() || failure()) && steps.build.conclusion == 'success'
        with:
          name: Test Results (${{ matrix.os }})
          path: temp/tests/results/results-*.trx
          reporter: dotnet-trx
          list-suites: failed
          list-tests: failed
          fail-on-error: false

      # report tests coverage
      # same note as above
      - name: Report tests coverage
        uses: ./.github/actions/dotcover-report
        with:
          name: Test Coverage (${{ matrix.os }})
          path: temp/tests/cover
          version: ${{ needs.analyze.outputs.version }}
          sha: ${{ github.sha }}

      # upload test results artifact
      - name: Upload test results artifact
        if: (success() || failure()) && steps.build.conclusion == 'success'
        uses: actions/upload-artifact@v2
        with:
          name: Test-Results (${{ matrix.os }})
          path: './temp/tests/results/*.trx'

      # upload test coverage artifact
      - name: Upload test coverage artifact
        uses: actions/upload-artifact@v2
        with:
          name: Test-Coverage (${{ matrix.os }})
          path: './temp/tests/cover/' # entire directory

      # create nuget packages
      - name: Pack NuGet packages
        shell: pwsh
        run: ./hz.ps1 -noRestore -localRestore pack-nuget

      # upload nuget packages
      - name: Upload NuGet packages artifact
        uses: actions/upload-artifact@v2
        with:
          name: NuGet-Packages (${{ matrix.os }})
          path: './temp/output/Hazelcast.Net.*pkg'

      # publish examples (inc. soak tests) (windows only so we have framework too)
      - name: Publish examples
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: ./hz.ps1 -noRestore -localRestore publish-examples

      # archive examples (windows only)
      - name: Archive examples artifact
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v2
        with:
          name: Examples
          path: './temp/examples/*.zip'

      # git the docs, create the patch
      - name: Create docs patch
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          ./hz.ps1 -noRestore -localRestore git-docs git-docs.user.email="github-actions@hazelcast.com" git-docs.user.name="GitHub Actions"
          mkdir ./temp/gh-pages-patches >$null 2>&1
          echo "Create git patch"
          git -C ./temp/gh-pages format-patch -1 -o ../gh-pages-patches
          echo "Patch files:"
          ls ./temp/gh-pages-patches/

      # archive docs patch
      - name: Upload docs patch artifact
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v2
        with:
          name: Docs-Patch
          path: './temp/gh-pages-patches/*.patch'



  # publish the work-in-progress release
  publish-wip:

    name: Publish Work-In-Progress
    runs-on: ubuntu-latest

    needs: [ analyze, build-release ]
    if: needs.analyze.outputs.todo == 'build'

    steps:

      - name: Install Utilities (Linux only)
        shell: bash
        run: |
          sudo apt-get update
          # ubuntu-latest does not have proper git installed so we have to install it
          sudo apt-get install --yes --no-install-recommends \
            git
          # we need various misc stuff
          sudo apt-get install --yes --no-install-recommends \
            wget \
            curl \
            apt-transport-https \
            software-properties-common
          # we need pwsh
          wget -q https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          rm packages-microsoft-prod.deb
          sudo apt-get update
          sudo add-apt-repository universe
          sudo apt-get install -y powershell

      # checkout the hazelcast/hazelcast-csharp-client repository
      # including all submodules, we are going to need them
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          submodules: true

      # configure Git so that we can commit
      - name: Configure repository
        shell: bash
        run: |
          git config user.email "github-actions@hazelcast.com"
          git config user.name "GitHub Actions (Build Release)"

      # prepare for artifacts
      - name: Prepare for artifacts
        shell: bash
        run: |
          mkdir ./temp
          mkdir ./temp/gh-pages-patches
          mkdir ./temp/tests
          mkdir ./temp/tests/cover

      # download docs patch artifact
      - name: Download docs patch artifact
        uses: actions/download-artifact@v2
        with:
          name: Docs-Patch
          path: ./temp/gh-pages-patches

      # download test coverage artifact
      - name: Download test coverage artifact
        uses: actions/download-artifact@v2
        with:
          name: Test-Coverage (windows-latest)
          path: ./temp/tests/cover

      # verify downloads
      - name: Verify downloads
        shell: bash
        run: |
          echo "docs patch:"
          ls ./temp/gh-pages-patches
          echo "test coverage:"
          ls ./temp/tests/cover

      # checkout documentation
      - name: Checkout documentation
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: gh-pages
          path: ./temp/gh-pages

      # configure Git so that we can commit
      - name: Configure documentation repository
        shell: bash
        run: |
          git -C ./temp/gh-pages config user.email "github-actions@hazelcast.com"
          git -C ./temp/gh-pages config user.name "GitHub Actions (Build Release)"

      # publish 'dev' documentation
      - name: Publish Documentation
        shell: bash
        run: |
          echo "Apply patch"
          cat temp/gh-pages-patches/*.patch | git -C ./temp/gh-pages am
          echo "Push"
          git -C ./temp/gh-pages push origin gh-pages

      # publish to codecov
      - name: Publish to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./temp/tests/cover/cover-netcoreapp3.1.xml



  # publish the release
  # if the build and tests were successful
  publish-release:

    name: Publish Release
    runs-on: ubuntu-latest

    needs: [ analyze, build-release ]
    if: needs.analyze.outputs.todo == 'release'

    steps:

      - name: Install Utilities (Linux only)
        shell: bash
        run: |
          sudo apt-get update
          # ubuntu-latest does not have proper git installed so we have to install it
          sudo apt-get install --yes --no-install-recommends \
            git
          # we need various misc stuff
          sudo apt-get install --yes --no-install-recommends \
            wget \
            curl \
            apt-transport-https \
            software-properties-common
          # we need pwsh
          wget -q https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          rm packages-microsoft-prod.deb
          sudo apt-get update
          sudo add-apt-repository universe
          sudo apt-get install -y powershell

      # Install .NET (minimal, for pushing to NuGet)
      - name: Install .NET 5.0.x
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.x'

      # checkout the hazelcast/hazelcast-csharp-client repository
      # including all submodules, we are going to need them
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          submodules: true

      # configure Git so that we can commit
      - name: Configure repository
        shell: bash
        run: |
          git config user.email "github-actions@hazelcast.com"
          git config user.name "GitHub Actions (Build Release)"

      # checkout the devops repository for additional hz.ps1 commands (push-nuget...)
      # "${{ github.token }} is scoped to the current repository, so if you want to checkout a different
      # repository that is private you will need to provide your own PAT."
      - name: Checkout devops
        uses: actions/checkout@v2
        with:
          repository: hazelcast/DevOps
          ref: master
          token: ${{ secrets.HAZELCAST_GITHUB_TOKEN_DEVOPS }}
          path: ./build/devops

      # prepare for artifacts
      - name: Prepare for artifacts
        shell: bash
        run: |
          mkdir ./temp
          mkdir ./temp/output
          mkdir ./temp/gh-pages-patches

      # download nuget packages
      - name: Download NuGet packages artifact
        uses: actions/download-artifact@v2
        with:
          name: NuGet-Packages (windows-latest)
          path: ./temp/output

      # download docs patch artifact
      - name: Download docs patch artifact
        uses: actions/download-artifact@v2
        with:
          name: Docs-Patch
          path: ./temp/gh-pages-patches

      # verify downloads
      - name: Verify downloads
        shell: bash
        run: |
          echo "packages:"
          ls ./temp/output
          echo "docs patch:"
          ls ./temp/gh-pages-patches

      # publish nuget package
      - name: Publish NuGet packages
        shell: pwsh
        env:
          NUGET_API_KEY: ${{ secrets.HAZELCAST_NUGET_API_KEY }}
        run: |
          ./hz.ps1 -noRestore -localRestore push-nuget -yolo

      # checkout documentation
      - name: Checkout documentation
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: gh-pages
          path: ./temp/gh-pages

      # configure Git so that we can commit
      - name: Configure documentation repository
        shell: bash
        run: |
          git -C ./temp/gh-pages config user.email "github-actions@hazelcast.com"
          git -C ./temp/gh-pages config user.name "GitHub Actions (Build Release)"

      # publish documentation
      - name: Publish Documentation
        shell: bash
        run: |
          echo "Apply patch"
          cat temp/gh-pages-patches/*.patch | git -C ./temp/gh-pages am
          echo "Push"
          git -C ./temp/gh-pages push origin gh-pages

      # trash the release branch
      - name: Close release branch
        shell: bash
        run: |
          git push origin :release/${{ needs.analyze.outputs.version }}

          
      # publish the release page, close the milestone
      - name: Publish GitHub Release
        uses: actions/github-script@v5
        with:
          script: |
            const scriptf = require('./.github/workflows/release-scripts.js')
            const script = scriptf({github, context, core})
            const version = context.ref.substring(19)
            await script.publishRelease(version)
            await script.closeMilestone(version)