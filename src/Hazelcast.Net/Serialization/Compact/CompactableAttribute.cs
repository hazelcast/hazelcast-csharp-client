// Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#nullable enable

using System;

namespace Hazelcast.Serialization.Compact
{
    /// <summary>
    /// Marks a compact-serializable class.
    /// </summary>
    [AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = false)]
    public sealed class CompactableAttribute : Attribute
    {
        /// <summary>
        /// Marks a compact-serializable class.
        /// </summary>
        /// <param name="serializerType">The type of the compact serializer for the class.</param>
        /// <exception cref="ArgumentNullException">The <paramref name="serializerType"/> is <c>null</c>.</exception>
        public CompactableAttribute(Type serializerType)
        {
            SerializerType = serializerType ?? throw new ArgumentNullException(nameof(serializerType));
        }

        /// <summary>
        /// Gets the serializer type.
        /// </summary>
        public Type SerializerType { get; }

        /// <summary>
        /// Gets the type name.
        /// </summary>
        /// <remarks>
        /// <para>If left to its default <c>null</c> value, the type name derives from the compactable class name.</para>
        /// </remarks>
        public string? TypeName { get; set; }

        /// <summary>
        /// Whether the schema is published.
        /// </summary>
        /// <remarks>
        /// <para>By default, all schemas generated by the client are considered non-published, and will be published
        /// to the cluster before any data relying on those schemas is sent to the cluster. Set this property to
        /// <c>true</c> when you know that the schema, although generated by the client, will be known by the cluster
        /// already.</para>
        /// </remarks>
        public bool PublishedSchema { get; set; }
    }
}
