// Copyright (c) 2008-2025, Hazelcast, Inc. All Rights Reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// <auto-generated>
//   This code was generated by a tool.
//   Hazelcast Client Protocol Code Generator @c89bc95
//   https://github.com/hazelcast/hazelcast-client-protocol
//   Change to this file will be lost if the code is regenerated.
// </auto-generated>

#pragma warning disable IDE0051 // Remove unused private members
// ReSharper disable UnusedMember.Local
// ReSharper disable RedundantUsingDirective
// ReSharper disable CheckNamespace

using System;
using System.Threading;
using System.Threading.Tasks;
using System.Collections.Generic;
using Hazelcast.Protocol.BuiltInCodecs;
using Hazelcast.Protocol.CustomCodecs;
using Hazelcast.Core;
using Hazelcast.Messaging;
using Hazelcast.Clustering;
using Hazelcast.Serialization;
using Microsoft.Extensions.Logging;

namespace Hazelcast.Protocol.Codecs
{
    /// <summary>
    /// Adds a new flake ID generator configuration to a running cluster.
    /// If a flake ID generator configuration for the same name already exists, then
    /// the new configuration is ignored and the existing one is preserved.
    ///</summary>
#if SERVER_CODEC
    internal static class DynamicConfigAddFlakeIdGeneratorConfigServerCodec
#else
    internal static class DynamicConfigAddFlakeIdGeneratorConfigCodec
#endif
    {
        public const int RequestMessageType = 1773312; // 0x1B0F00
        public const int ResponseMessageType = 1773313; // 0x1B0F01
        private const int RequestPrefetchCountFieldOffset = Messaging.FrameFields.Offset.PartitionId + BytesExtensions.SizeOfInt;
        private const int RequestPrefetchValidityFieldOffset = RequestPrefetchCountFieldOffset + BytesExtensions.SizeOfInt;
        private const int RequestStatisticsEnabledFieldOffset = RequestPrefetchValidityFieldOffset + BytesExtensions.SizeOfLong;
        private const int RequestNodeIdOffsetFieldOffset = RequestStatisticsEnabledFieldOffset + BytesExtensions.SizeOfBool;
        private const int RequestEpochStartFieldOffset = RequestNodeIdOffsetFieldOffset + BytesExtensions.SizeOfLong;
        private const int RequestBitsSequenceFieldOffset = RequestEpochStartFieldOffset + BytesExtensions.SizeOfLong;
        private const int RequestBitsNodeIdFieldOffset = RequestBitsSequenceFieldOffset + BytesExtensions.SizeOfInt;
        private const int RequestAllowedFutureMillisFieldOffset = RequestBitsNodeIdFieldOffset + BytesExtensions.SizeOfInt;
        private const int RequestInitialFrameSize = RequestAllowedFutureMillisFieldOffset + BytesExtensions.SizeOfLong;
        private const int ResponseInitialFrameSize = Messaging.FrameFields.Offset.ResponseBackupAcks + BytesExtensions.SizeOfByte;

#if SERVER_CODEC
        public sealed class RequestParameters
        {

            /// <summary>
            /// name of {@code FlakeIdGenerator}
            ///</summary>
            public string Name { get; set; }

            /// <summary>
            /// how many IDs are pre-fetched on the background when one call to {@code newId()} is made
            ///</summary>
            public int PrefetchCount { get; set; }

            /// <summary>
            /// for how long the pre-fetched IDs can be used
            ///</summary>
            public long PrefetchValidity { get; set; }

            /// <summary>
            /// {@code true} to enable gathering of statistics, otherwise {@code false}
            ///</summary>
            public bool StatisticsEnabled { get; set; }

            /// <summary>
            /// Offset that will be added to the node id assigned to the cluster members for this generator.
            ///</summary>
            public long NodeIdOffset { get; set; }

            /// <summary>
            /// offset of timestamp component in milliseconds
            ///</summary>
            public long EpochStart { get; set; }

            /// <summary>
            /// bit length of sequence component
            ///</summary>
            public int BitsSequence { get; set; }

            /// <summary>
            /// bit length of node id component
            ///</summary>
            public int BitsNodeId { get; set; }

            /// <summary>
            /// how far to the future is it allowed to go to generate IDs
            ///</summary>
            public long AllowedFutureMillis { get; set; }
        }
#endif

        public static ClientMessage EncodeRequest(string name, int prefetchCount, long prefetchValidity, bool statisticsEnabled, long nodeIdOffset, long epochStart, int bitsSequence, int bitsNodeId, long allowedFutureMillis)
        {
            var clientMessage = new ClientMessage
            {
                IsRetryable = false,
                OperationName = "DynamicConfig.AddFlakeIdGeneratorConfig"
            };
            var initialFrame = new Frame(new byte[RequestInitialFrameSize], (FrameFlags) ClientMessageFlags.Unfragmented);
            initialFrame.Bytes.WriteIntL(Messaging.FrameFields.Offset.MessageType, RequestMessageType);
            initialFrame.Bytes.WriteIntL(Messaging.FrameFields.Offset.PartitionId, -1);
            initialFrame.Bytes.WriteIntL(RequestPrefetchCountFieldOffset, prefetchCount);
            initialFrame.Bytes.WriteLongL(RequestPrefetchValidityFieldOffset, prefetchValidity);
            initialFrame.Bytes.WriteBoolL(RequestStatisticsEnabledFieldOffset, statisticsEnabled);
            initialFrame.Bytes.WriteLongL(RequestNodeIdOffsetFieldOffset, nodeIdOffset);
            initialFrame.Bytes.WriteLongL(RequestEpochStartFieldOffset, epochStart);
            initialFrame.Bytes.WriteIntL(RequestBitsSequenceFieldOffset, bitsSequence);
            initialFrame.Bytes.WriteIntL(RequestBitsNodeIdFieldOffset, bitsNodeId);
            initialFrame.Bytes.WriteLongL(RequestAllowedFutureMillisFieldOffset, allowedFutureMillis);
            clientMessage.Append(initialFrame);
            StringCodec.Encode(clientMessage, name);
            return clientMessage;
        }

#if SERVER_CODEC
        public static RequestParameters DecodeRequest(ClientMessage clientMessage)
        {
            using var iterator = clientMessage.GetEnumerator();
            var request = new RequestParameters();
            var initialFrame = iterator.Take();
            request.PrefetchCount = initialFrame.Bytes.ReadIntL(RequestPrefetchCountFieldOffset);
            request.PrefetchValidity = initialFrame.Bytes.ReadLongL(RequestPrefetchValidityFieldOffset);
            request.StatisticsEnabled = initialFrame.Bytes.ReadBoolL(RequestStatisticsEnabledFieldOffset);
            request.NodeIdOffset = initialFrame.Bytes.ReadLongL(RequestNodeIdOffsetFieldOffset);
            request.EpochStart = initialFrame.Bytes.ReadLongL(RequestEpochStartFieldOffset);
            request.BitsSequence = initialFrame.Bytes.ReadIntL(RequestBitsSequenceFieldOffset);
            request.BitsNodeId = initialFrame.Bytes.ReadIntL(RequestBitsNodeIdFieldOffset);
            request.AllowedFutureMillis = initialFrame.Bytes.ReadLongL(RequestAllowedFutureMillisFieldOffset);
            request.Name = StringCodec.Decode(iterator);
            return request;
        }
#endif

        public sealed class ResponseParameters
        {
        }

#if SERVER_CODEC
        public static ClientMessage EncodeResponse()
        {
            var clientMessage = new ClientMessage();
            var initialFrame = new Frame(new byte[ResponseInitialFrameSize], (FrameFlags) ClientMessageFlags.Unfragmented);
            initialFrame.Bytes.WriteIntL(Messaging.FrameFields.Offset.MessageType, ResponseMessageType);
            clientMessage.Append(initialFrame);
            return clientMessage;
        }
#endif

        public static ResponseParameters DecodeResponse(ClientMessage clientMessage)
        {
            using var iterator = clientMessage.GetEnumerator();
            var response = new ResponseParameters();
            iterator.Take(); // empty initial frame
            return response;
        }

    }
}
