//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Hazelcast.Tests {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Hazelcast.Tests.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] Cert_Client1 {
            get {
                object obj = ResourceManager.GetObject("Cert_Client1", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] Cert_Client2 {
            get {
                object obj = ResourceManager.GetObject("Cert_Client2", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
        ///&lt;hazelcast xmlns=&quot;http://www.hazelcast.com/schema/config&quot;
        ///           xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
        ///           xsi:schemaLocation=&quot;http://www.hazelcast.com/schema/config
        ///           http://www.hazelcast.com/schema/config/hazelcast-config-4.0.xsd&quot;&gt;
        ///
        ///  &lt;properties&gt;
        ///    &lt;property name=&quot;hazelcast.map.invalidation.batch.enabled&quot;&gt;false&lt;/property&gt;
        ///    &lt;property name=&quot;hazelcast.cache.invalidation.batch.size&quot;&gt;10&lt;/property&gt;
        ///    &lt;property name=&quot;haze [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Cluster_Default {
            get {
                return ResourceManager.GetString("Cluster_Default", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
        ///&lt;hazelcast xmlns=&quot;http://www.hazelcast.com/schema/config&quot;
        ///           xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
        ///           xsi:schemaLocation=&quot;http://www.hazelcast.com/schema/config
        ///           http://www.hazelcast.com/schema/config/hazelcast-config-4.0.xsd&quot;&gt;
        ///
        ///  &lt;properties&gt;
        ///    &lt;property name=&quot;hazelcast.map.invalidation.batch.enabled&quot;&gt;false&lt;/property&gt;
        ///    &lt;property name=&quot;hazelcast.cache.invalidation.batch.size&quot;&gt;10&lt;/property&gt;
        ///    &lt;property name=&quot;haze [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Cluster_Kerberos {
            get {
                return ResourceManager.GetString("Cluster_Kerberos", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
        ///&lt;hazelcast xmlns=&quot;http://www.hazelcast.com/schema/config&quot;
        ///           xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
        ///           xsi:schemaLocation=&quot;http://www.hazelcast.com/schema/config
        ///           http://www.hazelcast.com/schema/config/hazelcast-config-4.0.xsd&quot;&gt;
        ///
        ///    &lt;network&gt;
        ///        &lt;port auto-increment=&quot;true&quot; port-count=&quot;100&quot;&gt;5701&lt;/port&gt;
        ///        &lt;outbound-ports&gt;
        ///            &lt;!--
        ///            Allowed port range when connecting to other nodes.
        ///        [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Cluster_MA_Optional {
            get {
                return ResourceManager.GetString("Cluster_MA_Optional", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
        ///&lt;hazelcast xmlns=&quot;http://www.hazelcast.com/schema/config&quot;
        ///           xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
        ///           xsi:schemaLocation=&quot;http://www.hazelcast.com/schema/config
        ///           http://www.hazelcast.com/schema/config/hazelcast-config-4.0.xsd&quot;&gt;
        ///
        ///    &lt;network&gt;
        ///        &lt;port auto-increment=&quot;true&quot; port-count=&quot;100&quot;&gt;5701&lt;/port&gt;
        ///        &lt;outbound-ports&gt;
        ///            &lt;!--
        ///            Allowed port range when connecting to other nodes.
        ///        [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Cluster_MA_Required {
            get {
                return ResourceManager.GetString("Cluster_MA_Required", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
        ///&lt;hazelcast xmlns=&quot;http://www.hazelcast.com/schema/config&quot;
        ///           xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
        ///           xsi:schemaLocation=&quot;http://www.hazelcast.com/schema/config
        ///           http://www.hazelcast.com/schema/config/hazelcast-config-4.0.xsd&quot;&gt;
        ///
        ///  &lt;properties&gt;
        ///    &lt;property name=&quot;hazelcast.map.invalidation.batch.enabled&quot;&gt;true&lt;/property&gt;
        ///    &lt;property name=&quot;hazelcast.cache.invalidation.batch.size&quot;&gt;10&lt;/property&gt;
        ///    &lt;property name=&quot;hazel [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Cluster_NearCache {
            get {
                return ResourceManager.GetString("Cluster_NearCache", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;hazelcast xmlns=&quot;http://www.hazelcast.com/schema/config&quot;
        ///           xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
        ///           xsi:schemaLocation=&quot;http://www.hazelcast.com/schema/config
        ///           http://www.hazelcast.com/schema/config/hazelcast-config-4.0.xsd&quot;&gt;
        ///
        ///  &lt;network&gt;
        ///    &lt;port auto-increment=&quot;true&quot; port-count=&quot;100&quot;&gt;5701&lt;/port&gt;
        ///    &lt;outbound-ports&gt;
        ///      &lt;!--
        ///            Allowed port range when connecting to other nodes.
        ///            0 or * means use system provided port.
        ///            [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Cluster_Ssl {
            get {
                return ResourceManager.GetString("Cluster_Ssl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
        ///&lt;hazelcast xmlns=&quot;http://www.hazelcast.com/schema/config&quot;
        ///           xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
        ///           xsi:schemaLocation=&quot;http://www.hazelcast.com/schema/config
        ///           http://www.hazelcast.com/schema/config/hazelcast-config-4.0.xsd&quot;&gt;
        ///  
        ///  &lt;network&gt;
        ///    &lt;port auto-increment=&quot;true&quot; port-count=&quot;100&quot;&gt;5701&lt;/port&gt;
        ///    &lt;outbound-ports&gt;
        ///      &lt;!--
        ///            Allowed port range when connecting to other nodes.
        ///            0 or * me [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Cluster_Ssl_Signed {
            get {
                return ResourceManager.GetString("Cluster_Ssl_Signed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///  &quot;hazelcast&quot;: {
        ///
        ///  }
        ///}.
        /// </summary>
        internal static string Empty {
            get {
                return ResourceManager.GetString("Empty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///  &quot;hazelcast&quot;: {
        ///    // accepting comments?
        ///  }
        ///}.
        /// </summary>
        internal static string EmptyWithComments {
            get {
                return ResourceManager.GetString("EmptyWithComments", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///  &quot;hazelcast&quot;: {
        ///
        ///    // name of the client
        ///    &quot;clientName&quot;: &quot;client&quot;,
        ///
        ///    // name of the cluster
        ///    &quot;clusterName&quot;: &quot;cluster&quot;,
        ///
        ///    // client labels
        ///    &quot;labels&quot;: [
        ///      &quot;label_1&quot;,
        ///      &quot;label_2&quot;
        ///    ],
        ///
        ///    // client events subscribers
        ///    &quot;subscribers&quot;: [
        ///
        ///      // a subscriber
        ///      {
        ///        // name of the type of the subscriber
        ///        &quot;typeName&quot;: &quot;Hazelcast.Tests.Configuration.HazelcastOptionsTests+TestSubscriber, Hazelcast.Net.Tests&quot;
        ///      }
        ///    ],
        ///
        ///    // logging opti [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string HazelcastOptions {
            get {
                return ResourceManager.GetString("HazelcastOptions", resourceCulture);
            }
        }
    }
}
