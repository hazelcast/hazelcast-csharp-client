// Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#if !NETSTANDARD
#pragma warning disable

//Autogenerated by Thrift Compiler (0.13.0)

using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using Thrift;
using Thrift.Protocol;
using Thrift.Transport;

namespace Hazelcast.Testing.Remote
{
  public partial class RemoteController {
    public interface ISync {
      bool ping();
      bool clean();
      bool exit();
      Cluster createCluster(string hzVersion, string xmlconfig);
      Member startMember(string clusterId);
      bool shutdownMember(string clusterId, string memberId);
      bool terminateMember(string clusterId, string memberId);
      bool suspendMember(string clusterId, string memberId);
      bool resumeMember(string clusterId, string memberId);
      bool shutdownCluster(string clusterId);
      bool terminateCluster(string clusterId);
      Cluster splitMemberFromCluster(string memberId);
      Cluster mergeMemberToCluster(string clusterId, string memberId);
      Response executeOnController(string clusterId, string script, Lang lang);
    }

    public interface Iface : ISync {
#if SILVERLIGHT
      IAsyncResult Begin_ping(AsyncCallback callback, object state);
      bool End_ping(IAsyncResult asyncResult);
#endif
#if SILVERLIGHT
      IAsyncResult Begin_clean(AsyncCallback callback, object state);
      bool End_clean(IAsyncResult asyncResult);
#endif
#if SILVERLIGHT
      IAsyncResult Begin_exit(AsyncCallback callback, object state);
      bool End_exit(IAsyncResult asyncResult);
#endif
#if SILVERLIGHT
      IAsyncResult Begin_createCluster(AsyncCallback callback, object state, string hzVersion, string xmlconfig);
      Cluster End_createCluster(IAsyncResult asyncResult);
#endif
#if SILVERLIGHT
      IAsyncResult Begin_startMember(AsyncCallback callback, object state, string clusterId);
      Member End_startMember(IAsyncResult asyncResult);
#endif
#if SILVERLIGHT
      IAsyncResult Begin_shutdownMember(AsyncCallback callback, object state, string clusterId, string memberId);
      bool End_shutdownMember(IAsyncResult asyncResult);
#endif
#if SILVERLIGHT
      IAsyncResult Begin_terminateMember(AsyncCallback callback, object state, string clusterId, string memberId);
      bool End_terminateMember(IAsyncResult asyncResult);
#endif
#if SILVERLIGHT
      IAsyncResult Begin_suspendMember(AsyncCallback callback, object state, string clusterId, string memberId);
      bool End_suspendMember(IAsyncResult asyncResult);
#endif
#if SILVERLIGHT
      IAsyncResult Begin_resumeMember(AsyncCallback callback, object state, string clusterId, string memberId);
      bool End_resumeMember(IAsyncResult asyncResult);
#endif
#if SILVERLIGHT
      IAsyncResult Begin_shutdownCluster(AsyncCallback callback, object state, string clusterId);
      bool End_shutdownCluster(IAsyncResult asyncResult);
#endif
#if SILVERLIGHT
      IAsyncResult Begin_terminateCluster(AsyncCallback callback, object state, string clusterId);
      bool End_terminateCluster(IAsyncResult asyncResult);
#endif
#if SILVERLIGHT
      IAsyncResult Begin_splitMemberFromCluster(AsyncCallback callback, object state, string memberId);
      Cluster End_splitMemberFromCluster(IAsyncResult asyncResult);
#endif
#if SILVERLIGHT
      IAsyncResult Begin_mergeMemberToCluster(AsyncCallback callback, object state, string clusterId, string memberId);
      Cluster End_mergeMemberToCluster(IAsyncResult asyncResult);
#endif
#if SILVERLIGHT
      IAsyncResult Begin_executeOnController(AsyncCallback callback, object state, string clusterId, string script, Lang lang);
      Response End_executeOnController(IAsyncResult asyncResult);
#endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


#region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }


      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
#endregion



#if SILVERLIGHT

      public IAsyncResult Begin_ping(AsyncCallback callback, object state)
      {
        return send_ping(callback, state);
      }

      public bool End_ping(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_ping();
      }

#endif

      public bool ping()
      {
#if SILVERLIGHT
        var asyncResult = Begin_ping(null, null);
        return End_ping(asyncResult);

#else
        send_ping();
        return recv_ping();

#endif
      }
#if SILVERLIGHT
      public IAsyncResult send_ping(AsyncCallback callback, object state)
      {
        oprot_.WriteMessageBegin(new TMessage("ping", TMessageType.Call, seqid_));
        ping_args args = new ping_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

#else

      public void send_ping()
      {
        oprot_.WriteMessageBegin(new TMessage("ping", TMessageType.Call, seqid_));
        ping_args args = new ping_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
#endif

      public bool recv_ping()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ping_result result = new ping_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ping failed: unknown result");
      }


#if SILVERLIGHT

      public IAsyncResult Begin_clean(AsyncCallback callback, object state)
      {
        return send_clean(callback, state);
      }

      public bool End_clean(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_clean();
      }

#endif

      public bool clean()
      {
#if SILVERLIGHT
        var asyncResult = Begin_clean(null, null);
        return End_clean(asyncResult);

#else
        send_clean();
        return recv_clean();

#endif
      }
#if SILVERLIGHT
      public IAsyncResult send_clean(AsyncCallback callback, object state)
      {
        oprot_.WriteMessageBegin(new TMessage("clean", TMessageType.Call, seqid_));
        clean_args args = new clean_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

#else

      public void send_clean()
      {
        oprot_.WriteMessageBegin(new TMessage("clean", TMessageType.Call, seqid_));
        clean_args args = new clean_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
#endif

      public bool recv_clean()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        clean_result result = new clean_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "clean failed: unknown result");
      }


#if SILVERLIGHT

      public IAsyncResult Begin_exit(AsyncCallback callback, object state)
      {
        return send_exit(callback, state);
      }

      public bool End_exit(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_exit();
      }

#endif

      public bool exit()
      {
#if SILVERLIGHT
        var asyncResult = Begin_exit(null, null);
        return End_exit(asyncResult);

#else
        send_exit();
        return recv_exit();

#endif
      }
#if SILVERLIGHT
      public IAsyncResult send_exit(AsyncCallback callback, object state)
      {
        oprot_.WriteMessageBegin(new TMessage("exit", TMessageType.Call, seqid_));
        exit_args args = new exit_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

#else

      public void send_exit()
      {
        oprot_.WriteMessageBegin(new TMessage("exit", TMessageType.Call, seqid_));
        exit_args args = new exit_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
#endif

      public bool recv_exit()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        exit_result result = new exit_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "exit failed: unknown result");
      }


#if SILVERLIGHT

      public IAsyncResult Begin_createCluster(AsyncCallback callback, object state, string hzVersion, string xmlconfig)
      {
        return send_createCluster(callback, state, hzVersion, xmlconfig);
      }

      public Cluster End_createCluster(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_createCluster();
      }

#endif

      public Cluster createCluster(string hzVersion, string xmlconfig)
      {
#if SILVERLIGHT
        var asyncResult = Begin_createCluster(null, null, hzVersion, xmlconfig);
        return End_createCluster(asyncResult);

#else
        send_createCluster(hzVersion, xmlconfig);
        return recv_createCluster();

#endif
      }
#if SILVERLIGHT
      public IAsyncResult send_createCluster(AsyncCallback callback, object state, string hzVersion, string xmlconfig)
      {
        oprot_.WriteMessageBegin(new TMessage("createCluster", TMessageType.Call, seqid_));
        createCluster_args args = new createCluster_args();
        args.HzVersion = hzVersion;
        args.Xmlconfig = xmlconfig;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

#else

      public void send_createCluster(string hzVersion, string xmlconfig)
      {
        oprot_.WriteMessageBegin(new TMessage("createCluster", TMessageType.Call, seqid_));
        createCluster_args args = new createCluster_args();
        args.HzVersion = hzVersion;
        args.Xmlconfig = xmlconfig;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
#endif

      public Cluster recv_createCluster()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        createCluster_result result = new createCluster_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.serverException) {
          throw result.ServerException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createCluster failed: unknown result");
      }


#if SILVERLIGHT

      public IAsyncResult Begin_startMember(AsyncCallback callback, object state, string clusterId)
      {
        return send_startMember(callback, state, clusterId);
      }

      public Member End_startMember(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_startMember();
      }

#endif

      public Member startMember(string clusterId)
      {
#if SILVERLIGHT
        var asyncResult = Begin_startMember(null, null, clusterId);
        return End_startMember(asyncResult);

#else
        send_startMember(clusterId);
        return recv_startMember();

#endif
      }
#if SILVERLIGHT
      public IAsyncResult send_startMember(AsyncCallback callback, object state, string clusterId)
      {
        oprot_.WriteMessageBegin(new TMessage("startMember", TMessageType.Call, seqid_));
        startMember_args args = new startMember_args();
        args.ClusterId = clusterId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

#else

      public void send_startMember(string clusterId)
      {
        oprot_.WriteMessageBegin(new TMessage("startMember", TMessageType.Call, seqid_));
        startMember_args args = new startMember_args();
        args.ClusterId = clusterId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
#endif

      public Member recv_startMember()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        startMember_result result = new startMember_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.serverException) {
          throw result.ServerException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "startMember failed: unknown result");
      }


#if SILVERLIGHT

      public IAsyncResult Begin_shutdownMember(AsyncCallback callback, object state, string clusterId, string memberId)
      {
        return send_shutdownMember(callback, state, clusterId, memberId);
      }

      public bool End_shutdownMember(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_shutdownMember();
      }

#endif

      public bool shutdownMember(string clusterId, string memberId)
      {
#if SILVERLIGHT
        var asyncResult = Begin_shutdownMember(null, null, clusterId, memberId);
        return End_shutdownMember(asyncResult);

#else
        send_shutdownMember(clusterId, memberId);
        return recv_shutdownMember();

#endif
      }
#if SILVERLIGHT
      public IAsyncResult send_shutdownMember(AsyncCallback callback, object state, string clusterId, string memberId)
      {
        oprot_.WriteMessageBegin(new TMessage("shutdownMember", TMessageType.Call, seqid_));
        shutdownMember_args args = new shutdownMember_args();
        args.ClusterId = clusterId;
        args.MemberId = memberId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

#else

      public void send_shutdownMember(string clusterId, string memberId)
      {
        oprot_.WriteMessageBegin(new TMessage("shutdownMember", TMessageType.Call, seqid_));
        shutdownMember_args args = new shutdownMember_args();
        args.ClusterId = clusterId;
        args.MemberId = memberId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
#endif

      public bool recv_shutdownMember()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        shutdownMember_result result = new shutdownMember_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "shutdownMember failed: unknown result");
      }


#if SILVERLIGHT

      public IAsyncResult Begin_terminateMember(AsyncCallback callback, object state, string clusterId, string memberId)
      {
        return send_terminateMember(callback, state, clusterId, memberId);
      }

      public bool End_terminateMember(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_terminateMember();
      }

#endif

      public bool terminateMember(string clusterId, string memberId)
      {
#if SILVERLIGHT
        var asyncResult = Begin_terminateMember(null, null, clusterId, memberId);
        return End_terminateMember(asyncResult);

#else
        send_terminateMember(clusterId, memberId);
        return recv_terminateMember();

#endif
      }
#if SILVERLIGHT
      public IAsyncResult send_terminateMember(AsyncCallback callback, object state, string clusterId, string memberId)
      {
        oprot_.WriteMessageBegin(new TMessage("terminateMember", TMessageType.Call, seqid_));
        terminateMember_args args = new terminateMember_args();
        args.ClusterId = clusterId;
        args.MemberId = memberId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

#else

      public void send_terminateMember(string clusterId, string memberId)
      {
        oprot_.WriteMessageBegin(new TMessage("terminateMember", TMessageType.Call, seqid_));
        terminateMember_args args = new terminateMember_args();
        args.ClusterId = clusterId;
        args.MemberId = memberId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
#endif

      public bool recv_terminateMember()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        terminateMember_result result = new terminateMember_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "terminateMember failed: unknown result");
      }


#if SILVERLIGHT

      public IAsyncResult Begin_suspendMember(AsyncCallback callback, object state, string clusterId, string memberId)
      {
        return send_suspendMember(callback, state, clusterId, memberId);
      }

      public bool End_suspendMember(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_suspendMember();
      }

#endif

      public bool suspendMember(string clusterId, string memberId)
      {
#if SILVERLIGHT
        var asyncResult = Begin_suspendMember(null, null, clusterId, memberId);
        return End_suspendMember(asyncResult);

#else
        send_suspendMember(clusterId, memberId);
        return recv_suspendMember();

#endif
      }
#if SILVERLIGHT
      public IAsyncResult send_suspendMember(AsyncCallback callback, object state, string clusterId, string memberId)
      {
        oprot_.WriteMessageBegin(new TMessage("suspendMember", TMessageType.Call, seqid_));
        suspendMember_args args = new suspendMember_args();
        args.ClusterId = clusterId;
        args.MemberId = memberId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

#else

      public void send_suspendMember(string clusterId, string memberId)
      {
        oprot_.WriteMessageBegin(new TMessage("suspendMember", TMessageType.Call, seqid_));
        suspendMember_args args = new suspendMember_args();
        args.ClusterId = clusterId;
        args.MemberId = memberId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
#endif

      public bool recv_suspendMember()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        suspendMember_result result = new suspendMember_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "suspendMember failed: unknown result");
      }


#if SILVERLIGHT

      public IAsyncResult Begin_resumeMember(AsyncCallback callback, object state, string clusterId, string memberId)
      {
        return send_resumeMember(callback, state, clusterId, memberId);
      }

      public bool End_resumeMember(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_resumeMember();
      }

#endif

      public bool resumeMember(string clusterId, string memberId)
      {
#if SILVERLIGHT
        var asyncResult = Begin_resumeMember(null, null, clusterId, memberId);
        return End_resumeMember(asyncResult);

#else
        send_resumeMember(clusterId, memberId);
        return recv_resumeMember();

#endif
      }
#if SILVERLIGHT
      public IAsyncResult send_resumeMember(AsyncCallback callback, object state, string clusterId, string memberId)
      {
        oprot_.WriteMessageBegin(new TMessage("resumeMember", TMessageType.Call, seqid_));
        resumeMember_args args = new resumeMember_args();
        args.ClusterId = clusterId;
        args.MemberId = memberId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

#else

      public void send_resumeMember(string clusterId, string memberId)
      {
        oprot_.WriteMessageBegin(new TMessage("resumeMember", TMessageType.Call, seqid_));
        resumeMember_args args = new resumeMember_args();
        args.ClusterId = clusterId;
        args.MemberId = memberId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
#endif

      public bool recv_resumeMember()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        resumeMember_result result = new resumeMember_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "resumeMember failed: unknown result");
      }


#if SILVERLIGHT

      public IAsyncResult Begin_shutdownCluster(AsyncCallback callback, object state, string clusterId)
      {
        return send_shutdownCluster(callback, state, clusterId);
      }

      public bool End_shutdownCluster(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_shutdownCluster();
      }

#endif

      public bool shutdownCluster(string clusterId)
      {
#if SILVERLIGHT
        var asyncResult = Begin_shutdownCluster(null, null, clusterId);
        return End_shutdownCluster(asyncResult);

#else
        send_shutdownCluster(clusterId);
        return recv_shutdownCluster();

#endif
      }
#if SILVERLIGHT
      public IAsyncResult send_shutdownCluster(AsyncCallback callback, object state, string clusterId)
      {
        oprot_.WriteMessageBegin(new TMessage("shutdownCluster", TMessageType.Call, seqid_));
        shutdownCluster_args args = new shutdownCluster_args();
        args.ClusterId = clusterId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

#else

      public void send_shutdownCluster(string clusterId)
      {
        oprot_.WriteMessageBegin(new TMessage("shutdownCluster", TMessageType.Call, seqid_));
        shutdownCluster_args args = new shutdownCluster_args();
        args.ClusterId = clusterId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
#endif

      public bool recv_shutdownCluster()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        shutdownCluster_result result = new shutdownCluster_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "shutdownCluster failed: unknown result");
      }


#if SILVERLIGHT

      public IAsyncResult Begin_terminateCluster(AsyncCallback callback, object state, string clusterId)
      {
        return send_terminateCluster(callback, state, clusterId);
      }

      public bool End_terminateCluster(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_terminateCluster();
      }

#endif

      public bool terminateCluster(string clusterId)
      {
#if SILVERLIGHT
        var asyncResult = Begin_terminateCluster(null, null, clusterId);
        return End_terminateCluster(asyncResult);

#else
        send_terminateCluster(clusterId);
        return recv_terminateCluster();

#endif
      }
#if SILVERLIGHT
      public IAsyncResult send_terminateCluster(AsyncCallback callback, object state, string clusterId)
      {
        oprot_.WriteMessageBegin(new TMessage("terminateCluster", TMessageType.Call, seqid_));
        terminateCluster_args args = new terminateCluster_args();
        args.ClusterId = clusterId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

#else

      public void send_terminateCluster(string clusterId)
      {
        oprot_.WriteMessageBegin(new TMessage("terminateCluster", TMessageType.Call, seqid_));
        terminateCluster_args args = new terminateCluster_args();
        args.ClusterId = clusterId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
#endif

      public bool recv_terminateCluster()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        terminateCluster_result result = new terminateCluster_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "terminateCluster failed: unknown result");
      }


#if SILVERLIGHT

      public IAsyncResult Begin_splitMemberFromCluster(AsyncCallback callback, object state, string memberId)
      {
        return send_splitMemberFromCluster(callback, state, memberId);
      }

      public Cluster End_splitMemberFromCluster(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_splitMemberFromCluster();
      }

#endif

      public Cluster splitMemberFromCluster(string memberId)
      {
#if SILVERLIGHT
        var asyncResult = Begin_splitMemberFromCluster(null, null, memberId);
        return End_splitMemberFromCluster(asyncResult);

#else
        send_splitMemberFromCluster(memberId);
        return recv_splitMemberFromCluster();

#endif
      }
#if SILVERLIGHT
      public IAsyncResult send_splitMemberFromCluster(AsyncCallback callback, object state, string memberId)
      {
        oprot_.WriteMessageBegin(new TMessage("splitMemberFromCluster", TMessageType.Call, seqid_));
        splitMemberFromCluster_args args = new splitMemberFromCluster_args();
        args.MemberId = memberId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

#else

      public void send_splitMemberFromCluster(string memberId)
      {
        oprot_.WriteMessageBegin(new TMessage("splitMemberFromCluster", TMessageType.Call, seqid_));
        splitMemberFromCluster_args args = new splitMemberFromCluster_args();
        args.MemberId = memberId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
#endif

      public Cluster recv_splitMemberFromCluster()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        splitMemberFromCluster_result result = new splitMemberFromCluster_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "splitMemberFromCluster failed: unknown result");
      }


#if SILVERLIGHT

      public IAsyncResult Begin_mergeMemberToCluster(AsyncCallback callback, object state, string clusterId, string memberId)
      {
        return send_mergeMemberToCluster(callback, state, clusterId, memberId);
      }

      public Cluster End_mergeMemberToCluster(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_mergeMemberToCluster();
      }

#endif

      public Cluster mergeMemberToCluster(string clusterId, string memberId)
      {
#if SILVERLIGHT
        var asyncResult = Begin_mergeMemberToCluster(null, null, clusterId, memberId);
        return End_mergeMemberToCluster(asyncResult);

#else
        send_mergeMemberToCluster(clusterId, memberId);
        return recv_mergeMemberToCluster();

#endif
      }
#if SILVERLIGHT
      public IAsyncResult send_mergeMemberToCluster(AsyncCallback callback, object state, string clusterId, string memberId)
      {
        oprot_.WriteMessageBegin(new TMessage("mergeMemberToCluster", TMessageType.Call, seqid_));
        mergeMemberToCluster_args args = new mergeMemberToCluster_args();
        args.ClusterId = clusterId;
        args.MemberId = memberId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

#else

      public void send_mergeMemberToCluster(string clusterId, string memberId)
      {
        oprot_.WriteMessageBegin(new TMessage("mergeMemberToCluster", TMessageType.Call, seqid_));
        mergeMemberToCluster_args args = new mergeMemberToCluster_args();
        args.ClusterId = clusterId;
        args.MemberId = memberId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
#endif

      public Cluster recv_mergeMemberToCluster()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        mergeMemberToCluster_result result = new mergeMemberToCluster_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "mergeMemberToCluster failed: unknown result");
      }


#if SILVERLIGHT

      public IAsyncResult Begin_executeOnController(AsyncCallback callback, object state, string clusterId, string script, Lang lang)
      {
        return send_executeOnController(callback, state, clusterId, script, lang);
      }

      public Response End_executeOnController(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_executeOnController();
      }

#endif

      public Response executeOnController(string clusterId, string script, Lang lang)
      {
#if SILVERLIGHT
        var asyncResult = Begin_executeOnController(null, null, clusterId, script, lang);
        return End_executeOnController(asyncResult);

#else
        send_executeOnController(clusterId, script, lang);
        return recv_executeOnController();

#endif
      }
#if SILVERLIGHT
      public IAsyncResult send_executeOnController(AsyncCallback callback, object state, string clusterId, string script, Lang lang)
      {
        oprot_.WriteMessageBegin(new TMessage("executeOnController", TMessageType.Call, seqid_));
        executeOnController_args args = new executeOnController_args();
        args.ClusterId = clusterId;
        args.Script = script;
        args.Lang = lang;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

#else

      public void send_executeOnController(string clusterId, string script, Lang lang)
      {
        oprot_.WriteMessageBegin(new TMessage("executeOnController", TMessageType.Call, seqid_));
        executeOnController_args args = new executeOnController_args();
        args.ClusterId = clusterId;
        args.Script = script;
        args.Lang = lang;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
#endif

      public Response recv_executeOnController()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        executeOnController_result result = new executeOnController_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "executeOnController failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(ISync iface)
      {
        iface_ = iface;
        processMap_["ping"] = ping_Process;
        processMap_["clean"] = clean_Process;
        processMap_["exit"] = exit_Process;
        processMap_["createCluster"] = createCluster_Process;
        processMap_["startMember"] = startMember_Process;
        processMap_["shutdownMember"] = shutdownMember_Process;
        processMap_["terminateMember"] = terminateMember_Process;
        processMap_["suspendMember"] = suspendMember_Process;
        processMap_["resumeMember"] = resumeMember_Process;
        processMap_["shutdownCluster"] = shutdownCluster_Process;
        processMap_["terminateCluster"] = terminateCluster_Process;
        processMap_["splitMemberFromCluster"] = splitMemberFromCluster_Process;
        processMap_["mergeMemberToCluster"] = mergeMemberToCluster_Process;
        processMap_["executeOnController"] = executeOnController_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private ISync iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void ping_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ping_args args = new ping_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ping_result result = new ping_result();
        try
        {
          result.Success = iface_.ping();
          oprot.WriteMessageBegin(new TMessage("ping", TMessageType.Reply, seqid));
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ping", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void clean_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        clean_args args = new clean_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        clean_result result = new clean_result();
        try
        {
          result.Success = iface_.clean();
          oprot.WriteMessageBegin(new TMessage("clean", TMessageType.Reply, seqid));
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("clean", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void exit_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        exit_args args = new exit_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        exit_result result = new exit_result();
        try
        {
          result.Success = iface_.exit();
          oprot.WriteMessageBegin(new TMessage("exit", TMessageType.Reply, seqid));
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("exit", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void createCluster_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        createCluster_args args = new createCluster_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        createCluster_result result = new createCluster_result();
        try
        {
          try
          {
            result.Success = iface_.createCluster(args.HzVersion, args.Xmlconfig);
          }
          catch (ServerException serverException)
          {
            result.ServerException = serverException;
          }
          oprot.WriteMessageBegin(new TMessage("createCluster", TMessageType.Reply, seqid));
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("createCluster", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void startMember_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        startMember_args args = new startMember_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        startMember_result result = new startMember_result();
        try
        {
          try
          {
            result.Success = iface_.startMember(args.ClusterId);
          }
          catch (ServerException serverException)
          {
            result.ServerException = serverException;
          }
          oprot.WriteMessageBegin(new TMessage("startMember", TMessageType.Reply, seqid));
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("startMember", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void shutdownMember_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        shutdownMember_args args = new shutdownMember_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        shutdownMember_result result = new shutdownMember_result();
        try
        {
          result.Success = iface_.shutdownMember(args.ClusterId, args.MemberId);
          oprot.WriteMessageBegin(new TMessage("shutdownMember", TMessageType.Reply, seqid));
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("shutdownMember", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void terminateMember_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        terminateMember_args args = new terminateMember_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        terminateMember_result result = new terminateMember_result();
        try
        {
          result.Success = iface_.terminateMember(args.ClusterId, args.MemberId);
          oprot.WriteMessageBegin(new TMessage("terminateMember", TMessageType.Reply, seqid));
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("terminateMember", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void suspendMember_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        suspendMember_args args = new suspendMember_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        suspendMember_result result = new suspendMember_result();
        try
        {
          result.Success = iface_.suspendMember(args.ClusterId, args.MemberId);
          oprot.WriteMessageBegin(new TMessage("suspendMember", TMessageType.Reply, seqid));
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("suspendMember", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void resumeMember_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        resumeMember_args args = new resumeMember_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        resumeMember_result result = new resumeMember_result();
        try
        {
          result.Success = iface_.resumeMember(args.ClusterId, args.MemberId);
          oprot.WriteMessageBegin(new TMessage("resumeMember", TMessageType.Reply, seqid));
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("resumeMember", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void shutdownCluster_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        shutdownCluster_args args = new shutdownCluster_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        shutdownCluster_result result = new shutdownCluster_result();
        try
        {
          result.Success = iface_.shutdownCluster(args.ClusterId);
          oprot.WriteMessageBegin(new TMessage("shutdownCluster", TMessageType.Reply, seqid));
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("shutdownCluster", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void terminateCluster_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        terminateCluster_args args = new terminateCluster_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        terminateCluster_result result = new terminateCluster_result();
        try
        {
          result.Success = iface_.terminateCluster(args.ClusterId);
          oprot.WriteMessageBegin(new TMessage("terminateCluster", TMessageType.Reply, seqid));
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("terminateCluster", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void splitMemberFromCluster_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        splitMemberFromCluster_args args = new splitMemberFromCluster_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        splitMemberFromCluster_result result = new splitMemberFromCluster_result();
        try
        {
          result.Success = iface_.splitMemberFromCluster(args.MemberId);
          oprot.WriteMessageBegin(new TMessage("splitMemberFromCluster", TMessageType.Reply, seqid));
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("splitMemberFromCluster", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void mergeMemberToCluster_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        mergeMemberToCluster_args args = new mergeMemberToCluster_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        mergeMemberToCluster_result result = new mergeMemberToCluster_result();
        try
        {
          result.Success = iface_.mergeMemberToCluster(args.ClusterId, args.MemberId);
          oprot.WriteMessageBegin(new TMessage("mergeMemberToCluster", TMessageType.Reply, seqid));
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("mergeMemberToCluster", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void executeOnController_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        executeOnController_args args = new executeOnController_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        executeOnController_result result = new executeOnController_result();
        try
        {
          result.Success = iface_.executeOnController(args.ClusterId, args.Script, args.Lang);
          oprot.WriteMessageBegin(new TMessage("executeOnController", TMessageType.Reply, seqid));
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("executeOnController", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class ping_args : TBase
    {

      public ping_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) {
              break;
            }
            switch (field.ID)
            {
              default:
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ping_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ping_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class ping_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
#if !SILVERLIGHT
      [Serializable]
#endif
      public struct Isset {
        public bool success;
      }

      public ping_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) {
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else {
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default:
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ping_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ping_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class clean_args : TBase
    {

      public clean_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) {
              break;
            }
            switch (field.ID)
            {
              default:
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("clean_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("clean_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class clean_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
#if !SILVERLIGHT
      [Serializable]
#endif
      public struct Isset {
        public bool success;
      }

      public clean_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) {
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else {
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default:
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("clean_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("clean_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class exit_args : TBase
    {

      public exit_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) {
              break;
            }
            switch (field.ID)
            {
              default:
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("exit_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("exit_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class exit_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
#if !SILVERLIGHT
      [Serializable]
#endif
      public struct Isset {
        public bool success;
      }

      public exit_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) {
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else {
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default:
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("exit_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("exit_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class createCluster_args : TBase
    {
      private string _hzVersion;
      private string _xmlconfig;

      public string HzVersion
      {
        get
        {
          return _hzVersion;
        }
        set
        {
          __isset.hzVersion = true;
          this._hzVersion = value;
        }
      }

      public string Xmlconfig
      {
        get
        {
          return _xmlconfig;
        }
        set
        {
          __isset.xmlconfig = true;
          this._xmlconfig = value;
        }
      }


      public Isset __isset;
#if !SILVERLIGHT
      [Serializable]
#endif
      public struct Isset {
        public bool hzVersion;
        public bool xmlconfig;
      }

      public createCluster_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) {
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  HzVersion = iprot.ReadString();
                } else {
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Xmlconfig = iprot.ReadString();
                } else {
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default:
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("createCluster_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (HzVersion != null && __isset.hzVersion) {
            field.Name = "hzVersion";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(HzVersion);
            oprot.WriteFieldEnd();
          }
          if (Xmlconfig != null && __isset.xmlconfig) {
            field.Name = "xmlconfig";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Xmlconfig);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("createCluster_args(");
        bool __first = true;
        if (HzVersion != null && __isset.hzVersion) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("HzVersion: ");
          __sb.Append(HzVersion);
        }
        if (Xmlconfig != null && __isset.xmlconfig) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Xmlconfig: ");
          __sb.Append(Xmlconfig);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class createCluster_result : TBase
    {
      private Cluster _success;
      private ServerException _serverException;

      public Cluster Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ServerException ServerException
      {
        get
        {
          return _serverException;
        }
        set
        {
          __isset.serverException = true;
          this._serverException = value;
        }
      }


      public Isset __isset;
#if !SILVERLIGHT
      [Serializable]
#endif
      public struct Isset {
        public bool success;
        public bool serverException;
      }

      public createCluster_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) {
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new Cluster();
                  Success.Read(iprot);
                } else {
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  ServerException = new ServerException();
                  ServerException.Read(iprot);
                } else {
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default:
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("createCluster_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.serverException) {
            if (ServerException != null) {
              field.Name = "ServerException";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              ServerException.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("createCluster_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (ServerException != null && __isset.serverException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ServerException: ");
          __sb.Append(ServerException== null ? "<null>" : ServerException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class startMember_args : TBase
    {
      private string _clusterId;

      public string ClusterId
      {
        get
        {
          return _clusterId;
        }
        set
        {
          __isset.clusterId = true;
          this._clusterId = value;
        }
      }


      public Isset __isset;
#if !SILVERLIGHT
      [Serializable]
#endif
      public struct Isset {
        public bool clusterId;
      }

      public startMember_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) {
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ClusterId = iprot.ReadString();
                } else {
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default:
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("startMember_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ClusterId != null && __isset.clusterId) {
            field.Name = "clusterId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ClusterId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("startMember_args(");
        bool __first = true;
        if (ClusterId != null && __isset.clusterId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClusterId: ");
          __sb.Append(ClusterId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class startMember_result : TBase
    {
      private Member _success;
      private ServerException _serverException;

      public Member Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ServerException ServerException
      {
        get
        {
          return _serverException;
        }
        set
        {
          __isset.serverException = true;
          this._serverException = value;
        }
      }


      public Isset __isset;
#if !SILVERLIGHT
      [Serializable]
#endif
      public struct Isset {
        public bool success;
        public bool serverException;
      }

      public startMember_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) {
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new Member();
                  Success.Read(iprot);
                } else {
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  ServerException = new ServerException();
                  ServerException.Read(iprot);
                } else {
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default:
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("startMember_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.serverException) {
            if (ServerException != null) {
              field.Name = "ServerException";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              ServerException.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("startMember_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (ServerException != null && __isset.serverException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ServerException: ");
          __sb.Append(ServerException== null ? "<null>" : ServerException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class shutdownMember_args : TBase
    {
      private string _clusterId;
      private string _memberId;

      public string ClusterId
      {
        get
        {
          return _clusterId;
        }
        set
        {
          __isset.clusterId = true;
          this._clusterId = value;
        }
      }

      public string MemberId
      {
        get
        {
          return _memberId;
        }
        set
        {
          __isset.memberId = true;
          this._memberId = value;
        }
      }


      public Isset __isset;
#if !SILVERLIGHT
      [Serializable]
#endif
      public struct Isset {
        public bool clusterId;
        public bool memberId;
      }

      public shutdownMember_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) {
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ClusterId = iprot.ReadString();
                } else {
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  MemberId = iprot.ReadString();
                } else {
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default:
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("shutdownMember_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ClusterId != null && __isset.clusterId) {
            field.Name = "clusterId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ClusterId);
            oprot.WriteFieldEnd();
          }
          if (MemberId != null && __isset.memberId) {
            field.Name = "memberId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(MemberId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("shutdownMember_args(");
        bool __first = true;
        if (ClusterId != null && __isset.clusterId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClusterId: ");
          __sb.Append(ClusterId);
        }
        if (MemberId != null && __isset.memberId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MemberId: ");
          __sb.Append(MemberId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class shutdownMember_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
#if !SILVERLIGHT
      [Serializable]
#endif
      public struct Isset {
        public bool success;
      }

      public shutdownMember_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) {
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else {
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default:
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("shutdownMember_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("shutdownMember_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class terminateMember_args : TBase
    {
      private string _clusterId;
      private string _memberId;

      public string ClusterId
      {
        get
        {
          return _clusterId;
        }
        set
        {
          __isset.clusterId = true;
          this._clusterId = value;
        }
      }

      public string MemberId
      {
        get
        {
          return _memberId;
        }
        set
        {
          __isset.memberId = true;
          this._memberId = value;
        }
      }


      public Isset __isset;
#if !SILVERLIGHT
      [Serializable]
#endif
      public struct Isset {
        public bool clusterId;
        public bool memberId;
      }

      public terminateMember_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) {
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ClusterId = iprot.ReadString();
                } else {
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  MemberId = iprot.ReadString();
                } else {
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default:
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("terminateMember_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ClusterId != null && __isset.clusterId) {
            field.Name = "clusterId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ClusterId);
            oprot.WriteFieldEnd();
          }
          if (MemberId != null && __isset.memberId) {
            field.Name = "memberId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(MemberId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("terminateMember_args(");
        bool __first = true;
        if (ClusterId != null && __isset.clusterId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClusterId: ");
          __sb.Append(ClusterId);
        }
        if (MemberId != null && __isset.memberId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MemberId: ");
          __sb.Append(MemberId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class terminateMember_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
#if !SILVERLIGHT
      [Serializable]
#endif
      public struct Isset {
        public bool success;
      }

      public terminateMember_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) {
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else {
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default:
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("terminateMember_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("terminateMember_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class suspendMember_args : TBase
    {
      private string _clusterId;
      private string _memberId;

      public string ClusterId
      {
        get
        {
          return _clusterId;
        }
        set
        {
          __isset.clusterId = true;
          this._clusterId = value;
        }
      }

      public string MemberId
      {
        get
        {
          return _memberId;
        }
        set
        {
          __isset.memberId = true;
          this._memberId = value;
        }
      }


      public Isset __isset;
#if !SILVERLIGHT
      [Serializable]
#endif
      public struct Isset {
        public bool clusterId;
        public bool memberId;
      }

      public suspendMember_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) {
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ClusterId = iprot.ReadString();
                } else {
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  MemberId = iprot.ReadString();
                } else {
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default:
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("suspendMember_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ClusterId != null && __isset.clusterId) {
            field.Name = "clusterId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ClusterId);
            oprot.WriteFieldEnd();
          }
          if (MemberId != null && __isset.memberId) {
            field.Name = "memberId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(MemberId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("suspendMember_args(");
        bool __first = true;
        if (ClusterId != null && __isset.clusterId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClusterId: ");
          __sb.Append(ClusterId);
        }
        if (MemberId != null && __isset.memberId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MemberId: ");
          __sb.Append(MemberId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class suspendMember_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
#if !SILVERLIGHT
      [Serializable]
#endif
      public struct Isset {
        public bool success;
      }

      public suspendMember_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) {
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else {
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default:
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("suspendMember_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("suspendMember_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class resumeMember_args : TBase
    {
      private string _clusterId;
      private string _memberId;

      public string ClusterId
      {
        get
        {
          return _clusterId;
        }
        set
        {
          __isset.clusterId = true;
          this._clusterId = value;
        }
      }

      public string MemberId
      {
        get
        {
          return _memberId;
        }
        set
        {
          __isset.memberId = true;
          this._memberId = value;
        }
      }


      public Isset __isset;
#if !SILVERLIGHT
      [Serializable]
#endif
      public struct Isset {
        public bool clusterId;
        public bool memberId;
      }

      public resumeMember_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) {
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ClusterId = iprot.ReadString();
                } else {
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  MemberId = iprot.ReadString();
                } else {
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default:
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("resumeMember_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ClusterId != null && __isset.clusterId) {
            field.Name = "clusterId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ClusterId);
            oprot.WriteFieldEnd();
          }
          if (MemberId != null && __isset.memberId) {
            field.Name = "memberId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(MemberId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("resumeMember_args(");
        bool __first = true;
        if (ClusterId != null && __isset.clusterId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClusterId: ");
          __sb.Append(ClusterId);
        }
        if (MemberId != null && __isset.memberId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MemberId: ");
          __sb.Append(MemberId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class resumeMember_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
#if !SILVERLIGHT
      [Serializable]
#endif
      public struct Isset {
        public bool success;
      }

      public resumeMember_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) {
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else {
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default:
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("resumeMember_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("resumeMember_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class shutdownCluster_args : TBase
    {
      private string _clusterId;

      public string ClusterId
      {
        get
        {
          return _clusterId;
        }
        set
        {
          __isset.clusterId = true;
          this._clusterId = value;
        }
      }


      public Isset __isset;
#if !SILVERLIGHT
      [Serializable]
#endif
      public struct Isset {
        public bool clusterId;
      }

      public shutdownCluster_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) {
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ClusterId = iprot.ReadString();
                } else {
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default:
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("shutdownCluster_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ClusterId != null && __isset.clusterId) {
            field.Name = "clusterId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ClusterId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("shutdownCluster_args(");
        bool __first = true;
        if (ClusterId != null && __isset.clusterId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClusterId: ");
          __sb.Append(ClusterId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class shutdownCluster_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
#if !SILVERLIGHT
      [Serializable]
#endif
      public struct Isset {
        public bool success;
      }

      public shutdownCluster_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) {
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else {
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default:
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("shutdownCluster_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("shutdownCluster_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class terminateCluster_args : TBase
    {
      private string _clusterId;

      public string ClusterId
      {
        get
        {
          return _clusterId;
        }
        set
        {
          __isset.clusterId = true;
          this._clusterId = value;
        }
      }


      public Isset __isset;
#if !SILVERLIGHT
      [Serializable]
#endif
      public struct Isset {
        public bool clusterId;
      }

      public terminateCluster_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) {
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ClusterId = iprot.ReadString();
                } else {
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default:
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("terminateCluster_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ClusterId != null && __isset.clusterId) {
            field.Name = "clusterId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ClusterId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("terminateCluster_args(");
        bool __first = true;
        if (ClusterId != null && __isset.clusterId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClusterId: ");
          __sb.Append(ClusterId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class terminateCluster_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
#if !SILVERLIGHT
      [Serializable]
#endif
      public struct Isset {
        public bool success;
      }

      public terminateCluster_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) {
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else {
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default:
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("terminateCluster_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("terminateCluster_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class splitMemberFromCluster_args : TBase
    {
      private string _memberId;

      public string MemberId
      {
        get
        {
          return _memberId;
        }
        set
        {
          __isset.memberId = true;
          this._memberId = value;
        }
      }


      public Isset __isset;
#if !SILVERLIGHT
      [Serializable]
#endif
      public struct Isset {
        public bool memberId;
      }

      public splitMemberFromCluster_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) {
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  MemberId = iprot.ReadString();
                } else {
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default:
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("splitMemberFromCluster_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (MemberId != null && __isset.memberId) {
            field.Name = "memberId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(MemberId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("splitMemberFromCluster_args(");
        bool __first = true;
        if (MemberId != null && __isset.memberId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MemberId: ");
          __sb.Append(MemberId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class splitMemberFromCluster_result : TBase
    {
      private Cluster _success;

      public Cluster Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
#if !SILVERLIGHT
      [Serializable]
#endif
      public struct Isset {
        public bool success;
      }

      public splitMemberFromCluster_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) {
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new Cluster();
                  Success.Read(iprot);
                } else {
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default:
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("splitMemberFromCluster_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("splitMemberFromCluster_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class mergeMemberToCluster_args : TBase
    {
      private string _clusterId;
      private string _memberId;

      public string ClusterId
      {
        get
        {
          return _clusterId;
        }
        set
        {
          __isset.clusterId = true;
          this._clusterId = value;
        }
      }

      public string MemberId
      {
        get
        {
          return _memberId;
        }
        set
        {
          __isset.memberId = true;
          this._memberId = value;
        }
      }


      public Isset __isset;
#if !SILVERLIGHT
      [Serializable]
#endif
      public struct Isset {
        public bool clusterId;
        public bool memberId;
      }

      public mergeMemberToCluster_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) {
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ClusterId = iprot.ReadString();
                } else {
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  MemberId = iprot.ReadString();
                } else {
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default:
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("mergeMemberToCluster_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ClusterId != null && __isset.clusterId) {
            field.Name = "clusterId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ClusterId);
            oprot.WriteFieldEnd();
          }
          if (MemberId != null && __isset.memberId) {
            field.Name = "memberId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(MemberId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("mergeMemberToCluster_args(");
        bool __first = true;
        if (ClusterId != null && __isset.clusterId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClusterId: ");
          __sb.Append(ClusterId);
        }
        if (MemberId != null && __isset.memberId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MemberId: ");
          __sb.Append(MemberId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class mergeMemberToCluster_result : TBase
    {
      private Cluster _success;

      public Cluster Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
#if !SILVERLIGHT
      [Serializable]
#endif
      public struct Isset {
        public bool success;
      }

      public mergeMemberToCluster_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) {
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new Cluster();
                  Success.Read(iprot);
                } else {
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default:
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("mergeMemberToCluster_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("mergeMemberToCluster_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class executeOnController_args : TBase
    {
      private string _clusterId;
      private string _script;
      private Lang _lang;

      public string ClusterId
      {
        get
        {
          return _clusterId;
        }
        set
        {
          __isset.clusterId = true;
          this._clusterId = value;
        }
      }

      public string Script
      {
        get
        {
          return _script;
        }
        set
        {
          __isset.script = true;
          this._script = value;
        }
      }

      /// <summary>
      ///
      /// <seealso cref="Lang"/>
      /// </summary>
      public Lang Lang
      {
        get
        {
          return _lang;
        }
        set
        {
          __isset.lang = true;
          this._lang = value;
        }
      }


      public Isset __isset;
#if !SILVERLIGHT
      [Serializable]
#endif
      public struct Isset {
        public bool clusterId;
        public bool script;
        public bool lang;
      }

      public executeOnController_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) {
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ClusterId = iprot.ReadString();
                } else {
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Script = iprot.ReadString();
                } else {
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  Lang = (Lang)iprot.ReadI32();
                } else {
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default:
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("executeOnController_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ClusterId != null && __isset.clusterId) {
            field.Name = "clusterId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ClusterId);
            oprot.WriteFieldEnd();
          }
          if (Script != null && __isset.script) {
            field.Name = "script";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Script);
            oprot.WriteFieldEnd();
          }
          if (__isset.lang) {
            field.Name = "lang";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)Lang);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("executeOnController_args(");
        bool __first = true;
        if (ClusterId != null && __isset.clusterId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClusterId: ");
          __sb.Append(ClusterId);
        }
        if (Script != null && __isset.script) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Script: ");
          __sb.Append(Script);
        }
        if (__isset.lang) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Lang: ");
          __sb.Append(Lang);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class executeOnController_result : TBase
    {
      private Response _success;

      public Response Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
#if !SILVERLIGHT
      [Serializable]
#endif
      public struct Isset {
        public bool success;
      }

      public executeOnController_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) {
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new Response();
                  Success.Read(iprot);
                } else {
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default:
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("executeOnController_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("executeOnController_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}

#endif
