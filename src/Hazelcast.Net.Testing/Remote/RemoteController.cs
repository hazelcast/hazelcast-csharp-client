// Copyright (c) 2008-2025, Hazelcast, Inc. All Rights Reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.18.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Hazelcast.Testing.Remote
{
  public partial class RemoteController
  {
    public interface IAsync
    {
      global::System.Threading.Tasks.Task<bool> ping(CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<bool> clean(CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<bool> exit(CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Cluster> createCluster(string hzVersion, string xmlconfig, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Cluster> createClusterKeepClusterName(string hzVersion, string xmlconfig, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Member> startMember(string clusterId, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<bool> shutdownMember(string clusterId, string memberId, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<bool> terminateMember(string clusterId, string memberId, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<bool> suspendMember(string clusterId, string memberId, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<bool> resumeMember(string clusterId, string memberId, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<bool> shutdownCluster(string clusterId, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<bool> terminateCluster(string clusterId, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Cluster> splitMemberFromCluster(string memberId, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Cluster> mergeMemberToCluster(string clusterId, string memberId, CancellationToken cancellationToken = default);

      /// <summary>
      /// Reads the environment variables and calls loginToCloud() method with these variables.
      /// @throws CloudException
      /// </summary>
      global::System.Threading.Tasks.Task loginToCloudUsingEnvironment(CancellationToken cancellationToken = default);

      /// <summary>
      /// Logins to the cloud, sets the bearerToken, baseUrl variables in CloudManager to make it ready to use cloud API
      /// @throws CloudException
      /// 
      /// @param baseUrl -> Base url of the cloud environment. i.e. https://uat.hazelcast.cloud
      /// @param apiKey -> Api key of the hazelcast cloud
      /// @param apiSecret -> Api secret of the hazelcast cloud
      /// </summary>
      /// <param name="baseUrl"></param>
      /// <param name="apiKey"></param>
      /// <param name="apiSecret"></param>
      global::System.Threading.Tasks.Task loginToCloud(string baseUrl, string apiKey, string apiSecret, CancellationToken cancellationToken = default);

      /// <summary>
      /// Creates a cluster
      /// @return CloudCluster
      /// @throws CloudException
      /// 
      /// @param hazelcastVersion -> Hazelcast version
      /// @param isTlsEnabled -> True if ssl enabled cluster is requested, otherwise false.
      /// </summary>
      /// <param name="hazelcastVersion"></param>
      /// <param name="isTlsEnabled"></param>
      global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.CloudCluster> createCloudCluster(string hazelcastVersion, bool isTlsEnabled, CancellationToken cancellationToken = default);

      /// <summary>
      /// Get information of the given cluster
      /// @return CloudCluster
      /// @throws CloudException
      /// 
      /// @param cloudClusterId -> Id of the cluster
      /// </summary>
      /// <param name="cloudClusterId"></param>
      global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.CloudCluster> getCloudCluster(string cloudClusterId, CancellationToken cancellationToken = default);

      /// <summary>
      /// Stops the given cluster
      /// @return CloudCluster
      /// @throws CloudException
      /// 
      /// @param cloudClusterId -> Id of the cluster
      /// </summary>
      /// <param name="cloudClusterId"></param>
      global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.CloudCluster> stopCloudCluster(string cloudClusterId, CancellationToken cancellationToken = default);

      /// <summary>
      /// Resumes the given cluster
      /// @return CloudCluster
      /// @throws CloudException
      /// 
      /// @param cloudClusterId
      /// </summary>
      /// <param name="cloudClusterId"></param>
      global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.CloudCluster> resumeCloudCluster(string cloudClusterId, CancellationToken cancellationToken = default);

      /// <summary>
      /// Deletes the given cluster
      /// @return boolean
      /// @throws CloudException
      /// 
      /// @param cloudClusterId
      /// </summary>
      /// <param name="cloudClusterId"></param>
      global::System.Threading.Tasks.Task deleteCloudCluster(string cloudClusterId, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Response> executeOnController(string clusterId, string script, global::Hazelcast.Testing.Remote.Lang lang, CancellationToken cancellationToken = default);

    }


    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<bool> ping(CancellationToken cancellationToken = default)
      {
        await send_ping(cancellationToken);
        return await recv_ping(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_ping(CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("ping", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp30 = new InternalStructs.ping_args() {
        };
        
        await tmp30.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_ping(CancellationToken cancellationToken = default)
      {
        
        var tmp31 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp31.Type == TMessageType.Exception)
        {
          var tmp32 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp32;
        }

        var tmp33 = new InternalStructs.ping_result();
        await tmp33.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp33.__isset.success)
        {
          return tmp33.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ping failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> clean(CancellationToken cancellationToken = default)
      {
        await send_clean(cancellationToken);
        return await recv_clean(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_clean(CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("clean", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp34 = new InternalStructs.clean_args() {
        };
        
        await tmp34.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_clean(CancellationToken cancellationToken = default)
      {
        
        var tmp35 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp35.Type == TMessageType.Exception)
        {
          var tmp36 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp36;
        }

        var tmp37 = new InternalStructs.clean_result();
        await tmp37.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp37.__isset.success)
        {
          return tmp37.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "clean failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> exit(CancellationToken cancellationToken = default)
      {
        await send_exit(cancellationToken);
        return await recv_exit(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_exit(CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("exit", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp38 = new InternalStructs.exit_args() {
        };
        
        await tmp38.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_exit(CancellationToken cancellationToken = default)
      {
        
        var tmp39 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp39.Type == TMessageType.Exception)
        {
          var tmp40 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp40;
        }

        var tmp41 = new InternalStructs.exit_result();
        await tmp41.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp41.__isset.success)
        {
          return tmp41.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "exit failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Cluster> createCluster(string hzVersion, string xmlconfig, CancellationToken cancellationToken = default)
      {
        await send_createCluster(hzVersion, xmlconfig, cancellationToken);
        return await recv_createCluster(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_createCluster(string hzVersion, string xmlconfig, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("createCluster", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp42 = new InternalStructs.createCluster_args() {
          HzVersion = hzVersion,
          Xmlconfig = xmlconfig,
        };
        
        await tmp42.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Cluster> recv_createCluster(CancellationToken cancellationToken = default)
      {
        
        var tmp43 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp43.Type == TMessageType.Exception)
        {
          var tmp44 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp44;
        }

        var tmp45 = new InternalStructs.createCluster_result();
        await tmp45.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp45.__isset.success)
        {
          return tmp45.Success;
        }
        if (tmp45.__isset.serverException)
        {
          throw tmp45.ServerException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createCluster failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Cluster> createClusterKeepClusterName(string hzVersion, string xmlconfig, CancellationToken cancellationToken = default)
      {
        await send_createClusterKeepClusterName(hzVersion, xmlconfig, cancellationToken);
        return await recv_createClusterKeepClusterName(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_createClusterKeepClusterName(string hzVersion, string xmlconfig, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("createClusterKeepClusterName", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp46 = new InternalStructs.createClusterKeepClusterName_args() {
          HzVersion = hzVersion,
          Xmlconfig = xmlconfig,
        };
        
        await tmp46.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Cluster> recv_createClusterKeepClusterName(CancellationToken cancellationToken = default)
      {
        
        var tmp47 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp47.Type == TMessageType.Exception)
        {
          var tmp48 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp48;
        }

        var tmp49 = new InternalStructs.createClusterKeepClusterName_result();
        await tmp49.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp49.__isset.success)
        {
          return tmp49.Success;
        }
        if (tmp49.__isset.serverException)
        {
          throw tmp49.ServerException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createClusterKeepClusterName failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Member> startMember(string clusterId, CancellationToken cancellationToken = default)
      {
        await send_startMember(clusterId, cancellationToken);
        return await recv_startMember(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_startMember(string clusterId, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("startMember", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp50 = new InternalStructs.startMember_args() {
          ClusterId = clusterId,
        };
        
        await tmp50.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Member> recv_startMember(CancellationToken cancellationToken = default)
      {
        
        var tmp51 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp51.Type == TMessageType.Exception)
        {
          var tmp52 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp52;
        }

        var tmp53 = new InternalStructs.startMember_result();
        await tmp53.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp53.__isset.success)
        {
          return tmp53.Success;
        }
        if (tmp53.__isset.serverException)
        {
          throw tmp53.ServerException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "startMember failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> shutdownMember(string clusterId, string memberId, CancellationToken cancellationToken = default)
      {
        await send_shutdownMember(clusterId, memberId, cancellationToken);
        return await recv_shutdownMember(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_shutdownMember(string clusterId, string memberId, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("shutdownMember", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp54 = new InternalStructs.shutdownMember_args() {
          ClusterId = clusterId,
          MemberId = memberId,
        };
        
        await tmp54.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_shutdownMember(CancellationToken cancellationToken = default)
      {
        
        var tmp55 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp55.Type == TMessageType.Exception)
        {
          var tmp56 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp56;
        }

        var tmp57 = new InternalStructs.shutdownMember_result();
        await tmp57.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp57.__isset.success)
        {
          return tmp57.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "shutdownMember failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> terminateMember(string clusterId, string memberId, CancellationToken cancellationToken = default)
      {
        await send_terminateMember(clusterId, memberId, cancellationToken);
        return await recv_terminateMember(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_terminateMember(string clusterId, string memberId, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("terminateMember", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp58 = new InternalStructs.terminateMember_args() {
          ClusterId = clusterId,
          MemberId = memberId,
        };
        
        await tmp58.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_terminateMember(CancellationToken cancellationToken = default)
      {
        
        var tmp59 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp59.Type == TMessageType.Exception)
        {
          var tmp60 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp60;
        }

        var tmp61 = new InternalStructs.terminateMember_result();
        await tmp61.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp61.__isset.success)
        {
          return tmp61.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "terminateMember failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> suspendMember(string clusterId, string memberId, CancellationToken cancellationToken = default)
      {
        await send_suspendMember(clusterId, memberId, cancellationToken);
        return await recv_suspendMember(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_suspendMember(string clusterId, string memberId, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("suspendMember", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp62 = new InternalStructs.suspendMember_args() {
          ClusterId = clusterId,
          MemberId = memberId,
        };
        
        await tmp62.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_suspendMember(CancellationToken cancellationToken = default)
      {
        
        var tmp63 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp63.Type == TMessageType.Exception)
        {
          var tmp64 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp64;
        }

        var tmp65 = new InternalStructs.suspendMember_result();
        await tmp65.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp65.__isset.success)
        {
          return tmp65.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "suspendMember failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> resumeMember(string clusterId, string memberId, CancellationToken cancellationToken = default)
      {
        await send_resumeMember(clusterId, memberId, cancellationToken);
        return await recv_resumeMember(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_resumeMember(string clusterId, string memberId, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("resumeMember", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp66 = new InternalStructs.resumeMember_args() {
          ClusterId = clusterId,
          MemberId = memberId,
        };
        
        await tmp66.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_resumeMember(CancellationToken cancellationToken = default)
      {
        
        var tmp67 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp67.Type == TMessageType.Exception)
        {
          var tmp68 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp68;
        }

        var tmp69 = new InternalStructs.resumeMember_result();
        await tmp69.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp69.__isset.success)
        {
          return tmp69.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "resumeMember failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> shutdownCluster(string clusterId, CancellationToken cancellationToken = default)
      {
        await send_shutdownCluster(clusterId, cancellationToken);
        return await recv_shutdownCluster(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_shutdownCluster(string clusterId, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("shutdownCluster", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp70 = new InternalStructs.shutdownCluster_args() {
          ClusterId = clusterId,
        };
        
        await tmp70.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_shutdownCluster(CancellationToken cancellationToken = default)
      {
        
        var tmp71 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp71.Type == TMessageType.Exception)
        {
          var tmp72 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp72;
        }

        var tmp73 = new InternalStructs.shutdownCluster_result();
        await tmp73.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp73.__isset.success)
        {
          return tmp73.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "shutdownCluster failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> terminateCluster(string clusterId, CancellationToken cancellationToken = default)
      {
        await send_terminateCluster(clusterId, cancellationToken);
        return await recv_terminateCluster(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_terminateCluster(string clusterId, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("terminateCluster", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp74 = new InternalStructs.terminateCluster_args() {
          ClusterId = clusterId,
        };
        
        await tmp74.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_terminateCluster(CancellationToken cancellationToken = default)
      {
        
        var tmp75 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp75.Type == TMessageType.Exception)
        {
          var tmp76 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp76;
        }

        var tmp77 = new InternalStructs.terminateCluster_result();
        await tmp77.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp77.__isset.success)
        {
          return tmp77.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "terminateCluster failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Cluster> splitMemberFromCluster(string memberId, CancellationToken cancellationToken = default)
      {
        await send_splitMemberFromCluster(memberId, cancellationToken);
        return await recv_splitMemberFromCluster(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_splitMemberFromCluster(string memberId, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("splitMemberFromCluster", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp78 = new InternalStructs.splitMemberFromCluster_args() {
          MemberId = memberId,
        };
        
        await tmp78.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Cluster> recv_splitMemberFromCluster(CancellationToken cancellationToken = default)
      {
        
        var tmp79 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp79.Type == TMessageType.Exception)
        {
          var tmp80 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp80;
        }

        var tmp81 = new InternalStructs.splitMemberFromCluster_result();
        await tmp81.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp81.__isset.success)
        {
          return tmp81.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "splitMemberFromCluster failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Cluster> mergeMemberToCluster(string clusterId, string memberId, CancellationToken cancellationToken = default)
      {
        await send_mergeMemberToCluster(clusterId, memberId, cancellationToken);
        return await recv_mergeMemberToCluster(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_mergeMemberToCluster(string clusterId, string memberId, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("mergeMemberToCluster", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp82 = new InternalStructs.mergeMemberToCluster_args() {
          ClusterId = clusterId,
          MemberId = memberId,
        };
        
        await tmp82.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Cluster> recv_mergeMemberToCluster(CancellationToken cancellationToken = default)
      {
        
        var tmp83 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp83.Type == TMessageType.Exception)
        {
          var tmp84 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp84;
        }

        var tmp85 = new InternalStructs.mergeMemberToCluster_result();
        await tmp85.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp85.__isset.success)
        {
          return tmp85.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "mergeMemberToCluster failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task loginToCloudUsingEnvironment(CancellationToken cancellationToken = default)
      {
        await send_loginToCloudUsingEnvironment(cancellationToken);
        await recv_loginToCloudUsingEnvironment(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_loginToCloudUsingEnvironment(CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("loginToCloudUsingEnvironment", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp86 = new InternalStructs.loginToCloudUsingEnvironment_args() {
        };
        
        await tmp86.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_loginToCloudUsingEnvironment(CancellationToken cancellationToken = default)
      {
        
        var tmp87 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp87.Type == TMessageType.Exception)
        {
          var tmp88 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp88;
        }

        var tmp89 = new InternalStructs.loginToCloudUsingEnvironment_result();
        await tmp89.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp89.__isset.cloudException)
        {
          throw tmp89.CloudException;
        }
      }

      public async global::System.Threading.Tasks.Task loginToCloud(string baseUrl, string apiKey, string apiSecret, CancellationToken cancellationToken = default)
      {
        await send_loginToCloud(baseUrl, apiKey, apiSecret, cancellationToken);
        await recv_loginToCloud(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_loginToCloud(string baseUrl, string apiKey, string apiSecret, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("loginToCloud", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp90 = new InternalStructs.loginToCloud_args() {
          BaseUrl = baseUrl,
          ApiKey = apiKey,
          ApiSecret = apiSecret,
        };
        
        await tmp90.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_loginToCloud(CancellationToken cancellationToken = default)
      {
        
        var tmp91 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp91.Type == TMessageType.Exception)
        {
          var tmp92 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp92;
        }

        var tmp93 = new InternalStructs.loginToCloud_result();
        await tmp93.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp93.__isset.cloudException)
        {
          throw tmp93.CloudException;
        }
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.CloudCluster> createCloudCluster(string hazelcastVersion, bool isTlsEnabled, CancellationToken cancellationToken = default)
      {
        await send_createCloudCluster(hazelcastVersion, isTlsEnabled, cancellationToken);
        return await recv_createCloudCluster(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_createCloudCluster(string hazelcastVersion, bool isTlsEnabled, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("createCloudCluster", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp94 = new InternalStructs.createCloudCluster_args() {
          HazelcastVersion = hazelcastVersion,
          IsTlsEnabled = isTlsEnabled,
        };
        
        await tmp94.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.CloudCluster> recv_createCloudCluster(CancellationToken cancellationToken = default)
      {
        
        var tmp95 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp95.Type == TMessageType.Exception)
        {
          var tmp96 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp96;
        }

        var tmp97 = new InternalStructs.createCloudCluster_result();
        await tmp97.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp97.__isset.success)
        {
          return tmp97.Success;
        }
        if (tmp97.__isset.cloudException)
        {
          throw tmp97.CloudException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createCloudCluster failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.CloudCluster> getCloudCluster(string cloudClusterId, CancellationToken cancellationToken = default)
      {
        await send_getCloudCluster(cloudClusterId, cancellationToken);
        return await recv_getCloudCluster(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getCloudCluster(string cloudClusterId, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getCloudCluster", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp98 = new InternalStructs.getCloudCluster_args() {
          CloudClusterId = cloudClusterId,
        };
        
        await tmp98.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.CloudCluster> recv_getCloudCluster(CancellationToken cancellationToken = default)
      {
        
        var tmp99 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp99.Type == TMessageType.Exception)
        {
          var tmp100 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp100;
        }

        var tmp101 = new InternalStructs.getCloudCluster_result();
        await tmp101.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp101.__isset.success)
        {
          return tmp101.Success;
        }
        if (tmp101.__isset.cloudException)
        {
          throw tmp101.CloudException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getCloudCluster failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.CloudCluster> stopCloudCluster(string cloudClusterId, CancellationToken cancellationToken = default)
      {
        await send_stopCloudCluster(cloudClusterId, cancellationToken);
        return await recv_stopCloudCluster(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_stopCloudCluster(string cloudClusterId, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("stopCloudCluster", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp102 = new InternalStructs.stopCloudCluster_args() {
          CloudClusterId = cloudClusterId,
        };
        
        await tmp102.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.CloudCluster> recv_stopCloudCluster(CancellationToken cancellationToken = default)
      {
        
        var tmp103 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp103.Type == TMessageType.Exception)
        {
          var tmp104 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp104;
        }

        var tmp105 = new InternalStructs.stopCloudCluster_result();
        await tmp105.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp105.__isset.success)
        {
          return tmp105.Success;
        }
        if (tmp105.__isset.cloudException)
        {
          throw tmp105.CloudException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "stopCloudCluster failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.CloudCluster> resumeCloudCluster(string cloudClusterId, CancellationToken cancellationToken = default)
      {
        await send_resumeCloudCluster(cloudClusterId, cancellationToken);
        return await recv_resumeCloudCluster(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_resumeCloudCluster(string cloudClusterId, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("resumeCloudCluster", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp106 = new InternalStructs.resumeCloudCluster_args() {
          CloudClusterId = cloudClusterId,
        };
        
        await tmp106.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.CloudCluster> recv_resumeCloudCluster(CancellationToken cancellationToken = default)
      {
        
        var tmp107 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp107.Type == TMessageType.Exception)
        {
          var tmp108 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp108;
        }

        var tmp109 = new InternalStructs.resumeCloudCluster_result();
        await tmp109.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp109.__isset.success)
        {
          return tmp109.Success;
        }
        if (tmp109.__isset.cloudException)
        {
          throw tmp109.CloudException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "resumeCloudCluster failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task deleteCloudCluster(string cloudClusterId, CancellationToken cancellationToken = default)
      {
        await send_deleteCloudCluster(cloudClusterId, cancellationToken);
        await recv_deleteCloudCluster(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_deleteCloudCluster(string cloudClusterId, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("deleteCloudCluster", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp110 = new InternalStructs.deleteCloudCluster_args() {
          CloudClusterId = cloudClusterId,
        };
        
        await tmp110.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_deleteCloudCluster(CancellationToken cancellationToken = default)
      {
        
        var tmp111 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp111.Type == TMessageType.Exception)
        {
          var tmp112 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp112;
        }

        var tmp113 = new InternalStructs.deleteCloudCluster_result();
        await tmp113.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp113.__isset.cloudException)
        {
          throw tmp113.CloudException;
        }
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Response> executeOnController(string clusterId, string script, global::Hazelcast.Testing.Remote.Lang lang, CancellationToken cancellationToken = default)
      {
        await send_executeOnController(clusterId, script, lang, cancellationToken);
        return await recv_executeOnController(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_executeOnController(string clusterId, string script, global::Hazelcast.Testing.Remote.Lang lang, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("executeOnController", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp114 = new InternalStructs.executeOnController_args() {
          ClusterId = clusterId,
          Script = script,
          Lang = lang,
        };
        
        await tmp114.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Response> recv_executeOnController(CancellationToken cancellationToken = default)
      {
        
        var tmp115 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp115.Type == TMessageType.Exception)
        {
          var tmp116 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp116;
        }

        var tmp117 = new InternalStructs.executeOnController_result();
        await tmp117.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp117.__isset.success)
        {
          return tmp117.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "executeOnController failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["ping"] = ping_ProcessAsync;
        processMap_["clean"] = clean_ProcessAsync;
        processMap_["exit"] = exit_ProcessAsync;
        processMap_["createCluster"] = createCluster_ProcessAsync;
        processMap_["createClusterKeepClusterName"] = createClusterKeepClusterName_ProcessAsync;
        processMap_["startMember"] = startMember_ProcessAsync;
        processMap_["shutdownMember"] = shutdownMember_ProcessAsync;
        processMap_["terminateMember"] = terminateMember_ProcessAsync;
        processMap_["suspendMember"] = suspendMember_ProcessAsync;
        processMap_["resumeMember"] = resumeMember_ProcessAsync;
        processMap_["shutdownCluster"] = shutdownCluster_ProcessAsync;
        processMap_["terminateCluster"] = terminateCluster_ProcessAsync;
        processMap_["splitMemberFromCluster"] = splitMemberFromCluster_ProcessAsync;
        processMap_["mergeMemberToCluster"] = mergeMemberToCluster_ProcessAsync;
        processMap_["loginToCloudUsingEnvironment"] = loginToCloudUsingEnvironment_ProcessAsync;
        processMap_["loginToCloud"] = loginToCloud_ProcessAsync;
        processMap_["createCloudCluster"] = createCloudCluster_ProcessAsync;
        processMap_["getCloudCluster"] = getCloudCluster_ProcessAsync;
        processMap_["stopCloudCluster"] = stopCloudCluster_ProcessAsync;
        processMap_["resumeCloudCluster"] = resumeCloudCluster_ProcessAsync;
        processMap_["deleteCloudCluster"] = deleteCloudCluster_ProcessAsync;
        processMap_["executeOnController"] = executeOnController_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out var fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task ping_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp118 = new InternalStructs.ping_args();
        await tmp118.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp119 = new InternalStructs.ping_result();
        try
        {
          tmp119.Success = await _iAsync.ping(cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("ping", TMessageType.Reply, seqid), cancellationToken); 
          await tmp119.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp120)
        {
          var tmp121 = $"Error occurred in {GetType().FullName}: {tmp120.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp120, tmp121);
          else
            Console.Error.WriteLine(tmp121);
          var tmp122 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("ping", TMessageType.Exception, seqid), cancellationToken);
          await tmp122.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task clean_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp123 = new InternalStructs.clean_args();
        await tmp123.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp124 = new InternalStructs.clean_result();
        try
        {
          tmp124.Success = await _iAsync.clean(cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("clean", TMessageType.Reply, seqid), cancellationToken); 
          await tmp124.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp125)
        {
          var tmp126 = $"Error occurred in {GetType().FullName}: {tmp125.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp125, tmp126);
          else
            Console.Error.WriteLine(tmp126);
          var tmp127 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("clean", TMessageType.Exception, seqid), cancellationToken);
          await tmp127.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task exit_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp128 = new InternalStructs.exit_args();
        await tmp128.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp129 = new InternalStructs.exit_result();
        try
        {
          tmp129.Success = await _iAsync.exit(cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("exit", TMessageType.Reply, seqid), cancellationToken); 
          await tmp129.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp130)
        {
          var tmp131 = $"Error occurred in {GetType().FullName}: {tmp130.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp130, tmp131);
          else
            Console.Error.WriteLine(tmp131);
          var tmp132 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("exit", TMessageType.Exception, seqid), cancellationToken);
          await tmp132.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task createCluster_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp133 = new InternalStructs.createCluster_args();
        await tmp133.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp134 = new InternalStructs.createCluster_result();
        try
        {
          try
          {
            tmp134.Success = await _iAsync.createCluster(tmp133.HzVersion, tmp133.Xmlconfig, cancellationToken);
          }
          catch (global::Hazelcast.Testing.Remote.ServerException tmp135)
          {
            tmp134.ServerException = tmp135;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("createCluster", TMessageType.Reply, seqid), cancellationToken); 
          await tmp134.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp136)
        {
          var tmp137 = $"Error occurred in {GetType().FullName}: {tmp136.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp136, tmp137);
          else
            Console.Error.WriteLine(tmp137);
          var tmp138 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("createCluster", TMessageType.Exception, seqid), cancellationToken);
          await tmp138.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task createClusterKeepClusterName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp139 = new InternalStructs.createClusterKeepClusterName_args();
        await tmp139.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp140 = new InternalStructs.createClusterKeepClusterName_result();
        try
        {
          try
          {
            tmp140.Success = await _iAsync.createClusterKeepClusterName(tmp139.HzVersion, tmp139.Xmlconfig, cancellationToken);
          }
          catch (global::Hazelcast.Testing.Remote.ServerException tmp141)
          {
            tmp140.ServerException = tmp141;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("createClusterKeepClusterName", TMessageType.Reply, seqid), cancellationToken); 
          await tmp140.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp142)
        {
          var tmp143 = $"Error occurred in {GetType().FullName}: {tmp142.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp142, tmp143);
          else
            Console.Error.WriteLine(tmp143);
          var tmp144 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("createClusterKeepClusterName", TMessageType.Exception, seqid), cancellationToken);
          await tmp144.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task startMember_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp145 = new InternalStructs.startMember_args();
        await tmp145.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp146 = new InternalStructs.startMember_result();
        try
        {
          try
          {
            tmp146.Success = await _iAsync.startMember(tmp145.ClusterId, cancellationToken);
          }
          catch (global::Hazelcast.Testing.Remote.ServerException tmp147)
          {
            tmp146.ServerException = tmp147;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("startMember", TMessageType.Reply, seqid), cancellationToken); 
          await tmp146.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp148)
        {
          var tmp149 = $"Error occurred in {GetType().FullName}: {tmp148.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp148, tmp149);
          else
            Console.Error.WriteLine(tmp149);
          var tmp150 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("startMember", TMessageType.Exception, seqid), cancellationToken);
          await tmp150.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task shutdownMember_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp151 = new InternalStructs.shutdownMember_args();
        await tmp151.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp152 = new InternalStructs.shutdownMember_result();
        try
        {
          tmp152.Success = await _iAsync.shutdownMember(tmp151.ClusterId, tmp151.MemberId, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("shutdownMember", TMessageType.Reply, seqid), cancellationToken); 
          await tmp152.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp153)
        {
          var tmp154 = $"Error occurred in {GetType().FullName}: {tmp153.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp153, tmp154);
          else
            Console.Error.WriteLine(tmp154);
          var tmp155 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("shutdownMember", TMessageType.Exception, seqid), cancellationToken);
          await tmp155.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task terminateMember_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp156 = new InternalStructs.terminateMember_args();
        await tmp156.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp157 = new InternalStructs.terminateMember_result();
        try
        {
          tmp157.Success = await _iAsync.terminateMember(tmp156.ClusterId, tmp156.MemberId, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("terminateMember", TMessageType.Reply, seqid), cancellationToken); 
          await tmp157.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp158)
        {
          var tmp159 = $"Error occurred in {GetType().FullName}: {tmp158.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp158, tmp159);
          else
            Console.Error.WriteLine(tmp159);
          var tmp160 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("terminateMember", TMessageType.Exception, seqid), cancellationToken);
          await tmp160.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task suspendMember_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp161 = new InternalStructs.suspendMember_args();
        await tmp161.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp162 = new InternalStructs.suspendMember_result();
        try
        {
          tmp162.Success = await _iAsync.suspendMember(tmp161.ClusterId, tmp161.MemberId, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("suspendMember", TMessageType.Reply, seqid), cancellationToken); 
          await tmp162.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp163)
        {
          var tmp164 = $"Error occurred in {GetType().FullName}: {tmp163.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp163, tmp164);
          else
            Console.Error.WriteLine(tmp164);
          var tmp165 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("suspendMember", TMessageType.Exception, seqid), cancellationToken);
          await tmp165.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task resumeMember_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp166 = new InternalStructs.resumeMember_args();
        await tmp166.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp167 = new InternalStructs.resumeMember_result();
        try
        {
          tmp167.Success = await _iAsync.resumeMember(tmp166.ClusterId, tmp166.MemberId, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("resumeMember", TMessageType.Reply, seqid), cancellationToken); 
          await tmp167.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp168)
        {
          var tmp169 = $"Error occurred in {GetType().FullName}: {tmp168.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp168, tmp169);
          else
            Console.Error.WriteLine(tmp169);
          var tmp170 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("resumeMember", TMessageType.Exception, seqid), cancellationToken);
          await tmp170.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task shutdownCluster_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp171 = new InternalStructs.shutdownCluster_args();
        await tmp171.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp172 = new InternalStructs.shutdownCluster_result();
        try
        {
          tmp172.Success = await _iAsync.shutdownCluster(tmp171.ClusterId, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("shutdownCluster", TMessageType.Reply, seqid), cancellationToken); 
          await tmp172.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp173)
        {
          var tmp174 = $"Error occurred in {GetType().FullName}: {tmp173.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp173, tmp174);
          else
            Console.Error.WriteLine(tmp174);
          var tmp175 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("shutdownCluster", TMessageType.Exception, seqid), cancellationToken);
          await tmp175.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task terminateCluster_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp176 = new InternalStructs.terminateCluster_args();
        await tmp176.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp177 = new InternalStructs.terminateCluster_result();
        try
        {
          tmp177.Success = await _iAsync.terminateCluster(tmp176.ClusterId, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("terminateCluster", TMessageType.Reply, seqid), cancellationToken); 
          await tmp177.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp178)
        {
          var tmp179 = $"Error occurred in {GetType().FullName}: {tmp178.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp178, tmp179);
          else
            Console.Error.WriteLine(tmp179);
          var tmp180 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("terminateCluster", TMessageType.Exception, seqid), cancellationToken);
          await tmp180.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task splitMemberFromCluster_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp181 = new InternalStructs.splitMemberFromCluster_args();
        await tmp181.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp182 = new InternalStructs.splitMemberFromCluster_result();
        try
        {
          tmp182.Success = await _iAsync.splitMemberFromCluster(tmp181.MemberId, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("splitMemberFromCluster", TMessageType.Reply, seqid), cancellationToken); 
          await tmp182.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp183)
        {
          var tmp184 = $"Error occurred in {GetType().FullName}: {tmp183.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp183, tmp184);
          else
            Console.Error.WriteLine(tmp184);
          var tmp185 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("splitMemberFromCluster", TMessageType.Exception, seqid), cancellationToken);
          await tmp185.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task mergeMemberToCluster_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp186 = new InternalStructs.mergeMemberToCluster_args();
        await tmp186.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp187 = new InternalStructs.mergeMemberToCluster_result();
        try
        {
          tmp187.Success = await _iAsync.mergeMemberToCluster(tmp186.ClusterId, tmp186.MemberId, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("mergeMemberToCluster", TMessageType.Reply, seqid), cancellationToken); 
          await tmp187.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp188)
        {
          var tmp189 = $"Error occurred in {GetType().FullName}: {tmp188.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp188, tmp189);
          else
            Console.Error.WriteLine(tmp189);
          var tmp190 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("mergeMemberToCluster", TMessageType.Exception, seqid), cancellationToken);
          await tmp190.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task loginToCloudUsingEnvironment_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp191 = new InternalStructs.loginToCloudUsingEnvironment_args();
        await tmp191.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp192 = new InternalStructs.loginToCloudUsingEnvironment_result();
        try
        {
          try
          {
            await _iAsync.loginToCloudUsingEnvironment(cancellationToken);
          }
          catch (global::Hazelcast.Testing.Remote.CloudException tmp193)
          {
            tmp192.CloudException = tmp193;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("loginToCloudUsingEnvironment", TMessageType.Reply, seqid), cancellationToken); 
          await tmp192.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp194)
        {
          var tmp195 = $"Error occurred in {GetType().FullName}: {tmp194.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp194, tmp195);
          else
            Console.Error.WriteLine(tmp195);
          var tmp196 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("loginToCloudUsingEnvironment", TMessageType.Exception, seqid), cancellationToken);
          await tmp196.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task loginToCloud_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp197 = new InternalStructs.loginToCloud_args();
        await tmp197.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp198 = new InternalStructs.loginToCloud_result();
        try
        {
          try
          {
            await _iAsync.loginToCloud(tmp197.BaseUrl, tmp197.ApiKey, tmp197.ApiSecret, cancellationToken);
          }
          catch (global::Hazelcast.Testing.Remote.CloudException tmp199)
          {
            tmp198.CloudException = tmp199;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("loginToCloud", TMessageType.Reply, seqid), cancellationToken); 
          await tmp198.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp200)
        {
          var tmp201 = $"Error occurred in {GetType().FullName}: {tmp200.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp200, tmp201);
          else
            Console.Error.WriteLine(tmp201);
          var tmp202 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("loginToCloud", TMessageType.Exception, seqid), cancellationToken);
          await tmp202.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task createCloudCluster_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp203 = new InternalStructs.createCloudCluster_args();
        await tmp203.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp204 = new InternalStructs.createCloudCluster_result();
        try
        {
          try
          {
            tmp204.Success = await _iAsync.createCloudCluster(tmp203.HazelcastVersion, tmp203.IsTlsEnabled, cancellationToken);
          }
          catch (global::Hazelcast.Testing.Remote.CloudException tmp205)
          {
            tmp204.CloudException = tmp205;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("createCloudCluster", TMessageType.Reply, seqid), cancellationToken); 
          await tmp204.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp206)
        {
          var tmp207 = $"Error occurred in {GetType().FullName}: {tmp206.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp206, tmp207);
          else
            Console.Error.WriteLine(tmp207);
          var tmp208 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("createCloudCluster", TMessageType.Exception, seqid), cancellationToken);
          await tmp208.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getCloudCluster_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp209 = new InternalStructs.getCloudCluster_args();
        await tmp209.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp210 = new InternalStructs.getCloudCluster_result();
        try
        {
          try
          {
            tmp210.Success = await _iAsync.getCloudCluster(tmp209.CloudClusterId, cancellationToken);
          }
          catch (global::Hazelcast.Testing.Remote.CloudException tmp211)
          {
            tmp210.CloudException = tmp211;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getCloudCluster", TMessageType.Reply, seqid), cancellationToken); 
          await tmp210.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp212)
        {
          var tmp213 = $"Error occurred in {GetType().FullName}: {tmp212.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp212, tmp213);
          else
            Console.Error.WriteLine(tmp213);
          var tmp214 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getCloudCluster", TMessageType.Exception, seqid), cancellationToken);
          await tmp214.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task stopCloudCluster_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp215 = new InternalStructs.stopCloudCluster_args();
        await tmp215.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp216 = new InternalStructs.stopCloudCluster_result();
        try
        {
          try
          {
            tmp216.Success = await _iAsync.stopCloudCluster(tmp215.CloudClusterId, cancellationToken);
          }
          catch (global::Hazelcast.Testing.Remote.CloudException tmp217)
          {
            tmp216.CloudException = tmp217;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("stopCloudCluster", TMessageType.Reply, seqid), cancellationToken); 
          await tmp216.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp218)
        {
          var tmp219 = $"Error occurred in {GetType().FullName}: {tmp218.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp218, tmp219);
          else
            Console.Error.WriteLine(tmp219);
          var tmp220 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("stopCloudCluster", TMessageType.Exception, seqid), cancellationToken);
          await tmp220.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task resumeCloudCluster_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp221 = new InternalStructs.resumeCloudCluster_args();
        await tmp221.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp222 = new InternalStructs.resumeCloudCluster_result();
        try
        {
          try
          {
            tmp222.Success = await _iAsync.resumeCloudCluster(tmp221.CloudClusterId, cancellationToken);
          }
          catch (global::Hazelcast.Testing.Remote.CloudException tmp223)
          {
            tmp222.CloudException = tmp223;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("resumeCloudCluster", TMessageType.Reply, seqid), cancellationToken); 
          await tmp222.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp224)
        {
          var tmp225 = $"Error occurred in {GetType().FullName}: {tmp224.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp224, tmp225);
          else
            Console.Error.WriteLine(tmp225);
          var tmp226 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("resumeCloudCluster", TMessageType.Exception, seqid), cancellationToken);
          await tmp226.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task deleteCloudCluster_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp227 = new InternalStructs.deleteCloudCluster_args();
        await tmp227.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp228 = new InternalStructs.deleteCloudCluster_result();
        try
        {
          try
          {
            await _iAsync.deleteCloudCluster(tmp227.CloudClusterId, cancellationToken);
          }
          catch (global::Hazelcast.Testing.Remote.CloudException tmp229)
          {
            tmp228.CloudException = tmp229;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("deleteCloudCluster", TMessageType.Reply, seqid), cancellationToken); 
          await tmp228.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp230)
        {
          var tmp231 = $"Error occurred in {GetType().FullName}: {tmp230.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp230, tmp231);
          else
            Console.Error.WriteLine(tmp231);
          var tmp232 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("deleteCloudCluster", TMessageType.Exception, seqid), cancellationToken);
          await tmp232.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task executeOnController_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp233 = new InternalStructs.executeOnController_args();
        await tmp233.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp234 = new InternalStructs.executeOnController_result();
        try
        {
          tmp234.Success = await _iAsync.executeOnController(tmp233.ClusterId, tmp233.Script, tmp233.Lang, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("executeOnController", TMessageType.Reply, seqid), cancellationToken); 
          await tmp234.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp235)
        {
          var tmp236 = $"Error occurred in {GetType().FullName}: {tmp235.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp235, tmp236);
          else
            Console.Error.WriteLine(tmp236);
          var tmp237 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("executeOnController", TMessageType.Exception, seqid), cancellationToken);
          await tmp237.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class ping_args : TBase
      {

        public ping_args()
        {
        }

        public ping_args DeepCopy()
        {
          var tmp238 = new ping_args();
          return tmp238;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp239 = new TStruct("ping_args");
            await oprot.WriteStructBeginAsync(tmp239, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is ping_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp240 = new StringBuilder("ping_args(");
          tmp240.Append(')');
          return tmp240.ToString();
        }
      }


      public partial class ping_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public ping_result()
        {
        }

        public ping_result DeepCopy()
        {
          var tmp242 = new ping_result();
          if(__isset.success)
          {
            tmp242.Success = this.Success;
          }
          tmp242.__isset.success = this.__isset.success;
          return tmp242;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp243 = new TStruct("ping_result");
            await oprot.WriteStructBeginAsync(tmp243, cancellationToken);
            var tmp244 = new TField();

            if(this.__isset.success)
            {
              tmp244.Name = "Success";
              tmp244.Type = TType.Bool;
              tmp244.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp244, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is ping_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp245 = new StringBuilder("ping_result(");
          int tmp246 = 0;
          if(__isset.success)
          {
            if(0 < tmp246++) { tmp245.Append(", "); }
            tmp245.Append("Success: ");
            Success.ToString(tmp245);
          }
          tmp245.Append(')');
          return tmp245.ToString();
        }
      }


      public partial class clean_args : TBase
      {

        public clean_args()
        {
        }

        public clean_args DeepCopy()
        {
          var tmp247 = new clean_args();
          return tmp247;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp248 = new TStruct("clean_args");
            await oprot.WriteStructBeginAsync(tmp248, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is clean_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp249 = new StringBuilder("clean_args(");
          tmp249.Append(')');
          return tmp249.ToString();
        }
      }


      public partial class clean_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public clean_result()
        {
        }

        public clean_result DeepCopy()
        {
          var tmp251 = new clean_result();
          if(__isset.success)
          {
            tmp251.Success = this.Success;
          }
          tmp251.__isset.success = this.__isset.success;
          return tmp251;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp252 = new TStruct("clean_result");
            await oprot.WriteStructBeginAsync(tmp252, cancellationToken);
            var tmp253 = new TField();

            if(this.__isset.success)
            {
              tmp253.Name = "Success";
              tmp253.Type = TType.Bool;
              tmp253.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp253, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is clean_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp254 = new StringBuilder("clean_result(");
          int tmp255 = 0;
          if(__isset.success)
          {
            if(0 < tmp255++) { tmp254.Append(", "); }
            tmp254.Append("Success: ");
            Success.ToString(tmp254);
          }
          tmp254.Append(')');
          return tmp254.ToString();
        }
      }


      public partial class exit_args : TBase
      {

        public exit_args()
        {
        }

        public exit_args DeepCopy()
        {
          var tmp256 = new exit_args();
          return tmp256;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp257 = new TStruct("exit_args");
            await oprot.WriteStructBeginAsync(tmp257, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is exit_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp258 = new StringBuilder("exit_args(");
          tmp258.Append(')');
          return tmp258.ToString();
        }
      }


      public partial class exit_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public exit_result()
        {
        }

        public exit_result DeepCopy()
        {
          var tmp260 = new exit_result();
          if(__isset.success)
          {
            tmp260.Success = this.Success;
          }
          tmp260.__isset.success = this.__isset.success;
          return tmp260;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp261 = new TStruct("exit_result");
            await oprot.WriteStructBeginAsync(tmp261, cancellationToken);
            var tmp262 = new TField();

            if(this.__isset.success)
            {
              tmp262.Name = "Success";
              tmp262.Type = TType.Bool;
              tmp262.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp262, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is exit_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp263 = new StringBuilder("exit_result(");
          int tmp264 = 0;
          if(__isset.success)
          {
            if(0 < tmp264++) { tmp263.Append(", "); }
            tmp263.Append("Success: ");
            Success.ToString(tmp263);
          }
          tmp263.Append(')');
          return tmp263.ToString();
        }
      }


      public partial class createCluster_args : TBase
      {
        private string _hzVersion;
        private string _xmlconfig;

        public string HzVersion
        {
          get
          {
            return _hzVersion;
          }
          set
          {
            __isset.hzVersion = true;
            this._hzVersion = value;
          }
        }

        public string Xmlconfig
        {
          get
          {
            return _xmlconfig;
          }
          set
          {
            __isset.xmlconfig = true;
            this._xmlconfig = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool hzVersion;
          public bool xmlconfig;
        }

        public createCluster_args()
        {
        }

        public createCluster_args DeepCopy()
        {
          var tmp265 = new createCluster_args();
          if((HzVersion != null) && __isset.hzVersion)
          {
            tmp265.HzVersion = this.HzVersion;
          }
          tmp265.__isset.hzVersion = this.__isset.hzVersion;
          if((Xmlconfig != null) && __isset.xmlconfig)
          {
            tmp265.Xmlconfig = this.Xmlconfig;
          }
          tmp265.__isset.xmlconfig = this.__isset.xmlconfig;
          return tmp265;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    HzVersion = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Xmlconfig = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp266 = new TStruct("createCluster_args");
            await oprot.WriteStructBeginAsync(tmp266, cancellationToken);
            var tmp267 = new TField();
            if((HzVersion != null) && __isset.hzVersion)
            {
              tmp267.Name = "hzVersion";
              tmp267.Type = TType.String;
              tmp267.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp267, cancellationToken);
              await oprot.WriteStringAsync(HzVersion, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Xmlconfig != null) && __isset.xmlconfig)
            {
              tmp267.Name = "xmlconfig";
              tmp267.Type = TType.String;
              tmp267.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp267, cancellationToken);
              await oprot.WriteStringAsync(Xmlconfig, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createCluster_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.hzVersion == other.__isset.hzVersion) && ((!__isset.hzVersion) || (global::System.Object.Equals(HzVersion, other.HzVersion))))
            && ((__isset.xmlconfig == other.__isset.xmlconfig) && ((!__isset.xmlconfig) || (global::System.Object.Equals(Xmlconfig, other.Xmlconfig))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((HzVersion != null) && __isset.hzVersion)
            {
              hashcode = (hashcode * 397) + HzVersion.GetHashCode();
            }
            if((Xmlconfig != null) && __isset.xmlconfig)
            {
              hashcode = (hashcode * 397) + Xmlconfig.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp268 = new StringBuilder("createCluster_args(");
          int tmp269 = 0;
          if((HzVersion != null) && __isset.hzVersion)
          {
            if(0 < tmp269++) { tmp268.Append(", "); }
            tmp268.Append("HzVersion: ");
            HzVersion.ToString(tmp268);
          }
          if((Xmlconfig != null) && __isset.xmlconfig)
          {
            if(0 < tmp269++) { tmp268.Append(", "); }
            tmp268.Append("Xmlconfig: ");
            Xmlconfig.ToString(tmp268);
          }
          tmp268.Append(')');
          return tmp268.ToString();
        }
      }


      public partial class createCluster_result : TBase
      {
        private global::Hazelcast.Testing.Remote.Cluster _success;
        private global::Hazelcast.Testing.Remote.ServerException _serverException;

        public global::Hazelcast.Testing.Remote.Cluster Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Hazelcast.Testing.Remote.ServerException ServerException
        {
          get
          {
            return _serverException;
          }
          set
          {
            __isset.serverException = true;
            this._serverException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool serverException;
        }

        public createCluster_result()
        {
        }

        public createCluster_result DeepCopy()
        {
          var tmp270 = new createCluster_result();
          if((Success != null) && __isset.success)
          {
            tmp270.Success = (global::Hazelcast.Testing.Remote.Cluster)this.Success.DeepCopy();
          }
          tmp270.__isset.success = this.__isset.success;
          if((ServerException != null) && __isset.serverException)
          {
            tmp270.ServerException = (global::Hazelcast.Testing.Remote.ServerException)this.ServerException.DeepCopy();
          }
          tmp270.__isset.serverException = this.__isset.serverException;
          return tmp270;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Hazelcast.Testing.Remote.Cluster();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    ServerException = new global::Hazelcast.Testing.Remote.ServerException();
                    await ServerException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp271 = new TStruct("createCluster_result");
            await oprot.WriteStructBeginAsync(tmp271, cancellationToken);
            var tmp272 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp272.Name = "Success";
                tmp272.Type = TType.Struct;
                tmp272.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp272, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.serverException)
            {
              if (ServerException != null)
              {
                tmp272.Name = "ServerException";
                tmp272.Type = TType.Struct;
                tmp272.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp272, cancellationToken);
                await ServerException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createCluster_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.serverException == other.__isset.serverException) && ((!__isset.serverException) || (global::System.Object.Equals(ServerException, other.ServerException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((ServerException != null) && __isset.serverException)
            {
              hashcode = (hashcode * 397) + ServerException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp273 = new StringBuilder("createCluster_result(");
          int tmp274 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp274++) { tmp273.Append(", "); }
            tmp273.Append("Success: ");
            Success.ToString(tmp273);
          }
          if((ServerException != null) && __isset.serverException)
          {
            if(0 < tmp274++) { tmp273.Append(", "); }
            tmp273.Append("ServerException: ");
            ServerException.ToString(tmp273);
          }
          tmp273.Append(')');
          return tmp273.ToString();
        }
      }


      public partial class createClusterKeepClusterName_args : TBase
      {
        private string _hzVersion;
        private string _xmlconfig;

        public string HzVersion
        {
          get
          {
            return _hzVersion;
          }
          set
          {
            __isset.hzVersion = true;
            this._hzVersion = value;
          }
        }

        public string Xmlconfig
        {
          get
          {
            return _xmlconfig;
          }
          set
          {
            __isset.xmlconfig = true;
            this._xmlconfig = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool hzVersion;
          public bool xmlconfig;
        }

        public createClusterKeepClusterName_args()
        {
        }

        public createClusterKeepClusterName_args DeepCopy()
        {
          var tmp275 = new createClusterKeepClusterName_args();
          if((HzVersion != null) && __isset.hzVersion)
          {
            tmp275.HzVersion = this.HzVersion;
          }
          tmp275.__isset.hzVersion = this.__isset.hzVersion;
          if((Xmlconfig != null) && __isset.xmlconfig)
          {
            tmp275.Xmlconfig = this.Xmlconfig;
          }
          tmp275.__isset.xmlconfig = this.__isset.xmlconfig;
          return tmp275;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    HzVersion = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Xmlconfig = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp276 = new TStruct("createClusterKeepClusterName_args");
            await oprot.WriteStructBeginAsync(tmp276, cancellationToken);
            var tmp277 = new TField();
            if((HzVersion != null) && __isset.hzVersion)
            {
              tmp277.Name = "hzVersion";
              tmp277.Type = TType.String;
              tmp277.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp277, cancellationToken);
              await oprot.WriteStringAsync(HzVersion, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Xmlconfig != null) && __isset.xmlconfig)
            {
              tmp277.Name = "xmlconfig";
              tmp277.Type = TType.String;
              tmp277.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp277, cancellationToken);
              await oprot.WriteStringAsync(Xmlconfig, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createClusterKeepClusterName_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.hzVersion == other.__isset.hzVersion) && ((!__isset.hzVersion) || (global::System.Object.Equals(HzVersion, other.HzVersion))))
            && ((__isset.xmlconfig == other.__isset.xmlconfig) && ((!__isset.xmlconfig) || (global::System.Object.Equals(Xmlconfig, other.Xmlconfig))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((HzVersion != null) && __isset.hzVersion)
            {
              hashcode = (hashcode * 397) + HzVersion.GetHashCode();
            }
            if((Xmlconfig != null) && __isset.xmlconfig)
            {
              hashcode = (hashcode * 397) + Xmlconfig.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp278 = new StringBuilder("createClusterKeepClusterName_args(");
          int tmp279 = 0;
          if((HzVersion != null) && __isset.hzVersion)
          {
            if(0 < tmp279++) { tmp278.Append(", "); }
            tmp278.Append("HzVersion: ");
            HzVersion.ToString(tmp278);
          }
          if((Xmlconfig != null) && __isset.xmlconfig)
          {
            if(0 < tmp279++) { tmp278.Append(", "); }
            tmp278.Append("Xmlconfig: ");
            Xmlconfig.ToString(tmp278);
          }
          tmp278.Append(')');
          return tmp278.ToString();
        }
      }


      public partial class createClusterKeepClusterName_result : TBase
      {
        private global::Hazelcast.Testing.Remote.Cluster _success;
        private global::Hazelcast.Testing.Remote.ServerException _serverException;

        public global::Hazelcast.Testing.Remote.Cluster Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Hazelcast.Testing.Remote.ServerException ServerException
        {
          get
          {
            return _serverException;
          }
          set
          {
            __isset.serverException = true;
            this._serverException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool serverException;
        }

        public createClusterKeepClusterName_result()
        {
        }

        public createClusterKeepClusterName_result DeepCopy()
        {
          var tmp280 = new createClusterKeepClusterName_result();
          if((Success != null) && __isset.success)
          {
            tmp280.Success = (global::Hazelcast.Testing.Remote.Cluster)this.Success.DeepCopy();
          }
          tmp280.__isset.success = this.__isset.success;
          if((ServerException != null) && __isset.serverException)
          {
            tmp280.ServerException = (global::Hazelcast.Testing.Remote.ServerException)this.ServerException.DeepCopy();
          }
          tmp280.__isset.serverException = this.__isset.serverException;
          return tmp280;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Hazelcast.Testing.Remote.Cluster();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    ServerException = new global::Hazelcast.Testing.Remote.ServerException();
                    await ServerException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp281 = new TStruct("createClusterKeepClusterName_result");
            await oprot.WriteStructBeginAsync(tmp281, cancellationToken);
            var tmp282 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp282.Name = "Success";
                tmp282.Type = TType.Struct;
                tmp282.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp282, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.serverException)
            {
              if (ServerException != null)
              {
                tmp282.Name = "ServerException";
                tmp282.Type = TType.Struct;
                tmp282.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp282, cancellationToken);
                await ServerException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createClusterKeepClusterName_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.serverException == other.__isset.serverException) && ((!__isset.serverException) || (global::System.Object.Equals(ServerException, other.ServerException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((ServerException != null) && __isset.serverException)
            {
              hashcode = (hashcode * 397) + ServerException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp283 = new StringBuilder("createClusterKeepClusterName_result(");
          int tmp284 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp284++) { tmp283.Append(", "); }
            tmp283.Append("Success: ");
            Success.ToString(tmp283);
          }
          if((ServerException != null) && __isset.serverException)
          {
            if(0 < tmp284++) { tmp283.Append(", "); }
            tmp283.Append("ServerException: ");
            ServerException.ToString(tmp283);
          }
          tmp283.Append(')');
          return tmp283.ToString();
        }
      }


      public partial class startMember_args : TBase
      {
        private string _clusterId;

        public string ClusterId
        {
          get
          {
            return _clusterId;
          }
          set
          {
            __isset.clusterId = true;
            this._clusterId = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool clusterId;
        }

        public startMember_args()
        {
        }

        public startMember_args DeepCopy()
        {
          var tmp285 = new startMember_args();
          if((ClusterId != null) && __isset.clusterId)
          {
            tmp285.ClusterId = this.ClusterId;
          }
          tmp285.__isset.clusterId = this.__isset.clusterId;
          return tmp285;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    ClusterId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp286 = new TStruct("startMember_args");
            await oprot.WriteStructBeginAsync(tmp286, cancellationToken);
            var tmp287 = new TField();
            if((ClusterId != null) && __isset.clusterId)
            {
              tmp287.Name = "clusterId";
              tmp287.Type = TType.String;
              tmp287.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp287, cancellationToken);
              await oprot.WriteStringAsync(ClusterId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is startMember_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.clusterId == other.__isset.clusterId) && ((!__isset.clusterId) || (global::System.Object.Equals(ClusterId, other.ClusterId))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((ClusterId != null) && __isset.clusterId)
            {
              hashcode = (hashcode * 397) + ClusterId.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp288 = new StringBuilder("startMember_args(");
          int tmp289 = 0;
          if((ClusterId != null) && __isset.clusterId)
          {
            if(0 < tmp289++) { tmp288.Append(", "); }
            tmp288.Append("ClusterId: ");
            ClusterId.ToString(tmp288);
          }
          tmp288.Append(')');
          return tmp288.ToString();
        }
      }


      public partial class startMember_result : TBase
      {
        private global::Hazelcast.Testing.Remote.Member _success;
        private global::Hazelcast.Testing.Remote.ServerException _serverException;

        public global::Hazelcast.Testing.Remote.Member Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Hazelcast.Testing.Remote.ServerException ServerException
        {
          get
          {
            return _serverException;
          }
          set
          {
            __isset.serverException = true;
            this._serverException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool serverException;
        }

        public startMember_result()
        {
        }

        public startMember_result DeepCopy()
        {
          var tmp290 = new startMember_result();
          if((Success != null) && __isset.success)
          {
            tmp290.Success = (global::Hazelcast.Testing.Remote.Member)this.Success.DeepCopy();
          }
          tmp290.__isset.success = this.__isset.success;
          if((ServerException != null) && __isset.serverException)
          {
            tmp290.ServerException = (global::Hazelcast.Testing.Remote.ServerException)this.ServerException.DeepCopy();
          }
          tmp290.__isset.serverException = this.__isset.serverException;
          return tmp290;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Hazelcast.Testing.Remote.Member();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    ServerException = new global::Hazelcast.Testing.Remote.ServerException();
                    await ServerException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp291 = new TStruct("startMember_result");
            await oprot.WriteStructBeginAsync(tmp291, cancellationToken);
            var tmp292 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp292.Name = "Success";
                tmp292.Type = TType.Struct;
                tmp292.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp292, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.serverException)
            {
              if (ServerException != null)
              {
                tmp292.Name = "ServerException";
                tmp292.Type = TType.Struct;
                tmp292.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp292, cancellationToken);
                await ServerException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is startMember_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.serverException == other.__isset.serverException) && ((!__isset.serverException) || (global::System.Object.Equals(ServerException, other.ServerException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((ServerException != null) && __isset.serverException)
            {
              hashcode = (hashcode * 397) + ServerException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp293 = new StringBuilder("startMember_result(");
          int tmp294 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp294++) { tmp293.Append(", "); }
            tmp293.Append("Success: ");
            Success.ToString(tmp293);
          }
          if((ServerException != null) && __isset.serverException)
          {
            if(0 < tmp294++) { tmp293.Append(", "); }
            tmp293.Append("ServerException: ");
            ServerException.ToString(tmp293);
          }
          tmp293.Append(')');
          return tmp293.ToString();
        }
      }


      public partial class shutdownMember_args : TBase
      {
        private string _clusterId;
        private string _memberId;

        public string ClusterId
        {
          get
          {
            return _clusterId;
          }
          set
          {
            __isset.clusterId = true;
            this._clusterId = value;
          }
        }

        public string MemberId
        {
          get
          {
            return _memberId;
          }
          set
          {
            __isset.memberId = true;
            this._memberId = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool clusterId;
          public bool memberId;
        }

        public shutdownMember_args()
        {
        }

        public shutdownMember_args DeepCopy()
        {
          var tmp295 = new shutdownMember_args();
          if((ClusterId != null) && __isset.clusterId)
          {
            tmp295.ClusterId = this.ClusterId;
          }
          tmp295.__isset.clusterId = this.__isset.clusterId;
          if((MemberId != null) && __isset.memberId)
          {
            tmp295.MemberId = this.MemberId;
          }
          tmp295.__isset.memberId = this.__isset.memberId;
          return tmp295;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    ClusterId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    MemberId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp296 = new TStruct("shutdownMember_args");
            await oprot.WriteStructBeginAsync(tmp296, cancellationToken);
            var tmp297 = new TField();
            if((ClusterId != null) && __isset.clusterId)
            {
              tmp297.Name = "clusterId";
              tmp297.Type = TType.String;
              tmp297.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp297, cancellationToken);
              await oprot.WriteStringAsync(ClusterId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((MemberId != null) && __isset.memberId)
            {
              tmp297.Name = "memberId";
              tmp297.Type = TType.String;
              tmp297.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp297, cancellationToken);
              await oprot.WriteStringAsync(MemberId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is shutdownMember_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.clusterId == other.__isset.clusterId) && ((!__isset.clusterId) || (global::System.Object.Equals(ClusterId, other.ClusterId))))
            && ((__isset.memberId == other.__isset.memberId) && ((!__isset.memberId) || (global::System.Object.Equals(MemberId, other.MemberId))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((ClusterId != null) && __isset.clusterId)
            {
              hashcode = (hashcode * 397) + ClusterId.GetHashCode();
            }
            if((MemberId != null) && __isset.memberId)
            {
              hashcode = (hashcode * 397) + MemberId.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp298 = new StringBuilder("shutdownMember_args(");
          int tmp299 = 0;
          if((ClusterId != null) && __isset.clusterId)
          {
            if(0 < tmp299++) { tmp298.Append(", "); }
            tmp298.Append("ClusterId: ");
            ClusterId.ToString(tmp298);
          }
          if((MemberId != null) && __isset.memberId)
          {
            if(0 < tmp299++) { tmp298.Append(", "); }
            tmp298.Append("MemberId: ");
            MemberId.ToString(tmp298);
          }
          tmp298.Append(')');
          return tmp298.ToString();
        }
      }


      public partial class shutdownMember_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public shutdownMember_result()
        {
        }

        public shutdownMember_result DeepCopy()
        {
          var tmp300 = new shutdownMember_result();
          if(__isset.success)
          {
            tmp300.Success = this.Success;
          }
          tmp300.__isset.success = this.__isset.success;
          return tmp300;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp301 = new TStruct("shutdownMember_result");
            await oprot.WriteStructBeginAsync(tmp301, cancellationToken);
            var tmp302 = new TField();

            if(this.__isset.success)
            {
              tmp302.Name = "Success";
              tmp302.Type = TType.Bool;
              tmp302.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp302, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is shutdownMember_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp303 = new StringBuilder("shutdownMember_result(");
          int tmp304 = 0;
          if(__isset.success)
          {
            if(0 < tmp304++) { tmp303.Append(", "); }
            tmp303.Append("Success: ");
            Success.ToString(tmp303);
          }
          tmp303.Append(')');
          return tmp303.ToString();
        }
      }


      public partial class terminateMember_args : TBase
      {
        private string _clusterId;
        private string _memberId;

        public string ClusterId
        {
          get
          {
            return _clusterId;
          }
          set
          {
            __isset.clusterId = true;
            this._clusterId = value;
          }
        }

        public string MemberId
        {
          get
          {
            return _memberId;
          }
          set
          {
            __isset.memberId = true;
            this._memberId = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool clusterId;
          public bool memberId;
        }

        public terminateMember_args()
        {
        }

        public terminateMember_args DeepCopy()
        {
          var tmp305 = new terminateMember_args();
          if((ClusterId != null) && __isset.clusterId)
          {
            tmp305.ClusterId = this.ClusterId;
          }
          tmp305.__isset.clusterId = this.__isset.clusterId;
          if((MemberId != null) && __isset.memberId)
          {
            tmp305.MemberId = this.MemberId;
          }
          tmp305.__isset.memberId = this.__isset.memberId;
          return tmp305;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    ClusterId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    MemberId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp306 = new TStruct("terminateMember_args");
            await oprot.WriteStructBeginAsync(tmp306, cancellationToken);
            var tmp307 = new TField();
            if((ClusterId != null) && __isset.clusterId)
            {
              tmp307.Name = "clusterId";
              tmp307.Type = TType.String;
              tmp307.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp307, cancellationToken);
              await oprot.WriteStringAsync(ClusterId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((MemberId != null) && __isset.memberId)
            {
              tmp307.Name = "memberId";
              tmp307.Type = TType.String;
              tmp307.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp307, cancellationToken);
              await oprot.WriteStringAsync(MemberId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is terminateMember_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.clusterId == other.__isset.clusterId) && ((!__isset.clusterId) || (global::System.Object.Equals(ClusterId, other.ClusterId))))
            && ((__isset.memberId == other.__isset.memberId) && ((!__isset.memberId) || (global::System.Object.Equals(MemberId, other.MemberId))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((ClusterId != null) && __isset.clusterId)
            {
              hashcode = (hashcode * 397) + ClusterId.GetHashCode();
            }
            if((MemberId != null) && __isset.memberId)
            {
              hashcode = (hashcode * 397) + MemberId.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp308 = new StringBuilder("terminateMember_args(");
          int tmp309 = 0;
          if((ClusterId != null) && __isset.clusterId)
          {
            if(0 < tmp309++) { tmp308.Append(", "); }
            tmp308.Append("ClusterId: ");
            ClusterId.ToString(tmp308);
          }
          if((MemberId != null) && __isset.memberId)
          {
            if(0 < tmp309++) { tmp308.Append(", "); }
            tmp308.Append("MemberId: ");
            MemberId.ToString(tmp308);
          }
          tmp308.Append(')');
          return tmp308.ToString();
        }
      }


      public partial class terminateMember_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public terminateMember_result()
        {
        }

        public terminateMember_result DeepCopy()
        {
          var tmp310 = new terminateMember_result();
          if(__isset.success)
          {
            tmp310.Success = this.Success;
          }
          tmp310.__isset.success = this.__isset.success;
          return tmp310;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp311 = new TStruct("terminateMember_result");
            await oprot.WriteStructBeginAsync(tmp311, cancellationToken);
            var tmp312 = new TField();

            if(this.__isset.success)
            {
              tmp312.Name = "Success";
              tmp312.Type = TType.Bool;
              tmp312.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp312, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is terminateMember_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp313 = new StringBuilder("terminateMember_result(");
          int tmp314 = 0;
          if(__isset.success)
          {
            if(0 < tmp314++) { tmp313.Append(", "); }
            tmp313.Append("Success: ");
            Success.ToString(tmp313);
          }
          tmp313.Append(')');
          return tmp313.ToString();
        }
      }


      public partial class suspendMember_args : TBase
      {
        private string _clusterId;
        private string _memberId;

        public string ClusterId
        {
          get
          {
            return _clusterId;
          }
          set
          {
            __isset.clusterId = true;
            this._clusterId = value;
          }
        }

        public string MemberId
        {
          get
          {
            return _memberId;
          }
          set
          {
            __isset.memberId = true;
            this._memberId = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool clusterId;
          public bool memberId;
        }

        public suspendMember_args()
        {
        }

        public suspendMember_args DeepCopy()
        {
          var tmp315 = new suspendMember_args();
          if((ClusterId != null) && __isset.clusterId)
          {
            tmp315.ClusterId = this.ClusterId;
          }
          tmp315.__isset.clusterId = this.__isset.clusterId;
          if((MemberId != null) && __isset.memberId)
          {
            tmp315.MemberId = this.MemberId;
          }
          tmp315.__isset.memberId = this.__isset.memberId;
          return tmp315;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    ClusterId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    MemberId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp316 = new TStruct("suspendMember_args");
            await oprot.WriteStructBeginAsync(tmp316, cancellationToken);
            var tmp317 = new TField();
            if((ClusterId != null) && __isset.clusterId)
            {
              tmp317.Name = "clusterId";
              tmp317.Type = TType.String;
              tmp317.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp317, cancellationToken);
              await oprot.WriteStringAsync(ClusterId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((MemberId != null) && __isset.memberId)
            {
              tmp317.Name = "memberId";
              tmp317.Type = TType.String;
              tmp317.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp317, cancellationToken);
              await oprot.WriteStringAsync(MemberId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is suspendMember_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.clusterId == other.__isset.clusterId) && ((!__isset.clusterId) || (global::System.Object.Equals(ClusterId, other.ClusterId))))
            && ((__isset.memberId == other.__isset.memberId) && ((!__isset.memberId) || (global::System.Object.Equals(MemberId, other.MemberId))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((ClusterId != null) && __isset.clusterId)
            {
              hashcode = (hashcode * 397) + ClusterId.GetHashCode();
            }
            if((MemberId != null) && __isset.memberId)
            {
              hashcode = (hashcode * 397) + MemberId.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp318 = new StringBuilder("suspendMember_args(");
          int tmp319 = 0;
          if((ClusterId != null) && __isset.clusterId)
          {
            if(0 < tmp319++) { tmp318.Append(", "); }
            tmp318.Append("ClusterId: ");
            ClusterId.ToString(tmp318);
          }
          if((MemberId != null) && __isset.memberId)
          {
            if(0 < tmp319++) { tmp318.Append(", "); }
            tmp318.Append("MemberId: ");
            MemberId.ToString(tmp318);
          }
          tmp318.Append(')');
          return tmp318.ToString();
        }
      }


      public partial class suspendMember_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public suspendMember_result()
        {
        }

        public suspendMember_result DeepCopy()
        {
          var tmp320 = new suspendMember_result();
          if(__isset.success)
          {
            tmp320.Success = this.Success;
          }
          tmp320.__isset.success = this.__isset.success;
          return tmp320;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp321 = new TStruct("suspendMember_result");
            await oprot.WriteStructBeginAsync(tmp321, cancellationToken);
            var tmp322 = new TField();

            if(this.__isset.success)
            {
              tmp322.Name = "Success";
              tmp322.Type = TType.Bool;
              tmp322.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp322, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is suspendMember_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp323 = new StringBuilder("suspendMember_result(");
          int tmp324 = 0;
          if(__isset.success)
          {
            if(0 < tmp324++) { tmp323.Append(", "); }
            tmp323.Append("Success: ");
            Success.ToString(tmp323);
          }
          tmp323.Append(')');
          return tmp323.ToString();
        }
      }


      public partial class resumeMember_args : TBase
      {
        private string _clusterId;
        private string _memberId;

        public string ClusterId
        {
          get
          {
            return _clusterId;
          }
          set
          {
            __isset.clusterId = true;
            this._clusterId = value;
          }
        }

        public string MemberId
        {
          get
          {
            return _memberId;
          }
          set
          {
            __isset.memberId = true;
            this._memberId = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool clusterId;
          public bool memberId;
        }

        public resumeMember_args()
        {
        }

        public resumeMember_args DeepCopy()
        {
          var tmp325 = new resumeMember_args();
          if((ClusterId != null) && __isset.clusterId)
          {
            tmp325.ClusterId = this.ClusterId;
          }
          tmp325.__isset.clusterId = this.__isset.clusterId;
          if((MemberId != null) && __isset.memberId)
          {
            tmp325.MemberId = this.MemberId;
          }
          tmp325.__isset.memberId = this.__isset.memberId;
          return tmp325;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    ClusterId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    MemberId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp326 = new TStruct("resumeMember_args");
            await oprot.WriteStructBeginAsync(tmp326, cancellationToken);
            var tmp327 = new TField();
            if((ClusterId != null) && __isset.clusterId)
            {
              tmp327.Name = "clusterId";
              tmp327.Type = TType.String;
              tmp327.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp327, cancellationToken);
              await oprot.WriteStringAsync(ClusterId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((MemberId != null) && __isset.memberId)
            {
              tmp327.Name = "memberId";
              tmp327.Type = TType.String;
              tmp327.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp327, cancellationToken);
              await oprot.WriteStringAsync(MemberId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is resumeMember_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.clusterId == other.__isset.clusterId) && ((!__isset.clusterId) || (global::System.Object.Equals(ClusterId, other.ClusterId))))
            && ((__isset.memberId == other.__isset.memberId) && ((!__isset.memberId) || (global::System.Object.Equals(MemberId, other.MemberId))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((ClusterId != null) && __isset.clusterId)
            {
              hashcode = (hashcode * 397) + ClusterId.GetHashCode();
            }
            if((MemberId != null) && __isset.memberId)
            {
              hashcode = (hashcode * 397) + MemberId.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp328 = new StringBuilder("resumeMember_args(");
          int tmp329 = 0;
          if((ClusterId != null) && __isset.clusterId)
          {
            if(0 < tmp329++) { tmp328.Append(", "); }
            tmp328.Append("ClusterId: ");
            ClusterId.ToString(tmp328);
          }
          if((MemberId != null) && __isset.memberId)
          {
            if(0 < tmp329++) { tmp328.Append(", "); }
            tmp328.Append("MemberId: ");
            MemberId.ToString(tmp328);
          }
          tmp328.Append(')');
          return tmp328.ToString();
        }
      }


      public partial class resumeMember_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public resumeMember_result()
        {
        }

        public resumeMember_result DeepCopy()
        {
          var tmp330 = new resumeMember_result();
          if(__isset.success)
          {
            tmp330.Success = this.Success;
          }
          tmp330.__isset.success = this.__isset.success;
          return tmp330;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp331 = new TStruct("resumeMember_result");
            await oprot.WriteStructBeginAsync(tmp331, cancellationToken);
            var tmp332 = new TField();

            if(this.__isset.success)
            {
              tmp332.Name = "Success";
              tmp332.Type = TType.Bool;
              tmp332.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp332, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is resumeMember_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp333 = new StringBuilder("resumeMember_result(");
          int tmp334 = 0;
          if(__isset.success)
          {
            if(0 < tmp334++) { tmp333.Append(", "); }
            tmp333.Append("Success: ");
            Success.ToString(tmp333);
          }
          tmp333.Append(')');
          return tmp333.ToString();
        }
      }


      public partial class shutdownCluster_args : TBase
      {
        private string _clusterId;

        public string ClusterId
        {
          get
          {
            return _clusterId;
          }
          set
          {
            __isset.clusterId = true;
            this._clusterId = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool clusterId;
        }

        public shutdownCluster_args()
        {
        }

        public shutdownCluster_args DeepCopy()
        {
          var tmp335 = new shutdownCluster_args();
          if((ClusterId != null) && __isset.clusterId)
          {
            tmp335.ClusterId = this.ClusterId;
          }
          tmp335.__isset.clusterId = this.__isset.clusterId;
          return tmp335;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    ClusterId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp336 = new TStruct("shutdownCluster_args");
            await oprot.WriteStructBeginAsync(tmp336, cancellationToken);
            var tmp337 = new TField();
            if((ClusterId != null) && __isset.clusterId)
            {
              tmp337.Name = "clusterId";
              tmp337.Type = TType.String;
              tmp337.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp337, cancellationToken);
              await oprot.WriteStringAsync(ClusterId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is shutdownCluster_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.clusterId == other.__isset.clusterId) && ((!__isset.clusterId) || (global::System.Object.Equals(ClusterId, other.ClusterId))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((ClusterId != null) && __isset.clusterId)
            {
              hashcode = (hashcode * 397) + ClusterId.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp338 = new StringBuilder("shutdownCluster_args(");
          int tmp339 = 0;
          if((ClusterId != null) && __isset.clusterId)
          {
            if(0 < tmp339++) { tmp338.Append(", "); }
            tmp338.Append("ClusterId: ");
            ClusterId.ToString(tmp338);
          }
          tmp338.Append(')');
          return tmp338.ToString();
        }
      }


      public partial class shutdownCluster_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public shutdownCluster_result()
        {
        }

        public shutdownCluster_result DeepCopy()
        {
          var tmp340 = new shutdownCluster_result();
          if(__isset.success)
          {
            tmp340.Success = this.Success;
          }
          tmp340.__isset.success = this.__isset.success;
          return tmp340;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp341 = new TStruct("shutdownCluster_result");
            await oprot.WriteStructBeginAsync(tmp341, cancellationToken);
            var tmp342 = new TField();

            if(this.__isset.success)
            {
              tmp342.Name = "Success";
              tmp342.Type = TType.Bool;
              tmp342.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp342, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is shutdownCluster_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp343 = new StringBuilder("shutdownCluster_result(");
          int tmp344 = 0;
          if(__isset.success)
          {
            if(0 < tmp344++) { tmp343.Append(", "); }
            tmp343.Append("Success: ");
            Success.ToString(tmp343);
          }
          tmp343.Append(')');
          return tmp343.ToString();
        }
      }


      public partial class terminateCluster_args : TBase
      {
        private string _clusterId;

        public string ClusterId
        {
          get
          {
            return _clusterId;
          }
          set
          {
            __isset.clusterId = true;
            this._clusterId = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool clusterId;
        }

        public terminateCluster_args()
        {
        }

        public terminateCluster_args DeepCopy()
        {
          var tmp345 = new terminateCluster_args();
          if((ClusterId != null) && __isset.clusterId)
          {
            tmp345.ClusterId = this.ClusterId;
          }
          tmp345.__isset.clusterId = this.__isset.clusterId;
          return tmp345;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    ClusterId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp346 = new TStruct("terminateCluster_args");
            await oprot.WriteStructBeginAsync(tmp346, cancellationToken);
            var tmp347 = new TField();
            if((ClusterId != null) && __isset.clusterId)
            {
              tmp347.Name = "clusterId";
              tmp347.Type = TType.String;
              tmp347.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp347, cancellationToken);
              await oprot.WriteStringAsync(ClusterId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is terminateCluster_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.clusterId == other.__isset.clusterId) && ((!__isset.clusterId) || (global::System.Object.Equals(ClusterId, other.ClusterId))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((ClusterId != null) && __isset.clusterId)
            {
              hashcode = (hashcode * 397) + ClusterId.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp348 = new StringBuilder("terminateCluster_args(");
          int tmp349 = 0;
          if((ClusterId != null) && __isset.clusterId)
          {
            if(0 < tmp349++) { tmp348.Append(", "); }
            tmp348.Append("ClusterId: ");
            ClusterId.ToString(tmp348);
          }
          tmp348.Append(')');
          return tmp348.ToString();
        }
      }


      public partial class terminateCluster_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public terminateCluster_result()
        {
        }

        public terminateCluster_result DeepCopy()
        {
          var tmp350 = new terminateCluster_result();
          if(__isset.success)
          {
            tmp350.Success = this.Success;
          }
          tmp350.__isset.success = this.__isset.success;
          return tmp350;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp351 = new TStruct("terminateCluster_result");
            await oprot.WriteStructBeginAsync(tmp351, cancellationToken);
            var tmp352 = new TField();

            if(this.__isset.success)
            {
              tmp352.Name = "Success";
              tmp352.Type = TType.Bool;
              tmp352.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp352, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is terminateCluster_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp353 = new StringBuilder("terminateCluster_result(");
          int tmp354 = 0;
          if(__isset.success)
          {
            if(0 < tmp354++) { tmp353.Append(", "); }
            tmp353.Append("Success: ");
            Success.ToString(tmp353);
          }
          tmp353.Append(')');
          return tmp353.ToString();
        }
      }


      public partial class splitMemberFromCluster_args : TBase
      {
        private string _memberId;

        public string MemberId
        {
          get
          {
            return _memberId;
          }
          set
          {
            __isset.memberId = true;
            this._memberId = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool memberId;
        }

        public splitMemberFromCluster_args()
        {
        }

        public splitMemberFromCluster_args DeepCopy()
        {
          var tmp355 = new splitMemberFromCluster_args();
          if((MemberId != null) && __isset.memberId)
          {
            tmp355.MemberId = this.MemberId;
          }
          tmp355.__isset.memberId = this.__isset.memberId;
          return tmp355;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    MemberId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp356 = new TStruct("splitMemberFromCluster_args");
            await oprot.WriteStructBeginAsync(tmp356, cancellationToken);
            var tmp357 = new TField();
            if((MemberId != null) && __isset.memberId)
            {
              tmp357.Name = "memberId";
              tmp357.Type = TType.String;
              tmp357.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp357, cancellationToken);
              await oprot.WriteStringAsync(MemberId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is splitMemberFromCluster_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.memberId == other.__isset.memberId) && ((!__isset.memberId) || (global::System.Object.Equals(MemberId, other.MemberId))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((MemberId != null) && __isset.memberId)
            {
              hashcode = (hashcode * 397) + MemberId.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp358 = new StringBuilder("splitMemberFromCluster_args(");
          int tmp359 = 0;
          if((MemberId != null) && __isset.memberId)
          {
            if(0 < tmp359++) { tmp358.Append(", "); }
            tmp358.Append("MemberId: ");
            MemberId.ToString(tmp358);
          }
          tmp358.Append(')');
          return tmp358.ToString();
        }
      }


      public partial class splitMemberFromCluster_result : TBase
      {
        private global::Hazelcast.Testing.Remote.Cluster _success;

        public global::Hazelcast.Testing.Remote.Cluster Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public splitMemberFromCluster_result()
        {
        }

        public splitMemberFromCluster_result DeepCopy()
        {
          var tmp360 = new splitMemberFromCluster_result();
          if((Success != null) && __isset.success)
          {
            tmp360.Success = (global::Hazelcast.Testing.Remote.Cluster)this.Success.DeepCopy();
          }
          tmp360.__isset.success = this.__isset.success;
          return tmp360;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Hazelcast.Testing.Remote.Cluster();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp361 = new TStruct("splitMemberFromCluster_result");
            await oprot.WriteStructBeginAsync(tmp361, cancellationToken);
            var tmp362 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp362.Name = "Success";
                tmp362.Type = TType.Struct;
                tmp362.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp362, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is splitMemberFromCluster_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp363 = new StringBuilder("splitMemberFromCluster_result(");
          int tmp364 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp364++) { tmp363.Append(", "); }
            tmp363.Append("Success: ");
            Success.ToString(tmp363);
          }
          tmp363.Append(')');
          return tmp363.ToString();
        }
      }


      public partial class mergeMemberToCluster_args : TBase
      {
        private string _clusterId;
        private string _memberId;

        public string ClusterId
        {
          get
          {
            return _clusterId;
          }
          set
          {
            __isset.clusterId = true;
            this._clusterId = value;
          }
        }

        public string MemberId
        {
          get
          {
            return _memberId;
          }
          set
          {
            __isset.memberId = true;
            this._memberId = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool clusterId;
          public bool memberId;
        }

        public mergeMemberToCluster_args()
        {
        }

        public mergeMemberToCluster_args DeepCopy()
        {
          var tmp365 = new mergeMemberToCluster_args();
          if((ClusterId != null) && __isset.clusterId)
          {
            tmp365.ClusterId = this.ClusterId;
          }
          tmp365.__isset.clusterId = this.__isset.clusterId;
          if((MemberId != null) && __isset.memberId)
          {
            tmp365.MemberId = this.MemberId;
          }
          tmp365.__isset.memberId = this.__isset.memberId;
          return tmp365;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    ClusterId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    MemberId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp366 = new TStruct("mergeMemberToCluster_args");
            await oprot.WriteStructBeginAsync(tmp366, cancellationToken);
            var tmp367 = new TField();
            if((ClusterId != null) && __isset.clusterId)
            {
              tmp367.Name = "clusterId";
              tmp367.Type = TType.String;
              tmp367.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp367, cancellationToken);
              await oprot.WriteStringAsync(ClusterId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((MemberId != null) && __isset.memberId)
            {
              tmp367.Name = "memberId";
              tmp367.Type = TType.String;
              tmp367.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp367, cancellationToken);
              await oprot.WriteStringAsync(MemberId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is mergeMemberToCluster_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.clusterId == other.__isset.clusterId) && ((!__isset.clusterId) || (global::System.Object.Equals(ClusterId, other.ClusterId))))
            && ((__isset.memberId == other.__isset.memberId) && ((!__isset.memberId) || (global::System.Object.Equals(MemberId, other.MemberId))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((ClusterId != null) && __isset.clusterId)
            {
              hashcode = (hashcode * 397) + ClusterId.GetHashCode();
            }
            if((MemberId != null) && __isset.memberId)
            {
              hashcode = (hashcode * 397) + MemberId.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp368 = new StringBuilder("mergeMemberToCluster_args(");
          int tmp369 = 0;
          if((ClusterId != null) && __isset.clusterId)
          {
            if(0 < tmp369++) { tmp368.Append(", "); }
            tmp368.Append("ClusterId: ");
            ClusterId.ToString(tmp368);
          }
          if((MemberId != null) && __isset.memberId)
          {
            if(0 < tmp369++) { tmp368.Append(", "); }
            tmp368.Append("MemberId: ");
            MemberId.ToString(tmp368);
          }
          tmp368.Append(')');
          return tmp368.ToString();
        }
      }


      public partial class mergeMemberToCluster_result : TBase
      {
        private global::Hazelcast.Testing.Remote.Cluster _success;

        public global::Hazelcast.Testing.Remote.Cluster Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public mergeMemberToCluster_result()
        {
        }

        public mergeMemberToCluster_result DeepCopy()
        {
          var tmp370 = new mergeMemberToCluster_result();
          if((Success != null) && __isset.success)
          {
            tmp370.Success = (global::Hazelcast.Testing.Remote.Cluster)this.Success.DeepCopy();
          }
          tmp370.__isset.success = this.__isset.success;
          return tmp370;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Hazelcast.Testing.Remote.Cluster();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp371 = new TStruct("mergeMemberToCluster_result");
            await oprot.WriteStructBeginAsync(tmp371, cancellationToken);
            var tmp372 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp372.Name = "Success";
                tmp372.Type = TType.Struct;
                tmp372.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp372, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is mergeMemberToCluster_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp373 = new StringBuilder("mergeMemberToCluster_result(");
          int tmp374 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp374++) { tmp373.Append(", "); }
            tmp373.Append("Success: ");
            Success.ToString(tmp373);
          }
          tmp373.Append(')');
          return tmp373.ToString();
        }
      }


      public partial class loginToCloudUsingEnvironment_args : TBase
      {

        public loginToCloudUsingEnvironment_args()
        {
        }

        public loginToCloudUsingEnvironment_args DeepCopy()
        {
          var tmp375 = new loginToCloudUsingEnvironment_args();
          return tmp375;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp376 = new TStruct("loginToCloudUsingEnvironment_args");
            await oprot.WriteStructBeginAsync(tmp376, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is loginToCloudUsingEnvironment_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp377 = new StringBuilder("loginToCloudUsingEnvironment_args(");
          tmp377.Append(')');
          return tmp377.ToString();
        }
      }


      public partial class loginToCloudUsingEnvironment_result : TBase
      {
        private global::Hazelcast.Testing.Remote.CloudException _cloudException;

        public global::Hazelcast.Testing.Remote.CloudException CloudException
        {
          get
          {
            return _cloudException;
          }
          set
          {
            __isset.cloudException = true;
            this._cloudException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool cloudException;
        }

        public loginToCloudUsingEnvironment_result()
        {
        }

        public loginToCloudUsingEnvironment_result DeepCopy()
        {
          var tmp379 = new loginToCloudUsingEnvironment_result();
          if((CloudException != null) && __isset.cloudException)
          {
            tmp379.CloudException = (global::Hazelcast.Testing.Remote.CloudException)this.CloudException.DeepCopy();
          }
          tmp379.__isset.cloudException = this.__isset.cloudException;
          return tmp379;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    CloudException = new global::Hazelcast.Testing.Remote.CloudException();
                    await CloudException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp380 = new TStruct("loginToCloudUsingEnvironment_result");
            await oprot.WriteStructBeginAsync(tmp380, cancellationToken);
            var tmp381 = new TField();

            if(this.__isset.cloudException)
            {
              if (CloudException != null)
              {
                tmp381.Name = "CloudException";
                tmp381.Type = TType.Struct;
                tmp381.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp381, cancellationToken);
                await CloudException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is loginToCloudUsingEnvironment_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.cloudException == other.__isset.cloudException) && ((!__isset.cloudException) || (global::System.Object.Equals(CloudException, other.CloudException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((CloudException != null) && __isset.cloudException)
            {
              hashcode = (hashcode * 397) + CloudException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp382 = new StringBuilder("loginToCloudUsingEnvironment_result(");
          int tmp383 = 0;
          if((CloudException != null) && __isset.cloudException)
          {
            if(0 < tmp383++) { tmp382.Append(", "); }
            tmp382.Append("CloudException: ");
            CloudException.ToString(tmp382);
          }
          tmp382.Append(')');
          return tmp382.ToString();
        }
      }


      public partial class loginToCloud_args : TBase
      {
        private string _baseUrl;
        private string _apiKey;
        private string _apiSecret;

        public string BaseUrl
        {
          get
          {
            return _baseUrl;
          }
          set
          {
            __isset.baseUrl = true;
            this._baseUrl = value;
          }
        }

        public string ApiKey
        {
          get
          {
            return _apiKey;
          }
          set
          {
            __isset.apiKey = true;
            this._apiKey = value;
          }
        }

        public string ApiSecret
        {
          get
          {
            return _apiSecret;
          }
          set
          {
            __isset.apiSecret = true;
            this._apiSecret = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool baseUrl;
          public bool apiKey;
          public bool apiSecret;
        }

        public loginToCloud_args()
        {
        }

        public loginToCloud_args DeepCopy()
        {
          var tmp384 = new loginToCloud_args();
          if((BaseUrl != null) && __isset.baseUrl)
          {
            tmp384.BaseUrl = this.BaseUrl;
          }
          tmp384.__isset.baseUrl = this.__isset.baseUrl;
          if((ApiKey != null) && __isset.apiKey)
          {
            tmp384.ApiKey = this.ApiKey;
          }
          tmp384.__isset.apiKey = this.__isset.apiKey;
          if((ApiSecret != null) && __isset.apiSecret)
          {
            tmp384.ApiSecret = this.ApiSecret;
          }
          tmp384.__isset.apiSecret = this.__isset.apiSecret;
          return tmp384;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    BaseUrl = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ApiKey = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    ApiSecret = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp385 = new TStruct("loginToCloud_args");
            await oprot.WriteStructBeginAsync(tmp385, cancellationToken);
            var tmp386 = new TField();
            if((BaseUrl != null) && __isset.baseUrl)
            {
              tmp386.Name = "baseUrl";
              tmp386.Type = TType.String;
              tmp386.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp386, cancellationToken);
              await oprot.WriteStringAsync(BaseUrl, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ApiKey != null) && __isset.apiKey)
            {
              tmp386.Name = "apiKey";
              tmp386.Type = TType.String;
              tmp386.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp386, cancellationToken);
              await oprot.WriteStringAsync(ApiKey, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ApiSecret != null) && __isset.apiSecret)
            {
              tmp386.Name = "apiSecret";
              tmp386.Type = TType.String;
              tmp386.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp386, cancellationToken);
              await oprot.WriteStringAsync(ApiSecret, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is loginToCloud_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.baseUrl == other.__isset.baseUrl) && ((!__isset.baseUrl) || (global::System.Object.Equals(BaseUrl, other.BaseUrl))))
            && ((__isset.apiKey == other.__isset.apiKey) && ((!__isset.apiKey) || (global::System.Object.Equals(ApiKey, other.ApiKey))))
            && ((__isset.apiSecret == other.__isset.apiSecret) && ((!__isset.apiSecret) || (global::System.Object.Equals(ApiSecret, other.ApiSecret))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((BaseUrl != null) && __isset.baseUrl)
            {
              hashcode = (hashcode * 397) + BaseUrl.GetHashCode();
            }
            if((ApiKey != null) && __isset.apiKey)
            {
              hashcode = (hashcode * 397) + ApiKey.GetHashCode();
            }
            if((ApiSecret != null) && __isset.apiSecret)
            {
              hashcode = (hashcode * 397) + ApiSecret.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp387 = new StringBuilder("loginToCloud_args(");
          int tmp388 = 0;
          if((BaseUrl != null) && __isset.baseUrl)
          {
            if(0 < tmp388++) { tmp387.Append(", "); }
            tmp387.Append("BaseUrl: ");
            BaseUrl.ToString(tmp387);
          }
          if((ApiKey != null) && __isset.apiKey)
          {
            if(0 < tmp388++) { tmp387.Append(", "); }
            tmp387.Append("ApiKey: ");
            ApiKey.ToString(tmp387);
          }
          if((ApiSecret != null) && __isset.apiSecret)
          {
            if(0 < tmp388++) { tmp387.Append(", "); }
            tmp387.Append("ApiSecret: ");
            ApiSecret.ToString(tmp387);
          }
          tmp387.Append(')');
          return tmp387.ToString();
        }
      }


      public partial class loginToCloud_result : TBase
      {
        private global::Hazelcast.Testing.Remote.CloudException _cloudException;

        public global::Hazelcast.Testing.Remote.CloudException CloudException
        {
          get
          {
            return _cloudException;
          }
          set
          {
            __isset.cloudException = true;
            this._cloudException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool cloudException;
        }

        public loginToCloud_result()
        {
        }

        public loginToCloud_result DeepCopy()
        {
          var tmp389 = new loginToCloud_result();
          if((CloudException != null) && __isset.cloudException)
          {
            tmp389.CloudException = (global::Hazelcast.Testing.Remote.CloudException)this.CloudException.DeepCopy();
          }
          tmp389.__isset.cloudException = this.__isset.cloudException;
          return tmp389;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    CloudException = new global::Hazelcast.Testing.Remote.CloudException();
                    await CloudException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp390 = new TStruct("loginToCloud_result");
            await oprot.WriteStructBeginAsync(tmp390, cancellationToken);
            var tmp391 = new TField();

            if(this.__isset.cloudException)
            {
              if (CloudException != null)
              {
                tmp391.Name = "CloudException";
                tmp391.Type = TType.Struct;
                tmp391.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp391, cancellationToken);
                await CloudException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is loginToCloud_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.cloudException == other.__isset.cloudException) && ((!__isset.cloudException) || (global::System.Object.Equals(CloudException, other.CloudException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((CloudException != null) && __isset.cloudException)
            {
              hashcode = (hashcode * 397) + CloudException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp392 = new StringBuilder("loginToCloud_result(");
          int tmp393 = 0;
          if((CloudException != null) && __isset.cloudException)
          {
            if(0 < tmp393++) { tmp392.Append(", "); }
            tmp392.Append("CloudException: ");
            CloudException.ToString(tmp392);
          }
          tmp392.Append(')');
          return tmp392.ToString();
        }
      }


      public partial class createCloudCluster_args : TBase
      {
        private string _hazelcastVersion;
        private bool _isTlsEnabled;

        public string HazelcastVersion
        {
          get
          {
            return _hazelcastVersion;
          }
          set
          {
            __isset.hazelcastVersion = true;
            this._hazelcastVersion = value;
          }
        }

        public bool IsTlsEnabled
        {
          get
          {
            return _isTlsEnabled;
          }
          set
          {
            __isset.isTlsEnabled = true;
            this._isTlsEnabled = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool hazelcastVersion;
          public bool isTlsEnabled;
        }

        public createCloudCluster_args()
        {
        }

        public createCloudCluster_args DeepCopy()
        {
          var tmp394 = new createCloudCluster_args();
          if((HazelcastVersion != null) && __isset.hazelcastVersion)
          {
            tmp394.HazelcastVersion = this.HazelcastVersion;
          }
          tmp394.__isset.hazelcastVersion = this.__isset.hazelcastVersion;
          if(__isset.isTlsEnabled)
          {
            tmp394.IsTlsEnabled = this.IsTlsEnabled;
          }
          tmp394.__isset.isTlsEnabled = this.__isset.isTlsEnabled;
          return tmp394;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    HazelcastVersion = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Bool)
                  {
                    IsTlsEnabled = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp395 = new TStruct("createCloudCluster_args");
            await oprot.WriteStructBeginAsync(tmp395, cancellationToken);
            var tmp396 = new TField();
            if((HazelcastVersion != null) && __isset.hazelcastVersion)
            {
              tmp396.Name = "hazelcastVersion";
              tmp396.Type = TType.String;
              tmp396.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp396, cancellationToken);
              await oprot.WriteStringAsync(HazelcastVersion, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.isTlsEnabled)
            {
              tmp396.Name = "isTlsEnabled";
              tmp396.Type = TType.Bool;
              tmp396.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp396, cancellationToken);
              await oprot.WriteBoolAsync(IsTlsEnabled, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createCloudCluster_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.hazelcastVersion == other.__isset.hazelcastVersion) && ((!__isset.hazelcastVersion) || (global::System.Object.Equals(HazelcastVersion, other.HazelcastVersion))))
            && ((__isset.isTlsEnabled == other.__isset.isTlsEnabled) && ((!__isset.isTlsEnabled) || (global::System.Object.Equals(IsTlsEnabled, other.IsTlsEnabled))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((HazelcastVersion != null) && __isset.hazelcastVersion)
            {
              hashcode = (hashcode * 397) + HazelcastVersion.GetHashCode();
            }
            if(__isset.isTlsEnabled)
            {
              hashcode = (hashcode * 397) + IsTlsEnabled.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp397 = new StringBuilder("createCloudCluster_args(");
          int tmp398 = 0;
          if((HazelcastVersion != null) && __isset.hazelcastVersion)
          {
            if(0 < tmp398++) { tmp397.Append(", "); }
            tmp397.Append("HazelcastVersion: ");
            HazelcastVersion.ToString(tmp397);
          }
          if(__isset.isTlsEnabled)
          {
            if(0 < tmp398++) { tmp397.Append(", "); }
            tmp397.Append("IsTlsEnabled: ");
            IsTlsEnabled.ToString(tmp397);
          }
          tmp397.Append(')');
          return tmp397.ToString();
        }
      }


      public partial class createCloudCluster_result : TBase
      {
        private global::Hazelcast.Testing.Remote.CloudCluster _success;
        private global::Hazelcast.Testing.Remote.CloudException _cloudException;

        public global::Hazelcast.Testing.Remote.CloudCluster Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Hazelcast.Testing.Remote.CloudException CloudException
        {
          get
          {
            return _cloudException;
          }
          set
          {
            __isset.cloudException = true;
            this._cloudException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool cloudException;
        }

        public createCloudCluster_result()
        {
        }

        public createCloudCluster_result DeepCopy()
        {
          var tmp399 = new createCloudCluster_result();
          if((Success != null) && __isset.success)
          {
            tmp399.Success = (global::Hazelcast.Testing.Remote.CloudCluster)this.Success.DeepCopy();
          }
          tmp399.__isset.success = this.__isset.success;
          if((CloudException != null) && __isset.cloudException)
          {
            tmp399.CloudException = (global::Hazelcast.Testing.Remote.CloudException)this.CloudException.DeepCopy();
          }
          tmp399.__isset.cloudException = this.__isset.cloudException;
          return tmp399;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Hazelcast.Testing.Remote.CloudCluster();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    CloudException = new global::Hazelcast.Testing.Remote.CloudException();
                    await CloudException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp400 = new TStruct("createCloudCluster_result");
            await oprot.WriteStructBeginAsync(tmp400, cancellationToken);
            var tmp401 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp401.Name = "Success";
                tmp401.Type = TType.Struct;
                tmp401.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp401, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.cloudException)
            {
              if (CloudException != null)
              {
                tmp401.Name = "CloudException";
                tmp401.Type = TType.Struct;
                tmp401.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp401, cancellationToken);
                await CloudException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createCloudCluster_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.cloudException == other.__isset.cloudException) && ((!__isset.cloudException) || (global::System.Object.Equals(CloudException, other.CloudException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((CloudException != null) && __isset.cloudException)
            {
              hashcode = (hashcode * 397) + CloudException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp402 = new StringBuilder("createCloudCluster_result(");
          int tmp403 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp403++) { tmp402.Append(", "); }
            tmp402.Append("Success: ");
            Success.ToString(tmp402);
          }
          if((CloudException != null) && __isset.cloudException)
          {
            if(0 < tmp403++) { tmp402.Append(", "); }
            tmp402.Append("CloudException: ");
            CloudException.ToString(tmp402);
          }
          tmp402.Append(')');
          return tmp402.ToString();
        }
      }


      public partial class getCloudCluster_args : TBase
      {
        private string _cloudClusterId;

        public string CloudClusterId
        {
          get
          {
            return _cloudClusterId;
          }
          set
          {
            __isset.cloudClusterId = true;
            this._cloudClusterId = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool cloudClusterId;
        }

        public getCloudCluster_args()
        {
        }

        public getCloudCluster_args DeepCopy()
        {
          var tmp404 = new getCloudCluster_args();
          if((CloudClusterId != null) && __isset.cloudClusterId)
          {
            tmp404.CloudClusterId = this.CloudClusterId;
          }
          tmp404.__isset.cloudClusterId = this.__isset.cloudClusterId;
          return tmp404;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    CloudClusterId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp405 = new TStruct("getCloudCluster_args");
            await oprot.WriteStructBeginAsync(tmp405, cancellationToken);
            var tmp406 = new TField();
            if((CloudClusterId != null) && __isset.cloudClusterId)
            {
              tmp406.Name = "cloudClusterId";
              tmp406.Type = TType.String;
              tmp406.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp406, cancellationToken);
              await oprot.WriteStringAsync(CloudClusterId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getCloudCluster_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.cloudClusterId == other.__isset.cloudClusterId) && ((!__isset.cloudClusterId) || (global::System.Object.Equals(CloudClusterId, other.CloudClusterId))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((CloudClusterId != null) && __isset.cloudClusterId)
            {
              hashcode = (hashcode * 397) + CloudClusterId.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp407 = new StringBuilder("getCloudCluster_args(");
          int tmp408 = 0;
          if((CloudClusterId != null) && __isset.cloudClusterId)
          {
            if(0 < tmp408++) { tmp407.Append(", "); }
            tmp407.Append("CloudClusterId: ");
            CloudClusterId.ToString(tmp407);
          }
          tmp407.Append(')');
          return tmp407.ToString();
        }
      }


      public partial class getCloudCluster_result : TBase
      {
        private global::Hazelcast.Testing.Remote.CloudCluster _success;
        private global::Hazelcast.Testing.Remote.CloudException _cloudException;

        public global::Hazelcast.Testing.Remote.CloudCluster Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Hazelcast.Testing.Remote.CloudException CloudException
        {
          get
          {
            return _cloudException;
          }
          set
          {
            __isset.cloudException = true;
            this._cloudException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool cloudException;
        }

        public getCloudCluster_result()
        {
        }

        public getCloudCluster_result DeepCopy()
        {
          var tmp409 = new getCloudCluster_result();
          if((Success != null) && __isset.success)
          {
            tmp409.Success = (global::Hazelcast.Testing.Remote.CloudCluster)this.Success.DeepCopy();
          }
          tmp409.__isset.success = this.__isset.success;
          if((CloudException != null) && __isset.cloudException)
          {
            tmp409.CloudException = (global::Hazelcast.Testing.Remote.CloudException)this.CloudException.DeepCopy();
          }
          tmp409.__isset.cloudException = this.__isset.cloudException;
          return tmp409;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Hazelcast.Testing.Remote.CloudCluster();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    CloudException = new global::Hazelcast.Testing.Remote.CloudException();
                    await CloudException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp410 = new TStruct("getCloudCluster_result");
            await oprot.WriteStructBeginAsync(tmp410, cancellationToken);
            var tmp411 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp411.Name = "Success";
                tmp411.Type = TType.Struct;
                tmp411.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp411, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.cloudException)
            {
              if (CloudException != null)
              {
                tmp411.Name = "CloudException";
                tmp411.Type = TType.Struct;
                tmp411.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp411, cancellationToken);
                await CloudException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getCloudCluster_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.cloudException == other.__isset.cloudException) && ((!__isset.cloudException) || (global::System.Object.Equals(CloudException, other.CloudException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((CloudException != null) && __isset.cloudException)
            {
              hashcode = (hashcode * 397) + CloudException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp412 = new StringBuilder("getCloudCluster_result(");
          int tmp413 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp413++) { tmp412.Append(", "); }
            tmp412.Append("Success: ");
            Success.ToString(tmp412);
          }
          if((CloudException != null) && __isset.cloudException)
          {
            if(0 < tmp413++) { tmp412.Append(", "); }
            tmp412.Append("CloudException: ");
            CloudException.ToString(tmp412);
          }
          tmp412.Append(')');
          return tmp412.ToString();
        }
      }


      public partial class stopCloudCluster_args : TBase
      {
        private string _cloudClusterId;

        public string CloudClusterId
        {
          get
          {
            return _cloudClusterId;
          }
          set
          {
            __isset.cloudClusterId = true;
            this._cloudClusterId = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool cloudClusterId;
        }

        public stopCloudCluster_args()
        {
        }

        public stopCloudCluster_args DeepCopy()
        {
          var tmp414 = new stopCloudCluster_args();
          if((CloudClusterId != null) && __isset.cloudClusterId)
          {
            tmp414.CloudClusterId = this.CloudClusterId;
          }
          tmp414.__isset.cloudClusterId = this.__isset.cloudClusterId;
          return tmp414;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    CloudClusterId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp415 = new TStruct("stopCloudCluster_args");
            await oprot.WriteStructBeginAsync(tmp415, cancellationToken);
            var tmp416 = new TField();
            if((CloudClusterId != null) && __isset.cloudClusterId)
            {
              tmp416.Name = "cloudClusterId";
              tmp416.Type = TType.String;
              tmp416.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp416, cancellationToken);
              await oprot.WriteStringAsync(CloudClusterId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is stopCloudCluster_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.cloudClusterId == other.__isset.cloudClusterId) && ((!__isset.cloudClusterId) || (global::System.Object.Equals(CloudClusterId, other.CloudClusterId))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((CloudClusterId != null) && __isset.cloudClusterId)
            {
              hashcode = (hashcode * 397) + CloudClusterId.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp417 = new StringBuilder("stopCloudCluster_args(");
          int tmp418 = 0;
          if((CloudClusterId != null) && __isset.cloudClusterId)
          {
            if(0 < tmp418++) { tmp417.Append(", "); }
            tmp417.Append("CloudClusterId: ");
            CloudClusterId.ToString(tmp417);
          }
          tmp417.Append(')');
          return tmp417.ToString();
        }
      }


      public partial class stopCloudCluster_result : TBase
      {
        private global::Hazelcast.Testing.Remote.CloudCluster _success;
        private global::Hazelcast.Testing.Remote.CloudException _cloudException;

        public global::Hazelcast.Testing.Remote.CloudCluster Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Hazelcast.Testing.Remote.CloudException CloudException
        {
          get
          {
            return _cloudException;
          }
          set
          {
            __isset.cloudException = true;
            this._cloudException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool cloudException;
        }

        public stopCloudCluster_result()
        {
        }

        public stopCloudCluster_result DeepCopy()
        {
          var tmp419 = new stopCloudCluster_result();
          if((Success != null) && __isset.success)
          {
            tmp419.Success = (global::Hazelcast.Testing.Remote.CloudCluster)this.Success.DeepCopy();
          }
          tmp419.__isset.success = this.__isset.success;
          if((CloudException != null) && __isset.cloudException)
          {
            tmp419.CloudException = (global::Hazelcast.Testing.Remote.CloudException)this.CloudException.DeepCopy();
          }
          tmp419.__isset.cloudException = this.__isset.cloudException;
          return tmp419;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Hazelcast.Testing.Remote.CloudCluster();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    CloudException = new global::Hazelcast.Testing.Remote.CloudException();
                    await CloudException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp420 = new TStruct("stopCloudCluster_result");
            await oprot.WriteStructBeginAsync(tmp420, cancellationToken);
            var tmp421 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp421.Name = "Success";
                tmp421.Type = TType.Struct;
                tmp421.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp421, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.cloudException)
            {
              if (CloudException != null)
              {
                tmp421.Name = "CloudException";
                tmp421.Type = TType.Struct;
                tmp421.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp421, cancellationToken);
                await CloudException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is stopCloudCluster_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.cloudException == other.__isset.cloudException) && ((!__isset.cloudException) || (global::System.Object.Equals(CloudException, other.CloudException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((CloudException != null) && __isset.cloudException)
            {
              hashcode = (hashcode * 397) + CloudException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp422 = new StringBuilder("stopCloudCluster_result(");
          int tmp423 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp423++) { tmp422.Append(", "); }
            tmp422.Append("Success: ");
            Success.ToString(tmp422);
          }
          if((CloudException != null) && __isset.cloudException)
          {
            if(0 < tmp423++) { tmp422.Append(", "); }
            tmp422.Append("CloudException: ");
            CloudException.ToString(tmp422);
          }
          tmp422.Append(')');
          return tmp422.ToString();
        }
      }


      public partial class resumeCloudCluster_args : TBase
      {
        private string _cloudClusterId;

        public string CloudClusterId
        {
          get
          {
            return _cloudClusterId;
          }
          set
          {
            __isset.cloudClusterId = true;
            this._cloudClusterId = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool cloudClusterId;
        }

        public resumeCloudCluster_args()
        {
        }

        public resumeCloudCluster_args DeepCopy()
        {
          var tmp424 = new resumeCloudCluster_args();
          if((CloudClusterId != null) && __isset.cloudClusterId)
          {
            tmp424.CloudClusterId = this.CloudClusterId;
          }
          tmp424.__isset.cloudClusterId = this.__isset.cloudClusterId;
          return tmp424;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    CloudClusterId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp425 = new TStruct("resumeCloudCluster_args");
            await oprot.WriteStructBeginAsync(tmp425, cancellationToken);
            var tmp426 = new TField();
            if((CloudClusterId != null) && __isset.cloudClusterId)
            {
              tmp426.Name = "cloudClusterId";
              tmp426.Type = TType.String;
              tmp426.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp426, cancellationToken);
              await oprot.WriteStringAsync(CloudClusterId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is resumeCloudCluster_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.cloudClusterId == other.__isset.cloudClusterId) && ((!__isset.cloudClusterId) || (global::System.Object.Equals(CloudClusterId, other.CloudClusterId))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((CloudClusterId != null) && __isset.cloudClusterId)
            {
              hashcode = (hashcode * 397) + CloudClusterId.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp427 = new StringBuilder("resumeCloudCluster_args(");
          int tmp428 = 0;
          if((CloudClusterId != null) && __isset.cloudClusterId)
          {
            if(0 < tmp428++) { tmp427.Append(", "); }
            tmp427.Append("CloudClusterId: ");
            CloudClusterId.ToString(tmp427);
          }
          tmp427.Append(')');
          return tmp427.ToString();
        }
      }


      public partial class resumeCloudCluster_result : TBase
      {
        private global::Hazelcast.Testing.Remote.CloudCluster _success;
        private global::Hazelcast.Testing.Remote.CloudException _cloudException;

        public global::Hazelcast.Testing.Remote.CloudCluster Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Hazelcast.Testing.Remote.CloudException CloudException
        {
          get
          {
            return _cloudException;
          }
          set
          {
            __isset.cloudException = true;
            this._cloudException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool cloudException;
        }

        public resumeCloudCluster_result()
        {
        }

        public resumeCloudCluster_result DeepCopy()
        {
          var tmp429 = new resumeCloudCluster_result();
          if((Success != null) && __isset.success)
          {
            tmp429.Success = (global::Hazelcast.Testing.Remote.CloudCluster)this.Success.DeepCopy();
          }
          tmp429.__isset.success = this.__isset.success;
          if((CloudException != null) && __isset.cloudException)
          {
            tmp429.CloudException = (global::Hazelcast.Testing.Remote.CloudException)this.CloudException.DeepCopy();
          }
          tmp429.__isset.cloudException = this.__isset.cloudException;
          return tmp429;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Hazelcast.Testing.Remote.CloudCluster();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    CloudException = new global::Hazelcast.Testing.Remote.CloudException();
                    await CloudException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp430 = new TStruct("resumeCloudCluster_result");
            await oprot.WriteStructBeginAsync(tmp430, cancellationToken);
            var tmp431 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp431.Name = "Success";
                tmp431.Type = TType.Struct;
                tmp431.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp431, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.cloudException)
            {
              if (CloudException != null)
              {
                tmp431.Name = "CloudException";
                tmp431.Type = TType.Struct;
                tmp431.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp431, cancellationToken);
                await CloudException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is resumeCloudCluster_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.cloudException == other.__isset.cloudException) && ((!__isset.cloudException) || (global::System.Object.Equals(CloudException, other.CloudException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((CloudException != null) && __isset.cloudException)
            {
              hashcode = (hashcode * 397) + CloudException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp432 = new StringBuilder("resumeCloudCluster_result(");
          int tmp433 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp433++) { tmp432.Append(", "); }
            tmp432.Append("Success: ");
            Success.ToString(tmp432);
          }
          if((CloudException != null) && __isset.cloudException)
          {
            if(0 < tmp433++) { tmp432.Append(", "); }
            tmp432.Append("CloudException: ");
            CloudException.ToString(tmp432);
          }
          tmp432.Append(')');
          return tmp432.ToString();
        }
      }


      public partial class deleteCloudCluster_args : TBase
      {
        private string _cloudClusterId;

        public string CloudClusterId
        {
          get
          {
            return _cloudClusterId;
          }
          set
          {
            __isset.cloudClusterId = true;
            this._cloudClusterId = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool cloudClusterId;
        }

        public deleteCloudCluster_args()
        {
        }

        public deleteCloudCluster_args DeepCopy()
        {
          var tmp434 = new deleteCloudCluster_args();
          if((CloudClusterId != null) && __isset.cloudClusterId)
          {
            tmp434.CloudClusterId = this.CloudClusterId;
          }
          tmp434.__isset.cloudClusterId = this.__isset.cloudClusterId;
          return tmp434;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    CloudClusterId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp435 = new TStruct("deleteCloudCluster_args");
            await oprot.WriteStructBeginAsync(tmp435, cancellationToken);
            var tmp436 = new TField();
            if((CloudClusterId != null) && __isset.cloudClusterId)
            {
              tmp436.Name = "cloudClusterId";
              tmp436.Type = TType.String;
              tmp436.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp436, cancellationToken);
              await oprot.WriteStringAsync(CloudClusterId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deleteCloudCluster_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.cloudClusterId == other.__isset.cloudClusterId) && ((!__isset.cloudClusterId) || (global::System.Object.Equals(CloudClusterId, other.CloudClusterId))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((CloudClusterId != null) && __isset.cloudClusterId)
            {
              hashcode = (hashcode * 397) + CloudClusterId.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp437 = new StringBuilder("deleteCloudCluster_args(");
          int tmp438 = 0;
          if((CloudClusterId != null) && __isset.cloudClusterId)
          {
            if(0 < tmp438++) { tmp437.Append(", "); }
            tmp437.Append("CloudClusterId: ");
            CloudClusterId.ToString(tmp437);
          }
          tmp437.Append(')');
          return tmp437.ToString();
        }
      }


      public partial class deleteCloudCluster_result : TBase
      {
        private global::Hazelcast.Testing.Remote.CloudException _cloudException;

        public global::Hazelcast.Testing.Remote.CloudException CloudException
        {
          get
          {
            return _cloudException;
          }
          set
          {
            __isset.cloudException = true;
            this._cloudException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool cloudException;
        }

        public deleteCloudCluster_result()
        {
        }

        public deleteCloudCluster_result DeepCopy()
        {
          var tmp439 = new deleteCloudCluster_result();
          if((CloudException != null) && __isset.cloudException)
          {
            tmp439.CloudException = (global::Hazelcast.Testing.Remote.CloudException)this.CloudException.DeepCopy();
          }
          tmp439.__isset.cloudException = this.__isset.cloudException;
          return tmp439;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    CloudException = new global::Hazelcast.Testing.Remote.CloudException();
                    await CloudException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp440 = new TStruct("deleteCloudCluster_result");
            await oprot.WriteStructBeginAsync(tmp440, cancellationToken);
            var tmp441 = new TField();

            if(this.__isset.cloudException)
            {
              if (CloudException != null)
              {
                tmp441.Name = "CloudException";
                tmp441.Type = TType.Struct;
                tmp441.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp441, cancellationToken);
                await CloudException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deleteCloudCluster_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.cloudException == other.__isset.cloudException) && ((!__isset.cloudException) || (global::System.Object.Equals(CloudException, other.CloudException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((CloudException != null) && __isset.cloudException)
            {
              hashcode = (hashcode * 397) + CloudException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp442 = new StringBuilder("deleteCloudCluster_result(");
          int tmp443 = 0;
          if((CloudException != null) && __isset.cloudException)
          {
            if(0 < tmp443++) { tmp442.Append(", "); }
            tmp442.Append("CloudException: ");
            CloudException.ToString(tmp442);
          }
          tmp442.Append(')');
          return tmp442.ToString();
        }
      }


      public partial class executeOnController_args : TBase
      {
        private string _clusterId;
        private string _script;
        private global::Hazelcast.Testing.Remote.Lang _lang;

        public string ClusterId
        {
          get
          {
            return _clusterId;
          }
          set
          {
            __isset.clusterId = true;
            this._clusterId = value;
          }
        }

        public string Script
        {
          get
          {
            return _script;
          }
          set
          {
            __isset.script = true;
            this._script = value;
          }
        }

        /// <summary>
        /// 
        /// <seealso cref="global::Hazelcast.Testing.Remote.Lang"/>
        /// </summary>
        public global::Hazelcast.Testing.Remote.Lang Lang
        {
          get
          {
            return _lang;
          }
          set
          {
            __isset.lang = true;
            this._lang = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool clusterId;
          public bool script;
          public bool lang;
        }

        public executeOnController_args()
        {
        }

        public executeOnController_args DeepCopy()
        {
          var tmp444 = new executeOnController_args();
          if((ClusterId != null) && __isset.clusterId)
          {
            tmp444.ClusterId = this.ClusterId;
          }
          tmp444.__isset.clusterId = this.__isset.clusterId;
          if((Script != null) && __isset.script)
          {
            tmp444.Script = this.Script;
          }
          tmp444.__isset.script = this.__isset.script;
          if(__isset.lang)
          {
            tmp444.Lang = this.Lang;
          }
          tmp444.__isset.lang = this.__isset.lang;
          return tmp444;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    ClusterId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Script = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Lang = (global::Hazelcast.Testing.Remote.Lang)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp445 = new TStruct("executeOnController_args");
            await oprot.WriteStructBeginAsync(tmp445, cancellationToken);
            var tmp446 = new TField();
            if((ClusterId != null) && __isset.clusterId)
            {
              tmp446.Name = "clusterId";
              tmp446.Type = TType.String;
              tmp446.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp446, cancellationToken);
              await oprot.WriteStringAsync(ClusterId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Script != null) && __isset.script)
            {
              tmp446.Name = "script";
              tmp446.Type = TType.String;
              tmp446.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp446, cancellationToken);
              await oprot.WriteStringAsync(Script, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.lang)
            {
              tmp446.Name = "lang";
              tmp446.Type = TType.I32;
              tmp446.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp446, cancellationToken);
              await oprot.WriteI32Async((int)Lang, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is executeOnController_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.clusterId == other.__isset.clusterId) && ((!__isset.clusterId) || (global::System.Object.Equals(ClusterId, other.ClusterId))))
            && ((__isset.script == other.__isset.script) && ((!__isset.script) || (global::System.Object.Equals(Script, other.Script))))
            && ((__isset.lang == other.__isset.lang) && ((!__isset.lang) || (global::System.Object.Equals(Lang, other.Lang))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((ClusterId != null) && __isset.clusterId)
            {
              hashcode = (hashcode * 397) + ClusterId.GetHashCode();
            }
            if((Script != null) && __isset.script)
            {
              hashcode = (hashcode * 397) + Script.GetHashCode();
            }
            if(__isset.lang)
            {
              hashcode = (hashcode * 397) + Lang.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp447 = new StringBuilder("executeOnController_args(");
          int tmp448 = 0;
          if((ClusterId != null) && __isset.clusterId)
          {
            if(0 < tmp448++) { tmp447.Append(", "); }
            tmp447.Append("ClusterId: ");
            ClusterId.ToString(tmp447);
          }
          if((Script != null) && __isset.script)
          {
            if(0 < tmp448++) { tmp447.Append(", "); }
            tmp447.Append("Script: ");
            Script.ToString(tmp447);
          }
          if(__isset.lang)
          {
            if(0 < tmp448++) { tmp447.Append(", "); }
            tmp447.Append("Lang: ");
            Lang.ToString(tmp447);
          }
          tmp447.Append(')');
          return tmp447.ToString();
        }
      }


      public partial class executeOnController_result : TBase
      {
        private global::Hazelcast.Testing.Remote.Response _success;

        public global::Hazelcast.Testing.Remote.Response Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public executeOnController_result()
        {
        }

        public executeOnController_result DeepCopy()
        {
          var tmp449 = new executeOnController_result();
          if((Success != null) && __isset.success)
          {
            tmp449.Success = (global::Hazelcast.Testing.Remote.Response)this.Success.DeepCopy();
          }
          tmp449.__isset.success = this.__isset.success;
          return tmp449;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Hazelcast.Testing.Remote.Response();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp450 = new TStruct("executeOnController_result");
            await oprot.WriteStructBeginAsync(tmp450, cancellationToken);
            var tmp451 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp451.Name = "Success";
                tmp451.Type = TType.Struct;
                tmp451.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp451, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is executeOnController_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp452 = new StringBuilder("executeOnController_result(");
          int tmp453 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp453++) { tmp452.Append(", "); }
            tmp452.Append("Success: ");
            Success.ToString(tmp452);
          }
          tmp452.Append(')');
          return tmp452.ToString();
        }
      }

    }

  }
}
