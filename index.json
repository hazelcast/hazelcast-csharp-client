{
  "404.html": {
    "href": "404.html",
    "title": "Page Not Found | Hazelcast .NET Documentation",
    "keywords": "Page Not Found Unfortunately, we cannot locate the page that you requested. It could be that our documentation got reorganized: you may want to start over from the home page."
  },
  "5.2.2/api/Hazelcast.Aggregation.Aggregators.BigIntegerSum.html": {
    "href": "5.2.2/api/Hazelcast.Aggregation.Aggregators.BigIntegerSum.html",
    "title": "Method BigIntegerSum | Hazelcast .NET Documentation",
    "keywords": "Method BigIntegerSum BigIntegerSum() An aggregator that calculates the sum of the input values. Does NOT accept null input values. Accepts only BigInteger input values. Declaration public static IAggregator<BigInteger> BigIntegerSum() Returns Type Description IAggregator<BigInteger> The aggregator. BigIntegerSum(string) an aggregator that calculates the sum of the input values extracted from the given attributePath. Does NOT accept null input values nor null extracted values. Accepts only BigInteger input values. Declaration public static IAggregator<BigInteger> BigIntegerSum(string attributePath) Parameters Type Name Description string attributePath attribute Path Returns Type Description IAggregator<BigInteger> The aggregator."
  },
  "5.2.2/api/Hazelcast.Aggregation.Aggregators.Count.html": {
    "href": "5.2.2/api/Hazelcast.Aggregation.Aggregators.Count.html",
    "title": "Method Count | Hazelcast .NET Documentation",
    "keywords": "Method Count Count() Counts input values (accepts nulls). Declaration public static IAggregator<long> Count() Returns Type Description IAggregator<long> The aggregator. Count(string) Counts input values (accepts nulls). Declaration public static IAggregator<long> Count(string attributePath) Parameters Type Name Description string attributePath An attribute path. Returns Type Description IAggregator<long> The aggregator. Remarks Values are extracted from the specified attributePath."
  },
  "5.2.2/api/Hazelcast.Aggregation.Aggregators.DoubleAvg.html": {
    "href": "5.2.2/api/Hazelcast.Aggregation.Aggregators.DoubleAvg.html",
    "title": "Method DoubleAvg | Hazelcast .NET Documentation",
    "keywords": "Method DoubleAvg DoubleAvg() Averages double input values (does not accept nulls). Declaration public static IAggregator<double> DoubleAvg() Returns Type Description IAggregator<double> The aggregator. DoubleAvg(string) Averages double input values (does not accept nulls). Declaration public static IAggregator<double> DoubleAvg(string attributePath) Parameters Type Name Description string attributePath An attribute path. Returns Type Description IAggregator<double> The aggregator. Remarks Values are extracted from the specified attributePath."
  },
  "5.2.2/api/Hazelcast.Aggregation.Aggregators.DoubleSum.html": {
    "href": "5.2.2/api/Hazelcast.Aggregation.Aggregators.DoubleSum.html",
    "title": "Method DoubleSum | Hazelcast .NET Documentation",
    "keywords": "Method DoubleSum DoubleSum() an aggregator that calculates the sum of the input values. Does NOT accept null input values. Accepts only double input values. Declaration public static IAggregator<double> DoubleSum() Returns Type Description IAggregator<double> The aggregator. DoubleSum(string) An aggregator that calculates the sum of the input values extracted from the given attributePath. Does NOT accept null input values nor null extracted values. Accepts only double input values. Declaration public static IAggregator<double> DoubleSum(string attributePath) Parameters Type Name Description string attributePath attribute Path Returns Type Description IAggregator<double> The aggregator."
  },
  "5.2.2/api/Hazelcast.Aggregation.Aggregators.FixedPointSum.html": {
    "href": "5.2.2/api/Hazelcast.Aggregation.Aggregators.FixedPointSum.html",
    "title": "Method FixedPointSum | Hazelcast .NET Documentation",
    "keywords": "Method FixedPointSum FixedPointSum() an aggregator that calculates the sum of the input values. Does NOT accept null input values. Accepts float or double input values. Declaration public static IAggregator<long> FixedPointSum() Returns Type Description IAggregator<long> The aggregator. FixedPointSum(string) An aggregator that calculates the sum of the input values extracted from the given attributePath. Does NOT accept null input values nor null extracted values. Accepts float or double input values. Declaration public static IAggregator<long> FixedPointSum(string attributePath) Parameters Type Name Description string attributePath attribute Path Returns Type Description IAggregator<long> The aggregator."
  },
  "5.2.2/api/Hazelcast.Aggregation.Aggregators.FloatingPointSum.html": {
    "href": "5.2.2/api/Hazelcast.Aggregation.Aggregators.FloatingPointSum.html",
    "title": "Method FloatingPointSum | Hazelcast .NET Documentation",
    "keywords": "Method FloatingPointSum FloatingPointSum() an aggregator that calculates the sum of the input values. Does NOT accept null input values. Accepts float or double input values. Declaration public static IAggregator<double> FloatingPointSum() Returns Type Description IAggregator<double> The aggregator. FloatingPointSum(string) An aggregator that calculates the sum of the input values extracted from the given attributePath. Does NOT accept null input values nor null extracted values. Accepts float or double input values. Declaration public static IAggregator<double> FloatingPointSum(string attributePath) Parameters Type Name Description string attributePath attribute Path Returns Type Description IAggregator<double> The aggregator."
  },
  "5.2.2/api/Hazelcast.Aggregation.Aggregators.html": {
    "href": "5.2.2/api/Hazelcast.Aggregation.Aggregators.html",
    "title": "Class Aggregators | Hazelcast .NET Documentation",
    "keywords": "Class Aggregators Creates IAggregator<TResult> instances. Inheritance object Aggregators Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.Aggregation Assembly: Hazelcast.Net.dll Syntax public static class Aggregators Remarks Min/Max/Average aggregators are type specific, so an IntegerAvg() aggregator expects all elements to be integers. There is no conversion executed while accumulating, so if there is any other type met an exception will be thrown. In order to operate on a generic Number type use the FixedPointSum(string), FloatingPointSum(string) and NumberAvg(string) aggregators. All of them will convert the given number to either Long or Double during the accumulation phase. It will result in a lot of allocations since each number has to be converted, but it enables the user to operate on the whole family of numbers. It is especially useful if the numbers given to the aggregators may not be of one type only. The attributePath given in the factory method allows the aggregator to operate on the value extracted by navigating to the given attributePath on each object that has been returned from a query. The attribute path may be simple, e.g. \"name\", or nested \"address.city\". If an aggregator does not accept null values pass a predicate to the aggregate call that will filter them out. If the input value or the extracted value is a collection it won't be \"unfolded\" - so for example count aggregation on \"person.postalCodes\" will return 1 for each input object and not the size of the collection. In order to calculate the size of the collection use the [any] operator, e.g. \"person.postalCodes[any]\". Methods Name Description BigIntegerSum() An aggregator that calculates the sum of the input values. Does NOT accept null input values. Accepts only BigInteger input values. BigIntegerSum(string) an aggregator that calculates the sum of the input values extracted from the given attributePath. Does NOT accept null input values nor null extracted values. Accepts only BigInteger input values. Count() Counts input values (accepts nulls). Count(string) Counts input values (accepts nulls). DoubleAvg() Averages double input values (does not accept nulls). DoubleAvg(string) Averages double input values (does not accept nulls). DoubleSum() an aggregator that calculates the sum of the input values. Does NOT accept null input values. Accepts only double input values. DoubleSum(string) An aggregator that calculates the sum of the input values extracted from the given attributePath. Does NOT accept null input values nor null extracted values. Accepts only double input values. FixedPointSum() an aggregator that calculates the sum of the input values. Does NOT accept null input values. Accepts float or double input values. FixedPointSum(string) An aggregator that calculates the sum of the input values extracted from the given attributePath. Does NOT accept null input values nor null extracted values. Accepts float or double input values. FloatingPointSum() an aggregator that calculates the sum of the input values. Does NOT accept null input values. Accepts float or double input values. FloatingPointSum(string) An aggregator that calculates the sum of the input values extracted from the given attributePath. Does NOT accept null input values nor null extracted values. Accepts float or double input values. IntegerAvg() an aggregator that calculates the average of the input values. Does NOT accept null input values. Accepts only int input values IntegerAvg(string) an aggregator that calculates the average of the input values extracted from the given attributePath. Does NOT accept null input values nor null extracted values. Accepts only int input values IntegerSum() an aggregator that calculates the sum of the input values. Does NOT accept null input values. Accepts only int input values. IntegerSum(string) An aggregator that calculates the sum of the input values extracted from the given attributePath. Does NOT accept null input values nor null extracted values. Accepts only int input values. LongAvg() an aggregator that calculates the average of the input values. Does NOT accept null input values. Accepts only long input values LongAvg(string) an aggregator that calculates the average of the input values extracted from the given attributePath. Does NOT accept null input values nor null extracted values. Accepts only long input values LongSum() an aggregator that calculates the sum of the input values. Does NOT accept null input values. Accepts only long input values. LongSum(string) An aggregator that calculates the sum of the input values extracted from the given attributePath. Does NOT accept null input values nor null extracted values. Accepts only long input values. Max<TResult>() an aggregator that calculates the max of the input values. Accepts null input values Max<TResult>(string) an aggregator that calculates the max of the input values extracted from the given attributePath. Accepts null input values and null extracted values. Min<TResult>() an aggregator that calculates the min of the input values. Accepts null input values Min<TResult>(string) an aggregator that calculates the min of the input values extracted from the given attributePath. Accepts null input values and null extracted values. NumberAvg() an aggregator that calculates the average of the input values. Does NOT accept null input values. Accepts float or double input values. NumberAvg(string) an aggregator that calculates the average of the input values. Does NOT accept null input values nor null extracted values. Accepts float or double input values."
  },
  "5.2.2/api/Hazelcast.Aggregation.Aggregators.IntegerAvg.html": {
    "href": "5.2.2/api/Hazelcast.Aggregation.Aggregators.IntegerAvg.html",
    "title": "Method IntegerAvg | Hazelcast .NET Documentation",
    "keywords": "Method IntegerAvg IntegerAvg() an aggregator that calculates the average of the input values. Does NOT accept null input values. Accepts only int input values Declaration public static IAggregator<double> IntegerAvg() Returns Type Description IAggregator<double> The aggregator. IntegerAvg(string) an aggregator that calculates the average of the input values extracted from the given attributePath. Does NOT accept null input values nor null extracted values. Accepts only int input values Declaration public static IAggregator<double> IntegerAvg(string attributePath) Parameters Type Name Description string attributePath attribute Path Returns Type Description IAggregator<double> The aggregator."
  },
  "5.2.2/api/Hazelcast.Aggregation.Aggregators.IntegerSum.html": {
    "href": "5.2.2/api/Hazelcast.Aggregation.Aggregators.IntegerSum.html",
    "title": "Method IntegerSum | Hazelcast .NET Documentation",
    "keywords": "Method IntegerSum IntegerSum() an aggregator that calculates the sum of the input values. Does NOT accept null input values. Accepts only int input values. Declaration public static IAggregator<long> IntegerSum() Returns Type Description IAggregator<long> The aggregator. IntegerSum(string) An aggregator that calculates the sum of the input values extracted from the given attributePath. Does NOT accept null input values nor null extracted values. Accepts only int input values. Declaration public static IAggregator<long> IntegerSum(string attributePath) Parameters Type Name Description string attributePath attribute Path Returns Type Description IAggregator<long> The aggregator."
  },
  "5.2.2/api/Hazelcast.Aggregation.Aggregators.LongAvg.html": {
    "href": "5.2.2/api/Hazelcast.Aggregation.Aggregators.LongAvg.html",
    "title": "Method LongAvg | Hazelcast .NET Documentation",
    "keywords": "Method LongAvg LongAvg() an aggregator that calculates the average of the input values. Does NOT accept null input values. Accepts only long input values Declaration public static IAggregator<double> LongAvg() Returns Type Description IAggregator<double> The aggregator. LongAvg(string) an aggregator that calculates the average of the input values extracted from the given attributePath. Does NOT accept null input values nor null extracted values. Accepts only long input values Declaration public static IAggregator<double> LongAvg(string attributePath) Parameters Type Name Description string attributePath attribute Path Returns Type Description IAggregator<double> The aggregator."
  },
  "5.2.2/api/Hazelcast.Aggregation.Aggregators.LongSum.html": {
    "href": "5.2.2/api/Hazelcast.Aggregation.Aggregators.LongSum.html",
    "title": "Method LongSum | Hazelcast .NET Documentation",
    "keywords": "Method LongSum LongSum() an aggregator that calculates the sum of the input values. Does NOT accept null input values. Accepts only long input values. Declaration public static IAggregator<long> LongSum() Returns Type Description IAggregator<long> The aggregator. LongSum(string) An aggregator that calculates the sum of the input values extracted from the given attributePath. Does NOT accept null input values nor null extracted values. Accepts only long input values. Declaration public static IAggregator<long> LongSum(string attributePath) Parameters Type Name Description string attributePath attribute Path Returns Type Description IAggregator<long> The aggregator."
  },
  "5.2.2/api/Hazelcast.Aggregation.Aggregators.Max.html": {
    "href": "5.2.2/api/Hazelcast.Aggregation.Aggregators.Max.html",
    "title": "Method Max | Hazelcast .NET Documentation",
    "keywords": "Method Max Max<TResult>() an aggregator that calculates the max of the input values. Accepts null input values Declaration public static IAggregator<TResult> Max<TResult>() Returns Type Description IAggregator<TResult> The aggregator. Type Parameters Name Description TResult Max<TResult>(string) an aggregator that calculates the max of the input values extracted from the given attributePath. Accepts null input values and null extracted values. Declaration public static IAggregator<TResult> Max<TResult>(string attributePath) Parameters Type Name Description string attributePath attribute Path Returns Type Description IAggregator<TResult> The aggregator. Type Parameters Name Description TResult"
  },
  "5.2.2/api/Hazelcast.Aggregation.Aggregators.Min.html": {
    "href": "5.2.2/api/Hazelcast.Aggregation.Aggregators.Min.html",
    "title": "Method Min | Hazelcast .NET Documentation",
    "keywords": "Method Min Min<TResult>() an aggregator that calculates the min of the input values. Accepts null input values Declaration public static IAggregator<TResult> Min<TResult>() Returns Type Description IAggregator<TResult> The aggregator. Type Parameters Name Description TResult Min<TResult>(string) an aggregator that calculates the min of the input values extracted from the given attributePath. Accepts null input values and null extracted values. Declaration public static IAggregator<TResult> Min<TResult>(string attributePath) Parameters Type Name Description string attributePath attribute Path Returns Type Description IAggregator<TResult> The aggregator. Type Parameters Name Description TResult"
  },
  "5.2.2/api/Hazelcast.Aggregation.Aggregators.NumberAvg.html": {
    "href": "5.2.2/api/Hazelcast.Aggregation.Aggregators.NumberAvg.html",
    "title": "Method NumberAvg | Hazelcast .NET Documentation",
    "keywords": "Method NumberAvg NumberAvg() an aggregator that calculates the average of the input values. Does NOT accept null input values. Accepts float or double input values. Declaration public static IAggregator<double> NumberAvg() Returns Type Description IAggregator<double> The aggregator. NumberAvg(string) an aggregator that calculates the average of the input values. Does NOT accept null input values nor null extracted values. Accepts float or double input values. Declaration public static IAggregator<double> NumberAvg(string attributePath) Parameters Type Name Description string attributePath attribute Path Returns Type Description IAggregator<double> The aggregator."
  },
  "5.2.2/api/Hazelcast.Aggregation.html": {
    "href": "5.2.2/api/Hazelcast.Aggregation.html",
    "title": "Namespace Hazelcast.Aggregation | Hazelcast .NET Documentation",
    "keywords": "Namespace Hazelcast.Aggregation Classes Aggregators Creates IAggregator<TResult> instances. Interfaces IAggregator<TResult> Defines an aggregator that can transform an object into other objects."
  },
  "5.2.2/api/Hazelcast.Aggregation.IAggregator-1.AttributePath.html": {
    "href": "5.2.2/api/Hazelcast.Aggregation.IAggregator-1.AttributePath.html",
    "title": "Property AttributePath | Hazelcast .NET Documentation",
    "keywords": "Property AttributePath AttributePath Gets the attribute path. Declaration string AttributePath { get; } Property Value Type Description string"
  },
  "5.2.2/api/Hazelcast.Aggregation.IAggregator-1.html": {
    "href": "5.2.2/api/Hazelcast.Aggregation.IAggregator-1.html",
    "title": "Interface IAggregator<TResult> | Hazelcast .NET Documentation",
    "keywords": "Interface IAggregator<TResult> Defines an aggregator that can transform an object into other objects. Namespace: Hazelcast.Aggregation Assembly: Hazelcast.Net.dll Syntax public interface IAggregator<TResult> Type Parameters Name Description TResult The aggregated result type. Properties Name Description AttributePath Gets the attribute path."
  },
  "5.2.2/api/Hazelcast.ClientState.html": {
    "href": "5.2.2/api/Hazelcast.ClientState.html",
    "title": "Enum ClientState | Hazelcast .NET Documentation",
    "keywords": "Enum ClientState Defines the possible states of the client. Namespace: Hazelcast Assembly: Hazelcast.Net.dll Syntax public enum ClientState Fields Name Description ClusterChanged The client, which was Disconnected, is about to reconnect to a different cluster. Connected The client is connected. Disconnected The client has been disconnected. Shutdown The client has shut down. ShuttingDown The client is shutting down. Started The client has started, and is now trying to connect to a first member. Starting The client is starting. Extension Methods ClientStateExtensions.IsActiveState(ClientState)"
  },
  "5.2.2/api/Hazelcast.Clustering.AuthenticationOptions.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Clustering.AuthenticationOptions.-ctor.html",
    "title": "Constructor AuthenticationOptions | Hazelcast .NET Documentation",
    "keywords": "Constructor AuthenticationOptions AuthenticationOptions() Initializes a new instance of the AuthenticationOptions class. Declaration public AuthenticationOptions()"
  },
  "5.2.2/api/Hazelcast.Clustering.AuthenticationOptions.ConfigureCredentials.html": {
    "href": "5.2.2/api/Hazelcast.Clustering.AuthenticationOptions.ConfigureCredentials.html",
    "title": "Method ConfigureCredentials | Hazelcast .NET Documentation",
    "keywords": "Method ConfigureCredentials ConfigureCredentials(ICredentials) Configures static credentials as the authentication mechanism. Declaration public AuthenticationOptions ConfigureCredentials(ICredentials credentials) Parameters Type Name Description ICredentials credentials Credentials. Returns Type Description AuthenticationOptions The security options."
  },
  "5.2.2/api/Hazelcast.Clustering.AuthenticationOptions.ConfigureKerberosCredentials.html": {
    "href": "5.2.2/api/Hazelcast.Clustering.AuthenticationOptions.ConfigureKerberosCredentials.html",
    "title": "Method ConfigureKerberosCredentials | Hazelcast .NET Documentation",
    "keywords": "Method ConfigureKerberosCredentials ConfigureKerberosCredentials(string) Configures Kerberos as the authentication mechanism. Declaration public AuthenticationOptions ConfigureKerberosCredentials(string spn) Parameters Type Name Description string spn The service principal name of the Hazelcast cluster. Returns Type Description AuthenticationOptions The authentication options."
  },
  "5.2.2/api/Hazelcast.Clustering.AuthenticationOptions.ConfigureTokenCredentials.html": {
    "href": "5.2.2/api/Hazelcast.Clustering.AuthenticationOptions.ConfigureTokenCredentials.html",
    "title": "Method ConfigureTokenCredentials | Hazelcast .NET Documentation",
    "keywords": "Method ConfigureTokenCredentials ConfigureTokenCredentials(byte[]) Configures a static token as the authentication mechanism. Declaration public AuthenticationOptions ConfigureTokenCredentials(byte[] token) Parameters Type Name Description byte[] token A token. Returns Type Description AuthenticationOptions The security configuration."
  },
  "5.2.2/api/Hazelcast.Clustering.AuthenticationOptions.ConfigureUsernamePasswordCredentials.html": {
    "href": "5.2.2/api/Hazelcast.Clustering.AuthenticationOptions.ConfigureUsernamePasswordCredentials.html",
    "title": "Method ConfigureUsernamePasswordCredentials | Hazelcast .NET Documentation",
    "keywords": "Method ConfigureUsernamePasswordCredentials ConfigureUsernamePasswordCredentials(string, string) Configures a user name and password as the authentication mechanism. Declaration public AuthenticationOptions ConfigureUsernamePasswordCredentials(string username, string password) Parameters Type Name Description string username Username. string password Password. Returns Type Description AuthenticationOptions The security options."
  },
  "5.2.2/api/Hazelcast.Clustering.AuthenticationOptions.CredentialsFactory.html": {
    "href": "5.2.2/api/Hazelcast.Clustering.AuthenticationOptions.CredentialsFactory.html",
    "title": "Property CredentialsFactory | Hazelcast .NET Documentation",
    "keywords": "Property CredentialsFactory CredentialsFactory Gets the SingletonServiceFactory<TService> for the ICredentialsFactory. Declaration public SingletonServiceFactory<ICredentialsFactory> CredentialsFactory { get; } Property Value Type Description SingletonServiceFactory<ICredentialsFactory> Remarks When set in the configuration file, it is defined as an injected type, for instance: \"credentialsFactory\": { \"typeName\": \"My.CredentialsFactory\", \"args\": { \"foo\": 42 } } where typeName is the name of the type, and args is an optional dictionary of arguments for the type constructor. In addition, shortcuts exists for common credentials factory. The whole credentialsFactory block can be omitted and replace by one of the following: Username and password: \"username-password\": { \"username\": \"someone\", \"password\": \"secret\" } Kerberos: \"kerberos\": { \"spn\": \"service-provider-name\" } Token: \"token\": { \"data\": \"some-secret-token\", \"encoding\": \"none\" } Supported encodings are: none and base64."
  },
  "5.2.2/api/Hazelcast.Clustering.AuthenticationOptions.html": {
    "href": "5.2.2/api/Hazelcast.Clustering.AuthenticationOptions.html",
    "title": "Class AuthenticationOptions | Hazelcast .NET Documentation",
    "keywords": "Class AuthenticationOptions Represents authentication options. Inheritance object AuthenticationOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.Clustering Assembly: Hazelcast.Net.dll Syntax public class AuthenticationOptions Constructors Name Description AuthenticationOptions() Initializes a new instance of the AuthenticationOptions class. Properties Name Description CredentialsFactory Gets the SingletonServiceFactory<TService> for the ICredentialsFactory. Methods Name Description ConfigureCredentials(ICredentials) Configures static credentials as the authentication mechanism. ConfigureKerberosCredentials(string) Configures Kerberos as the authentication mechanism. ConfigureTokenCredentials(byte[]) Configures a static token as the authentication mechanism. ConfigureUsernamePasswordCredentials(string, string) Configures a user name and password as the authentication mechanism."
  },
  "5.2.2/api/Hazelcast.Clustering.HeartbeatOptions.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Clustering.HeartbeatOptions.-ctor.html",
    "title": "Constructor HeartbeatOptions | Hazelcast .NET Documentation",
    "keywords": "Constructor HeartbeatOptions HeartbeatOptions() Initializes a new instance of the HeartbeatOptions class. Declaration public HeartbeatOptions()"
  },
  "5.2.2/api/Hazelcast.Clustering.HeartbeatOptions.html": {
    "href": "5.2.2/api/Hazelcast.Clustering.HeartbeatOptions.html",
    "title": "Class HeartbeatOptions | Hazelcast .NET Documentation",
    "keywords": "Class HeartbeatOptions Represents the heartbeat options Inheritance object HeartbeatOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.Clustering Assembly: Hazelcast.Net.dll Syntax public class HeartbeatOptions Constructors Name Description HeartbeatOptions() Initializes a new instance of the HeartbeatOptions class. Properties Name Description PeriodMilliseconds Gets or sets the heartbeat period. TimeoutMilliseconds Gets or sets the timeout (how long to wait before declaring a connection down)."
  },
  "5.2.2/api/Hazelcast.Clustering.HeartbeatOptions.PeriodMilliseconds.html": {
    "href": "5.2.2/api/Hazelcast.Clustering.HeartbeatOptions.PeriodMilliseconds.html",
    "title": "Property PeriodMilliseconds | Hazelcast .NET Documentation",
    "keywords": "Property PeriodMilliseconds PeriodMilliseconds Gets or sets the heartbeat period. Declaration public int PeriodMilliseconds { get; set; } Property Value Type Description int Remarks Heartbeat will run periodically, and send a ping request to connections that have not been written to over the previous period."
  },
  "5.2.2/api/Hazelcast.Clustering.HeartbeatOptions.TimeoutMilliseconds.html": {
    "href": "5.2.2/api/Hazelcast.Clustering.HeartbeatOptions.TimeoutMilliseconds.html",
    "title": "Property TimeoutMilliseconds | Hazelcast .NET Documentation",
    "keywords": "Property TimeoutMilliseconds TimeoutMilliseconds Gets or sets the timeout (how long to wait before declaring a connection down). Declaration public int TimeoutMilliseconds { get; set; } Property Value Type Description int Remarks Heartbeat will consider that connections that have not received data for the timeout duration, although they should have been pinged, are down. The timeout should be longer than the period."
  },
  "5.2.2/api/Hazelcast.Clustering.html": {
    "href": "5.2.2/api/Hazelcast.Clustering.html",
    "title": "Namespace Hazelcast.Clustering | Hazelcast .NET Documentation",
    "keywords": "Namespace Hazelcast.Clustering Classes AuthenticationOptions Represents authentication options. HeartbeatOptions Represents the heartbeat options"
  },
  "5.2.2/api/Hazelcast.Clustering.LoadBalancing.html": {
    "href": "5.2.2/api/Hazelcast.Clustering.LoadBalancing.html",
    "title": "Namespace Hazelcast.Clustering.LoadBalancing | Hazelcast .NET Documentation",
    "keywords": "Namespace Hazelcast.Clustering.LoadBalancing Classes LoadBalancerBase Provides a base class for load balancers. RandomLoadBalancer Represents a random load balancer. RoundRobinLoadBalancer Represents a round-robin load balancer. StaticLoadBalancer Represents a static load balancer. Interfaces ILoadBalancer Defines a service that can load-balance requests to different members of a cluster."
  },
  "5.2.2/api/Hazelcast.Clustering.LoadBalancing.ILoadBalancer.Count.html": {
    "href": "5.2.2/api/Hazelcast.Clustering.LoadBalancing.ILoadBalancer.Count.html",
    "title": "Property Count | Hazelcast .NET Documentation",
    "keywords": "Property Count Count Gets the number of members. Declaration int Count { get; } Property Value Type Description int"
  },
  "5.2.2/api/Hazelcast.Clustering.LoadBalancing.ILoadBalancer.GetMember.html": {
    "href": "5.2.2/api/Hazelcast.Clustering.LoadBalancing.ILoadBalancer.GetMember.html",
    "title": "Method GetMember | Hazelcast .NET Documentation",
    "keywords": "Method GetMember GetMember() Selects a member. Declaration Guid GetMember() Returns Type Description Guid The unique identifier of the selected member, if any; otherwise Guid.Empty."
  },
  "5.2.2/api/Hazelcast.Clustering.LoadBalancing.ILoadBalancer.html": {
    "href": "5.2.2/api/Hazelcast.Clustering.LoadBalancing.ILoadBalancer.html",
    "title": "Interface ILoadBalancer | Hazelcast .NET Documentation",
    "keywords": "Interface ILoadBalancer Defines a service that can load-balance requests to different members of a cluster. Namespace: Hazelcast.Clustering.LoadBalancing Assembly: Hazelcast.Net.dll Syntax public interface ILoadBalancer Properties Name Description Count Gets the number of members. Methods Name Description GetMember() Selects a member. SetMembers(IEnumerable<Guid>) Sets the members."
  },
  "5.2.2/api/Hazelcast.Clustering.LoadBalancing.ILoadBalancer.SetMembers.html": {
    "href": "5.2.2/api/Hazelcast.Clustering.LoadBalancing.ILoadBalancer.SetMembers.html",
    "title": "Method SetMembers | Hazelcast .NET Documentation",
    "keywords": "Method SetMembers SetMembers(IEnumerable<Guid>) Sets the members. Declaration void SetMembers(IEnumerable<Guid> memberIds) Parameters Type Name Description IEnumerable<Guid> memberIds The identifiers of the members. Remarks The set of members that fully replaces the existing members."
  },
  "5.2.2/api/Hazelcast.Clustering.LoadBalancing.LoadBalancerBase.Count.html": {
    "href": "5.2.2/api/Hazelcast.Clustering.LoadBalancing.LoadBalancerBase.Count.html",
    "title": "Property Count | Hazelcast .NET Documentation",
    "keywords": "Property Count Count Gets the number of members. Declaration public virtual int Count { get; } Property Value Type Description int Implements ILoadBalancer.Count"
  },
  "5.2.2/api/Hazelcast.Clustering.LoadBalancing.LoadBalancerBase.GetMember.html": {
    "href": "5.2.2/api/Hazelcast.Clustering.LoadBalancing.LoadBalancerBase.GetMember.html",
    "title": "Method GetMember | Hazelcast .NET Documentation",
    "keywords": "Method GetMember GetMember() Selects a member. Declaration public abstract Guid GetMember() Returns Type Description Guid The unique identifier of the selected member, if any; otherwise Guid.Empty. Implements ILoadBalancer.GetMember()"
  },
  "5.2.2/api/Hazelcast.Clustering.LoadBalancing.LoadBalancerBase.html": {
    "href": "5.2.2/api/Hazelcast.Clustering.LoadBalancing.LoadBalancerBase.html",
    "title": "Class LoadBalancerBase | Hazelcast .NET Documentation",
    "keywords": "Class LoadBalancerBase Provides a base class for load balancers. Inheritance object LoadBalancerBase RandomLoadBalancer RoundRobinLoadBalancer StaticLoadBalancer Implements ILoadBalancer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.Clustering.LoadBalancing Assembly: Hazelcast.Net.dll Syntax public abstract class LoadBalancerBase : ILoadBalancer Properties Name Description Count Gets the number of members. Members Gets the members. Methods Name Description GetMember() Selects a member. SetMembers(IEnumerable<Guid>) Sets the members."
  },
  "5.2.2/api/Hazelcast.Clustering.LoadBalancing.LoadBalancerBase.Members.html": {
    "href": "5.2.2/api/Hazelcast.Clustering.LoadBalancing.LoadBalancerBase.Members.html",
    "title": "Property Members | Hazelcast .NET Documentation",
    "keywords": "Property Members Members Gets the members. Declaration protected List<Guid> Members { get; } Property Value Type Description List<Guid>"
  },
  "5.2.2/api/Hazelcast.Clustering.LoadBalancing.LoadBalancerBase.SetMembers.html": {
    "href": "5.2.2/api/Hazelcast.Clustering.LoadBalancing.LoadBalancerBase.SetMembers.html",
    "title": "Method SetMembers | Hazelcast .NET Documentation",
    "keywords": "Method SetMembers SetMembers(IEnumerable<Guid>) Sets the members. Declaration public virtual void SetMembers(IEnumerable<Guid> memberIds) Parameters Type Name Description IEnumerable<Guid> memberIds The identifiers of the members. Implements ILoadBalancer.SetMembers(IEnumerable<Guid>) Remarks The set of members that fully replaces the existing members."
  },
  "5.2.2/api/Hazelcast.Clustering.LoadBalancing.RandomLoadBalancer.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Clustering.LoadBalancing.RandomLoadBalancer.-ctor.html",
    "title": "Constructor RandomLoadBalancer | Hazelcast .NET Documentation",
    "keywords": "Constructor RandomLoadBalancer RandomLoadBalancer() Initializes a new instance of the RandomLoadBalancer class. Declaration public RandomLoadBalancer()"
  },
  "5.2.2/api/Hazelcast.Clustering.LoadBalancing.RandomLoadBalancer.GetMember.html": {
    "href": "5.2.2/api/Hazelcast.Clustering.LoadBalancing.RandomLoadBalancer.GetMember.html",
    "title": "Method GetMember | Hazelcast .NET Documentation",
    "keywords": "Method GetMember GetMember() Selects a member. Declaration public override Guid GetMember() Returns Type Description Guid The unique identifier of the selected member, if any; otherwise Guid.Empty. Overrides LoadBalancerBase.GetMember()"
  },
  "5.2.2/api/Hazelcast.Clustering.LoadBalancing.RandomLoadBalancer.html": {
    "href": "5.2.2/api/Hazelcast.Clustering.LoadBalancing.RandomLoadBalancer.html",
    "title": "Class RandomLoadBalancer | Hazelcast .NET Documentation",
    "keywords": "Class RandomLoadBalancer Represents a random load balancer. Inheritance object LoadBalancerBase RandomLoadBalancer Implements ILoadBalancer Inherited Members LoadBalancerBase.Members LoadBalancerBase.Count LoadBalancerBase.SetMembers(IEnumerable<Guid>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.Clustering.LoadBalancing Assembly: Hazelcast.Net.dll Syntax public class RandomLoadBalancer : LoadBalancerBase, ILoadBalancer Remarks A random load balancer returns random members. Constructors Name Description RandomLoadBalancer() Initializes a new instance of the RandomLoadBalancer class. Methods Name Description GetMember() Selects a member."
  },
  "5.2.2/api/Hazelcast.Clustering.LoadBalancing.RoundRobinLoadBalancer.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Clustering.LoadBalancing.RoundRobinLoadBalancer.-ctor.html",
    "title": "Constructor RoundRobinLoadBalancer | Hazelcast .NET Documentation",
    "keywords": "Constructor RoundRobinLoadBalancer RoundRobinLoadBalancer() Initializes a new instance of the RoundRobinLoadBalancer class. Declaration public RoundRobinLoadBalancer()"
  },
  "5.2.2/api/Hazelcast.Clustering.LoadBalancing.RoundRobinLoadBalancer.GetMember.html": {
    "href": "5.2.2/api/Hazelcast.Clustering.LoadBalancing.RoundRobinLoadBalancer.GetMember.html",
    "title": "Method GetMember | Hazelcast .NET Documentation",
    "keywords": "Method GetMember GetMember() Selects a member. Declaration public override Guid GetMember() Returns Type Description Guid The unique identifier of the selected member, if any; otherwise Guid.Empty. Overrides LoadBalancerBase.GetMember()"
  },
  "5.2.2/api/Hazelcast.Clustering.LoadBalancing.RoundRobinLoadBalancer.html": {
    "href": "5.2.2/api/Hazelcast.Clustering.LoadBalancing.RoundRobinLoadBalancer.html",
    "title": "Class RoundRobinLoadBalancer | Hazelcast .NET Documentation",
    "keywords": "Class RoundRobinLoadBalancer Represents a round-robin load balancer. Inheritance object LoadBalancerBase RoundRobinLoadBalancer Implements ILoadBalancer Inherited Members LoadBalancerBase.Members LoadBalancerBase.Count LoadBalancerBase.SetMembers(IEnumerable<Guid>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.Clustering.LoadBalancing Assembly: Hazelcast.Net.dll Syntax public class RoundRobinLoadBalancer : LoadBalancerBase, ILoadBalancer Remarks A round-robin load balancer returns members one after another. Constructors Name Description RoundRobinLoadBalancer() Initializes a new instance of the RoundRobinLoadBalancer class. Methods Name Description GetMember() Selects a member."
  },
  "5.2.2/api/Hazelcast.Clustering.LoadBalancing.StaticLoadBalancer.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Clustering.LoadBalancing.StaticLoadBalancer.-ctor.html",
    "title": "Constructor StaticLoadBalancer | Hazelcast .NET Documentation",
    "keywords": "Constructor StaticLoadBalancer StaticLoadBalancer(IReadOnlyDictionary<string, string>) Initializes a new instance of the RandomLoadBalancer class. Declaration public StaticLoadBalancer(IReadOnlyDictionary<string, string> args) Parameters Type Name Description IReadOnlyDictionary<string, string> args Arguments. StaticLoadBalancer(Guid) Initializes a new instance of the StaticLoadBalancer class. Declaration public StaticLoadBalancer(Guid memberId) Parameters Type Name Description Guid memberId The member identifier."
  },
  "5.2.2/api/Hazelcast.Clustering.LoadBalancing.StaticLoadBalancer.Count.html": {
    "href": "5.2.2/api/Hazelcast.Clustering.LoadBalancing.StaticLoadBalancer.Count.html",
    "title": "Property Count | Hazelcast .NET Documentation",
    "keywords": "Property Count Count Gets the number of members. Declaration public override int Count { get; } Property Value Type Description int Overrides LoadBalancerBase.Count"
  },
  "5.2.2/api/Hazelcast.Clustering.LoadBalancing.StaticLoadBalancer.GetMember.html": {
    "href": "5.2.2/api/Hazelcast.Clustering.LoadBalancing.StaticLoadBalancer.GetMember.html",
    "title": "Method GetMember | Hazelcast .NET Documentation",
    "keywords": "Method GetMember GetMember() Selects a member. Declaration public override Guid GetMember() Returns Type Description Guid The unique identifier of the selected member, if any; otherwise Guid.Empty. Overrides LoadBalancerBase.GetMember()"
  },
  "5.2.2/api/Hazelcast.Clustering.LoadBalancing.StaticLoadBalancer.html": {
    "href": "5.2.2/api/Hazelcast.Clustering.LoadBalancing.StaticLoadBalancer.html",
    "title": "Class StaticLoadBalancer | Hazelcast .NET Documentation",
    "keywords": "Class StaticLoadBalancer Represents a static load balancer. Inheritance object LoadBalancerBase StaticLoadBalancer Implements ILoadBalancer Inherited Members LoadBalancerBase.Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.Clustering.LoadBalancing Assembly: Hazelcast.Net.dll Syntax public class StaticLoadBalancer : LoadBalancerBase, ILoadBalancer Remarks A static load balancer knows only one member and always return that member. Constructors Name Description StaticLoadBalancer(IReadOnlyDictionary<string, string>) Initializes a new instance of the RandomLoadBalancer class. StaticLoadBalancer(Guid) Initializes a new instance of the StaticLoadBalancer class. Properties Name Description Count Gets the number of members. Methods Name Description GetMember() Selects a member. SetMembers(IEnumerable<Guid>) Sets the members."
  },
  "5.2.2/api/Hazelcast.Clustering.LoadBalancing.StaticLoadBalancer.SetMembers.html": {
    "href": "5.2.2/api/Hazelcast.Clustering.LoadBalancing.StaticLoadBalancer.SetMembers.html",
    "title": "Method SetMembers | Hazelcast .NET Documentation",
    "keywords": "Method SetMembers SetMembers(IEnumerable<Guid>) Sets the members. Declaration public override void SetMembers(IEnumerable<Guid> memberIds) Parameters Type Name Description IEnumerable<Guid> memberIds The identifiers of the members. Overrides LoadBalancerBase.SetMembers(IEnumerable<Guid>) Remarks The set of members that fully replaces the existing members."
  },
  "5.2.2/api/Hazelcast.Configuration.ConfigurationBuilderExtensions.AddHazelcast.html": {
    "href": "5.2.2/api/Hazelcast.Configuration.ConfigurationBuilderExtensions.AddHazelcast.html",
    "title": "Method AddHazelcast | Hazelcast .NET Documentation",
    "keywords": "Method AddHazelcast AddHazelcast(IConfigurationBuilder, string[], IDictionary<string, string>, IEnumerable<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, string, string, string) Configures an IConfigurationBuilder to read Hazelcast configuration values from various sources. Declaration public static IConfigurationBuilder AddHazelcast(this IConfigurationBuilder configurationBuilder, string[] args, IDictionary<string, string> switchMappings = null, IEnumerable<KeyValuePair<string, string>> defaults = null, IEnumerable<KeyValuePair<string, string>> keyValues = null, string optionsFilePath = null, string optionsFileName = null, string environmentName = null) Parameters Type Name Description IConfigurationBuilder configurationBuilder The IConfigurationBuilder to add to. string[] args The command line args. IDictionary<string, string> switchMappings Command line switch mappings. IEnumerable<KeyValuePair<string, string>> defaults The defaults key-value configuration pairs. IEnumerable<KeyValuePair<string, string>> keyValues The optional key-value configuration pairs. string optionsFilePath The optional path to the options file. string optionsFileName The optional name of the options file. string environmentName An optional environment name. Returns Type Description IConfigurationBuilder The IConfigurationBuilder. Remarks Adds support for hazelcast-specific sources. Does not add default support for other sources. If environmentName is missing, the environment name is determined using the DOTNET_ENVIRONMENT and ASPNETCORE_ENVIRONMENT environment variables. If not specified, the environment name is Production."
  },
  "5.2.2/api/Hazelcast.Configuration.ConfigurationBuilderExtensions.AddHazelcastAndDefaults.html": {
    "href": "5.2.2/api/Hazelcast.Configuration.ConfigurationBuilderExtensions.AddHazelcastAndDefaults.html",
    "title": "Method AddHazelcastAndDefaults | Hazelcast .NET Documentation",
    "keywords": "Method AddHazelcastAndDefaults AddHazelcastAndDefaults(IConfigurationBuilder, string[], IDictionary<string, string>, IEnumerable<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, string, string, string) Configures an IConfigurationBuilder to read default and Hazelcast configuration values from various sources. Declaration public static IConfigurationBuilder AddHazelcastAndDefaults(this IConfigurationBuilder configurationBuilder, string[] args, IDictionary<string, string> switchMappings = null, IEnumerable<KeyValuePair<string, string>> defaults = null, IEnumerable<KeyValuePair<string, string>> keyValues = null, string optionsFilePath = null, string optionsFileName = null, string environmentName = null) Parameters Type Name Description IConfigurationBuilder configurationBuilder The IConfigurationBuilder to add to. string[] args The command line args. IDictionary<string, string> switchMappings Command line switch mappings. IEnumerable<KeyValuePair<string, string>> defaults The defaults key-value configuration pairs. IEnumerable<KeyValuePair<string, string>> keyValues The optional key-value configuration pairs. string optionsFilePath The optional path to the options file. string optionsFileName The optional name of the options file. string environmentName An optional environment name. Returns Type Description IConfigurationBuilder The IConfigurationBuilder. Remarks Adds support for default and hazelcast-specific sources. If environmentName is missing, the environment name is determined using the DOTNET_ENVIRONMENT and ASPNETCORE_ENVIRONMENT environment variables. If not specified, the environment name is Production."
  },
  "5.2.2/api/Hazelcast.Configuration.ConfigurationBuilderExtensions.AddHazelcastCommandLine.html": {
    "href": "5.2.2/api/Hazelcast.Configuration.ConfigurationBuilderExtensions.AddHazelcastCommandLine.html",
    "title": "Method AddHazelcastCommandLine | Hazelcast .NET Documentation",
    "keywords": "Method AddHazelcastCommandLine AddHazelcastCommandLine(IConfigurationBuilder, string[], IDictionary<string, string>) Adds an IConfigurationProvider that reads Hazelcast configuration values from the command line. Declaration public static IConfigurationBuilder AddHazelcastCommandLine(this IConfigurationBuilder configurationBuilder, string[] args, IDictionary<string, string> switchMappings = null) Parameters Type Name Description IConfigurationBuilder configurationBuilder The IConfigurationBuilder to add to. string[] args The command line args. IDictionary<string, string> switchMappings Command line switch mappings. Returns Type Description IConfigurationBuilder The IConfigurationBuilder. Remarks Adds support for `hazelcast.x.y` arguments that do not respect the standard `hazelcast:x:y` pattern. Does not add default support for command line arguments."
  },
  "5.2.2/api/Hazelcast.Configuration.ConfigurationBuilderExtensions.AddHazelcastEnvironmentVariables.html": {
    "href": "5.2.2/api/Hazelcast.Configuration.ConfigurationBuilderExtensions.AddHazelcastEnvironmentVariables.html",
    "title": "Method AddHazelcastEnvironmentVariables | Hazelcast .NET Documentation",
    "keywords": "Method AddHazelcastEnvironmentVariables AddHazelcastEnvironmentVariables(IConfigurationBuilder) Adds an IConfigurationProvider that reads Hazelcast configuration values from environment variables. Declaration public static IConfigurationBuilder AddHazelcastEnvironmentVariables(this IConfigurationBuilder configurationBuilder) Parameters Type Name Description IConfigurationBuilder configurationBuilder The IConfigurationBuilder to add to. Returns Type Description IConfigurationBuilder The IConfigurationBuilder. Remarks Adds support for the hazelcast.x.y variables that do not respect the standard hazelcast__x__y pattern. Does not add default support for environment variables."
  },
  "5.2.2/api/Hazelcast.Configuration.ConfigurationBuilderExtensions.AddHazelcastFile.html": {
    "href": "5.2.2/api/Hazelcast.Configuration.ConfigurationBuilderExtensions.AddHazelcastFile.html",
    "title": "Method AddHazelcastFile | Hazelcast .NET Documentation",
    "keywords": "Method AddHazelcastFile AddHazelcastFile(IConfigurationBuilder, string, string, string) Adds an IConfigurationProvider that reads Hazelcast configuration value from a file. Declaration public static IConfigurationBuilder AddHazelcastFile(this IConfigurationBuilder configurationBuilder, string filePath, string fileName, string environmentName) Parameters Type Name Description IConfigurationBuilder configurationBuilder The IConfigurationBuilder to add to. string filePath The path to the file. string fileName The name of the file. string environmentName The name of the environment. Returns Type Description IConfigurationBuilder The IConfigurationBuilder."
  },
  "5.2.2/api/Hazelcast.Configuration.ConfigurationBuilderExtensions.AddHazelcastInMemoryCollection.html": {
    "href": "5.2.2/api/Hazelcast.Configuration.ConfigurationBuilderExtensions.AddHazelcastInMemoryCollection.html",
    "title": "Method AddHazelcastInMemoryCollection | Hazelcast .NET Documentation",
    "keywords": "Method AddHazelcastInMemoryCollection AddHazelcastInMemoryCollection(IConfigurationBuilder, IEnumerable<KeyValuePair<string, string>>) Adds an IConfigurationProvider that reads Hazelcast configuration values from an in-memory collection. Declaration public static IConfigurationBuilder AddHazelcastInMemoryCollection(this IConfigurationBuilder configurationBuilder, IEnumerable<KeyValuePair<string, string>> initialData) Parameters Type Name Description IConfigurationBuilder configurationBuilder The IConfigurationBuilder to add to. IEnumerable<KeyValuePair<string, string>> initialData The initial key value configuration pairs. Returns Type Description IConfigurationBuilder The IConfigurationBuilder."
  },
  "5.2.2/api/Hazelcast.Configuration.ConfigurationBuilderExtensions.html": {
    "href": "5.2.2/api/Hazelcast.Configuration.ConfigurationBuilderExtensions.html",
    "title": "Class ConfigurationBuilderExtensions | Hazelcast .NET Documentation",
    "keywords": "Class ConfigurationBuilderExtensions Provides extension methods for the IConfigurationBuilder interface. Inheritance object ConfigurationBuilderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.Configuration Assembly: Hazelcast.Net.dll Syntax public static class ConfigurationBuilderExtensions Methods Name Description AddHazelcast(IConfigurationBuilder, string[], IDictionary<string, string>, IEnumerable<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, string, string, string) Configures an IConfigurationBuilder to read Hazelcast configuration values from various sources. AddHazelcastAndDefaults(IConfigurationBuilder, string[], IDictionary<string, string>, IEnumerable<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, string, string, string) Configures an IConfigurationBuilder to read default and Hazelcast configuration values from various sources. AddHazelcastCommandLine(IConfigurationBuilder, string[], IDictionary<string, string>) Adds an IConfigurationProvider that reads Hazelcast configuration values from the command line. AddHazelcastEnvironmentVariables(IConfigurationBuilder) Adds an IConfigurationProvider that reads Hazelcast configuration values from environment variables. AddHazelcastFile(IConfigurationBuilder, string, string, string) Adds an IConfigurationProvider that reads Hazelcast configuration value from a file. AddHazelcastInMemoryCollection(IConfigurationBuilder, IEnumerable<KeyValuePair<string, string>>) Adds an IConfigurationProvider that reads Hazelcast configuration values from an in-memory collection."
  },
  "5.2.2/api/Hazelcast.Configuration.ConfigurationException.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Configuration.ConfigurationException.-ctor.html",
    "title": "Constructor ConfigurationException | Hazelcast .NET Documentation",
    "keywords": "Constructor ConfigurationException ConfigurationException() Initializes a new instance of the ConfigurationException class. Declaration public ConfigurationException() ConfigurationException(string) Initializes a new instance of the ConfigurationException class with a specified error message. Declaration public ConfigurationException(string message) Parameters Type Name Description string message The message that describes the error. ConfigurationException(Exception) Initializes a new instance of the ConfigurationException class with a reference to the inner exception that is the cause of this exception. Declaration public ConfigurationException(Exception innerException) Parameters Type Name Description Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. ConfigurationException(string, Exception) Initializes a new instance of the ConfigurationException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public ConfigurationException(string message, Exception innerException) Parameters Type Name Description string message The message that describes the error. Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified."
  },
  "5.2.2/api/Hazelcast.Configuration.ConfigurationException.html": {
    "href": "5.2.2/api/Hazelcast.Configuration.ConfigurationException.html",
    "title": "Class ConfigurationException | Hazelcast .NET Documentation",
    "keywords": "Class ConfigurationException Represents the exception that is throw when the Hazelcast configuration is incorrect. Inheritance object Exception HazelcastException ConfigurationException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Namespace: Hazelcast.Configuration Assembly: Hazelcast.Net.dll Syntax [Serializable] public sealed class ConfigurationException : HazelcastException, ISerializable Constructors Name Description ConfigurationException() Initializes a new instance of the ConfigurationException class. ConfigurationException(Exception) Initializes a new instance of the ConfigurationException class with a reference to the inner exception that is the cause of this exception. ConfigurationException(string, Exception) Initializes a new instance of the ConfigurationException class with a specified error message and a reference to the inner exception that is the cause of this exception. ConfigurationException(string) Initializes a new instance of the ConfigurationException class with a specified error message."
  },
  "5.2.2/api/Hazelcast.Configuration.html": {
    "href": "5.2.2/api/Hazelcast.Configuration.html",
    "title": "Namespace Hazelcast.Configuration | Hazelcast .NET Documentation",
    "keywords": "Namespace Hazelcast.Configuration Classes ConfigurationBuilderExtensions Provides extension methods for the IConfigurationBuilder interface. ConfigurationException Represents the exception that is throw when the Hazelcast configuration is incorrect."
  },
  "5.2.2/api/Hazelcast.Core.AsyncContext.Current.html": {
    "href": "5.2.2/api/Hazelcast.Core.AsyncContext.Current.html",
    "title": "Property Current | Hazelcast .NET Documentation",
    "keywords": "Property Current Current Gets the current context. Declaration public static AsyncContext Current { get; } Property Value Type Description AsyncContext"
  },
  "5.2.2/api/Hazelcast.Core.AsyncContext.html": {
    "href": "5.2.2/api/Hazelcast.Core.AsyncContext.html",
    "title": "Class AsyncContext | Hazelcast .NET Documentation",
    "keywords": "Class AsyncContext Represents an ambient context that is local to a given asynchronous control flow, such as an asynchronous method. Inheritance object AsyncContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Syntax public sealed class AsyncContext Properties Name Description Current Gets the current context. Id Gets the unique identifier for the current context. Methods Name Description New() Replaces the current context with a new context."
  },
  "5.2.2/api/Hazelcast.Core.AsyncContext.Id.html": {
    "href": "5.2.2/api/Hazelcast.Core.AsyncContext.Id.html",
    "title": "Property Id | Hazelcast .NET Documentation",
    "keywords": "Property Id Id Gets the unique identifier for the current context. Declaration public long Id { get; } Property Value Type Description long"
  },
  "5.2.2/api/Hazelcast.Core.AsyncContext.New.html": {
    "href": "5.2.2/api/Hazelcast.Core.AsyncContext.New.html",
    "title": "Method New | Hazelcast .NET Documentation",
    "keywords": "Method New New() Replaces the current context with a new context. Declaration public static IDisposable New() Returns Type Description IDisposable An IDisposable object which will restore the replaced context when disposed."
  },
  "5.2.2/api/Hazelcast.Core.ClientStateExtensions.html": {
    "href": "5.2.2/api/Hazelcast.Core.ClientStateExtensions.html",
    "title": "Class ClientStateExtensions | Hazelcast .NET Documentation",
    "keywords": "Class ClientStateExtensions Provides extension methods for the ClientState enum. Inheritance object ClientStateExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Syntax public static class ClientStateExtensions Methods Name Description IsActiveState(ClientState) Whether this state is an active state."
  },
  "5.2.2/api/Hazelcast.Core.ClientStateExtensions.IsActiveState.html": {
    "href": "5.2.2/api/Hazelcast.Core.ClientStateExtensions.IsActiveState.html",
    "title": "Method IsActiveState | Hazelcast .NET Documentation",
    "keywords": "Method IsActiveState IsActiveState(ClientState) Whether this state is an active state. Declaration public static bool IsActiveState(this ClientState state) Parameters Type Name Description ClientState state This state. Returns Type Description bool true is this state is an active state; otherwise false."
  },
  "5.2.2/api/Hazelcast.Core.ConnectionRetryOptions.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Core.ConnectionRetryOptions.-ctor.html",
    "title": "Constructor ConnectionRetryOptions | Hazelcast .NET Documentation",
    "keywords": "Constructor ConnectionRetryOptions ConnectionRetryOptions() Initializes a new instance of the ConnectionRetryOptions class. Declaration public ConnectionRetryOptions()"
  },
  "5.2.2/api/Hazelcast.Core.ConnectionRetryOptions.ClusterConnectionTimeoutMilliseconds.html": {
    "href": "5.2.2/api/Hazelcast.Core.ConnectionRetryOptions.ClusterConnectionTimeoutMilliseconds.html",
    "title": "Property ClusterConnectionTimeoutMilliseconds | Hazelcast .NET Documentation",
    "keywords": "Property ClusterConnectionTimeoutMilliseconds ClusterConnectionTimeoutMilliseconds Gets or sets the timeout in milliseconds. Declaration public long ClusterConnectionTimeoutMilliseconds { get; set; } Property Value Type Description long"
  },
  "5.2.2/api/Hazelcast.Core.ConnectionRetryOptions.html": {
    "href": "5.2.2/api/Hazelcast.Core.ConnectionRetryOptions.html",
    "title": "Class ConnectionRetryOptions | Hazelcast .NET Documentation",
    "keywords": "Class ConnectionRetryOptions Represents the configuration for the retry strategy. Inheritance object ConnectionRetryOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Syntax public class ConnectionRetryOptions Constructors Name Description ConnectionRetryOptions() Initializes a new instance of the ConnectionRetryOptions class. Properties Name Description ClusterConnectionTimeoutMilliseconds Gets or sets the timeout in milliseconds. InitialBackoffMilliseconds Gets or sets the initial back-off time in milliseconds. Jitter Gets or sets the jitter. MaxBackoffMilliseconds Gets or sets the maximum back-off time in milliseconds. Multiplier Gets or sets the multiplier."
  },
  "5.2.2/api/Hazelcast.Core.ConnectionRetryOptions.InitialBackoffMilliseconds.html": {
    "href": "5.2.2/api/Hazelcast.Core.ConnectionRetryOptions.InitialBackoffMilliseconds.html",
    "title": "Property InitialBackoffMilliseconds | Hazelcast .NET Documentation",
    "keywords": "Property InitialBackoffMilliseconds InitialBackoffMilliseconds Gets or sets the initial back-off time in milliseconds. Declaration public int InitialBackoffMilliseconds { get; set; } Property Value Type Description int"
  },
  "5.2.2/api/Hazelcast.Core.ConnectionRetryOptions.Jitter.html": {
    "href": "5.2.2/api/Hazelcast.Core.ConnectionRetryOptions.Jitter.html",
    "title": "Property Jitter | Hazelcast .NET Documentation",
    "keywords": "Property Jitter Jitter Gets or sets the jitter. Declaration public double Jitter { get; set; } Property Value Type Description double"
  },
  "5.2.2/api/Hazelcast.Core.ConnectionRetryOptions.MaxBackoffMilliseconds.html": {
    "href": "5.2.2/api/Hazelcast.Core.ConnectionRetryOptions.MaxBackoffMilliseconds.html",
    "title": "Property MaxBackoffMilliseconds | Hazelcast .NET Documentation",
    "keywords": "Property MaxBackoffMilliseconds MaxBackoffMilliseconds Gets or sets the maximum back-off time in milliseconds. Declaration public int MaxBackoffMilliseconds { get; set; } Property Value Type Description int"
  },
  "5.2.2/api/Hazelcast.Core.ConnectionRetryOptions.Multiplier.html": {
    "href": "5.2.2/api/Hazelcast.Core.ConnectionRetryOptions.Multiplier.html",
    "title": "Property Multiplier | Hazelcast .NET Documentation",
    "keywords": "Property Multiplier Multiplier Gets or sets the multiplier. Declaration public double Multiplier { get; set; } Property Value Type Description double"
  },
  "5.2.2/api/Hazelcast.Core.Endianness.html": {
    "href": "5.2.2/api/Hazelcast.Core.Endianness.html",
    "title": "Enum Endianness | Hazelcast .NET Documentation",
    "keywords": "Enum Endianness Represents the order of the bytes within a binary representation of a number. Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Syntax public enum Endianness Fields Name Description BigEndian Big-endian. LittleEndian Little-endian. Extension Methods EndiannessExtensions.IsBigEndian(Endianness) EndiannessExtensions.IsLittleEndian(Endianness)"
  },
  "5.2.2/api/Hazelcast.Core.EndiannessExtensions.html": {
    "href": "5.2.2/api/Hazelcast.Core.EndiannessExtensions.html",
    "title": "Class EndiannessExtensions | Hazelcast .NET Documentation",
    "keywords": "Class EndiannessExtensions Provides extension methods to the Endianness enumeration. Inheritance object EndiannessExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Syntax public static class EndiannessExtensions Properties Name Description NativeEndianness Gets the native endianness of the computer architecture where the code is executing. Methods Name Description IsBigEndian(Endianness) Determines whether this endianness is 'big-endian'. IsLittleEndian(Endianness) Determines whether this endianness is 'little-endian'."
  },
  "5.2.2/api/Hazelcast.Core.EndiannessExtensions.IsBigEndian.html": {
    "href": "5.2.2/api/Hazelcast.Core.EndiannessExtensions.IsBigEndian.html",
    "title": "Method IsBigEndian | Hazelcast .NET Documentation",
    "keywords": "Method IsBigEndian IsBigEndian(Endianness) Determines whether this endianness is 'big-endian'. Declaration public static bool IsBigEndian(this Endianness endianness) Parameters Type Name Description Endianness endianness The endianness. Returns Type Description bool true if this endianness is 'big-endian'; otherwise false."
  },
  "5.2.2/api/Hazelcast.Core.EndiannessExtensions.IsLittleEndian.html": {
    "href": "5.2.2/api/Hazelcast.Core.EndiannessExtensions.IsLittleEndian.html",
    "title": "Method IsLittleEndian | Hazelcast .NET Documentation",
    "keywords": "Method IsLittleEndian IsLittleEndian(Endianness) Determines whether this endianness is 'little-endian'. Declaration public static bool IsLittleEndian(this Endianness endianness) Parameters Type Name Description Endianness endianness The endianness. Returns Type Description bool true if this endianness is 'little-endian'; otherwise false."
  },
  "5.2.2/api/Hazelcast.Core.EndiannessExtensions.NativeEndianness.html": {
    "href": "5.2.2/api/Hazelcast.Core.EndiannessExtensions.NativeEndianness.html",
    "title": "Property NativeEndianness | Hazelcast .NET Documentation",
    "keywords": "Property NativeEndianness NativeEndianness Gets the native endianness of the computer architecture where the code is executing. Declaration public static Endianness NativeEndianness { get; } Property Value Type Description Endianness"
  },
  "5.2.2/api/Hazelcast.Core.EventHandlersBase-1.Add.html": {
    "href": "5.2.2/api/Hazelcast.Core.EventHandlersBase-1.Add.html",
    "title": "Method Add | Hazelcast .NET Documentation",
    "keywords": "Method Add Add(TEventHandler) Adds a handler. Declaration protected void Add(TEventHandler handler) Parameters Type Name Description TEventHandler handler The handler."
  },
  "5.2.2/api/Hazelcast.Core.EventHandlersBase-1.GetEnumerator.html": {
    "href": "5.2.2/api/Hazelcast.Core.EventHandlersBase-1.GetEnumerator.html",
    "title": "Method GetEnumerator | Hazelcast .NET Documentation",
    "keywords": "Method GetEnumerator GetEnumerator() Declaration public IEnumerator<TEventHandler> GetEnumerator() Returns Type Description IEnumerator<TEventHandler> Implements IEnumerable<T>.GetEnumerator()"
  },
  "5.2.2/api/Hazelcast.Core.EventHandlersBase-1.html": {
    "href": "5.2.2/api/Hazelcast.Core.EventHandlersBase-1.html",
    "title": "Class EventHandlersBase<TEventHandler> | Hazelcast .NET Documentation",
    "keywords": "Class EventHandlersBase<TEventHandler> Provides a base class for classes containing event handlers. Inheritance object EventHandlersBase<TEventHandler> CollectionItemEventHandlers<T> MapEventHandlers<TKey, TValue> MultiMapEventHandlers<TKey, TValue> ReplicatedMapEventHandlers<TKey, TValue> TopicEventHandlers<T> HazelcastClientEventHandlers Implements IEnumerable<TEventHandler> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Syntax public abstract class EventHandlersBase<TEventHandler> : IEnumerable<TEventHandler>, IEnumerable Type Parameters Name Description TEventHandler The type of the event handlers. Methods Name Description Add(TEventHandler) Adds a handler. GetEnumerator() Remove(TEventHandler) Removes a handler."
  },
  "5.2.2/api/Hazelcast.Core.EventHandlersBase-1.Remove.html": {
    "href": "5.2.2/api/Hazelcast.Core.EventHandlersBase-1.Remove.html",
    "title": "Method Remove | Hazelcast .NET Documentation",
    "keywords": "Method Remove Remove(TEventHandler) Removes a handler. Declaration public void Remove(TEventHandler handler) Parameters Type Name Description TEventHandler handler The handler to remove."
  },
  "5.2.2/api/Hazelcast.Core.HazelcastJsonValue.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Core.HazelcastJsonValue.-ctor.html",
    "title": "Constructor HazelcastJsonValue | Hazelcast .NET Documentation",
    "keywords": "Constructor HazelcastJsonValue HazelcastJsonValue(string) Initializes a new instance of the HazelcastJsonValue with a string containing JSON. Declaration public HazelcastJsonValue(string json) Parameters Type Name Description string json The string containing JSON."
  },
  "5.2.2/api/Hazelcast.Core.HazelcastJsonValue.Equals.html": {
    "href": "5.2.2/api/Hazelcast.Core.HazelcastJsonValue.Equals.html",
    "title": "Method Equals | Hazelcast .NET Documentation",
    "keywords": "Method Equals Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides object.Equals(object)"
  },
  "5.2.2/api/Hazelcast.Core.HazelcastJsonValue.GetHashCode.html": {
    "href": "5.2.2/api/Hazelcast.Core.HazelcastJsonValue.GetHashCode.html",
    "title": "Method GetHashCode | Hazelcast .NET Documentation",
    "keywords": "Method GetHashCode GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode()"
  },
  "5.2.2/api/Hazelcast.Core.HazelcastJsonValue.html": {
    "href": "5.2.2/api/Hazelcast.Core.HazelcastJsonValue.html",
    "title": "Class HazelcastJsonValue | Hazelcast .NET Documentation",
    "keywords": "Class HazelcastJsonValue Represents a JSON formatted string. Inheritance object HazelcastJsonValue Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Syntax public sealed class HazelcastJsonValue Remarks It is preferred to store HazelcastJsonValue instead of String for JSON formatted strings. Users can then run predicates and aggregations and use indexes on the attributes of the underlying JSON content. Note that the string is not validated and may be invalid JSON. Constructors Name Description HazelcastJsonValue(string) Initializes a new instance of the HazelcastJsonValue with a string containing JSON. Properties Name Description Value Gets string representation of JSON value. Methods Name Description Equals(object) GetHashCode() ToString()"
  },
  "5.2.2/api/Hazelcast.Core.HazelcastJsonValue.ToString.html": {
    "href": "5.2.2/api/Hazelcast.Core.HazelcastJsonValue.ToString.html",
    "title": "Method ToString | Hazelcast .NET Documentation",
    "keywords": "Method ToString ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString()"
  },
  "5.2.2/api/Hazelcast.Core.HazelcastJsonValue.Value.html": {
    "href": "5.2.2/api/Hazelcast.Core.HazelcastJsonValue.Value.html",
    "title": "Property Value | Hazelcast .NET Documentation",
    "keywords": "Property Value Value Gets string representation of JSON value. Declaration public string Value { get; } Property Value Type Description string"
  },
  "5.2.2/api/Hazelcast.Core.html": {
    "href": "5.2.2/api/Hazelcast.Core.html",
    "title": "Namespace Hazelcast.Core | Hazelcast .NET Documentation",
    "keywords": "Namespace Hazelcast.Core Classes AsyncContext Represents an ambient context that is local to a given asynchronous control flow, such as an asynchronous method. ClientStateExtensions Provides extension methods for the ClientState enum. ConnectionRetryOptions Represents the configuration for the retry strategy. EndiannessExtensions Provides extension methods to the Endianness enumeration. EventHandlersBase<TEventHandler> Provides a base class for classes containing event handlers. HazelcastJsonValue Represents a JSON formatted string. LockContext Represents a lock context. SerializationInfoExtensions Provides extension methods for the SerializationInfo class. ServiceFactory Provides methods to create instances of services. ServiceFactory<TService> Represents a service factory. ServiceFactoryException SingletonServiceFactory<TService> Represents a singleton service factory. Interfaces IPatternMatcher Provides a strategy to match an item name to a configuration pattern. Enums Endianness Represents the order of the bytes within a binary representation of a number. InMemoryFormat Specifies the storage format types of values stored in the cluster."
  },
  "5.2.2/api/Hazelcast.Core.InMemoryFormat.html": {
    "href": "5.2.2/api/Hazelcast.Core.InMemoryFormat.html",
    "title": "Enum InMemoryFormat | Hazelcast .NET Documentation",
    "keywords": "Enum InMemoryFormat Specifies the storage format types of values stored in the cluster. Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Syntax public enum InMemoryFormat Fields Name Description Binary Binary (serialized IData) format. Object Object (de-serialized) format."
  },
  "5.2.2/api/Hazelcast.Core.IPatternMatcher.html": {
    "href": "5.2.2/api/Hazelcast.Core.IPatternMatcher.html",
    "title": "Interface IPatternMatcher | Hazelcast .NET Documentation",
    "keywords": "Interface IPatternMatcher Provides a strategy to match an item name to a configuration pattern. Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Syntax public interface IPatternMatcher Remarks A pattern matcher is used to retrieve the configuration of a particular item, based upon its name. If no configuration matches, the pattern matcher returns null. If multiple configurations match, the pattern matcher throws a ConfigurationException. Methods Name Description Matches(IEnumerable<string>, string) Gets the best match for an item name out of a list of configuration patterns."
  },
  "5.2.2/api/Hazelcast.Core.IPatternMatcher.Matches.html": {
    "href": "5.2.2/api/Hazelcast.Core.IPatternMatcher.Matches.html",
    "title": "Method Matches | Hazelcast .NET Documentation",
    "keywords": "Method Matches Matches(IEnumerable<string>, string) Gets the best match for an item name out of a list of configuration patterns. Declaration string Matches(IEnumerable<string> patterns, string name) Parameters Type Name Description IEnumerable<string> patterns A list of configuration patterns. string name The item name to match. Returns Type Description string The element of the list that best matches the item , if any; otherwise null. Exceptions Type Condition ConfigurationException Occurs when ambiguous configurations are found."
  },
  "5.2.2/api/Hazelcast.Core.LockContext.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Core.LockContext.-ctor.html",
    "title": "Constructor LockContext | Hazelcast .NET Documentation",
    "keywords": "Constructor LockContext LockContext() Initializes a new instance of the LockContext class. Declaration public LockContext()"
  },
  "5.2.2/api/Hazelcast.Core.LockContext.html": {
    "href": "5.2.2/api/Hazelcast.Core.LockContext.html",
    "title": "Class LockContext | Hazelcast .NET Documentation",
    "keywords": "Class LockContext Represents a lock context. Inheritance object LockContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Syntax public sealed class LockContext Remarks In .NET, the lock statement is thread-bound i.e. the underlying Monitor is entered by the thread, and can be entered by only one thread at a time, and must be exited by that same thread. However, in an async flow, a Task can be executed by different threads (each time await is used, the Task can resume execution on any available thread). For this reason, the lock statement is *not* supported in async flows (the compiler raises an error) and explicitly implementing the pattern with an underlying Monitor cannot work, as we cannot guarantee that all code between entering and exiting the monitor executes on the same thread. The Hazelcast cluster locks (could be Map locks or FencedLock locks) are owned by a \"context\" which is represented by a long (64-bits integer) identifier. At codec level, this identifier is passed by the client to the cluster, for all operations that involve locks. In other words, locks in the Hazelcast cluster are context-bound and that context is represented by a long identifier. The Java client uses the Java thread unique identifier as the context identifier for the purpose of locks. This has the benefit of being transparent, i.e. all operations naturally \"know\" the context identifier in which they are operating. The drawback is that, just as with the lock statement, this cannot be supported by .NET async flows. The LockContext class provides an explicit representation of such a context, that can be passed to every context-dependent methods (such as locking a fenced lock) to indicate that they operate within that given context. Each instance of the class is assigned a unique long identifier produced by an atomic sequence, which is used as a context (or \"thread\") identifier at codec and cluster level, for all locking purposes. Constructors Name Description LockContext() Initializes a new instance of the LockContext class. Properties Name Description Id Gets the unique identifier for of this context."
  },
  "5.2.2/api/Hazelcast.Core.LockContext.Id.html": {
    "href": "5.2.2/api/Hazelcast.Core.LockContext.Id.html",
    "title": "Property Id | Hazelcast .NET Documentation",
    "keywords": "Property Id Id Gets the unique identifier for of this context. Declaration public long Id { get; } Property Value Type Description long"
  },
  "5.2.2/api/Hazelcast.Core.SerializationInfoExtensions.GetGuid.html": {
    "href": "5.2.2/api/Hazelcast.Core.SerializationInfoExtensions.GetGuid.html",
    "title": "Method GetGuid | Hazelcast .NET Documentation",
    "keywords": "Method GetGuid GetGuid(SerializationInfo, string) Retrieves a Guid value from the SerializationInfo store. Declaration public static Guid GetGuid(this SerializationInfo info, string name) Parameters Type Name Description SerializationInfo info The SerializationInfo store. string name The name of the value to retrieve. Returns Type Description Guid A Guid value."
  },
  "5.2.2/api/Hazelcast.Core.SerializationInfoExtensions.html": {
    "href": "5.2.2/api/Hazelcast.Core.SerializationInfoExtensions.html",
    "title": "Class SerializationInfoExtensions | Hazelcast .NET Documentation",
    "keywords": "Class SerializationInfoExtensions Provides extension methods for the SerializationInfo class. Inheritance object SerializationInfoExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Syntax public static class SerializationInfoExtensions Methods Name Description GetGuid(SerializationInfo, string) Retrieves a Guid value from the SerializationInfo store."
  },
  "5.2.2/api/Hazelcast.Core.ServiceFactory-1.Creator.html": {
    "href": "5.2.2/api/Hazelcast.Core.ServiceFactory-1.Creator.html",
    "title": "Property Creator | Hazelcast .NET Documentation",
    "keywords": "Property Creator Creator Gets or sets the service creator. Declaration public Func<TService> Creator { get; set; } Property Value Type Description Func<TService> Remarks Do not set the creator after a service has been created, as that could have unspecified consequences."
  },
  "5.2.2/api/Hazelcast.Core.ServiceFactory-1.html": {
    "href": "5.2.2/api/Hazelcast.Core.ServiceFactory-1.html",
    "title": "Class ServiceFactory<TService> | Hazelcast .NET Documentation",
    "keywords": "Class ServiceFactory<TService> Represents a service factory. Inheritance object ServiceFactory<TService> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Syntax public class ServiceFactory<TService> where TService : class Type Parameters Name Description TService The type of the service. Remarks The ServiceFactory<TService> class supports defining how a service should be created, via its Creator property, and then creates new instances of that service via its Create() method. Properties Name Description Creator Gets or sets the service creator."
  },
  "5.2.2/api/Hazelcast.Core.ServiceFactory.CreateInstance.html": {
    "href": "5.2.2/api/Hazelcast.Core.ServiceFactory.CreateInstance.html",
    "title": "Method CreateInstance | Hazelcast .NET Documentation",
    "keywords": "Method CreateInstance CreateInstance<TService>(IDictionary<string, string>, params object[]) Creates a new instance of type TService. Declaration public static TService CreateInstance<TService>(IDictionary<string, string> stringArgs = null, params object[] paramArgs) Parameters Type Name Description IDictionary<string, string> stringArgs Optional string named arguments for the constructor (can be null). object[] paramArgs Parameter arguments for the constructor. Returns Type Description TService A new instance of type TService. Type Parameters Name Description TService The type of the instance. Remarks This method relies on the Activator.CreateInstance or constructor invocation to create the new instance and is not optimized for performance. It is fine to use it for e.g. creating singletons when the application starts, but it should not be used for intensive creation of objects. CreateInstance<TService, TActual>(IDictionary<string, string>, params object[]) Creates a new instance of type TActual as TService. Declaration public static TService CreateInstance<TService, TActual>(IDictionary<string, string> stringArgs = null, params object[] paramArgs) where TActual : TService Parameters Type Name Description IDictionary<string, string> stringArgs Optional string named arguments for the constructor (can be null). object[] paramArgs Parameter arguments for the constructor. Returns Type Description TService A new instance of type TActual as TService. Type Parameters Name Description TService The type of the returned instance. TActual The type of the created instance. Remarks This method relies on the Activator.CreateInstance or constructor invocation to create the new instance and is not optimized for performance. It is fine to use it for e.g. creating singletons when the application starts, but it should not be used for intensive creation of objects. CreateInstance<TService>(Type, IDictionary<string, string>, params object[]) Creates a new instance of type type as TService. Declaration public static TService CreateInstance<TService>(Type type, IDictionary<string, string> stringArgs = null, params object[] paramArgs) Parameters Type Name Description Type type The type of the created instance. IDictionary<string, string> stringArgs Optional string named arguments for the constructor (can be null). object[] paramArgs Parameter arguments for the constructor. Returns Type Description TService A new instance of type type as TService. Type Parameters Name Description TService The type of the returned instance. Remarks This method relies on the Activator.CreateInstance or constructor invocation to create the new instance and is not optimized for performance. It is fine to use it for e.g. creating singletons when the application starts, but it should not be used for intensive creation of objects. CreateInstance<TService>(string, IDictionary<string, string>, params object[]) Creates a new instance of type typeName as TService. Declaration public static TService CreateInstance<TService>(string typeName, IDictionary<string, string> stringArgs = null, params object[] paramArgs) Parameters Type Name Description string typeName The name of the type of the created instance. IDictionary<string, string> stringArgs Optional string named arguments for the constructor (can be null). object[] paramArgs Parameter arguments for the constructor. Returns Type Description TService A new instance of type typeName as TService. Type Parameters Name Description TService The type of the returned instance. Remarks This method relies on the Activator.CreateInstance or constructor invocation to create the new instance and is not optimized for performance. It is fine to use it for e.g. creating singletons when the application starts, but it should not be used for intensive creation of objects. CreateInstance(Type, IDictionary<string, string>, params object[]) Creates a new instance of type type. Declaration public static object CreateInstance(Type type, IDictionary<string, string> stringArgs = null, params object[] paramArgs) Parameters Type Name Description Type type The type of the instance. IDictionary<string, string> stringArgs Optional string named arguments for the constructor (can be null). object[] paramArgs Parameter arguments for the constructor. Returns Type Description object A new instance of type type. Remarks This method relies on the Activator.CreateInstance or constructor invocation to create the new instance and is not optimized for performance. It is fine to use it for e.g. creating singletons when the application starts, but it should not be used for intensive creation of objects. CreateInstance(string, IDictionary<string, string>, params object[]) Creates a new instance of type typeName. Declaration public static object CreateInstance(string typeName, IDictionary<string, string> stringArgs = null, params object[] paramArgs) Parameters Type Name Description string typeName The name of the type of the instance. IDictionary<string, string> stringArgs Optional string named arguments for the constructor (can be null). object[] paramArgs Parameter arguments for the constructor. Returns Type Description object A new instance of type typeName. Remarks This method relies on the Activator.CreateInstance or constructor invocation to create the new instance and is not optimized for performance. It is fine to use it for e.g. creating singletons when the application starts, but it should not be used for intensive creation of objects."
  },
  "5.2.2/api/Hazelcast.Core.ServiceFactory.html": {
    "href": "5.2.2/api/Hazelcast.Core.ServiceFactory.html",
    "title": "Class ServiceFactory | Hazelcast .NET Documentation",
    "keywords": "Class ServiceFactory Provides methods to create instances of services. Inheritance object ServiceFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Syntax public static class ServiceFactory Remarks The provided methods rely on the Activator.CreateInstance method to create the new instances and are not optimized for performance. It is fine to use them for e.g. creating singletons when the application starts, but they should not be used for intensive creation of objects. Methods Name Description CreateInstance(string, IDictionary<string, string>, params object[]) Creates a new instance of type typeName. CreateInstance(Type, IDictionary<string, string>, params object[]) Creates a new instance of type type. CreateInstance<TService>(IDictionary<string, string>, params object[]) Creates a new instance of type TService. CreateInstance<TService>(string, IDictionary<string, string>, params object[]) Creates a new instance of type typeName as TService. CreateInstance<TService>(Type, IDictionary<string, string>, params object[]) Creates a new instance of type type as TService. CreateInstance<TService, TActual>(IDictionary<string, string>, params object[]) Creates a new instance of type TActual as TService."
  },
  "5.2.2/api/Hazelcast.Core.ServiceFactoryException.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Core.ServiceFactoryException.-ctor.html",
    "title": "Constructor ServiceFactoryException | Hazelcast .NET Documentation",
    "keywords": "Constructor ServiceFactoryException ServiceFactoryException() Initializes a new instance of the ServiceFactoryException class. Declaration public ServiceFactoryException() ServiceFactoryException(string) Initializes a new instance of the ServiceFactoryException class with a specified error message. Declaration public ServiceFactoryException(string message) Parameters Type Name Description string message The message that describes the error. ServiceFactoryException(Exception) Initializes a new instance of the ServiceFactoryException class with a reference to the inner exception that is the cause of this exception. Declaration public ServiceFactoryException(Exception innerException) Parameters Type Name Description Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. ServiceFactoryException(string, Exception) Initializes a new instance of the ServiceFactoryException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public ServiceFactoryException(string message, Exception innerException) Parameters Type Name Description string message The message that describes the error. Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified."
  },
  "5.2.2/api/Hazelcast.Core.ServiceFactoryException.html": {
    "href": "5.2.2/api/Hazelcast.Core.ServiceFactoryException.html",
    "title": "Class ServiceFactoryException | Hazelcast .NET Documentation",
    "keywords": "Class ServiceFactoryException Inheritance object Exception HazelcastException ServiceFactoryException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Syntax [Serializable] public sealed class ServiceFactoryException : HazelcastException, ISerializable Constructors Name Description ServiceFactoryException() Initializes a new instance of the ServiceFactoryException class. ServiceFactoryException(Exception) Initializes a new instance of the ServiceFactoryException class with a reference to the inner exception that is the cause of this exception. ServiceFactoryException(string, Exception) Initializes a new instance of the ServiceFactoryException class with a specified error message and a reference to the inner exception that is the cause of this exception. ServiceFactoryException(string) Initializes a new instance of the ServiceFactoryException class with a specified error message."
  },
  "5.2.2/api/Hazelcast.Core.SingletonServiceFactory-1.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Core.SingletonServiceFactory-1.-ctor.html",
    "title": "Constructor SingletonServiceFactory | Hazelcast .NET Documentation",
    "keywords": "Constructor SingletonServiceFactory SingletonServiceFactory() Initializes a new instance of the SingletonServiceFactory<TService> class. Declaration public SingletonServiceFactory() SingletonServiceFactory(SingletonServiceFactory<TService>, bool) Initializes a new instance of the SingletonServiceFactory<TService> class. Declaration protected SingletonServiceFactory(SingletonServiceFactory<TService> other, bool shallow) Parameters Type Name Description SingletonServiceFactory<TService> other bool shallow"
  },
  "5.2.2/api/Hazelcast.Core.SingletonServiceFactory-1.Creator.html": {
    "href": "5.2.2/api/Hazelcast.Core.SingletonServiceFactory-1.Creator.html",
    "title": "Property Creator | Hazelcast .NET Documentation",
    "keywords": "Property Creator Creator Gets or sets the service creator. Declaration public Func<TService> Creator { get; set; } Property Value Type Description Func<TService> Remarks Do not set the creator after the service has been created, as that could have unspecified consequences."
  },
  "5.2.2/api/Hazelcast.Core.SingletonServiceFactory-1.Dispose.html": {
    "href": "5.2.2/api/Hazelcast.Core.SingletonServiceFactory-1.Dispose.html",
    "title": "Method Dispose | Hazelcast .NET Documentation",
    "keywords": "Method Dispose Dispose() Declaration public void Dispose() Implements IDisposable.Dispose() Dispose(bool) Frees, releases or resets managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description bool disposing true when invoked from Dispose(); otherwise false."
  },
  "5.2.2/api/Hazelcast.Core.SingletonServiceFactory-1.html": {
    "href": "5.2.2/api/Hazelcast.Core.SingletonServiceFactory-1.html",
    "title": "Class SingletonServiceFactory<TService> | Hazelcast .NET Documentation",
    "keywords": "Class SingletonServiceFactory<TService> Represents a singleton service factory. Inheritance object SingletonServiceFactory<TService> SingletonLoggerFactoryServiceFactory FactoryOptions<T> GlobalSerializerOptions SerializerOptions Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Syntax public class SingletonServiceFactory<TService> : IDisposable where TService : class Type Parameters Name Description TService The type of the service. Remarks The SingletonServiceFactory<TService> class supports defining how a service should be created, via its Creator property, and then provides a unique instance of that service via its Service property. In a configuration file, it supports a typeName property which is the name of the type, and a args property which is a dictionary of arguments for the type constructor. For instance: \"service\": { \"typeName\": \"My.Service,My.dll\", \"args\": { \"foo\": 33 } } Constructors Name Description SingletonServiceFactory() Initializes a new instance of the SingletonServiceFactory<TService> class. SingletonServiceFactory(SingletonServiceFactory<TService>, bool) Initializes a new instance of the SingletonServiceFactory<TService> class. Properties Name Description Creator Gets or sets the service creator. IsConfigured Determines whether this service factory has been configured and can create a service. OwnsService Whether the factory owns the service. Service Gets the singleton instance of the service. ServiceProvider Gets or sets the service provider. Methods Name Description Dispose() Dispose(bool) Frees, releases or resets managed resources."
  },
  "5.2.2/api/Hazelcast.Core.SingletonServiceFactory-1.IsConfigured.html": {
    "href": "5.2.2/api/Hazelcast.Core.SingletonServiceFactory-1.IsConfigured.html",
    "title": "Property IsConfigured | Hazelcast .NET Documentation",
    "keywords": "Property IsConfigured IsConfigured Determines whether this service factory has been configured and can create a service. Declaration public bool IsConfigured { get; } Property Value Type Description bool"
  },
  "5.2.2/api/Hazelcast.Core.SingletonServiceFactory-1.OwnsService.html": {
    "href": "5.2.2/api/Hazelcast.Core.SingletonServiceFactory-1.OwnsService.html",
    "title": "Property OwnsService | Hazelcast .NET Documentation",
    "keywords": "Property OwnsService OwnsService Whether the factory owns the service. Declaration public bool OwnsService { get; set; } Property Value Type Description bool Remarks By default, services created via Creator are owned by the factory while services created via ServiceProvider are not, but this property can be used to force a different behavior."
  },
  "5.2.2/api/Hazelcast.Core.SingletonServiceFactory-1.Service.html": {
    "href": "5.2.2/api/Hazelcast.Core.SingletonServiceFactory-1.Service.html",
    "title": "Property Service | Hazelcast .NET Documentation",
    "keywords": "Property Service Service Gets the singleton instance of the service. Declaration public TService Service { get; } Property Value Type Description TService The singleton instance of the service, or null if this service factory has not been configured."
  },
  "5.2.2/api/Hazelcast.Core.SingletonServiceFactory-1.ServiceProvider.html": {
    "href": "5.2.2/api/Hazelcast.Core.SingletonServiceFactory-1.ServiceProvider.html",
    "title": "Property ServiceProvider | Hazelcast .NET Documentation",
    "keywords": "Property ServiceProvider ServiceProvider Gets or sets the service provider. Declaration public IServiceProvider ServiceProvider { get; set; } Property Value Type Description IServiceProvider Remarks Do not set the service provider after the service has been created, as that could have unspecified consequences."
  },
  "5.2.2/api/Hazelcast.CP.html": {
    "href": "5.2.2/api/Hazelcast.CP.html",
    "title": "Namespace Hazelcast.CP | Hazelcast .NET Documentation",
    "keywords": "Namespace Hazelcast.CP Interfaces IAtomicLong Defines a redundant and highly-available distributed atomic long. IAtomicReference<T> Defines a redundant and highly-available distributed atomic reference. ICPDistributedObject Defines the base contract for all Hazelcast CP distributed objects. ICPGroupId Defines a CP group identifier. ICPSubsystem Defines the CP subsystem. IFencedLock Represents a linearizable, distributed, reentrant implementation of the Java Lock."
  },
  "5.2.2/api/Hazelcast.CP.IAtomicLong.AddAndGetAsync.html": {
    "href": "5.2.2/api/Hazelcast.CP.IAtomicLong.AddAndGetAsync.html",
    "title": "Method AddAndGetAsync | Hazelcast .NET Documentation",
    "keywords": "Method AddAndGetAsync AddAndGetAsync(long) Adds the specified value to the current value, and returns the updated value. Declaration Task<long> AddAndGetAsync(long value) Parameters Type Name Description long value The value to add. Returns Type Description Task<long> The updated value."
  },
  "5.2.2/api/Hazelcast.CP.IAtomicLong.CompareAndSetAsync.html": {
    "href": "5.2.2/api/Hazelcast.CP.IAtomicLong.CompareAndSetAsync.html",
    "title": "Method CompareAndSetAsync | Hazelcast .NET Documentation",
    "keywords": "Method CompareAndSetAsync CompareAndSetAsync(long, long) Compares the value for equality and, if equal, replaces the current value. Declaration Task<bool> CompareAndSetAsync(long comparand, long value) Parameters Type Name Description long comparand The value that is compared to the current value. long value The value that replaces the current value if the comparison results in equality. Returns Type Description Task<bool> The updated value."
  },
  "5.2.2/api/Hazelcast.CP.IAtomicLong.DecrementAndGetAsync.html": {
    "href": "5.2.2/api/Hazelcast.CP.IAtomicLong.DecrementAndGetAsync.html",
    "title": "Method DecrementAndGetAsync | Hazelcast .NET Documentation",
    "keywords": "Method DecrementAndGetAsync DecrementAndGetAsync() Decrements the current value by one, and returns the updated value. Declaration Task<long> DecrementAndGetAsync() Returns Type Description Task<long> The updated value."
  },
  "5.2.2/api/Hazelcast.CP.IAtomicLong.GetAndAddAsync.html": {
    "href": "5.2.2/api/Hazelcast.CP.IAtomicLong.GetAndAddAsync.html",
    "title": "Method GetAndAddAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetAndAddAsync GetAndAddAsync(long) Adds the specified value to the current value, and returns the original value. Declaration Task<long> GetAndAddAsync(long value) Parameters Type Name Description long value The value to add. Returns Type Description Task<long> The original value."
  },
  "5.2.2/api/Hazelcast.CP.IAtomicLong.GetAndDecrementAsync.html": {
    "href": "5.2.2/api/Hazelcast.CP.IAtomicLong.GetAndDecrementAsync.html",
    "title": "Method GetAndDecrementAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetAndDecrementAsync GetAndDecrementAsync() Decrements the current value by one, and returns the original value. Declaration Task<long> GetAndDecrementAsync() Returns Type Description Task<long> The original value."
  },
  "5.2.2/api/Hazelcast.CP.IAtomicLong.GetAndIncrementAsync.html": {
    "href": "5.2.2/api/Hazelcast.CP.IAtomicLong.GetAndIncrementAsync.html",
    "title": "Method GetAndIncrementAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetAndIncrementAsync GetAndIncrementAsync() Increments the current value by one, and returns the original value. Declaration Task<long> GetAndIncrementAsync() Returns Type Description Task<long> The original value."
  },
  "5.2.2/api/Hazelcast.CP.IAtomicLong.GetAndSetAsync.html": {
    "href": "5.2.2/api/Hazelcast.CP.IAtomicLong.GetAndSetAsync.html",
    "title": "Method GetAndSetAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetAndSetAsync GetAndSetAsync(long) Sets the current value, and returns the original value. Declaration Task<long> GetAndSetAsync(long value) Parameters Type Name Description long value The value to set. Returns Type Description Task<long> The original value."
  },
  "5.2.2/api/Hazelcast.CP.IAtomicLong.GetAsync.html": {
    "href": "5.2.2/api/Hazelcast.CP.IAtomicLong.GetAsync.html",
    "title": "Method GetAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetAsync GetAsync() Gets the current value. Declaration Task<long> GetAsync() Returns Type Description Task<long> The current value."
  },
  "5.2.2/api/Hazelcast.CP.IAtomicLong.html": {
    "href": "5.2.2/api/Hazelcast.CP.IAtomicLong.html",
    "title": "Interface IAtomicLong | Hazelcast .NET Documentation",
    "keywords": "Interface IAtomicLong Defines a redundant and highly-available distributed atomic long. Inherited Members ICPDistributedObject.GroupId IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() Namespace: Hazelcast.CP Assembly: Hazelcast.Net.dll Syntax public interface IAtomicLong : ICPDistributedObject, IDistributedObject, IAsyncDisposable Methods Name Description AddAndGetAsync(long) Adds the specified value to the current value, and returns the updated value. CompareAndSetAsync(long, long) Compares the value for equality and, if equal, replaces the current value. DecrementAndGetAsync() Decrements the current value by one, and returns the updated value. GetAndAddAsync(long) Adds the specified value to the current value, and returns the original value. GetAndDecrementAsync() Decrements the current value by one, and returns the original value. GetAndIncrementAsync() Increments the current value by one, and returns the original value. GetAndSetAsync(long) Sets the current value, and returns the original value. GetAsync() Gets the current value. IncrementAndGetAsync() Increments the current value by one, and returns the updated value. SetAsync(long) Sets the value."
  },
  "5.2.2/api/Hazelcast.CP.IAtomicLong.IncrementAndGetAsync.html": {
    "href": "5.2.2/api/Hazelcast.CP.IAtomicLong.IncrementAndGetAsync.html",
    "title": "Method IncrementAndGetAsync | Hazelcast .NET Documentation",
    "keywords": "Method IncrementAndGetAsync IncrementAndGetAsync() Increments the current value by one, and returns the updated value. Declaration Task<long> IncrementAndGetAsync() Returns Type Description Task<long> The updated value."
  },
  "5.2.2/api/Hazelcast.CP.IAtomicLong.SetAsync.html": {
    "href": "5.2.2/api/Hazelcast.CP.IAtomicLong.SetAsync.html",
    "title": "Method SetAsync | Hazelcast .NET Documentation",
    "keywords": "Method SetAsync SetAsync(long) Sets the value. Declaration Task SetAsync(long value) Parameters Type Name Description long value The value to set. Returns Type Description Task"
  },
  "5.2.2/api/Hazelcast.CP.IAtomicReference-1.ClearAsync.html": {
    "href": "5.2.2/api/Hazelcast.CP.IAtomicReference-1.ClearAsync.html",
    "title": "Method ClearAsync | Hazelcast .NET Documentation",
    "keywords": "Method ClearAsync ClearAsync() Clears current stored reference, so it becomes null. Declaration Task ClearAsync() Returns Type Description Task"
  },
  "5.2.2/api/Hazelcast.CP.IAtomicReference-1.CompareAndSetAsync.html": {
    "href": "5.2.2/api/Hazelcast.CP.IAtomicReference-1.CompareAndSetAsync.html",
    "title": "Method CompareAndSetAsync | Hazelcast .NET Documentation",
    "keywords": "Method CompareAndSetAsync CompareAndSetAsync(T, T) Compares the value for equality and, if equal, replaces the current value. Declaration Task<bool> CompareAndSetAsync(T comparand, T value) Parameters Type Name Description T comparand The value that is compared to the current value. T value The value that replaces the current value if the comparison results in equality. Returns Type Description Task<bool> The updated value."
  },
  "5.2.2/api/Hazelcast.CP.IAtomicReference-1.ContainsAsync.html": {
    "href": "5.2.2/api/Hazelcast.CP.IAtomicReference-1.ContainsAsync.html",
    "title": "Method ContainsAsync | Hazelcast .NET Documentation",
    "keywords": "Method ContainsAsync ContainsAsync(T) Checks if the reference contains the value. Declaration Task<bool> ContainsAsync(T value) Parameters Type Name Description T value The value to check (can be null). Returns Type Description Task<bool> Whether the reference contains the value specified."
  },
  "5.2.2/api/Hazelcast.CP.IAtomicReference-1.GetAndSetAsync.html": {
    "href": "5.2.2/api/Hazelcast.CP.IAtomicReference-1.GetAndSetAsync.html",
    "title": "Method GetAndSetAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetAndSetAsync GetAndSetAsync(T) Sets the current value, and returns the original value. Declaration Task<T> GetAndSetAsync(T value) Parameters Type Name Description T value The value to set. Returns Type Description Task<T> The original value. Remarks If is a struct, method will return default(T) when reference is not set. You can make it return null instead by using Nullable<T>."
  },
  "5.2.2/api/Hazelcast.CP.IAtomicReference-1.GetAsync.html": {
    "href": "5.2.2/api/Hazelcast.CP.IAtomicReference-1.GetAsync.html",
    "title": "Method GetAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetAsync GetAsync() Gets the current value. Declaration Task<T> GetAsync() Returns Type Description Task<T> The current value. Remarks If is a struct, method will return default(T) when reference is not set. You can make it return null instead by using Nullable<T>."
  },
  "5.2.2/api/Hazelcast.CP.IAtomicReference-1.html": {
    "href": "5.2.2/api/Hazelcast.CP.IAtomicReference-1.html",
    "title": "Interface IAtomicReference<T> | Hazelcast .NET Documentation",
    "keywords": "Interface IAtomicReference<T> Defines a redundant and highly-available distributed atomic reference. Inherited Members ICPDistributedObject.GroupId IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() Namespace: Hazelcast.CP Assembly: Hazelcast.Net.dll Syntax public interface IAtomicReference<T> : ICPDistributedObject, IDistributedObject, IAsyncDisposable Type Parameters Name Description T Methods Name Description ClearAsync() Clears current stored reference, so it becomes null. CompareAndSetAsync(T, T) Compares the value for equality and, if equal, replaces the current value. ContainsAsync(T) Checks if the reference contains the value. GetAndSetAsync(T) Sets the current value, and returns the original value. GetAsync() Gets the current value. IsNullAsync() Checks if the stored reference is null. SetAsync(T) Sets the value."
  },
  "5.2.2/api/Hazelcast.CP.IAtomicReference-1.IsNullAsync.html": {
    "href": "5.2.2/api/Hazelcast.CP.IAtomicReference-1.IsNullAsync.html",
    "title": "Method IsNullAsync | Hazelcast .NET Documentation",
    "keywords": "Method IsNullAsync IsNullAsync() Checks if the stored reference is null. Declaration Task<bool> IsNullAsync() Returns Type Description Task<bool> true if null, false otherwise"
  },
  "5.2.2/api/Hazelcast.CP.IAtomicReference-1.SetAsync.html": {
    "href": "5.2.2/api/Hazelcast.CP.IAtomicReference-1.SetAsync.html",
    "title": "Method SetAsync | Hazelcast .NET Documentation",
    "keywords": "Method SetAsync SetAsync(T) Sets the value. Declaration Task SetAsync(T value) Parameters Type Name Description T value The value to set. Returns Type Description Task"
  },
  "5.2.2/api/Hazelcast.CP.ICPDistributedObject.GroupId.html": {
    "href": "5.2.2/api/Hazelcast.CP.ICPDistributedObject.GroupId.html",
    "title": "Property GroupId | Hazelcast .NET Documentation",
    "keywords": "Property GroupId GroupId Gets the identifier of the group of this object. Declaration ICPGroupId GroupId { get; } Property Value Type Description ICPGroupId"
  },
  "5.2.2/api/Hazelcast.CP.ICPDistributedObject.html": {
    "href": "5.2.2/api/Hazelcast.CP.ICPDistributedObject.html",
    "title": "Interface ICPDistributedObject | Hazelcast .NET Documentation",
    "keywords": "Interface ICPDistributedObject Defines the base contract for all Hazelcast CP distributed objects. Inherited Members IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() Namespace: Hazelcast.CP Assembly: Hazelcast.Net.dll Syntax public interface ICPDistributedObject : IDistributedObject, IAsyncDisposable Properties Name Description GroupId Gets the identifier of the group of this object."
  },
  "5.2.2/api/Hazelcast.CP.ICPGroupId.html": {
    "href": "5.2.2/api/Hazelcast.CP.ICPGroupId.html",
    "title": "Interface ICPGroupId | Hazelcast .NET Documentation",
    "keywords": "Interface ICPGroupId Defines a CP group identifier. Namespace: Hazelcast.CP Assembly: Hazelcast.Net.dll Syntax public interface ICPGroupId Properties Name Description Id Gets the numeric identifier of the group. Name Gets the name of the group."
  },
  "5.2.2/api/Hazelcast.CP.ICPGroupId.Id.html": {
    "href": "5.2.2/api/Hazelcast.CP.ICPGroupId.Id.html",
    "title": "Property Id | Hazelcast .NET Documentation",
    "keywords": "Property Id Id Gets the numeric identifier of the group. Declaration long Id { get; } Property Value Type Description long"
  },
  "5.2.2/api/Hazelcast.CP.ICPGroupId.Name.html": {
    "href": "5.2.2/api/Hazelcast.CP.ICPGroupId.Name.html",
    "title": "Property Name | Hazelcast .NET Documentation",
    "keywords": "Property Name Name Gets the name of the group. Declaration string Name { get; } Property Value Type Description string"
  },
  "5.2.2/api/Hazelcast.CP.ICPSubsystem.GetAtomicLongAsync.html": {
    "href": "5.2.2/api/Hazelcast.CP.ICPSubsystem.GetAtomicLongAsync.html",
    "title": "Method GetAtomicLongAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetAtomicLongAsync GetAtomicLongAsync(string) Gets an IAtomicLong distributed object. Declaration Task<IAtomicLong> GetAtomicLongAsync(string name) Parameters Type Name Description string name The unique name of the atomic long. Returns Type Description Task<IAtomicLong> The atomic long that was retrieved or created. Remarks If an object with the specified name does not exist already in the cluster, a new object is created."
  },
  "5.2.2/api/Hazelcast.CP.ICPSubsystem.GetAtomicReferenceAsync.html": {
    "href": "5.2.2/api/Hazelcast.CP.ICPSubsystem.GetAtomicReferenceAsync.html",
    "title": "Method GetAtomicReferenceAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetAtomicReferenceAsync GetAtomicReferenceAsync<T>(string) Gets an IAtomicReference<T> distributed object. Declaration Task<IAtomicReference<T>> GetAtomicReferenceAsync<T>(string name) Parameters Type Name Description string name The unique name of the atomic reference. Returns Type Description Task<IAtomicReference<T>> The atomic reference that was retrieved or created. Type Parameters Name Description T Remarks If an object with the specified name does not exist already in the cluster, a new object is created."
  },
  "5.2.2/api/Hazelcast.CP.ICPSubsystem.GetLockAsync.html": {
    "href": "5.2.2/api/Hazelcast.CP.ICPSubsystem.GetLockAsync.html",
    "title": "Method GetLockAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetLockAsync GetLockAsync(string) Gets an IFencedLock distributed object. Declaration Task<IFencedLock> GetLockAsync(string name) Parameters Type Name Description string name The unique name of the fenced lock. Returns Type Description Task<IFencedLock>"
  },
  "5.2.2/api/Hazelcast.CP.ICPSubsystem.html": {
    "href": "5.2.2/api/Hazelcast.CP.ICPSubsystem.html",
    "title": "Interface ICPSubsystem | Hazelcast .NET Documentation",
    "keywords": "Interface ICPSubsystem Defines the CP subsystem. Namespace: Hazelcast.CP Assembly: Hazelcast.Net.dll Syntax public interface ICPSubsystem Methods Name Description GetAtomicLongAsync(string) Gets an IAtomicLong distributed object. GetAtomicReferenceAsync<T>(string) Gets an IAtomicReference<T> distributed object. GetLockAsync(string) Gets an IFencedLock distributed object."
  },
  "5.2.2/api/Hazelcast.CP.IFencedLock.GetFenceAsync.html": {
    "href": "5.2.2/api/Hazelcast.CP.IFencedLock.GetFenceAsync.html",
    "title": "Method GetFenceAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetFenceAsync GetFenceAsync(LockContext) Gets the fencing token, if the lock is held by the specified lockContext context. Declaration Task<long> GetFenceAsync(LockContext lockContext) Parameters Type Name Description LockContext lockContext The LockContext. Returns Type Description Task<long> The fencing token, if the lock is held by the specified lockContext context; otherwise InvalidFence."
  },
  "5.2.2/api/Hazelcast.CP.IFencedLock.GetLockCountAsync.html": {
    "href": "5.2.2/api/Hazelcast.CP.IFencedLock.GetLockCountAsync.html",
    "title": "Method GetLockCountAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetLockCountAsync GetLockCountAsync(LockContext) Gets the reentrant lock count of the lock, for whichever context is locking it. Declaration Task<int> GetLockCountAsync(LockContext lockContext) Parameters Type Name Description LockContext lockContext Returns Type Description Task<int> The reentrant lock count of the lock, or zero if it is not locked."
  },
  "5.2.2/api/Hazelcast.CP.IFencedLock.html": {
    "href": "5.2.2/api/Hazelcast.CP.IFencedLock.html",
    "title": "Interface IFencedLock | Hazelcast .NET Documentation",
    "keywords": "Interface IFencedLock Represents a linearizable, distributed, reentrant implementation of the Java Lock. Inherited Members ICPDistributedObject.GroupId IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() Namespace: Hazelcast.CP Assembly: Hazelcast.Net.dll Syntax public interface IFencedLock : ICPDistributedObject, IDistributedObject, IAsyncDisposable Remarks The IFencedLock is CP with respect to the CAP principle. It works on top of the Raft consensus algorithm. It offers linearizability during crash-stop failures and network partitions. If a network partition occurs, it remains available on at most one side of the partition. A IFencedLock works within the context of a LockContext. Properties Name Description InvalidFence Gets the identifier representing an invalid fence. Methods Name Description GetFenceAsync(LockContext) Gets the fencing token, if the lock is held by the specified lockContext context. GetLockCountAsync(LockContext) Gets the reentrant lock count of the lock, for whichever context is locking it. IsLockedAsync(LockContext) Determines whether this lock is held by any context or not. IsLockedByContextAsync(LockContext) Determines whether the lock is held by the specified lockContext context or not. LockAndGetFenceAsync(LockContext) Acquires the lock and returns the fencing token assigned to the specified lockContext context for this lock acquisition. LockAsync(LockContext) Acquires the lock for the specified lockContext context. TryLockAndGetFenceAsync(LockContext, TimeSpan) Tries to acquire the lock and return the fencing token assigned to the specified lockContext context for this lock acquisition. TryLockAndGetFenceAsync(LockContext) Tries to acquire the lock and return the fencing token assigned to the specified lockContext context for this lock acquisition. TryLockAsync(LockContext, TimeSpan) Tries to acquire the lock for the specified lockContext context. TryLockAsync(LockContext) Tries to acquire the lock for the specified lockContext context. UnlockAsync(LockContext) Releases the lock if the lock is currently held by the specified lockContext context."
  },
  "5.2.2/api/Hazelcast.CP.IFencedLock.InvalidFence.html": {
    "href": "5.2.2/api/Hazelcast.CP.IFencedLock.InvalidFence.html",
    "title": "Property InvalidFence | Hazelcast .NET Documentation",
    "keywords": "Property InvalidFence InvalidFence Gets the identifier representing an invalid fence. Declaration long InvalidFence { get; } Property Value Type Description long"
  },
  "5.2.2/api/Hazelcast.CP.IFencedLock.IsLockedAsync.html": {
    "href": "5.2.2/api/Hazelcast.CP.IFencedLock.IsLockedAsync.html",
    "title": "Method IsLockedAsync | Hazelcast .NET Documentation",
    "keywords": "Method IsLockedAsync IsLockedAsync(LockContext) Determines whether this lock is held by any context or not. Declaration Task<bool> IsLockedAsync(LockContext lockContext) Parameters Type Name Description LockContext lockContext Returns Type Description Task<bool> true if the lock is held by any context; otherwise false."
  },
  "5.2.2/api/Hazelcast.CP.IFencedLock.IsLockedByContextAsync.html": {
    "href": "5.2.2/api/Hazelcast.CP.IFencedLock.IsLockedByContextAsync.html",
    "title": "Method IsLockedByContextAsync | Hazelcast .NET Documentation",
    "keywords": "Method IsLockedByContextAsync IsLockedByContextAsync(LockContext) Determines whether the lock is held by the specified lockContext context or not. Declaration Task<bool> IsLockedByContextAsync(LockContext lockContext) Parameters Type Name Description LockContext lockContext The LockContext. Returns Type Description Task<bool> true if the lock is held by the specified lockContext context; otherwise false."
  },
  "5.2.2/api/Hazelcast.CP.IFencedLock.LockAndGetFenceAsync.html": {
    "href": "5.2.2/api/Hazelcast.CP.IFencedLock.LockAndGetFenceAsync.html",
    "title": "Method LockAndGetFenceAsync | Hazelcast .NET Documentation",
    "keywords": "Method LockAndGetFenceAsync LockAndGetFenceAsync(LockContext) Acquires the lock and returns the fencing token assigned to the specified lockContext context for this lock acquisition. Declaration Task<long> LockAndGetFenceAsync(LockContext lockContext) Parameters Type Name Description LockContext lockContext The LockContext. Returns Type Description Task<long> The fencing token if the lock was acquired; otherwise InvalidFence. Remarks If the lock is acquired in a reentrant way, the same fencing token is returned, or the LockAsync(LockContext) call can throw LockAcquireLimitReachedException if the lock acquisition limit is already reached. Fencing tokens are monotonic numbers that are incremented each time the lock switches from the free state to the acquired state. They are simply used for ordering lock holders. A lock holder can pass its fencing to the shared resource to fence off previous lock holders. When this resource receives an operation, it can validate the fencing token in the operation."
  },
  "5.2.2/api/Hazelcast.CP.IFencedLock.LockAsync.html": {
    "href": "5.2.2/api/Hazelcast.CP.IFencedLock.LockAsync.html",
    "title": "Method LockAsync | Hazelcast .NET Documentation",
    "keywords": "Method LockAsync LockAsync(LockContext) Acquires the lock for the specified lockContext context. Declaration Task LockAsync(LockContext lockContext) Parameters Type Name Description LockContext lockContext The LockContext. Returns Type Description Task Remarks When the lockContext already holds the lock and the current LockAsync(LockContext) call is reentrant, the call can throw LockAcquireLimitReachedException if the lock acquisition limit is already reached."
  },
  "5.2.2/api/Hazelcast.CP.IFencedLock.TryLockAndGetFenceAsync.html": {
    "href": "5.2.2/api/Hazelcast.CP.IFencedLock.TryLockAndGetFenceAsync.html",
    "title": "Method TryLockAndGetFenceAsync | Hazelcast .NET Documentation",
    "keywords": "Method TryLockAndGetFenceAsync TryLockAndGetFenceAsync(LockContext, TimeSpan) Tries to acquire the lock and return the fencing token assigned to the specified lockContext context for this lock acquisition. Declaration Task<long> TryLockAndGetFenceAsync(LockContext lockContext, TimeSpan timeout) Parameters Type Name Description LockContext lockContext The LockContext. TimeSpan timeout The maximum time to wait for the lock. Returns Type Description Task<long> The fencing token if the lock was acquired; otherwise InvalidFence. Remarks If the lock is available or already held by the current specified lockContext at the time of invocation and the acquisition limit is not exceeded, the method immediately returns the fencing token assigned to this acquisition. If the lock is not immediately available, the method immediately returns InvalidFence representing a failed lock attempt. TryLockAndGetFenceAsync(LockContext) Tries to acquire the lock and return the fencing token assigned to the specified lockContext context for this lock acquisition. Declaration Task<long> TryLockAndGetFenceAsync(LockContext lockContext) Parameters Type Name Description LockContext lockContext The LockContext. Returns Type Description Task<long> The fencing token if the lock was acquired; otherwise InvalidFence. Remarks If the lock is available or already held by the current specified lockContext at the time of invocation and the acquisition limit is not exceeded, the method immediately returns the fencing token assigned to this acquisition. If the lock is not immediately available, the method immediately returns InvalidFence representing a failed lock attempt."
  },
  "5.2.2/api/Hazelcast.CP.IFencedLock.TryLockAsync.html": {
    "href": "5.2.2/api/Hazelcast.CP.IFencedLock.TryLockAsync.html",
    "title": "Method TryLockAsync | Hazelcast .NET Documentation",
    "keywords": "Method TryLockAsync TryLockAsync(LockContext, TimeSpan) Tries to acquire the lock for the specified lockContext context. Declaration Task<bool> TryLockAsync(LockContext lockContext, TimeSpan timeout) Parameters Type Name Description LockContext lockContext The LockContext. TimeSpan timeout The maximum time to wait for the lock. Returns Type Description Task<bool> true if the lock was acquired; otherwise false. Remarks If the lock is available or already held by the current specified lockContext at the time of invocation and the acquisition limit is not exceeded, the method immediately returns true. If the lock is not immediately available, the method waits for the specified timeout, and eventually returns false. TryLockAsync(LockContext) Tries to acquire the lock for the specified lockContext context. Declaration Task<bool> TryLockAsync(LockContext lockContext) Parameters Type Name Description LockContext lockContext The LockContext. Returns Type Description Task<bool> true if the lock was acquired; otherwise false. Remarks If the lock is available or already held by the current specified lockContext at the time of invocation and the acquisition limit is not exceeded, the method immediately returns true. If the lock is not immediately available, the method immediately returns false."
  },
  "5.2.2/api/Hazelcast.CP.IFencedLock.UnlockAsync.html": {
    "href": "5.2.2/api/Hazelcast.CP.IFencedLock.UnlockAsync.html",
    "title": "Method UnlockAsync | Hazelcast .NET Documentation",
    "keywords": "Method UnlockAsync UnlockAsync(LockContext) Releases the lock if the lock is currently held by the specified lockContext context. Declaration Task UnlockAsync(LockContext lockContext) Parameters Type Name Description LockContext lockContext The LockContext. Returns Type Description Task"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.CollectionItemEventArgs-1.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.CollectionItemEventArgs-1.-ctor.html",
    "title": "Constructor CollectionItemEventArgs | Hazelcast .NET Documentation",
    "keywords": "Constructor CollectionItemEventArgs CollectionItemEventArgs(MemberInfo, Lazy<T>, object) Initializes a new instance of the CollectionItemEventArgs<T> class. Declaration public CollectionItemEventArgs(MemberInfo member, Lazy<T> item, object state) Parameters Type Name Description MemberInfo member The member. Lazy<T> item The item. object state A state object."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.CollectionItemEventArgs-1.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.CollectionItemEventArgs-1.html",
    "title": "Class CollectionItemEventArgs<T> | Hazelcast .NET Documentation",
    "keywords": "Class CollectionItemEventArgs<T> Represents event data for the CollectionItemEventTypes events. Inheritance object EventArgsBase CollectionItemEventArgs<T> Inherited Members EventArgsBase.State object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Syntax public sealed class CollectionItemEventArgs<T> : EventArgsBase Type Parameters Name Description T The topic object type. Constructors Name Description CollectionItemEventArgs(MemberInfo, Lazy<T>, object) Initializes a new instance of the CollectionItemEventArgs<T> class. Properties Name Description Item Gets the item. Member Gets the member that fired the event."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.CollectionItemEventArgs-1.Item.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.CollectionItemEventArgs-1.Item.html",
    "title": "Property Item | Hazelcast .NET Documentation",
    "keywords": "Property Item Item Gets the item. Declaration public T Item { get; } Property Value Type Description T"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.CollectionItemEventArgs-1.Member.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.CollectionItemEventArgs-1.Member.html",
    "title": "Property Member | Hazelcast .NET Documentation",
    "keywords": "Property Member Member Gets the member that fired the event. Declaration public MemberInfo Member { get; } Property Value Type Description MemberInfo"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.CollectionItemEventHandlers-1.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.CollectionItemEventHandlers-1.html",
    "title": "Class CollectionItemEventHandlers<T> | Hazelcast .NET Documentation",
    "keywords": "Class CollectionItemEventHandlers<T> Represent collection item event handlers. Inheritance object EventHandlersBase<ICollectionItemEventHandler<T>> CollectionItemEventHandlers<T> Implements IEnumerable<ICollectionItemEventHandler<T>> IEnumerable Inherited Members EventHandlersBase<ICollectionItemEventHandler<T>>.GetEnumerator() EventHandlersBase<ICollectionItemEventHandler<T>>.Remove(ICollectionItemEventHandler<T>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Syntax public sealed class CollectionItemEventHandlers<T> : EventHandlersBase<ICollectionItemEventHandler<T>>, IEnumerable<ICollectionItemEventHandler<T>>, IEnumerable Type Parameters Name Description T The collection item type. Methods Name Description ItemAdded(Action<IHCollection<T>, CollectionItemEventArgs<T>>) Adds an handler which runs when an item is added. ItemAdded(Func<IHCollection<T>, CollectionItemEventArgs<T>, ValueTask>) Adds an handler which runs when an item is added. ItemRemoved(Action<IHCollection<T>, CollectionItemEventArgs<T>>) Adds an handler which runs when an item is removed. ItemRemoved(Func<IHCollection<T>, CollectionItemEventArgs<T>, ValueTask>) Adds an handler which runs when an item is removed."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.CollectionItemEventHandlers-1.ItemAdded.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.CollectionItemEventHandlers-1.ItemAdded.html",
    "title": "Method ItemAdded | Hazelcast .NET Documentation",
    "keywords": "Method ItemAdded ItemAdded(Action<IHCollection<T>, CollectionItemEventArgs<T>>) Adds an handler which runs when an item is added. Declaration public CollectionItemEventHandlers<T> ItemAdded(Action<IHCollection<T>, CollectionItemEventArgs<T>> handler) Parameters Type Name Description Action<IHCollection<T>, CollectionItemEventArgs<T>> handler The handler. Returns Type Description CollectionItemEventHandlers<T> The handlers. ItemAdded(Func<IHCollection<T>, CollectionItemEventArgs<T>, ValueTask>) Adds an handler which runs when an item is added. Declaration public CollectionItemEventHandlers<T> ItemAdded(Func<IHCollection<T>, CollectionItemEventArgs<T>, ValueTask> handler) Parameters Type Name Description Func<IHCollection<T>, CollectionItemEventArgs<T>, ValueTask> handler The handler. Returns Type Description CollectionItemEventHandlers<T> The handlers."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.CollectionItemEventHandlers-1.ItemRemoved.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.CollectionItemEventHandlers-1.ItemRemoved.html",
    "title": "Method ItemRemoved | Hazelcast .NET Documentation",
    "keywords": "Method ItemRemoved ItemRemoved(Action<IHCollection<T>, CollectionItemEventArgs<T>>) Adds an handler which runs when an item is removed. Declaration public CollectionItemEventHandlers<T> ItemRemoved(Action<IHCollection<T>, CollectionItemEventArgs<T>> handler) Parameters Type Name Description Action<IHCollection<T>, CollectionItemEventArgs<T>> handler The handler. Returns Type Description CollectionItemEventHandlers<T> The handlers. ItemRemoved(Func<IHCollection<T>, CollectionItemEventArgs<T>, ValueTask>) Adds an handler which runs when an item is removed. Declaration public CollectionItemEventHandlers<T> ItemRemoved(Func<IHCollection<T>, CollectionItemEventArgs<T>, ValueTask> handler) Parameters Type Name Description Func<IHCollection<T>, CollectionItemEventArgs<T>, ValueTask> handler The handler. Returns Type Description CollectionItemEventHandlers<T> The handlers."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.EventArgsBase.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.EventArgsBase.-ctor.html",
    "title": "Constructor EventArgsBase | Hazelcast .NET Documentation",
    "keywords": "Constructor EventArgsBase EventArgsBase(object) Initializes a new instance of the EventArgsBase class. Declaration protected EventArgsBase(object state) Parameters Type Name Description object state A state object."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.EventArgsBase.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.EventArgsBase.html",
    "title": "Class EventArgsBase | Hazelcast .NET Documentation",
    "keywords": "Class EventArgsBase Provides a base class for all event arguments. Inheritance object EventArgsBase CollectionItemEventArgs<T> MapEntryEventArgsBase<TKey> TopicMessageEventArgs<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Syntax public abstract class EventArgsBase Constructors Name Description EventArgsBase(object) Initializes a new instance of the EventArgsBase class. Properties Name Description State Gets the state object."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.EventArgsBase.State.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.EventArgsBase.State.html",
    "title": "Property State | Hazelcast .NET Documentation",
    "keywords": "Property State State Gets the state object. Declaration public object State { get; } Property Value Type Description object"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.FlakeIdGeneratorOptions.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.FlakeIdGeneratorOptions.-ctor.html",
    "title": "Constructor FlakeIdGeneratorOptions | Hazelcast .NET Documentation",
    "keywords": "Constructor FlakeIdGeneratorOptions FlakeIdGeneratorOptions() Initializes a new instance of the FlakeIdGeneratorOptions class. Declaration public FlakeIdGeneratorOptions()"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.FlakeIdGeneratorOptions.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.FlakeIdGeneratorOptions.html",
    "title": "Class FlakeIdGeneratorOptions | Hazelcast .NET Documentation",
    "keywords": "Class FlakeIdGeneratorOptions Represents options for IFlakeIdGenerator. Inheritance object FlakeIdGeneratorOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Syntax public class FlakeIdGeneratorOptions Constructors Name Description FlakeIdGeneratorOptions() Initializes a new instance of the FlakeIdGeneratorOptions class. Properties Name Description PrefetchCount Gets or sets the number of identifiers in a pre-fetch batch. PrefetchValidityPeriod Gets or sets the validity period of identifier batches."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.FlakeIdGeneratorOptions.PrefetchCount.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.FlakeIdGeneratorOptions.PrefetchCount.html",
    "title": "Property PrefetchCount | Hazelcast .NET Documentation",
    "keywords": "Property PrefetchCount PrefetchCount Gets or sets the number of identifiers in a pre-fetch batch. Declaration public int PrefetchCount { get; set; } Property Value Type Description int Remarks Allowed values are between 1 and 100000 inclusive, default value is 100. When an identifier is initially requested, an entire batch of identifiers is fetched from the cluster, and this option configures the number of identifiers in such a batch."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.FlakeIdGeneratorOptions.PrefetchValidityPeriod.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.FlakeIdGeneratorOptions.PrefetchValidityPeriod.html",
    "title": "Property PrefetchValidityPeriod | Hazelcast .NET Documentation",
    "keywords": "Property PrefetchValidityPeriod PrefetchValidityPeriod Gets or sets the validity period of identifier batches. Declaration public TimeSpan PrefetchValidityPeriod { get; set; } Property Value Type Description TimeSpan Remarks When an identifier is initially requested, an entire batch of identifier is fetched from the cluster. This option configures how long these identifiers can be used, before the batch is dropped and a new batch is fetched. Fetched identifiers contain a timestamp component which ensures rough global ordering of identifiers. If an identifier is used a long time after it was fetched, the chances it is highly out-of-order increase. Set this option according your usage pattern. If you do not care about ordering, set this option to InfiniteTimeSpan to achieve infinite validity."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.html",
    "title": "Namespace Hazelcast.DistributedObjects | Hazelcast .NET Documentation",
    "keywords": "Namespace Hazelcast.DistributedObjects Classes CollectionItemEventArgs<T> Represents event data for the CollectionItemEventTypes events. CollectionItemEventHandlers<T> Represent collection item event handlers. EventArgsBase Provides a base class for all event arguments. FlakeIdGeneratorOptions Represents options for IFlakeIdGenerator. MapClearedEventArgs MapEntryAddedEventArgs<TKey, TValue> MapEntryEventArgsBase<TKey> Represents event data for map entry events. MapEntryEvictedEventArgs<TKey, TValue> MapEntryExpiredEventArgs<TKey, TValue> MapEntryInvalidatedEventArgs<TKey, TValue> MapEntryLoadedEventArgs<TKey, TValue> MapEntryMergedEventArgs<TKey, TValue> MapEntryRemovedEventArgs<TKey, TValue> MapEntryUpdatedEventArgs<TKey, TValue> MapEventArgsBase Represents event data for map events. MapEventHandlers<TKey, TValue> Represents distributed map event handlers. MapEvictedEventArgs MultiMapEventHandlers<TKey, TValue> Represents multi distributed map event handlers. ReplicatedMapEventHandlers<TKey, TValue> Represents replicated distributed map event handlers. TopicEventHandlers<T> Represent topic event handlers. TopicMessageEventArgs<T> Represents event data for the event. Interfaces ICollectionItemEventHandler<T> Specifies a collection item event handler. IDistributedObject Defines the base contract for all Hazelcast distributed objects. IEntryProcessor<TResult> Defines a processor that can process the entries of an IHMap<TKey, TValue> on the server. IFlakeIdGenerator IHCollection<T> Defines a concurrent, distributed, and listenable collection. IHList<T> Defines a concurrent, distributed, non-partitioned and listenable list IHMap<TKey, TValue> Represents a distributed map. IHMapBase<TKey, TValue> Defines the base interface for various Hazelcast distributed dictionaries. IHMultiMap<TKey, TValue> Represents a distributed map whose keys can be associated with multiple values. IHQueue<T> Defines a concurrent, blocking, distributed, non-partitioned and observable queue. IHReplicatedMap<TKey, TValue> Represents a distributed map with weak consistency and values locally stored on every node of the cluster. IHRingBuffer<TItem> A Ringbuffer is a data-structure where the content is stored in a ring like structure. IHSet<T> Defines a concurrent, distributed, non-partitioned and listenable set IHTopic<T> Hazelcast provides distribution mechanism for publishing messages that are delivered to multiple subscribers which is also known as publish/subscribe (pub/sub) messaging model. IHTxList<TItem> IHTxMap<TKey, TValue> Represents a transactional distributed map. IHTxMultiMap<TKey, TValue> Transactional implementation of MultiMap IHTxQueue<TItem> Transactional implementation of Queue IHTxSet<TItem> Transactional implementation of IHSet<E> . IKeyLockable<TKey> IMapEntryEventHandler<TKey, TValue, TSender> Specifies a map entry event handler. IMapEventHandler<TKey, TValue, TSender> Specifies a map event handler. IMapEventHandlerBase Specifies a generic map event handler. IMapInterceptor A place holder interface for com.hazelcast.map.MapInterceptor on server side. ITopicEventHandler<T> Specifies a topic event handler. ITransactionalDistributedObject Defines the base contract for all transactional Hazelcast distributed objects. ITransactionalObject Marker interface for all transactional distributed objects. Enums OverflowPolicy Using this policy one can control the behavior what should to be done when an item is about to be added to the ringbuffer, but there is 0 remaining capacity."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.ICollectionItemEventHandler-1.EventType.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.ICollectionItemEventHandler-1.EventType.html",
    "title": "Property EventType | Hazelcast .NET Documentation",
    "keywords": "Property EventType EventType Gets the handled event type. Declaration CollectionItemEventTypes EventType { get; } Property Value Type Description CollectionItemEventTypes"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.ICollectionItemEventHandler-1.HandleAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.ICollectionItemEventHandler-1.HandleAsync.html",
    "title": "Method HandleAsync | Hazelcast .NET Documentation",
    "keywords": "Method HandleAsync HandleAsync(IHCollection<T>, MemberInfo, Lazy<T>, object) Handles an event. Declaration ValueTask HandleAsync(IHCollection<T> sender, MemberInfo member, Lazy<T> item, object state) Parameters Type Name Description IHCollection<T> sender The IHCollection<T> that triggered the event. MemberInfo member The member. Lazy<T> item The item. object state A state object. Returns Type Description ValueTask"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.ICollectionItemEventHandler-1.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.ICollectionItemEventHandler-1.html",
    "title": "Interface ICollectionItemEventHandler<T> | Hazelcast .NET Documentation",
    "keywords": "Interface ICollectionItemEventHandler<T> Specifies a collection item event handler. Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Syntax public interface ICollectionItemEventHandler<T> Type Parameters Name Description T The collection items type. Properties Name Description EventType Gets the handled event type. Methods Name Description HandleAsync(IHCollection<T>, MemberInfo, Lazy<T>, object) Handles an event."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IDistributedObject.DestroyAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IDistributedObject.DestroyAsync.html",
    "title": "Method DestroyAsync | Hazelcast .NET Documentation",
    "keywords": "Method DestroyAsync DestroyAsync() Destroys this distributed object. Declaration ValueTask DestroyAsync() Returns Type Description ValueTask A task that will complete when the object has been destroyed. Remarks Destroying a distributed object completely deletes the object on the cluster."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IDistributedObject.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IDistributedObject.html",
    "title": "Interface IDistributedObject | Hazelcast .NET Documentation",
    "keywords": "Interface IDistributedObject Defines the base contract for all Hazelcast distributed objects. Inherited Members IAsyncDisposable.DisposeAsync() Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Syntax public interface IDistributedObject : IAsyncDisposable Properties Name Description Name Gets the unique name of the object. PartitionKey Gets the partition key of this object. ServiceName Gets the name of the service managing this object. Methods Name Description DestroyAsync() Destroys this distributed object."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IDistributedObject.Name.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IDistributedObject.Name.html",
    "title": "Property Name | Hazelcast .NET Documentation",
    "keywords": "Property Name Name Gets the unique name of the object. Declaration string Name { get; } Property Value Type Description string"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IDistributedObject.PartitionKey.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IDistributedObject.PartitionKey.html",
    "title": "Property PartitionKey | Hazelcast .NET Documentation",
    "keywords": "Property PartitionKey PartitionKey Gets the partition key of this object. Declaration string PartitionKey { get; } Property Value Type Description string The partition key. Remarks The returned value has meaning only for non-partitioned data structures, such as IAtomicLong. For partitioned data structures such as IHMap<TKey, TValue>, the returned value is not null but has no meaning."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IDistributedObject.ServiceName.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IDistributedObject.ServiceName.html",
    "title": "Property ServiceName | Hazelcast .NET Documentation",
    "keywords": "Property ServiceName ServiceName Gets the name of the service managing this object. Declaration string ServiceName { get; } Property Value Type Description string"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IEntryProcessor-1.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IEntryProcessor-1.html",
    "title": "Interface IEntryProcessor<TResult> | Hazelcast .NET Documentation",
    "keywords": "Interface IEntryProcessor<TResult> Defines a processor that can process the entries of an IHMap<TKey, TValue> on the server. Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Syntax public interface IEntryProcessor<TResult> Type Parameters Name Description TResult The type of the results produced by the processor. Remarks Client-side IEntryProcessor<TResult> implementations do not have any processing logic, they must be backed by a corresponding processor registered on the server and containing the actual implementation."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IFlakeIdGenerator.GetNewIdAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IFlakeIdGenerator.GetNewIdAsync.html",
    "title": "Method GetNewIdAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetNewIdAsync GetNewIdAsync() Gets a new cluster-wide unique identifier. Declaration ValueTask<long> GetNewIdAsync() Returns Type Description ValueTask<long> A long value representing a cluster-wide unique identifier. Remarks This method goes to a random member and gets a batch of IDs, which will then be returned locally for limited time. The pre-fetch size and the validity time can be configured via FlakeIdGeneratorOptions. Values returned from this method may not be strictly ordered. Exceptions Type Condition HazelcastException If node ID for all members in the cluster is out of valid range."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IFlakeIdGenerator.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IFlakeIdGenerator.html",
    "title": "Interface IFlakeIdGenerator | Hazelcast .NET Documentation",
    "keywords": "Interface IFlakeIdGenerator Inherited Members IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Syntax public interface IFlakeIdGenerator : IDistributedObject, IAsyncDisposable Methods Name Description GetNewIdAsync() Gets a new cluster-wide unique identifier."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHCollection-1.AddAll.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHCollection-1.AddAll.html",
    "title": "Method AddAll | Hazelcast .NET Documentation",
    "keywords": "Method AddAll AddAll<TItem>(ICollection<TItem>) Adds all. Declaration Task<bool> AddAll<TItem>(ICollection<TItem> items) where TItem : T Parameters Type Name Description ICollection<TItem> items element collection Returns Type Description Task<bool> true if this collection changed, false otherwise. Type Parameters Name Description TItem type of elements"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHCollection-1.AddAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHCollection-1.AddAsync.html",
    "title": "Method AddAsync | Hazelcast .NET Documentation",
    "keywords": "Method AddAsync AddAsync(T) Adds an item to the collection. Declaration Task<bool> AddAsync(T item) Parameters Type Name Description T item The item. Returns Type Description Task<bool> Whether the item was added."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHCollection-1.ClearAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHCollection-1.ClearAsync.html",
    "title": "Method ClearAsync | Hazelcast .NET Documentation",
    "keywords": "Method ClearAsync ClearAsync() Clears the collection. Declaration Task ClearAsync() Returns Type Description Task A task that will complete when the collection has been cleared."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHCollection-1.ContainsAllAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHCollection-1.ContainsAllAsync.html",
    "title": "Method ContainsAllAsync | Hazelcast .NET Documentation",
    "keywords": "Method ContainsAllAsync ContainsAllAsync<TItem>(ICollection<TItem>) Determines whether this collection contains all of the elements in the specified collection. Declaration Task<bool> ContainsAllAsync<TItem>(ICollection<TItem> items) where TItem : T Parameters Type Name Description ICollection<TItem> items The collection Returns Type Description Task<bool> true if this collection contains all of the elements in the specified collection; otherwise, false. Type Parameters Name Description TItem type of elements"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHCollection-1.ContainsAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHCollection-1.ContainsAsync.html",
    "title": "Method ContainsAsync | Hazelcast .NET Documentation",
    "keywords": "Method ContainsAsync ContainsAsync(T) Determines whether the collection contains an item. Declaration Task<bool> ContainsAsync(T item) Parameters Type Name Description T item The item. Returns Type Description Task<bool> true if the collection contains the item; otherwise false."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHCollection-1.GetAllAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHCollection-1.GetAllAsync.html",
    "title": "Method GetAllAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetAllAsync GetAllAsync() Gets the collection items. Declaration Task<IReadOnlyList<T>> GetAllAsync() Returns Type Description Task<IReadOnlyList<T>> The collection items."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHCollection-1.GetSizeAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHCollection-1.GetSizeAsync.html",
    "title": "Method GetSizeAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetSizeAsync GetSizeAsync() Gets the number of items in the collection. Declaration Task<int> GetSizeAsync() Returns Type Description Task<int> The number of items in the collection."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHCollection-1.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHCollection-1.html",
    "title": "Interface IHCollection<T> | Hazelcast .NET Documentation",
    "keywords": "Interface IHCollection<T> Defines a concurrent, distributed, and listenable collection. Inherited Members IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() IAsyncEnumerable<T>.GetAsyncEnumerator(CancellationToken) Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Syntax public interface IHCollection<T> : IDistributedObject, IAsyncDisposable, IAsyncEnumerable<T> Type Parameters Name Description T The type of the items in the collection Remarks This is not a partitioned data-structure. Entire contents is stored on a single machine (and in the backup). It will not scale by adding more members to the cluster. Methods Name Description AddAll<TItem>(ICollection<TItem>) Adds all. AddAsync(T) Adds an item to the collection. ClearAsync() Clears the collection. ContainsAllAsync<TItem>(ICollection<TItem>) Determines whether this collection contains all of the elements in the specified collection. ContainsAsync(T) Determines whether the collection contains an item. GetAllAsync() Gets the collection items. GetSizeAsync() Gets the number of items in the collection. IsEmptyAsync() Determines whether this instance is empty. RemoveAllAsync<TItem>(ICollection<TItem>) Removes all of the elements in the specified collection from this collection. RemoveAsync(T) Removes an item from the collection. RetainAllAsync<TItem>(ICollection<TItem>) Retains only the elements in this collection that are contained in the specified collection. SubscribeAsync(Action<CollectionItemEventHandlers<T>>, bool, object) Subscribes to events. UnsubscribeAsync(Guid) Unsubscribe from events."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHCollection-1.IsEmptyAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHCollection-1.IsEmptyAsync.html",
    "title": "Method IsEmptyAsync | Hazelcast .NET Documentation",
    "keywords": "Method IsEmptyAsync IsEmptyAsync() Determines whether this instance is empty. Declaration Task<bool> IsEmptyAsync() Returns Type Description Task<bool> true if this instance is empty; otherwise, false."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHCollection-1.RemoveAllAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHCollection-1.RemoveAllAsync.html",
    "title": "Method RemoveAllAsync | Hazelcast .NET Documentation",
    "keywords": "Method RemoveAllAsync RemoveAllAsync<TItem>(ICollection<TItem>) Removes all of the elements in the specified collection from this collection. Declaration Task<bool> RemoveAllAsync<TItem>(ICollection<TItem> items) where TItem : T Parameters Type Name Description ICollection<TItem> items element collection to be removed Returns Type Description Task<bool> true if all removed, false otherwise. Type Parameters Name Description TItem type of elements"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHCollection-1.RemoveAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHCollection-1.RemoveAsync.html",
    "title": "Method RemoveAsync | Hazelcast .NET Documentation",
    "keywords": "Method RemoveAsync RemoveAsync(T) Removes an item from the collection. Declaration Task<bool> RemoveAsync(T item) Parameters Type Name Description T item The item. Returns Type Description Task<bool> true if the item was removed; otherwise false."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHCollection-1.RetainAllAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHCollection-1.RetainAllAsync.html",
    "title": "Method RetainAllAsync | Hazelcast .NET Documentation",
    "keywords": "Method RetainAllAsync RetainAllAsync<TItem>(ICollection<TItem>) Retains only the elements in this collection that are contained in the specified collection. Declaration Task<bool> RetainAllAsync<TItem>(ICollection<TItem> items) where TItem : T Parameters Type Name Description ICollection<TItem> items The c. Returns Type Description Task<bool> true if this collection changed, false otherwise. Type Parameters Name Description TItem type of elements Remarks In other words, removes from this collection all of its elements that are not contained in the specified collection."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHCollection-1.SubscribeAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHCollection-1.SubscribeAsync.html",
    "title": "Method SubscribeAsync | Hazelcast .NET Documentation",
    "keywords": "Method SubscribeAsync SubscribeAsync(Action<CollectionItemEventHandlers<T>>, bool, object) Subscribes to events. Declaration Task<Guid> SubscribeAsync(Action<CollectionItemEventHandlers<T>> events, bool includeValue = true, object state = null) Parameters Type Name Description Action<CollectionItemEventHandlers<T>> events An event handlers collection builder. bool includeValue Whether to include values in event arguments. object state A state object that will be passed to handlers. Returns Type Description Task<Guid> The unique identifier of the subscription."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHCollection-1.UnsubscribeAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHCollection-1.UnsubscribeAsync.html",
    "title": "Method UnsubscribeAsync | Hazelcast .NET Documentation",
    "keywords": "Method UnsubscribeAsync UnsubscribeAsync(Guid) Unsubscribe from events. Declaration ValueTask<bool> UnsubscribeAsync(Guid subscriptionId) Parameters Type Name Description Guid subscriptionId The unique identifier of the subscription. Returns Type Description ValueTask<bool> Whether the operation was successful. Remarks Once this method has been invoked, and whatever its result, the subscription is de-activated, which means that no events will trigger anymore, even if the client receives event messages from the servers. If this method returns false, then one or more client connection has not been able to get its server to remove the subscription. Even though no events will trigger anymore, the server may keep sending (ignored) event messages. It is therefore recommended to retry unsubscribing until it is successful."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHList-1.AddAllAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHList-1.AddAllAsync.html",
    "title": "Method AddAllAsync | Hazelcast .NET Documentation",
    "keywords": "Method AddAllAsync AddAllAsync<TItem>(int, ICollection<TItem>) Inserts all of the elements in the specified collection into this list at the specified position. Declaration Task<bool> AddAllAsync<TItem>(int index, ICollection<TItem> items) where TItem : T Parameters Type Name Description int index index at which to insert the first element from the specified collection ICollection<TItem> items collection containing elements to be added to this list Returns Type Description Task<bool> true if this list changed as a result of the call Type Parameters Name Description TItem Remarks Shifts the element currently at that position (if any) and any subsequent elements to the right (increases their indices). The new elements will appear in this list in the order that they are returned by the specified collection's iterator. The behavior of this operation is undefined if the specified collection is modified while the operation is in progress. (Note that this will occur if the specified collection is this list, and it's nonempty.)"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHList-1.AddAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHList-1.AddAsync.html",
    "title": "Method AddAsync | Hazelcast .NET Documentation",
    "keywords": "Method AddAsync AddAsync(int, T) Inserts the specified element at the specified position in this list. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices). Declaration Task AddAsync(int index, T item) Parameters Type Name Description int index index at which the specified element is to be inserted T item element to be inserted Returns Type Description Task"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHList-1.GetAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHList-1.GetAsync.html",
    "title": "Method GetAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetAsync GetAsync(int) Returns the element in the specified position in this list Declaration Task<T> GetAsync(int index) Parameters Type Name Description int index index of the element to return Returns Type Description Task<T> the element at the specified position in the list"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHList-1.GetSublistAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHList-1.GetSublistAsync.html",
    "title": "Method GetSublistAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetSublistAsync GetSublistAsync(int, int) Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive. Declaration Task<IReadOnlyList<T>> GetSublistAsync(int fromIndex, int toIndex) Parameters Type Name Description int fromIndex low endpoint (inclusive) of the subList int toIndex high endpoint (exclusive) of the subList Returns Type Description Task<IReadOnlyList<T>> a view of the specified range within this list Remarks If fromIndex and toIndex are equal, the returned list is empty."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHList-1.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHList-1.html",
    "title": "Interface IHList<T> | Hazelcast .NET Documentation",
    "keywords": "Interface IHList<T> Defines a concurrent, distributed, non-partitioned and listenable list Inherited Members IHCollection<T>.AddAsync(T) IHCollection<T>.AddAll<TItem>(ICollection<TItem>) IHCollection<T>.GetAllAsync() IHCollection<T>.GetSizeAsync() IHCollection<T>.IsEmptyAsync() IHCollection<T>.ContainsAllAsync<TItem>(ICollection<TItem>) IHCollection<T>.ContainsAsync(T) IHCollection<T>.RemoveAsync(T) IHCollection<T>.RemoveAllAsync<TItem>(ICollection<TItem>) IHCollection<T>.RetainAllAsync<TItem>(ICollection<TItem>) IHCollection<T>.ClearAsync() IHCollection<T>.SubscribeAsync(Action<CollectionItemEventHandlers<T>>, bool, object) IHCollection<T>.UnsubscribeAsync(Guid) IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() IAsyncEnumerable<T>.GetAsyncEnumerator(CancellationToken) Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Syntax public interface IHList<T> : IHCollection<T>, IDistributedObject, IAsyncDisposable, IAsyncEnumerable<T> Type Parameters Name Description T Remarks The Hazelcast IHList is not a partitioned data-structure. Entire contents of an IHList is stored on a single machine (and in the backup). The IHList will not scale by adding more members to the cluster. Methods Name Description AddAllAsync<TItem>(int, ICollection<TItem>) Inserts all of the elements in the specified collection into this list at the specified position. AddAsync(int, T) Inserts the specified element at the specified position in this list. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices). GetAsync(int) Returns the element in the specified position in this list GetSublistAsync(int, int) Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive. IndexOfAsync(T) Returns the zero-based index of the first occurrence of a specific item in this list. LastIndexOfAsync(T) Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element. RemoveAsync(int) Removes the first occurrence of the specified element from this list, if it is present. If this list does not contain the element, it is unchanged. Set(int, T) Replaces the element at the specified position in this list with the specified element."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHList-1.IndexOfAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHList-1.IndexOfAsync.html",
    "title": "Method IndexOfAsync | Hazelcast .NET Documentation",
    "keywords": "Method IndexOfAsync IndexOfAsync(T) Returns the zero-based index of the first occurrence of a specific item in this list. Declaration Task<int> IndexOfAsync(T item) Parameters Type Name Description T item element to search for Returns Type Description Task<int> the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHList-1.LastIndexOfAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHList-1.LastIndexOfAsync.html",
    "title": "Method LastIndexOfAsync | Hazelcast .NET Documentation",
    "keywords": "Method LastIndexOfAsync LastIndexOfAsync(T) Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element. Declaration Task<int> LastIndexOfAsync(T item) Parameters Type Name Description T item element to search for Returns Type Description Task<int> the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHList-1.RemoveAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHList-1.RemoveAsync.html",
    "title": "Method RemoveAsync | Hazelcast .NET Documentation",
    "keywords": "Method RemoveAsync RemoveAsync(int) Removes the first occurrence of the specified element from this list, if it is present. If this list does not contain the element, it is unchanged. Declaration Task<T> RemoveAsync(int index) Parameters Type Name Description int index element to be removed from this list, if present Returns Type Description Task<T> the element previously at the specified position"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHList-1.Set.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHList-1.Set.html",
    "title": "Method Set | Hazelcast .NET Documentation",
    "keywords": "Method Set Set(int, T) Replaces the element at the specified position in this list with the specified element. Declaration Task<T> Set(int index, T item) Parameters Type Name Description int index index index of the element to replace T item element to be stored at the specified position Returns Type Description Task<T> The element previously at the specified position"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.AddIndexAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.AddIndexAsync.html",
    "title": "Method AddIndexAsync | Hazelcast .NET Documentation",
    "keywords": "Method AddIndexAsync AddIndexAsync(IndexOptions) Adds an index to this dictionary for the specified entries so that queries can run faster. Declaration Task AddIndexAsync(IndexOptions indexOptions) Parameters Type Name Description IndexOptions indexOptions Returns Type Description Task A task that will complete when the index added. AddIndexAsync(IndexType, params string[]) Convenient method to add an index to this dictionary with the given type and attributes. Attributes are indexed in ascending order. Declaration Task AddIndexAsync(IndexType type, params string[] attributes) Parameters Type Name Description IndexType type Index type. string[] attributes Attributes to be indexed. Returns Type Description Task A task that will complete when the index added."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.AddInterceptorAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.AddInterceptorAsync.html",
    "title": "Method AddInterceptorAsync | Hazelcast .NET Documentation",
    "keywords": "Method AddInterceptorAsync AddInterceptorAsync(IMapInterceptor) Adds an interceptor on the server side. Declaration Task<string> AddInterceptorAsync(IMapInterceptor interceptor) Parameters Type Name Description IMapInterceptor interceptor The interceptor. Returns Type Description Task<string> The interceptor unique identifier. Remarks The interceptor must be serializable via Hazelcast serialization, and have a counterpart on the server."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.AggregateAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.AggregateAsync.html",
    "title": "Method AggregateAsync | Hazelcast .NET Documentation",
    "keywords": "Method AggregateAsync AggregateAsync<TResult>(IAggregator<TResult>) Aggregates values. Declaration Task<TResult> AggregateAsync<TResult>(IAggregator<TResult> aggregator) Parameters Type Name Description IAggregator<TResult> aggregator The aggregator. Returns Type Description Task<TResult> The result of the aggregation. Type Parameters Name Description TResult The type of the result. Remarks The aggregator must be serializable via Hazelcast serialization, and have a counterpart on the server. AggregateAsync<TResult>(IAggregator<TResult>, IPredicate) Aggregates values. Declaration Task<TResult> AggregateAsync<TResult>(IAggregator<TResult> aggregator, IPredicate predicate) Parameters Type Name Description IAggregator<TResult> aggregator The aggregator. IPredicate predicate A predicate to filter the entries with. Returns Type Description Task<TResult> The result of the aggregation. Type Parameters Name Description TResult The type of the result. Remarks The aggregator and predicate must be serializable via Hazelcast serialization, and have a counterpart on the server."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.DeleteAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.DeleteAsync.html",
    "title": "Method DeleteAsync | Hazelcast .NET Documentation",
    "keywords": "Method DeleteAsync DeleteAsync(TKey) Removes an entry. Declaration Task DeleteAsync(TKey key) Parameters Type Name Description TKey key The key. Returns Type Description Task Remarks For performance reasons, this method does not return the removed value. Prefer RemoveAsync(TKey) if the value is required. However, note that RemoveAsync(TKey) may breaks the events contract: this method does not consider the removed value at all, which means that any event that would be filtered on the value (for instance via a predicate), and would trigger with RemoveAsync(TKey), will not trigger here."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.EvictAllAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.EvictAllAsync.html",
    "title": "Method EvictAllAsync | Hazelcast .NET Documentation",
    "keywords": "Method EvictAllAsync EvictAllAsync() Evicts all entries but the locked entries from the cache. Declaration Task EvictAllAsync() Returns Type Description Task A task that will complete when all entries have been evicted. Remarks If a MapStore is defined on server for this map, then MapStore.deleteAll is not called by this method, If you do want MapStore.deleteAll to be called use the method."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.EvictAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.EvictAsync.html",
    "title": "Method EvictAsync | Hazelcast .NET Documentation",
    "keywords": "Method EvictAsync EvictAsync(TKey) Evicts the specified key from the map. Declaration Task<bool> EvictAsync(TKey key) Parameters Type Name Description TKey key The key. Returns Type Description Task<bool> true if the entry was evicted; otherwise false. Remarks If a MapStore on server is defined for this map, then the entry is not deleted from the underlying MapStore, evict only removes the entry from the memory. Use DeleteAsync(TKey) or if MapStore.delete(object) needs to be called. This method uses GetHashCode and Equals of binary form of the key, not the actual implementations of GetHashCode and Equals defined in key's class."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.ExecuteAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.ExecuteAsync.html",
    "title": "Method ExecuteAsync | Hazelcast .NET Documentation",
    "keywords": "Method ExecuteAsync ExecuteAsync<TResult>(IEntryProcessor<TResult>) Processes all entries. Declaration Task<IDictionary<TKey, TResult>> ExecuteAsync<TResult>(IEntryProcessor<TResult> processor) Parameters Type Name Description IEntryProcessor<TResult> processor An entry processor. Returns Type Description Task<IDictionary<TKey, TResult>> The result of the processing of all entries. Type Parameters Name Description TResult The type of the results produced by the processor. Remarks The operation is not lock-aware. The processor will process the entries no matter if the keys are locked or not. The processor must be serializable via Hazelcast serialization, and have a counterpart on the server. Interactions with the map store: For each entry not found in memory MapLoader.load(Object) is invoked to load the value from the MapStore backing the map. If the entryProcessor updates the entry and write-through persistence mode is configured, before the value is stored in memory, MapStore.store(Object, Object) is called to write the value into the map store. If the entryProcessor updates the entry's value to null value and write-through persistence mode is configured, before the value is removed from the memory, MapStore.delete(Object) is called to delete the value from the MapStore. Any exceptions thrown by the MapStore fail the operation and are propagated to the caller. If an exception happened, the operation might already succeeded on some of the keys. If write-behind persistence mode is configured with write-coalescing turned off, ReachedMaxSizeException may be thrown if the write-behind queue has reached its per-node maximum capacity. ExecuteAsync<TResult>(IEntryProcessor<TResult>, TKey) Processes an entry. Declaration Task<TResult> ExecuteAsync<TResult>(IEntryProcessor<TResult> processor, TKey key) Parameters Type Name Description IEntryProcessor<TResult> processor An entry processor. TKey key The key. Returns Type Description Task<TResult> The result of the process. Type Parameters Name Description TResult The type of the results produced by the processor. Remarks The processor must be serializable via Hazelcast serialization, and have a counterpart on the server. ExecuteAsync<TResult>(IEntryProcessor<TResult>, IEnumerable<TKey>) Processes entries. Declaration Task<IDictionary<TKey, TResult>> ExecuteAsync<TResult>(IEntryProcessor<TResult> processor, IEnumerable<TKey> keys) Parameters Type Name Description IEntryProcessor<TResult> processor An entry processor. IEnumerable<TKey> keys The keys. Returns Type Description Task<IDictionary<TKey, TResult>> The result of the processing of each entry. Type Parameters Name Description TResult The type of the results produced by the processor. Remarks The processor must be serializable via Hazelcast serialization, and have a counterpart on the server. ExecuteAsync<TResult>(IEntryProcessor<TResult>, IPredicate) Process entries. Declaration Task<IDictionary<TKey, TResult>> ExecuteAsync<TResult>(IEntryProcessor<TResult> processor, IPredicate predicate) Parameters Type Name Description IEntryProcessor<TResult> processor An entry processor. IPredicate predicate A predicate to select entries. Returns Type Description Task<IDictionary<TKey, TResult>> The result of the processing of selected entries. Type Parameters Name Description TResult The type of the results produced by the processor. Remarks The processor must be serializable via Hazelcast serialization, and have a counterpart on the server."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.FlushAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.FlushAsync.html",
    "title": "Method FlushAsync | Hazelcast .NET Documentation",
    "keywords": "Method FlushAsync FlushAsync() Flushes the MapStore on server, if any. Declaration Task FlushAsync() Returns Type Description Task A task that will complete when the map store has been flushed. Remarks If a MapStore is defined for this map, this method flushes all dirty entries by deleting or storing them."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.GetAllAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.GetAllAsync.html",
    "title": "Method GetAllAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetAllAsync GetAllAsync(ICollection<TKey>) Gets all entries for keys. Declaration Task<IReadOnlyDictionary<TKey, TValue>> GetAllAsync(ICollection<TKey> keys) Parameters Type Name Description ICollection<TKey> keys The keys. Returns Type Description Task<IReadOnlyDictionary<TKey, TValue>> The values for the specified keys. Remarks The returned readonly dictionary is NOT backed by the hazelcast map, so changes to the returned readonly dictionary are NOT reflected in the IHMap<TKey, TValue>, and vice-versa."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.GetEntriesAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.GetEntriesAsync.html",
    "title": "Method GetEntriesAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetEntriesAsync GetEntriesAsync(IPredicate) Queries the map based on the specified predicate and returns a readonly dictionary of the matching entries. Declaration Task<IReadOnlyDictionary<TKey, TValue>> GetEntriesAsync(IPredicate predicate) Parameters Type Name Description IPredicate predicate A predicate to filter the entries with. Returns Type Description Task<IReadOnlyDictionary<TKey, TValue>> readonly dictionary of the matching entries. Remarks Specified predicate runs on all members in parallel. The returned readonly dictionary is NOT backed by the hazelcast dictionary, so changes to the returned readonly dictionary are NOT reflected in the IHMap<TKey, TValue>, and vice-versa. The predicate must be serializable via Hazelcast serialization, and have a counterpart on the server."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.GetEntryViewAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.GetEntryViewAsync.html",
    "title": "Method GetEntryViewAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetEntryViewAsync GetEntryViewAsync(TKey) Gets an entry with statistics for a key, or null if the map does not contain an entry with this key. Declaration Task<IMapEntryStats<TKey, TValue>> GetEntryViewAsync(TKey key) Parameters Type Name Description TKey key The key. Returns Type Description Task<IMapEntryStats<TKey, TValue>> An IMapEntryStats<TKey, TValue> for the specified key, or null if the map does not contain an entry with this key."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.GetKeysAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.GetKeysAsync.html",
    "title": "Method GetKeysAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetKeysAsync GetKeysAsync(IPredicate) Queries the map based on the specified predicate and returns matching keys. Declaration Task<IReadOnlyCollection<TKey>> GetKeysAsync(IPredicate predicate) Parameters Type Name Description IPredicate predicate A predicate to filter the entries with. Returns Type Description Task<IReadOnlyCollection<TKey>> readonly clone of all keys matching the predicate. Remarks Specified predicate runs on all members in parallel. The returned collection is NOT backed by this dictionary, so changes to the dictionary are NOT reflected in the collection, and vice-versa. The predicate must be serializable via Hazelcast serialization, and have a counterpart on the server."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.GetValuesAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.GetValuesAsync.html",
    "title": "Method GetValuesAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetValuesAsync GetValuesAsync(IPredicate) Queries the map based on the specified predicate and returns a readonly collection of the values of matching entries. Gets values for entries matching a predicate. Declaration Task<IReadOnlyCollection<TValue>> GetValuesAsync(IPredicate predicate) Parameters Type Name Description IPredicate predicate A predicate to filter the entries. Returns Type Description Task<IReadOnlyCollection<TValue>> readonly collection of the values of matching entries. Remarks Specified predicate runs on all members in parallel. The returned collection is NOT backed by this dictionary, so changes to the dictionary are NOT reflected in the collection, and vice-versa. The predicate must be serializable via Hazelcast serialization, and have a counterpart on the server."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.html",
    "title": "Interface IHMap<TKey, TValue> | Hazelcast .NET Documentation",
    "keywords": "Interface IHMap<TKey, TValue> Represents a distributed map. Inherited Members IHMapBase<TKey, TValue>.GetAsync(TKey) IHMapBase<TKey, TValue>.GetKeysAsync() IHMapBase<TKey, TValue>.GetValuesAsync() IHMapBase<TKey, TValue>.GetEntriesAsync() IHMapBase<TKey, TValue>.GetSizeAsync() IHMapBase<TKey, TValue>.IsEmptyAsync() IHMapBase<TKey, TValue>.ContainsKeyAsync(TKey) IHMapBase<TKey, TValue>.ContainsValueAsync(TValue) IHMapBase<TKey, TValue>.PutAsync(TKey, TValue) IHMapBase<TKey, TValue>.PutAsync(TKey, TValue, TimeSpan) IHMapBase<TKey, TValue>.SetAllAsync(IDictionary<TKey, TValue>) IHMapBase<TKey, TValue>.ClearAsync() IHMapBase<TKey, TValue>.RemoveAsync(TKey) IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() IAsyncEnumerable<KeyValuePair<TKey, TValue>>.GetAsyncEnumerator(CancellationToken) IKeyLockable<TKey>.LockAsync(TKey) IKeyLockable<TKey>.LockAsync(TKey, TimeSpan) IKeyLockable<TKey>.TryLockAsync(TKey) IKeyLockable<TKey>.TryLockAsync(TKey, TimeSpan) IKeyLockable<TKey>.TryLockAsync(TKey, TimeSpan, TimeSpan) IKeyLockable<TKey>.IsLockedAsync(TKey) IKeyLockable<TKey>.UnlockAsync(TKey) IKeyLockable<TKey>.ForceUnlockAsync(TKey) Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Syntax public interface IHMap<TKey, TValue> : IHMapBase<TKey, TValue>, IDistributedObject, IAsyncDisposable, IAsyncEnumerable<KeyValuePair<TKey, TValue>>, IKeyLockable<TKey> Type Parameters Name Description TKey The type of the keys. TValue The type of the values. Remarks Keys are identified by their own hash code and equality. Methods return clones of the original keys and values. Modifying these clones does not change the actual keys and values in the map. One should put the modified entries back, to make changes visible to all nodes. Methods Name Description AddIndexAsync(IndexOptions) Adds an index to this dictionary for the specified entries so that queries can run faster. AddIndexAsync(IndexType, params string[]) Convenient method to add an index to this dictionary with the given type and attributes. Attributes are indexed in ascending order. AddInterceptorAsync(IMapInterceptor) Adds an interceptor on the server side. AggregateAsync<TResult>(IAggregator<TResult>, IPredicate) Aggregates values. AggregateAsync<TResult>(IAggregator<TResult>) Aggregates values. DeleteAsync(TKey) Removes an entry. EvictAllAsync() Evicts all entries but the locked entries from the cache. EvictAsync(TKey) Evicts the specified key from the map. ExecuteAsync<TResult>(IEntryProcessor<TResult>, TKey) Processes an entry. ExecuteAsync<TResult>(IEntryProcessor<TResult>, IPredicate) Process entries. ExecuteAsync<TResult>(IEntryProcessor<TResult>, IEnumerable<TKey>) Processes entries. ExecuteAsync<TResult>(IEntryProcessor<TResult>) Processes all entries. FlushAsync() Flushes the MapStore on server, if any. GetAllAsync(ICollection<TKey>) Gets all entries for keys. GetEntriesAsync(IPredicate) Queries the map based on the specified predicate and returns a readonly dictionary of the matching entries. GetEntryViewAsync(TKey) Gets an entry with statistics for a key, or null if the map does not contain an entry with this key. GetKeysAsync(IPredicate) Queries the map based on the specified predicate and returns matching keys. GetValuesAsync(IPredicate) Queries the map based on the specified predicate and returns a readonly collection of the values of matching entries. Gets values for entries matching a predicate. LoadAllAsync(bool) Loads all keys into the store. LoadAllAsync(ICollection<TKey>, bool) Loads the given keys into the store. ProjectAsync<TResult>(IProjection, IPredicate) Projects values. ProjectAsync<TResult>(IProjection) Projects values. PutAsync(TKey, TValue, TimeSpan, TimeSpan) Sets (adds or updates) an entry, and returns the previous value, if any. PutIfAbsentAsync(TKey, TValue, TimeSpan, TimeSpan) Adds an entry with a time-to-live and a max-idle if no entry with the key already exists. Returns the new value, or the existing value if the entry already exists. PutIfAbsentAsync(TKey, TValue, TimeSpan) Adds an entry with a time-to-live if no entry with the key already exists. Returns the new value, or the existing value if the entry already exists. PutIfAbsentAsync(TKey, TValue) Adds an entry if no entry with the key already exists. Returns the new value, or the existing value if the entry already exists. PutTransientAsync(TKey, TValue, TimeSpan, TimeSpan) Sets (adds or updates) an entry without calling the MapStore on the server side, if defined. PutTransientAsync(TKey, TValue, TimeSpan) Sets (adds or updates) an entry without calling the MapStore on the server side, if defined. RemoveAllAsync(IPredicate) Removes all entries which match with the supplied predicate. RemoveAsync(TKey, TValue) Removes an entry. RemoveInterceptorAsync(string) Removes the interceptor that identified by id. ReplaceAsync(TKey, TValue, TValue) Updates an entry if it exists, and its value is equal to comparisonValue. ReplaceAsync(TKey, TValue) Updates an entry if it exists. SetAsync(TKey, TValue, TimeSpan, TimeSpan) Sets (adds or updates) an entry. SetAsync(TKey, TValue, TimeSpan) Sets (adds or updates) an entry. SetAsync(TKey, TValue) Sets (adds or updates) an entry. SubscribeAsync(Action<MapEventHandlers<TKey, TValue>>, TKey, IPredicate, bool, object) Subscribes to events. SubscribeAsync(Action<MapEventHandlers<TKey, TValue>>, TKey, bool, object) Subscribes to events. SubscribeAsync(Action<MapEventHandlers<TKey, TValue>>, IPredicate, bool, object) Subscribes to events. SubscribeAsync(Action<MapEventHandlers<TKey, TValue>>, bool, object) Subscribes to events. TryPutAsync(TKey, TValue, TimeSpan) Tries to set (add or update) an entry. TryRemoveAsync(TKey, TimeSpan) Tries to remove the entry with the given key from this map within the specified time to wait value. UnsubscribeAsync(Guid) Unsubscribe from events. UpdateTimeToLive(TKey, TimeSpan) Updates the time-to-live of an entry."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.LoadAllAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.LoadAllAsync.html",
    "title": "Method LoadAllAsync | Hazelcast .NET Documentation",
    "keywords": "Method LoadAllAsync LoadAllAsync(bool) Loads all keys into the store. Declaration Task LoadAllAsync(bool replaceExistingValues) Parameters Type Name Description bool replaceExistingValues when true, existing values in the IHMap<TKey, TValue> will be replaced by those loaded from the MapLoader Returns Type Description Task A task that will complete when the map store has been loaded. LoadAllAsync(ICollection<TKey>, bool) Loads the given keys into the store. Declaration Task LoadAllAsync(ICollection<TKey> keys, bool replaceExistingValues) Parameters Type Name Description ICollection<TKey> keys keys of the values entries to load (keys inside the collection cannot be null) bool replaceExistingValues when true, existing values in the IHMap<TKey, TValue> will be replaced by those loaded from the MapLoader Returns Type Description Task A task that will complete when the map store has been loaded."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.ProjectAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.ProjectAsync.html",
    "title": "Method ProjectAsync | Hazelcast .NET Documentation",
    "keywords": "Method ProjectAsync ProjectAsync<TResult>(IProjection) Projects values. Declaration Task<IReadOnlyCollection<TResult>> ProjectAsync<TResult>(IProjection projection) Parameters Type Name Description IProjection projection The projection. Returns Type Description Task<IReadOnlyCollection<TResult>> The projected values. Type Parameters Name Description TResult The type of the result. Remarks The projection must be serializable via Hazelcast serialization, and have a counterpart on the server. ProjectAsync<TResult>(IProjection, IPredicate) Projects values. Declaration Task<IReadOnlyCollection<TResult>> ProjectAsync<TResult>(IProjection projection, IPredicate predicate) Parameters Type Name Description IProjection projection The projection. IPredicate predicate A predicate to filter the entries with. Returns Type Description Task<IReadOnlyCollection<TResult>> The projected values. Type Parameters Name Description TResult The type of the result. Remarks The projection and predicate must be serializable via Hazelcast serialization, and have a counterpart on the server."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.PutAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.PutAsync.html",
    "title": "Method PutAsync | Hazelcast .NET Documentation",
    "keywords": "Method PutAsync PutAsync(TKey, TValue, TimeSpan, TimeSpan) Sets (adds or updates) an entry, and returns the previous value, if any. Declaration Task<TValue> PutAsync(TKey key, TValue value, TimeSpan timeToLive, TimeSpan maxIdle) Parameters Type Name Description TKey key The key. TValue value The value. TimeSpan timeToLive A time to live (0ms to live forever; -1ms to use the server-configured value). TimeSpan maxIdle A max-idle time (0ms to never become idle). Returns Type Description Task<TValue> The previous value for the specified key, if any; otherwise default(TValue). Remarks The value is automatically expired, evicted and removed after the timeToLive has elapsed. If timeToLive is 0ms, the value is retained indefinitely. If it is -1ms, it lives for the duration of the server-configured time-to-live. The value is considered idle after the maxIdle has elapsed. If it is 0ms, the value never becomes idle."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.PutIfAbsentAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.PutIfAbsentAsync.html",
    "title": "Method PutIfAbsentAsync | Hazelcast .NET Documentation",
    "keywords": "Method PutIfAbsentAsync PutIfAbsentAsync(TKey, TValue) Adds an entry if no entry with the key already exists. Returns the new value, or the existing value if the entry already exists. Declaration Task<TValue> PutIfAbsentAsync(TKey key, TValue value) Parameters Type Name Description TKey key A key. TValue value The value. Returns Type Description Task<TValue> The value for the key. This will be either the existing value for the key if the entry already exists, or the new value if the no entry with the key already existed. Remarks The value never expires. The value becomes idle after the server-configured idle time. This methods interacts with the server-side MapStore. If no value for the specified key is found in memory, MapLoader.load(...) is invoked to try to load the value from the MapStore backing the map, if any. If write-through persistence is configured, before the value is stored in memory, MapStore.store is invoked to write the value to the store. PutIfAbsentAsync(TKey, TValue, TimeSpan) Adds an entry with a time-to-live if no entry with the key already exists. Returns the new value, or the existing value if the entry already exists. Declaration Task<TValue> PutIfAbsentAsync(TKey key, TValue value, TimeSpan timeToLive) Parameters Type Name Description TKey key A key. TValue value A value. TimeSpan timeToLive A time to live (0ms to live forever; -1ms to use the server-configured value). Returns Type Description Task<TValue> The value for the key. This will be either the existing value for the key if the entry already exists, or the new value if the no entry with the key already existed. Remarks The value is automatically expired, evicted and removed after the timeToLive has elapsed. If timeToLive is 0ms, the value is retained indefinitely. If it is -1ms, it lives for the duration of the server-configured time-to-live. The value becomes idle after the server-configured idle time. This methods interacts with the server-side MapStore. If no value for the specified key is found in memory, MapLoader.load(...) is invoked to try to load the value from the MapStore backing the map, if any. If write-through persistence is configured, before the value is stored in memory, MapStore.store is invoked to write the value to the store. PutIfAbsentAsync(TKey, TValue, TimeSpan, TimeSpan) Adds an entry with a time-to-live and a max-idle if no entry with the key already exists. Returns the new value, or the existing value if the entry already exists. Declaration Task<TValue> PutIfAbsentAsync(TKey key, TValue value, TimeSpan timeToLive, TimeSpan maxIdle) Parameters Type Name Description TKey key A key. TValue value A value. TimeSpan timeToLive A time to live (0ms to live forever; -1ms to use the server-configured value). TimeSpan maxIdle A max-idle time (0ms to never become idle). Returns Type Description Task<TValue> The value for the key. This will be either the existing value for the key if the entry already exists, or the new value if the no entry with the key already existed. Remarks The value is automatically expired, evicted and removed after the timeToLive has elapsed. If timeToLive is 0ms, the value is retained indefinitely. If it is -1ms, it lives for the duration of the server-configured time-to-live. The value is considered idle after the maxIdle has elapsed. If it is 0ms, the value never becomes idle. This methods interacts with the server-side MapStore. If no value for the specified key is found in memory, MapLoader.load(...) is invoked to try to load the value from the MapStore backing the map, if any. If write-through persistence is configured, before the value is stored in memory, MapStore.store is invoked to write the value to the store."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.PutTransientAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.PutTransientAsync.html",
    "title": "Method PutTransientAsync | Hazelcast .NET Documentation",
    "keywords": "Method PutTransientAsync PutTransientAsync(TKey, TValue, TimeSpan) Sets (adds or updates) an entry without calling the MapStore on the server side, if defined. Declaration Task PutTransientAsync(TKey key, TValue value, TimeSpan timeToLive) Parameters Type Name Description TKey key A key. TValue value A value. TimeSpan timeToLive A time to live (0ms to live forever; -1ms to use the server-configured value). Returns Type Description Task Remarks The value is automatically expired, evicted and removed after the timeToLive has elapsed. If timeToLive is 0ms, the value is retained indefinitely. If it is -1ms, it lives for the duration of the server-configured time-to-live. The value becomes idle after the server-configured idle time. If the dictionary has a MapStore attached, the entry is added to the store but not persisted. Flushing the store is required to make sure that the entry is actually persisted. Time resolution for is seconds. The given value is rounded to the next closest second value. PutTransientAsync(TKey, TValue, TimeSpan, TimeSpan) Sets (adds or updates) an entry without calling the MapStore on the server side, if defined. Declaration Task PutTransientAsync(TKey key, TValue value, TimeSpan timeToLive, TimeSpan maxIdle) Parameters Type Name Description TKey key A key. TValue value A value. TimeSpan timeToLive A time to live (0ms to live forever; -1ms to use the server-configured value). TimeSpan maxIdle A max-idle time (0ms to never become idle). Returns Type Description Task The value for the key. This will be either the existing value for the key if the entry already exists, or the new value if the no entry with the key already existed. Remarks The value is automatically expired, evicted and removed after the timeToLive has elapsed. If timeToLive is i.e. 0ms, the value is retained indefinitely. If it is -1ms, it lives for the duration of the server-configured time-to-live. The value is considered idle after the maxIdle has elapsed. If it is 0ms, the value never becomes idle. If the dictionary has a MapStore attached, the entry is added to the store but not persisted. Flushing the store is required to make sure that the entry is actually persisted. The value is automatically expired, evicted and removed after the timeToLive has elapsed. Time resolution for is seconds. The given value is rounded to the next closest second value."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.RemoveAllAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.RemoveAllAsync.html",
    "title": "Method RemoveAllAsync | Hazelcast .NET Documentation",
    "keywords": "Method RemoveAllAsync RemoveAllAsync(IPredicate) Removes all entries which match with the supplied predicate. Declaration Task RemoveAllAsync(IPredicate predicate) Parameters Type Name Description IPredicate predicate A predicate used to select entries to be removed. Returns Type Description Task A task that will complete when entries have been removed. Remarks This method does not consider the removed value at all, which breaks the events contract: any event that would be filtered on the value (for instance via a predicate), would not trigger here."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.RemoveAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.RemoveAsync.html",
    "title": "Method RemoveAsync | Hazelcast .NET Documentation",
    "keywords": "Method RemoveAsync RemoveAsync(TKey, TValue) Removes an entry. Declaration Task<bool> RemoveAsync(TKey key, TValue value) Parameters Type Name Description TKey key The key. TValue value The value. Returns Type Description Task<bool> true if an entry with the specified key and value was removed; otherwise false. Remarks This method removes an entry if the key and the value both match the specified key and value. This method does not consider the removed value at all, which breaks the events contract: any event that would be filtered on the value (for instance via a predicate), would not trigger here."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.RemoveInterceptorAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.RemoveInterceptorAsync.html",
    "title": "Method RemoveInterceptorAsync | Hazelcast .NET Documentation",
    "keywords": "Method RemoveInterceptorAsync RemoveInterceptorAsync(string) Removes the interceptor that identified by id. Declaration Task<bool> RemoveInterceptorAsync(string id) Parameters Type Name Description string id The identifier of the interceptor. Returns Type Description Task<bool> true if registration is removed, false otherwise"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.ReplaceAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.ReplaceAsync.html",
    "title": "Method ReplaceAsync | Hazelcast .NET Documentation",
    "keywords": "Method ReplaceAsync ReplaceAsync(TKey, TValue) Updates an entry if it exists. Declaration Task<TValue> ReplaceAsync(TKey key, TValue newValue) Parameters Type Name Description TKey key A key. TValue newValue The new value. Returns Type Description Task<TValue> The existing value, if any; otherwise default(TValue). Remarks If an existing entry with the specified key is found, then its value is updated with the new value, and the existing value is returned. Otherwise, nothing happens. This methods interacts with the server-side MapStore. If no value for the specified key is found in memory, MapLoader.load(...) is invoked to try to load the value from the MapStore backing the map, if any. If write-through persistence is configured, before the value is stored in memory, MapStore.store is invoked to write the value to the store. ReplaceAsync(TKey, TValue, TValue) Updates an entry if it exists, and its value is equal to comparisonValue. Declaration Task<bool> ReplaceAsync(TKey key, TValue newValue, TValue comparisonValue) Parameters Type Name Description TKey key A key. TValue newValue The new value. TValue comparisonValue The value that is compared with the value of the entry. Returns Type Description Task<bool> true if the entry was updated; otherwise false. Remarks If an existing entry with the specified key and expected value is found, then its value is updated with the new value. Otherwise, nothing happens. This methods interacts with the server-side MapStore. If no value for the specified key is found in memory, MapLoader.load(...) is invoked to try to load the value from the MapStore backing the map, if any. If write-through persistence is configured, before the value is stored in memory, MapStore.store is invoked to write the value to the store."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.SetAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.SetAsync.html",
    "title": "Method SetAsync | Hazelcast .NET Documentation",
    "keywords": "Method SetAsync SetAsync(TKey, TValue) Sets (adds or updates) an entry. Declaration Task SetAsync(TKey key, TValue value) Parameters Type Name Description TKey key A key. TValue value A value. Returns Type Description Task A task that will complete when the entry has been added or updated. Remarks The value has an infinite time-to-live. The value becomes idle after the server-configured idle time. SetAsync(TKey, TValue, TimeSpan) Sets (adds or updates) an entry. Declaration Task SetAsync(TKey key, TValue value, TimeSpan timeToLive) Parameters Type Name Description TKey key A key. TValue value A value. TimeSpan timeToLive A time to live (0ms to live forever; -1ms to use the server-configured value). Returns Type Description Task A task that will complete when the entry has been added or updated. Remarks The value is automatically expired, evicted and removed after the timeToLive has elapsed. If timeToLive is0ms, the value is retained indefinitely. If it is -1ms, it lives for the duration of the server-configured time-to-live. The value becomes idle after the server-configured idle time. SetAsync(TKey, TValue, TimeSpan, TimeSpan) Sets (adds or updates) an entry. Declaration Task SetAsync(TKey key, TValue value, TimeSpan timeToLive, TimeSpan maxIdle) Parameters Type Name Description TKey key A key. TValue value A value. TimeSpan timeToLive A time to live (0ms to live forever; -1ms to use the server-configured value). TimeSpan maxIdle A max-idle time (0ms to never become idle). Returns Type Description Task A task that will complete when the entry has been added or updated. Remarks The value is automatically expired, evicted and removed after the timeToLive has elapsed. If timeToLive is 0ms, the value is retained indefinitely. If it is -1ms, it lives for the duration of the server-configured time-to-live. The value is considered idle after the maxIdle has elapsed. If it is 0ms, the value never becomes idle."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.SubscribeAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.SubscribeAsync.html",
    "title": "Method SubscribeAsync | Hazelcast .NET Documentation",
    "keywords": "Method SubscribeAsync SubscribeAsync(Action<MapEventHandlers<TKey, TValue>>, bool, object) Subscribes to events. Declaration Task<Guid> SubscribeAsync(Action<MapEventHandlers<TKey, TValue>> events, bool includeValues = true, object state = null) Parameters Type Name Description Action<MapEventHandlers<TKey, TValue>> events An event handlers collection builder. bool includeValues Whether to include values in event arguments. object state A state object. Returns Type Description Task<Guid> The unique identifier of the subscription. SubscribeAsync(Action<MapEventHandlers<TKey, TValue>>, TKey, bool, object) Subscribes to events. Declaration Task<Guid> SubscribeAsync(Action<MapEventHandlers<TKey, TValue>> events, TKey key, bool includeValues = true, object state = null) Parameters Type Name Description Action<MapEventHandlers<TKey, TValue>> events An event handlers collection builder. TKey key A key to filter events. bool includeValues Whether to include values in event arguments. object state A state object. Returns Type Description Task<Guid> The unique identifier of the subscription. SubscribeAsync(Action<MapEventHandlers<TKey, TValue>>, IPredicate, bool, object) Subscribes to events. Declaration Task<Guid> SubscribeAsync(Action<MapEventHandlers<TKey, TValue>> events, IPredicate predicate, bool includeValues = true, object state = null) Parameters Type Name Description Action<MapEventHandlers<TKey, TValue>> events An event handlers collection builder. IPredicate predicate A predicate to filter events. bool includeValues Whether to include values in event arguments. object state A state object. Returns Type Description Task<Guid> The unique identifier of the subscription. Remarks Note that some methods such as DeleteAsync(TKey) may break the events contract in some situations, such as when the predicate refers to the entry value. Refer to the documentation for these methods for more details. SubscribeAsync(Action<MapEventHandlers<TKey, TValue>>, TKey, IPredicate, bool, object) Subscribes to events. Declaration Task<Guid> SubscribeAsync(Action<MapEventHandlers<TKey, TValue>> events, TKey key, IPredicate predicate, bool includeValues = true, object state = null) Parameters Type Name Description Action<MapEventHandlers<TKey, TValue>> events An event handlers collection builder. TKey key A key to filter events. IPredicate predicate A predicate to filter events. bool includeValues Whether to include values in event arguments. object state A state object. Returns Type Description Task<Guid> The unique identifier of the subscription. Remarks Note that some methods such as DeleteAsync(TKey) may break the events contract in some situations, such as when the predicate refers to the entry value. Refer to the documentation for these methods for more details."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.TryPutAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.TryPutAsync.html",
    "title": "Method TryPutAsync | Hazelcast .NET Documentation",
    "keywords": "Method TryPutAsync TryPutAsync(TKey, TValue, TimeSpan) Tries to set (add or update) an entry. Declaration Task<bool> TryPutAsync(TKey key, TValue value, TimeSpan timeToWait) Parameters Type Name Description TKey key A key. TValue value A value. TimeSpan timeToWait How long to wait (-1ms to wait forever; 0ms to not wait at all). Returns Type Description Task<bool> true if the entry was set; otherwise false. Remarks If the entry is not immediately available, because a lock is set on the key, this will wait for the specified timeToWait for the lock. If the lock cannot be acquired in time, returns null. If timeToWait is -1ms, waits forever. If it is 0ms, does not wait at all."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.TryRemoveAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.TryRemoveAsync.html",
    "title": "Method TryRemoveAsync | Hazelcast .NET Documentation",
    "keywords": "Method TryRemoveAsync TryRemoveAsync(TKey, TimeSpan) Tries to remove the entry with the given key from this map within the specified time to wait value. Declaration Task<bool> TryRemoveAsync(TKey key, TimeSpan timeToWait = default) Parameters Type Name Description TKey key A key. TimeSpan timeToWait How long to wait for a lock on the key (-1ms to wait forever; 0ms to not wait at all). Returns Type Description Task<bool> true if the entry was removed; otherwise false. Remarks If the key is already locked by another thread and/or member, then this operation will wait for the timeToWait for acquiring the lock. If the key is still locked, this operation returns false. If timeToWait is -1ms, waits forever. If it is 0ms, does not wait at all. The operation also returns false when no entry with the specified key exists."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.UnsubscribeAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.UnsubscribeAsync.html",
    "title": "Method UnsubscribeAsync | Hazelcast .NET Documentation",
    "keywords": "Method UnsubscribeAsync UnsubscribeAsync(Guid) Unsubscribe from events. Declaration ValueTask<bool> UnsubscribeAsync(Guid subscriptionId) Parameters Type Name Description Guid subscriptionId The unique identifier of the subscription. Returns Type Description ValueTask<bool> true if a subscription with the specified identifier was removed successfully; otherwise, if no subscription was found with the specified identifier, false. Remarks When this method completes, event handler will stop receiving events immediately. Member side event subscriptions will eventually be removed."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.UpdateTimeToLive.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMap-2.UpdateTimeToLive.html",
    "title": "Method UpdateTimeToLive | Hazelcast .NET Documentation",
    "keywords": "Method UpdateTimeToLive UpdateTimeToLive(TKey, TimeSpan) Updates the time-to-live of an entry. Declaration Task<bool> UpdateTimeToLive(TKey key, TimeSpan timeToLive) Parameters Type Name Description TKey key A key. TimeSpan timeToLive A time to live (0ms to live forever; -1ms to use the server-configured value). Returns Type Description Task<bool> true if the entry exists and its time-to-live value is changed; otherwise false. Remarks The value is automatically expired, evicted and removed after the timeToLive has elapsed. If timeToLive is i.e. 0ms, the value is retained indefinitely. If it is -1ms, it lives for the duration of the server-configured time-to-live. The new time-to-live value is valid starting from the time this operation is invoked, not since the time the entry was created. If the entry does not exist or is already expired, this call has no effect. If there is no entry with key key or is already expired, this call makes no changes to entries stored in this dictionary. Time resolution for is seconds. The given value is rounded to the next closest second value."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMapBase-2.ClearAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMapBase-2.ClearAsync.html",
    "title": "Method ClearAsync | Hazelcast .NET Documentation",
    "keywords": "Method ClearAsync ClearAsync() Clears the map by deleting all entries. Declaration Task ClearAsync() Returns Type Description Task A task that will complete when the map has been cleared."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMapBase-2.ContainsKeyAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMapBase-2.ContainsKeyAsync.html",
    "title": "Method ContainsKeyAsync | Hazelcast .NET Documentation",
    "keywords": "Method ContainsKeyAsync ContainsKeyAsync(TKey) Determines whether this map contains an entry for the specified key. Declaration Task<bool> ContainsKeyAsync(TKey key) Parameters Type Name Description TKey key The key. Returns Type Description Task<bool> true if the specified key contains key; otherwise false."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMapBase-2.ContainsValueAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMapBase-2.ContainsValueAsync.html",
    "title": "Method ContainsValueAsync | Hazelcast .NET Documentation",
    "keywords": "Method ContainsValueAsync ContainsValueAsync(TValue) Determines whether this map contains one or more keys to the specified value. Declaration Task<bool> ContainsValueAsync(TValue value) Parameters Type Name Description TValue value The value. Returns Type Description Task<bool> true if this map contains one or more keys to the specified value; otherwise false."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMapBase-2.GetAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMapBase-2.GetAsync.html",
    "title": "Method GetAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetAsync GetAsync(TKey) Gets the value for the specified key. Declaration Task<TValue> GetAsync(TKey key) Parameters Type Name Description TKey key The key. Returns Type Description Task<TValue> The value for the specified key, if any; otherwise default(TValue). Remarks This methods interacts with the server-side MapStore. If no value for the specified key is found in memory, MapLoader.load(...) is invoked to try to load the value from the MapStore backing the map, if any."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMapBase-2.GetEntriesAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMapBase-2.GetEntriesAsync.html",
    "title": "Method GetEntriesAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetEntriesAsync GetEntriesAsync() Gets a IReadOnlyDictionary<TKey, TValue> of the entries contained in this map. Declaration Task<IReadOnlyDictionary<TKey, TValue>> GetEntriesAsync() Returns Type Description Task<IReadOnlyDictionary<TKey, TValue>> A IReadOnlyDictionary<TKey, TValue> of the IHMapBase<TKey, TValue> in this map. Remarks This method does not interact with the server-side MapStore. It returns the entries found in memory, but does not look for more entries in the MapStore backing the map, if any."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMapBase-2.GetKeysAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMapBase-2.GetKeysAsync.html",
    "title": "Method GetKeysAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetKeysAsync GetKeysAsync() Gets a IReadOnlyCollection<T> of the keys contained in this map. Declaration Task<IReadOnlyCollection<TKey>> GetKeysAsync() Returns Type Description Task<IReadOnlyCollection<TKey>> A IReadOnlyCollection<T> of the keys contained in this map. Remarks This method does not interact with the server-side MapStore. It returns the keys found in memory, but does not look for more keys in the MapStore backing the map, if any."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMapBase-2.GetSizeAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMapBase-2.GetSizeAsync.html",
    "title": "Method GetSizeAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetSizeAsync GetSizeAsync() Gets the number of entries contained in this map. Declaration Task<int> GetSizeAsync() Returns Type Description Task<int> The number of entries contained in this map."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMapBase-2.GetValuesAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMapBase-2.GetValuesAsync.html",
    "title": "Method GetValuesAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetValuesAsync GetValuesAsync() Gets a IReadOnlyCollection<T> of the values contained in this map. Declaration Task<IReadOnlyCollection<TValue>> GetValuesAsync() Returns Type Description Task<IReadOnlyCollection<TValue>> A IReadOnlyCollection<T> of the values contained in this map. Remarks This method does not interact with the server-side MapStore. It returns the values found in memory, but does not look for more values in the MapStore backing the map, if any."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMapBase-2.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMapBase-2.html",
    "title": "Interface IHMapBase<TKey, TValue> | Hazelcast .NET Documentation",
    "keywords": "Interface IHMapBase<TKey, TValue> Defines the base interface for various Hazelcast distributed dictionaries. Inherited Members IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() IAsyncEnumerable<KeyValuePair<TKey, TValue>>.GetAsyncEnumerator(CancellationToken) Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Syntax public interface IHMapBase<TKey, TValue> : IDistributedObject, IAsyncDisposable, IAsyncEnumerable<KeyValuePair<TKey, TValue>> Type Parameters Name Description TKey The type of keys in the map. TValue The type of values in the map. Methods Name Description ClearAsync() Clears the map by deleting all entries. ContainsKeyAsync(TKey) Determines whether this map contains an entry for the specified key. ContainsValueAsync(TValue) Determines whether this map contains one or more keys to the specified value. GetAsync(TKey) Gets the value for the specified key. GetEntriesAsync() Gets a IReadOnlyDictionary<TKey, TValue> of the entries contained in this map. GetKeysAsync() Gets a IReadOnlyCollection<T> of the keys contained in this map. GetSizeAsync() Gets the number of entries contained in this map. GetValuesAsync() Gets a IReadOnlyCollection<T> of the values contained in this map. IsEmptyAsync() Determines whether this map contains no entries. PutAsync(TKey, TValue, TimeSpan) PutAsync(TKey, TValue) Sets (adds or updates) an entry, and returns the previous value, if any. RemoveAsync(TKey) Removes an entry, and returns the removed value, if any. SetAllAsync(IDictionary<TKey, TValue>) Sets (adds or updates) entries. See Also IHMap<TKey, TValue> IHReplicatedMap<TKey, TValue>"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMapBase-2.IsEmptyAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMapBase-2.IsEmptyAsync.html",
    "title": "Method IsEmptyAsync | Hazelcast .NET Documentation",
    "keywords": "Method IsEmptyAsync IsEmptyAsync() Determines whether this map contains no entries. Declaration Task<bool> IsEmptyAsync() Returns Type Description Task<bool> true if this map contains no entries; otherwise false."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMapBase-2.PutAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMapBase-2.PutAsync.html",
    "title": "Method PutAsync | Hazelcast .NET Documentation",
    "keywords": "Method PutAsync PutAsync(TKey, TValue) Sets (adds or updates) an entry, and returns the previous value, if any. Declaration Task<TValue> PutAsync(TKey key, TValue value) Parameters Type Name Description TKey key The key. TValue value The value. Returns Type Description Task<TValue> The previous value for the specified key, if any; otherwise default(TValue). PutAsync(TKey, TValue, TimeSpan) Declaration Task<TValue> PutAsync(TKey key, TValue value, TimeSpan timeToLive) Parameters Type Name Description TKey key TValue value TimeSpan timeToLive Returns Type Description Task<TValue>"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMapBase-2.RemoveAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMapBase-2.RemoveAsync.html",
    "title": "Method RemoveAsync | Hazelcast .NET Documentation",
    "keywords": "Method RemoveAsync RemoveAsync(TKey) Removes an entry, and returns the removed value, if any. Declaration Task<TValue> RemoveAsync(TKey key) Parameters Type Name Description TKey key The key. Returns Type Description Task<TValue> The removed value, if any; otherwise default(TValue)."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMapBase-2.SetAllAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMapBase-2.SetAllAsync.html",
    "title": "Method SetAllAsync | Hazelcast .NET Documentation",
    "keywords": "Method SetAllAsync SetAllAsync(IDictionary<TKey, TValue>) Sets (adds or updates) entries. Declaration Task SetAllAsync(IDictionary<TKey, TValue> entries) Parameters Type Name Description IDictionary<TKey, TValue> entries The entries. Returns Type Description Task A task that will complete when entries have been added or updated."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMultiMap-2.ClearAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMultiMap-2.ClearAsync.html",
    "title": "Method ClearAsync | Hazelcast .NET Documentation",
    "keywords": "Method ClearAsync ClearAsync() Clears the multi-map. Removes all key-value pairs. Declaration Task ClearAsync() Returns Type Description Task"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMultiMap-2.ContainsEntryAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMultiMap-2.ContainsEntryAsync.html",
    "title": "Method ContainsEntryAsync | Hazelcast .NET Documentation",
    "keywords": "Method ContainsEntryAsync ContainsEntryAsync(TKey, TValue) Returns whether the multi-map contains the given key-value pair. Declaration Task<bool> ContainsEntryAsync(TKey key, TValue value) Parameters Type Name Description TKey key the key whose existence is checked. TValue value the value whose existence is checked. Returns Type Description Task<bool> true if the multi-map contains the key-value pair, false otherwise."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMultiMap-2.ContainsKeyAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMultiMap-2.ContainsKeyAsync.html",
    "title": "Method ContainsKeyAsync | Hazelcast .NET Documentation",
    "keywords": "Method ContainsKeyAsync ContainsKeyAsync(TKey) Returns whether the multi-map contains an entry with the key. Declaration Task<bool> ContainsKeyAsync(TKey key) Parameters Type Name Description TKey key the key whose existence is checked. Returns Type Description Task<bool> true if the multi-map contains an entry with the key, false otherwise."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMultiMap-2.ContainsValueAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMultiMap-2.ContainsValueAsync.html",
    "title": "Method ContainsValueAsync | Hazelcast .NET Documentation",
    "keywords": "Method ContainsValueAsync ContainsValueAsync(TValue) Returns whether the multi-map contains an entry with the value. Declaration Task<bool> ContainsValueAsync(TValue value) Parameters Type Name Description TValue value the value whose existence is checked. Returns Type Description Task<bool> true if the multi-map contains an entry with the value, false otherwise."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMultiMap-2.DeleteAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMultiMap-2.DeleteAsync.html",
    "title": "Method DeleteAsync | Hazelcast .NET Documentation",
    "keywords": "Method DeleteAsync DeleteAsync(TKey) Removes all the entries with the given key. Declaration Task DeleteAsync(TKey key) Parameters Type Name Description TKey key the key of the entries to remove Returns Type Description Task"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMultiMap-2.GetAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMultiMap-2.GetAsync.html",
    "title": "Method GetAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetAsync GetAsync(TKey) Returns the collection of values associated with the key. Declaration Task<IReadOnlyCollection<TValue>> GetAsync(TKey key) Parameters Type Name Description TKey key the key whose associated values are to be returned Returns Type Description Task<IReadOnlyCollection<TValue>> the collection of the values associated with the key."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMultiMap-2.GetEntriesAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMultiMap-2.GetEntriesAsync.html",
    "title": "Method GetEntriesAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetEntriesAsync GetEntriesAsync() Returns the set of key-value pairs in the multi-map. Declaration Task<IReadOnlyCollection<KeyValuePair<TKey, TValue>>> GetEntriesAsync() Returns Type Description Task<IReadOnlyCollection<KeyValuePair<TKey, TValue>>> the collection of key-value pairs in the multi-map."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMultiMap-2.GetKeysAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMultiMap-2.GetKeysAsync.html",
    "title": "Method GetKeysAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetKeysAsync GetKeysAsync() Returns the set of keys in the multi-map. Declaration Task<IReadOnlyCollection<TKey>> GetKeysAsync() Returns Type Description Task<IReadOnlyCollection<TKey>> the collection of keys in the multi-map."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMultiMap-2.GetSizeAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMultiMap-2.GetSizeAsync.html",
    "title": "Method GetSizeAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetSizeAsync GetSizeAsync() Returns the number of key-value pairs in the multi-map. Declaration Task<int> GetSizeAsync() Returns Type Description Task<int> the number of key-value pairs in the multi-map."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMultiMap-2.GetValueCountAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMultiMap-2.GetValueCountAsync.html",
    "title": "Method GetValueCountAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetValueCountAsync GetValueCountAsync(TKey) Returns number of values matching to given key in the multi-map. Declaration Task<int> GetValueCountAsync(TKey key) Parameters Type Name Description TKey key the key whose values count are to be returned Returns Type Description Task<int> number of values matching to given key in the multi-map."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMultiMap-2.GetValuesAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMultiMap-2.GetValuesAsync.html",
    "title": "Method GetValuesAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetValuesAsync GetValuesAsync() Returns the collection of values in the multi-map. Declaration Task<IReadOnlyCollection<TValue>> GetValuesAsync() Returns Type Description Task<IReadOnlyCollection<TValue>> the collection of values in the multi-map."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMultiMap-2.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMultiMap-2.html",
    "title": "Interface IHMultiMap<TKey, TValue> | Hazelcast .NET Documentation",
    "keywords": "Interface IHMultiMap<TKey, TValue> Represents a distributed map whose keys can be associated with multiple values. Inherited Members IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() IKeyLockable<TKey>.LockAsync(TKey) IKeyLockable<TKey>.LockAsync(TKey, TimeSpan) IKeyLockable<TKey>.TryLockAsync(TKey) IKeyLockable<TKey>.TryLockAsync(TKey, TimeSpan) IKeyLockable<TKey>.TryLockAsync(TKey, TimeSpan, TimeSpan) IKeyLockable<TKey>.IsLockedAsync(TKey) IKeyLockable<TKey>.UnlockAsync(TKey) IKeyLockable<TKey>.ForceUnlockAsync(TKey) IAsyncEnumerable<KeyValuePair<TKey, TValue>>.GetAsyncEnumerator(CancellationToken) Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Syntax public interface IHMultiMap<TKey, TValue> : IDistributedObject, IAsyncDisposable, IKeyLockable<TKey>, IAsyncEnumerable<KeyValuePair<TKey, TValue>> Type Parameters Name Description TKey TValue Remarks IHMultiMap can be configured on Server side to allow duplicate values or not for its values collection Methods Name Description ClearAsync() Clears the multi-map. Removes all key-value pairs. ContainsEntryAsync(TKey, TValue) Returns whether the multi-map contains the given key-value pair. ContainsKeyAsync(TKey) Returns whether the multi-map contains an entry with the key. ContainsValueAsync(TValue) Returns whether the multi-map contains an entry with the value. DeleteAsync(TKey) Removes all the entries with the given key. GetAsync(TKey) Returns the collection of values associated with the key. GetEntriesAsync() Returns the set of key-value pairs in the multi-map. GetKeysAsync() Returns the set of keys in the multi-map. GetSizeAsync() Returns the number of key-value pairs in the multi-map. GetValueCountAsync(TKey) Returns number of values matching to given key in the multi-map. GetValuesAsync() Returns the collection of values in the multi-map. PutAsync(TKey, TValue) Stores a key-value pair in the multi-map. RemoveAsync(TKey, TValue) Removes the given key value pair from the multi-map. RemoveAsync(TKey) Removes all the entries with the given key. SubscribeAsync(Action<MultiMapEventHandlers<TKey, TValue>>, TKey, bool, object) Subscribes to events. SubscribeAsync(Action<MultiMapEventHandlers<TKey, TValue>>, bool, object) Subscribes to events. UnsubscribeAsync(Guid) Unsubscribe from events."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMultiMap-2.PutAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMultiMap-2.PutAsync.html",
    "title": "Method PutAsync | Hazelcast .NET Documentation",
    "keywords": "Method PutAsync PutAsync(TKey, TValue) Stores a key-value pair in the multi-map. Declaration Task<bool> PutAsync(TKey key, TValue value) Parameters Type Name Description TKey key the key to be stored TValue value the value to be stored Returns Type Description Task<bool> true if size of the multi-map is increased, false otherwise. Remarks This method uses GetHashCode and Equals of binary form of the key, not the actual implementations of GetHashCode and Equals defined in key's class."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMultiMap-2.RemoveAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMultiMap-2.RemoveAsync.html",
    "title": "Method RemoveAsync | Hazelcast .NET Documentation",
    "keywords": "Method RemoveAsync RemoveAsync(TKey, TValue) Removes the given key value pair from the multi-map. Declaration Task<bool> RemoveAsync(TKey key, TValue value) Parameters Type Name Description TKey key the key of the entry to remove TValue value the value of the entry to remove Returns Type Description Task<bool> true if the size of the multi-map changed after the remove operation, false otherwise. RemoveAsync(TKey) Removes all the entries with the given key. Declaration Task<IReadOnlyCollection<TValue>> RemoveAsync(TKey key) Parameters Type Name Description TKey key the key of the entries to remove Returns Type Description Task<IReadOnlyCollection<TValue>> the collection of removed values associated with the given key"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMultiMap-2.SubscribeAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMultiMap-2.SubscribeAsync.html",
    "title": "Method SubscribeAsync | Hazelcast .NET Documentation",
    "keywords": "Method SubscribeAsync SubscribeAsync(Action<MultiMapEventHandlers<TKey, TValue>>, bool, object) Subscribes to events. Declaration Task<Guid> SubscribeAsync(Action<MultiMapEventHandlers<TKey, TValue>> events, bool includeValues = true, object state = null) Parameters Type Name Description Action<MultiMapEventHandlers<TKey, TValue>> events An event handlers collection builder. bool includeValues Whether to include values in event arguments. object state A state object. Returns Type Description Task<Guid> The unique identifier of the subscription. SubscribeAsync(Action<MultiMapEventHandlers<TKey, TValue>>, TKey, bool, object) Subscribes to events. Declaration Task<Guid> SubscribeAsync(Action<MultiMapEventHandlers<TKey, TValue>> events, TKey key, bool includeValues = true, object state = null) Parameters Type Name Description Action<MultiMapEventHandlers<TKey, TValue>> events An event handlers collection builder. TKey key A key to filter events. bool includeValues Whether to include values in event arguments. object state A state object. Returns Type Description Task<Guid> The unique identifier of the subscription."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHMultiMap-2.UnsubscribeAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHMultiMap-2.UnsubscribeAsync.html",
    "title": "Method UnsubscribeAsync | Hazelcast .NET Documentation",
    "keywords": "Method UnsubscribeAsync UnsubscribeAsync(Guid) Unsubscribe from events. Declaration ValueTask<bool> UnsubscribeAsync(Guid subscriptionId) Parameters Type Name Description Guid subscriptionId The unique identifier of the subscription. Returns Type Description ValueTask<bool> true if subscription is removed successfully, false if there is no such subscription Remarks When this method completes, event handler will stop receiving events immediately. Member side event subscriptions will eventually be removed."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHQueue-1.DrainToAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHQueue-1.DrainToAsync.html",
    "title": "Method DrainToAsync | Hazelcast .NET Documentation",
    "keywords": "Method DrainToAsync DrainToAsync(ICollection<T>) Removes all available elements from this queue and adds them to the given collection. Declaration Task<int> DrainToAsync(ICollection<T> items) Parameters Type Name Description ICollection<T> items the collection to transfer elements into Returns Type Description Task<int> the number of elements transferred Remarks A failure encountered while attempting to Add elements to collection items may result in elements being in neither, either or both collections when the associated exception is thrown. DrainToAsync(ICollection<T>, int) Removes at most the given number of available elements from this queue and adds them to the given collection. Declaration Task<int> DrainToAsync(ICollection<T> items, int maxElements) Parameters Type Name Description ICollection<T> items the collection to transfer elements into int maxElements the maximum number of elements to transfer Returns Type Description Task<int> the number of elements transferred Remarks A failure encountered while attempting to Add elements to collection items may result in elements being in neither, either or both collections when the associated exception is thrown."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHQueue-1.GetElementAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHQueue-1.GetElementAsync.html",
    "title": "Method GetElementAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetElementAsync GetElementAsync() Retrieves, but does not remove, the head of this queue, or throws if this queue is empty. Declaration Task<T> GetElementAsync() Returns Type Description Task<T> the head of this queue"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHQueue-1.GetRemainingCapacityAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHQueue-1.GetRemainingCapacityAsync.html",
    "title": "Method GetRemainingCapacityAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetRemainingCapacityAsync GetRemainingCapacityAsync() Returns the number of additional elements that this queue can ideally (in the absence of memory or resource constraints) accept without blocking, or MaxValue if there is no intrinsic limit. Declaration Task<int> GetRemainingCapacityAsync() Returns Type Description Task<int> the remaining capacity Remarks Note that you cannot always tell if an attempt to insert an element will succeed by inspecting GetRemainingCapacityAsync() because it may be the case that another thread is about to insert or remove an element."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHQueue-1.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHQueue-1.html",
    "title": "Interface IHQueue<T> | Hazelcast .NET Documentation",
    "keywords": "Interface IHQueue<T> Defines a concurrent, blocking, distributed, non-partitioned and observable queue. Inherited Members IHCollection<T>.AddAsync(T) IHCollection<T>.AddAll<TItem>(ICollection<TItem>) IHCollection<T>.GetAllAsync() IHCollection<T>.GetSizeAsync() IHCollection<T>.IsEmptyAsync() IHCollection<T>.ContainsAllAsync<TItem>(ICollection<TItem>) IHCollection<T>.ContainsAsync(T) IHCollection<T>.RemoveAsync(T) IHCollection<T>.RemoveAllAsync<TItem>(ICollection<TItem>) IHCollection<T>.RetainAllAsync<TItem>(ICollection<TItem>) IHCollection<T>.ClearAsync() IHCollection<T>.SubscribeAsync(Action<CollectionItemEventHandlers<T>>, bool, object) IHCollection<T>.UnsubscribeAsync(Guid) IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() IAsyncEnumerable<T>.GetAsyncEnumerator(CancellationToken) Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Syntax public interface IHQueue<T> : IHCollection<T>, IDistributedObject, IAsyncDisposable, IAsyncEnumerable<T> Type Parameters Name Description T Remarks The Hazelcast IHQueue is not a partitioned data-structure. Entire contents of an IHQueue is stored on a single machine (and in the backup). The IHQueue will not scale by adding more members to the cluster. Methods Name Description DrainToAsync(ICollection<T>, int) Removes at most the given number of available elements from this queue and adds them to the given collection. DrainToAsync(ICollection<T>) Removes all available elements from this queue and adds them to the given collection. GetElementAsync() Retrieves, but does not remove, the head of this queue, or throws if this queue is empty. GetRemainingCapacityAsync() Returns the number of additional elements that this queue can ideally (in the absence of memory or resource constraints) accept without blocking, or MaxValue if there is no intrinsic limit. OfferAsync(T, TimeSpan) Tries to enqueue an item. PeekAsync() Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty. PollAsync(TimeSpan) Tries to dequeue an item. PutAsync(T) Enqueues an item. TakeAsync() Dequeues the head item."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHQueue-1.OfferAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHQueue-1.OfferAsync.html",
    "title": "Method OfferAsync | Hazelcast .NET Documentation",
    "keywords": "Method OfferAsync OfferAsync(T, TimeSpan) Tries to enqueue an item. Declaration Task<bool> OfferAsync(T item, TimeSpan timeToWait = default) Parameters Type Name Description T item The item to enqueue. TimeSpan timeToWait How long to wait for space (-1ms to wait forever; 0ms to not wait at all). Returns Type Description Task<bool> true if the element was added to this queue; otherwise false. Remarks If space is not immediately available, this will wait for the specified timeToWait for space to become available. If space does not become available in time, returns false. If timeToWait is -1ms, waits forever. If it is 0ms, does not wait at all."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHQueue-1.PeekAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHQueue-1.PeekAsync.html",
    "title": "Method PeekAsync | Hazelcast .NET Documentation",
    "keywords": "Method PeekAsync PeekAsync() Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty. Declaration Task<T> PeekAsync() Returns Type Description Task<T> the head of this queue, or null if this queue is empty"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHQueue-1.PollAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHQueue-1.PollAsync.html",
    "title": "Method PollAsync | Hazelcast .NET Documentation",
    "keywords": "Method PollAsync PollAsync(TimeSpan) Tries to dequeue an item. Declaration Task<T> PollAsync(TimeSpan timeToWait = default) Parameters Type Name Description TimeSpan timeToWait How long to wait for an item (-1ms to wait forever; 0ms to not wait at all). Returns Type Description Task<T> The item, or null if not item could be dequeued within the specified timeToWait. Remarks If an item is not immediately available, this will wait for the specified timeToWait for an item to become available. If an item does not become available in time, returns null. If timeToWait is -1ms, waits forever. If it is 0ms, does not wait at all."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHQueue-1.PutAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHQueue-1.PutAsync.html",
    "title": "Method PutAsync | Hazelcast .NET Documentation",
    "keywords": "Method PutAsync PutAsync(T) Enqueues an item. Declaration Task PutAsync(T item) Parameters Type Name Description T item The item to enqueue. Returns Type Description Task Remarks If space is not immediately available, this will wait indefinitely for space to become available."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHQueue-1.TakeAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHQueue-1.TakeAsync.html",
    "title": "Method TakeAsync | Hazelcast .NET Documentation",
    "keywords": "Method TakeAsync TakeAsync() Dequeues the head item. Declaration Task<T> TakeAsync() Returns Type Description Task<T> The head item. Remarks If an item is not immediately available, this will wait indefinitely for an item to become available."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHReplicatedMap-2.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHReplicatedMap-2.html",
    "title": "Interface IHReplicatedMap<TKey, TValue> | Hazelcast .NET Documentation",
    "keywords": "Interface IHReplicatedMap<TKey, TValue> Represents a distributed map with weak consistency and values locally stored on every node of the cluster. Inherited Members IHMapBase<TKey, TValue>.GetAsync(TKey) IHMapBase<TKey, TValue>.GetKeysAsync() IHMapBase<TKey, TValue>.GetValuesAsync() IHMapBase<TKey, TValue>.GetEntriesAsync() IHMapBase<TKey, TValue>.GetSizeAsync() IHMapBase<TKey, TValue>.IsEmptyAsync() IHMapBase<TKey, TValue>.ContainsKeyAsync(TKey) IHMapBase<TKey, TValue>.ContainsValueAsync(TValue) IHMapBase<TKey, TValue>.PutAsync(TKey, TValue) IHMapBase<TKey, TValue>.PutAsync(TKey, TValue, TimeSpan) IHMapBase<TKey, TValue>.SetAllAsync(IDictionary<TKey, TValue>) IHMapBase<TKey, TValue>.ClearAsync() IHMapBase<TKey, TValue>.RemoveAsync(TKey) IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() IAsyncEnumerable<KeyValuePair<TKey, TValue>>.GetAsyncEnumerator(CancellationToken) Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Syntax public interface IHReplicatedMap<TKey, TValue> : IHMapBase<TKey, TValue>, IDistributedObject, IAsyncDisposable, IAsyncEnumerable<KeyValuePair<TKey, TValue>> Type Parameters Name Description TKey the type of keys maintained by this map TValue the type of mapped values Remarks Whenever a value is written asynchronously, the new value will be internally distributed to all existing cluster members, and eventually every node will have the new value. When a new node joins the cluster, the new node initially will request existing values from older nodes and replicate them locally. Methods Name Description SubscribeAsync(Action<ReplicatedMapEventHandlers<TKey, TValue>>, TKey, IPredicate, object) Subscribes to events. SubscribeAsync(Action<ReplicatedMapEventHandlers<TKey, TValue>>, TKey, object) Subscribes to events. SubscribeAsync(Action<ReplicatedMapEventHandlers<TKey, TValue>>, IPredicate, object) Subscribes to events. SubscribeAsync(Action<ReplicatedMapEventHandlers<TKey, TValue>>, object) Subscribes to events. UnsubscribeAsync(Guid) Unsubscribe from events."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHReplicatedMap-2.SubscribeAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHReplicatedMap-2.SubscribeAsync.html",
    "title": "Method SubscribeAsync | Hazelcast .NET Documentation",
    "keywords": "Method SubscribeAsync SubscribeAsync(Action<ReplicatedMapEventHandlers<TKey, TValue>>, object) Subscribes to events. Declaration Task<Guid> SubscribeAsync(Action<ReplicatedMapEventHandlers<TKey, TValue>> events, object state = null) Parameters Type Name Description Action<ReplicatedMapEventHandlers<TKey, TValue>> events An event handlers collection builder. object state A state object. Returns Type Description Task<Guid> The unique identifier of the subscription. SubscribeAsync(Action<ReplicatedMapEventHandlers<TKey, TValue>>, TKey, object) Subscribes to events. Declaration Task<Guid> SubscribeAsync(Action<ReplicatedMapEventHandlers<TKey, TValue>> events, TKey key, object state = null) Parameters Type Name Description Action<ReplicatedMapEventHandlers<TKey, TValue>> events An event handlers collection builder. TKey key A key to filter events. object state A state object. Returns Type Description Task<Guid> The unique identifier of the subscription. SubscribeAsync(Action<ReplicatedMapEventHandlers<TKey, TValue>>, IPredicate, object) Subscribes to events. Declaration Task<Guid> SubscribeAsync(Action<ReplicatedMapEventHandlers<TKey, TValue>> events, IPredicate predicate, object state = null) Parameters Type Name Description Action<ReplicatedMapEventHandlers<TKey, TValue>> events An event handlers collection builder. IPredicate predicate A predicate to filter events. object state A state object. Returns Type Description Task<Guid> The unique identifier of the subscription. SubscribeAsync(Action<ReplicatedMapEventHandlers<TKey, TValue>>, TKey, IPredicate, object) Subscribes to events. Declaration Task<Guid> SubscribeAsync(Action<ReplicatedMapEventHandlers<TKey, TValue>> events, TKey key, IPredicate predicate, object state = null) Parameters Type Name Description Action<ReplicatedMapEventHandlers<TKey, TValue>> events An event handlers collection builder. TKey key A key to filter events. IPredicate predicate A predicate to filter events. object state A state object. Returns Type Description Task<Guid> The unique identifier of the subscription."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHReplicatedMap-2.UnsubscribeAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHReplicatedMap-2.UnsubscribeAsync.html",
    "title": "Method UnsubscribeAsync | Hazelcast .NET Documentation",
    "keywords": "Method UnsubscribeAsync UnsubscribeAsync(Guid) Unsubscribe from events. Declaration ValueTask<bool> UnsubscribeAsync(Guid subscriptionId) Parameters Type Name Description Guid subscriptionId The unique identifier of the subscription. Returns Type Description ValueTask<bool> true if subscription is removed successfully, false if there is no such subscription Remarks When this method completes, handler will stop receiving events immediately. Member side event subscriptions will eventually be removed."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHRingBuffer-1.AddAllAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHRingBuffer-1.AddAllAsync.html",
    "title": "Method AddAllAsync | Hazelcast .NET Documentation",
    "keywords": "Method AddAllAsync AddAllAsync(ICollection<TItem>, OverflowPolicy) Adds all the items of a collection to the tail of the Ringbuffer. Declaration Task<long> AddAllAsync(ICollection<TItem> items, OverflowPolicy overflowPolicy) Parameters Type Name Description ICollection<TItem> items the batch of items to Add. OverflowPolicy overflowPolicy overflow policy to use Returns Type Description Task<long> the ICompletableFuture to synchronize on completion. Remarks Adds all the items of a collection to the tail of the Ringbuffer. A addAll is likely to outperform multiple calls to due to better io utilization and a reduced number of executed operations. If the batch is empty, the call is ignored. When the collection is not empty, the content is copied into a different data-structure. This means that: after this call completes, the collection can be re-used. the collection doesn't need to be serializable If the collection is larger than the capacity of the ringbuffer, then the items that were written first will be overwritten. Therefor this call will not block. The items are inserted in the order of the Iterator of the collection. If an addAll is executed concurrently with an Add or addAll, no guarantee is given that items are contiguous. The result of the future contains the sequenceId of the last written item Exceptions Type Condition ArgumentNullException if batch is null, or if an item in this batch is null or if overflowPolicy is null ArgumentException if collection is empty"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHRingBuffer-1.AddAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHRingBuffer-1.AddAsync.html",
    "title": "Method AddAsync | Hazelcast .NET Documentation",
    "keywords": "Method AddAsync AddAsync(TItem) Adds an item to the tail of the Ringbuffer. Declaration Task<long> AddAsync(TItem item) Parameters Type Name Description TItem item the item to Add. Returns Type Description Task<long> the sequence of the added item. Remarks Adds an item to the tail of the Ringbuffer. If there is no space in the Ringbuffer, the Add will overwrite the oldest item in the ringbuffer no matter what the ttl is. For more control on this behavior, check the AddAsync(TItem) and the OverflowPolicy . The returned value is the sequence of the added item. Using this sequence you can read the added item. Using the sequence as id This sequence will always be unique for this Ringbuffer instance so it can be used as a unique id generator if you are publishing items on this Ringbuffer. However you need to take care of correctly determining an initial id when any node uses the ringbuffer for the first time. The most reliable way to do that is to write a dummy item into the ringbuffer and use the returned sequence as initial id. On the reading side, this dummy item should be discard. Please keep in mind that this id is not the sequence of the item you are about to publish but from a previously published item. So it can't be used to find that item. Exceptions Type Condition ArgumentNullException if item is null. See Also AddAsync(TItem) AddAsync(TItem, OverflowPolicy) Asynchronously writes an item with a configurable OverflowPolicy . If there is space in the ringbuffer, the call will return the sequence of the written item. If there is no space, it depends on the overflow policy what happens: Overwrite : we just overwrite the oldest item in the ringbuffer and we violate the ttl Fail : we return -1 The reason that FAIL exist is to give the opportunity to obey the ttl. If blocking behavior is required, this can be implemented using retrying in combination with a exponential backoff. Example: int sleepMs = 100; for (; ; ) { long result = ringbuffer.AddAsync(item, OverflowPolicy.Fail).Result; if (result != -1) { break; } Thread.Sleep(sleepMs); sleepMs = Math.Min(5000, sleepMs * 2); } Declaration Task<long> AddAsync(TItem item, OverflowPolicy overflowPolicy) Parameters Type Name Description TItem item the item to Add OverflowPolicy overflowPolicy the OverflowPolicy to use. Returns Type Description Task<long> the sequenceId of the added item, or -1 if the Add failed. Exceptions Type Condition ArgumentNullException if item or overflowPolicy is null."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHRingBuffer-1.GetCapacityAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHRingBuffer-1.GetCapacityAsync.html",
    "title": "Method GetCapacityAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetCapacityAsync GetCapacityAsync() Returns the capacity of this Ringbuffer. Declaration Task<long> GetCapacityAsync() Returns Type Description Task<long> the capacity."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHRingBuffer-1.GetHeadSequenceAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHRingBuffer-1.GetHeadSequenceAsync.html",
    "title": "Method GetHeadSequenceAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetHeadSequenceAsync GetHeadSequenceAsync() Returns the sequence of the head. Declaration Task<long> GetHeadSequenceAsync() Returns Type Description Task<long> the sequence of the head. Remarks Returns the sequence of the head. The head is the side of the ringbuffer where the oldest items in the ringbuffer are found. If the RingBuffer is empty, the head will be one more than the tail. The initial value of the head is 0 (1 more than tail)."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHRingBuffer-1.GetRemainingCapacityAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHRingBuffer-1.GetRemainingCapacityAsync.html",
    "title": "Method GetRemainingCapacityAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetRemainingCapacityAsync GetRemainingCapacityAsync() Returns the remaining capacity of the ringbuffer. Declaration Task<long> GetRemainingCapacityAsync() Returns Type Description Task<long> the remaining capacity. Remarks Returns the remaining capacity of the ringbuffer. The returned value could be stale as soon as it is returned. If ttl is not set, the remaining capacity will always be the capacity."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHRingBuffer-1.GetSizeAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHRingBuffer-1.GetSizeAsync.html",
    "title": "Method GetSizeAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetSizeAsync GetSizeAsync() Returns number of items in the ringbuffer. Declaration Task<long> GetSizeAsync() Returns Type Description Task<long> the size. Remarks Returns number of items in the ringbuffer. If no ttl is set, the size will always be equal to capacity after the head completed the first loop around the ring. This is because no items are getting retired."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHRingBuffer-1.GetTailSequenceAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHRingBuffer-1.GetTailSequenceAsync.html",
    "title": "Method GetTailSequenceAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetTailSequenceAsync GetTailSequenceAsync() Returns the sequence of the tail. Declaration Task<long> GetTailSequenceAsync() Returns Type Description Task<long> the sequence of the tail. Remarks Returns the sequence of the tail. The tail is the side of the ringbuffer where the items are added to. The initial value of the tail is -1."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHRingBuffer-1.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHRingBuffer-1.html",
    "title": "Interface IHRingBuffer<TItem> | Hazelcast .NET Documentation",
    "keywords": "Interface IHRingBuffer<TItem> A Ringbuffer is a data-structure where the content is stored in a ring like structure. Inherited Members IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Syntax public interface IHRingBuffer<TItem> : IDistributedObject, IAsyncDisposable Type Parameters Name Description TItem Remarks A Ringbuffer is a data-structure where the content is stored in a ring like structure. A ringbuffer has a capacity so it won't grow beyond that capacity and endanger the stability of the system. If that capacity is exceeded, than the oldest item in the ringbuffer is overwritten. The ringbuffer has 2 always incrementing sequences: tailSequence: this is the side where the youngest item is found. So the tail is the side of the ringbuffer where items are added to. headSequence: this is the side where the oldest items are found. So the head is the side where items gets discarded. The items in the ringbuffer can be found by a sequence that is in between (inclusive) the head and tail sequence. If data is read from a ringbuffer with a sequence that is smaller than the headSequence, it means that the data is not available anymore and a is thrown. A Ringbuffer currently is not a distributed data-structure. So all data is stored in a single partition; comparable to the IQueue implementation. But we'll provide an option to partition the data in the near future. A Ringbuffer can be used in a similar way as a queue, but one of the key differences is that a queue.take is destructive, meaning that only 1 thread is able to take an item. A ringbuffer.read is not destructive, so you can have multiple threads reading the same item multiple times. The Ringbuffer is the backing data-structure for the reliable IHTopic<T> implementation. Properties Name Description MaxBatchSize Methods Name Description AddAllAsync(ICollection<TItem>, OverflowPolicy) Adds all the items of a collection to the tail of the Ringbuffer. AddAsync(TItem, OverflowPolicy) Asynchronously writes an item with a configurable OverflowPolicy . If there is space in the ringbuffer, the call will return the sequence of the written item. If there is no space, it depends on the overflow policy what happens: Overwrite : we just overwrite the oldest item in the ringbuffer and we violate the ttl Fail : we return -1 The reason that FAIL exist is to give the opportunity to obey the ttl. If blocking behavior is required, this can be implemented using retrying in combination with a exponential backoff. Example: int sleepMs = 100; for (; ; ) { long result = ringbuffer.AddAsync(item, OverflowPolicy.Fail).Result; if (result != -1) { break; } Thread.Sleep(sleepMs); sleepMs = Math.Min(5000, sleepMs * 2); } AddAsync(TItem) Adds an item to the tail of the Ringbuffer. GetCapacityAsync() Returns the capacity of this Ringbuffer. GetHeadSequenceAsync() Returns the sequence of the head. GetRemainingCapacityAsync() Returns the remaining capacity of the ringbuffer. GetSizeAsync() Returns number of items in the ringbuffer. GetTailSequenceAsync() Returns the sequence of the tail. ReadManyAsync(long, int, int) Reads a batch of items from the Ringbuffer. ReadOneAsync(long) Reads one item from the Ringbuffer."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHRingBuffer-1.MaxBatchSize.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHRingBuffer-1.MaxBatchSize.html",
    "title": "Property MaxBatchSize | Hazelcast .NET Documentation",
    "keywords": "Property MaxBatchSize MaxBatchSize Declaration int MaxBatchSize { get; } Property Value Type Description int"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHRingBuffer-1.ReadManyAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHRingBuffer-1.ReadManyAsync.html",
    "title": "Method ReadManyAsync | Hazelcast .NET Documentation",
    "keywords": "Method ReadManyAsync ReadManyAsync(long, int, int) Reads a batch of items from the Ringbuffer. Declaration Task<IReadOnlyList<TItem>> ReadManyAsync(long startSequence, int minCount, int maxCount) Parameters Type Name Description long startSequence the startSequence of the first item to read. int minCount the minimum number of items to read. int maxCount the maximum number of items to read. Returns Type Description Task<IReadOnlyList<TItem>> a future containing the items read. Remarks Reads a batch of items from the Ringbuffer. If the number of available items after the first read item is smaller than the maxCount, these items are returned. So it could be the number of items read is smaller than the maxCount. If there are less items available than minCount, then this call blocks. Reading a batch of items is likely to perform better because less overhead is involved. Exceptions Type Condition ArgumentException if startSequence is smaller than 0 or if startSequence larger than or if minCount smaller than 0 or if minCount larger than maxCount, or if maxCount larger than the capacity of the ringbuffer or if maxCount larger than 1000 (to prevent overload)"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHRingBuffer-1.ReadOneAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHRingBuffer-1.ReadOneAsync.html",
    "title": "Method ReadOneAsync | Hazelcast .NET Documentation",
    "keywords": "Method ReadOneAsync ReadOneAsync(long) Reads one item from the Ringbuffer. Declaration ValueTask<TItem> ReadOneAsync(long sequence) Parameters Type Name Description long sequence the sequence of the item to read. Returns Type Description ValueTask<TItem> the read item Remarks Reads one item from the Ringbuffer. If the sequence is one beyond the current tail, this call blocks until an item is added. This means that the ringbuffer can be processed using the following idiom: Ringbuffer<String> ringbuffer = hz.GetRingbuffer(\"rb\"); long seq = ringbuffer.HeadSequence(); while(true){ String item = ringbuffer.ReadOne(seq); seq++; ... process item } This method is not destructive unlike e.g. a queue.take. So the same item can be read by multiple readers or it can be read multiple times by the same reader. Currently it isn't possible to control how long this call is going to block. In the future we could Add e.g. tryReadOne(long sequence, long timeout, TimeUnit unit). Exceptions Type Condition ArgumentException if sequence is smaller than 0 or larger than +1. Exception if the call is interrupted while blocking."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHSet-1.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHSet-1.html",
    "title": "Interface IHSet<T> | Hazelcast .NET Documentation",
    "keywords": "Interface IHSet<T> Defines a concurrent, distributed, non-partitioned and listenable set Inherited Members IHCollection<T>.AddAsync(T) IHCollection<T>.AddAll<TItem>(ICollection<TItem>) IHCollection<T>.GetAllAsync() IHCollection<T>.GetSizeAsync() IHCollection<T>.IsEmptyAsync() IHCollection<T>.ContainsAllAsync<TItem>(ICollection<TItem>) IHCollection<T>.ContainsAsync(T) IHCollection<T>.RemoveAsync(T) IHCollection<T>.RemoveAllAsync<TItem>(ICollection<TItem>) IHCollection<T>.RetainAllAsync<TItem>(ICollection<TItem>) IHCollection<T>.ClearAsync() IHCollection<T>.SubscribeAsync(Action<CollectionItemEventHandlers<T>>, bool, object) IHCollection<T>.UnsubscribeAsync(Guid) IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() IAsyncEnumerable<T>.GetAsyncEnumerator(CancellationToken) Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Syntax public interface IHSet<T> : IHCollection<T>, IDistributedObject, IAsyncDisposable, IAsyncEnumerable<T> Type Parameters Name Description T Remarks The Hazelcast IHSet is not a partitioned data-structure. Entire contents of an IHSet is stored on a single machine (and in the backup). The IHSet will not scale by adding more members to the cluster."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHTopic-1.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHTopic-1.html",
    "title": "Interface IHTopic<T> | Hazelcast .NET Documentation",
    "keywords": "Interface IHTopic<T> Hazelcast provides distribution mechanism for publishing messages that are delivered to multiple subscribers which is also known as publish/subscribe (pub/sub) messaging model. Inherited Members IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Syntax public interface IHTopic<T> : IDistributedObject, IAsyncDisposable Type Parameters Name Description T Remarks Hazelcast provides distribution mechanism for publishing messages that are delivered to multiple subscribers which is also known as publish/subscribe (pub/sub) messaging model. Publish and subscriptions are cluster-wide. When a member subscribes for a topic, it is actually registering for messages published by any member in the cluster, including the new members joined after you added the listener. Messages are ordered, meaning, listeners(subscribers) will process the messages in the order they are actually published. If cluster member M publishes messages m1, m2, m3...mn to a topic T, then Hazelcast makes sure that all of the subscribers of topic T will receive and process m1, m2, m3...mn in order. Methods Name Description PublishAsync(T) Publishes the message to all subscribers of this topic SubscribeAsync(Action<TopicEventHandlers<T>>, object) Subscribes to this topic. UnsubscribeAsync(Guid) Stops receiving messages for the given message listener."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHTopic-1.PublishAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHTopic-1.PublishAsync.html",
    "title": "Method PublishAsync | Hazelcast .NET Documentation",
    "keywords": "Method PublishAsync PublishAsync(T) Publishes the message to all subscribers of this topic Declaration Task PublishAsync(T message) Parameters Type Name Description T message Returns Type Description Task"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHTopic-1.SubscribeAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHTopic-1.SubscribeAsync.html",
    "title": "Method SubscribeAsync | Hazelcast .NET Documentation",
    "keywords": "Method SubscribeAsync SubscribeAsync(Action<TopicEventHandlers<T>>, object) Subscribes to this topic. Declaration Task<Guid> SubscribeAsync(Action<TopicEventHandlers<T>> events, object state = null) Parameters Type Name Description Action<TopicEventHandlers<T>> events object state A state object. Returns Type Description Task<Guid>"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHTopic-1.UnsubscribeAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHTopic-1.UnsubscribeAsync.html",
    "title": "Method UnsubscribeAsync | Hazelcast .NET Documentation",
    "keywords": "Method UnsubscribeAsync UnsubscribeAsync(Guid) Stops receiving messages for the given message listener. Declaration ValueTask<bool> UnsubscribeAsync(Guid subscriptionId) Parameters Type Name Description Guid subscriptionId Id of listener registration. Returns Type Description ValueTask<bool> Whether the operation completed successfully. Remarks Stops receiving messages for the given message listener. If the given listener already removed, this method does nothing."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHTxList-1.AddAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHTxList-1.AddAsync.html",
    "title": "Method AddAsync | Hazelcast .NET Documentation",
    "keywords": "Method AddAsync AddAsync(TItem) Add new item to transactional list Declaration Task<bool> AddAsync(TItem item) Parameters Type Name Description TItem item item Returns Type Description Task<bool> true if item is added successfully"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHTxList-1.GetSizeAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHTxList-1.GetSizeAsync.html",
    "title": "Method GetSizeAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetSizeAsync GetSizeAsync() Returns the size of the list Declaration Task<int> GetSizeAsync() Returns Type Description Task<int> size"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHTxList-1.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHTxList-1.html",
    "title": "Interface IHTxList<TItem> | Hazelcast .NET Documentation",
    "keywords": "Interface IHTxList<TItem> Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Syntax public interface IHTxList<TItem> Type Parameters Name Description TItem Methods Name Description AddAsync(TItem) Add new item to transactional list GetSizeAsync() Returns the size of the list RemoveAsync(TItem) Add item from transactional list"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHTxList-1.RemoveAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHTxList-1.RemoveAsync.html",
    "title": "Method RemoveAsync | Hazelcast .NET Documentation",
    "keywords": "Method RemoveAsync RemoveAsync(TItem) Add item from transactional list Declaration Task<bool> RemoveAsync(TItem item) Parameters Type Name Description TItem item item Returns Type Description Task<bool> true if item is remove successfully"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHTxMap-2.ContainsKeyAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHTxMap-2.ContainsKeyAsync.html",
    "title": "Method ContainsKeyAsync | Hazelcast .NET Documentation",
    "keywords": "Method ContainsKeyAsync ContainsKeyAsync(TKey) Transactional implementation of . Declaration Task<bool> ContainsKeyAsync(TKey key) Parameters Type Name Description TKey key Returns Type Description Task<bool>"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHTxMap-2.DeleteAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHTxMap-2.DeleteAsync.html",
    "title": "Method DeleteAsync | Hazelcast .NET Documentation",
    "keywords": "Method DeleteAsync DeleteAsync(TKey) Transactional implementation of DeleteAsync(TKey). Declaration Task DeleteAsync(TKey key) Parameters Type Name Description TKey key Returns Type Description Task"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHTxMap-2.GetAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHTxMap-2.GetAsync.html",
    "title": "Method GetAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetAsync GetAsync(TKey) Transactional implementation of . Declaration Task<TValue> GetAsync(TKey key) Parameters Type Name Description TKey key Returns Type Description Task<TValue>"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHTxMap-2.GetForUpdateAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHTxMap-2.GetForUpdateAsync.html",
    "title": "Method GetForUpdateAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetForUpdateAsync GetForUpdateAsync(TKey) Locks the key and then gets and returns the value to which the specified key is mapped. Declaration Task<TValue> GetForUpdateAsync(TKey key) Parameters Type Name Description TKey key Returns Type Description Task<TValue> Remarks The lock will be released at the end of the transaction (either commit or rollback)."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHTxMap-2.GetKeysAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHTxMap-2.GetKeysAsync.html",
    "title": "Method GetKeysAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetKeysAsync GetKeysAsync() Transactional implementation of . Declaration Task<IReadOnlyList<TKey>> GetKeysAsync() Returns Type Description Task<IReadOnlyList<TKey>> All keys. GetKeysAsync(IPredicate) Transactional implementation of GetKeysAsync(IPredicate). Declaration Task<IReadOnlyList<TKey>> GetKeysAsync(IPredicate predicate) Parameters Type Name Description IPredicate predicate An predicate to filter the entries with. Returns Type Description Task<IReadOnlyList<TKey>> All keys matching the predicate."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHTxMap-2.GetSizeAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHTxMap-2.GetSizeAsync.html",
    "title": "Method GetSizeAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetSizeAsync GetSizeAsync() Transactional implementation of GetSizeAsync(). Declaration Task<int> GetSizeAsync() Returns Type Description Task<int>"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHTxMap-2.GetValuesAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHTxMap-2.GetValuesAsync.html",
    "title": "Method GetValuesAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetValuesAsync GetValuesAsync() Transactional implementation of . Declaration Task<IReadOnlyCollection<TValue>> GetValuesAsync() Returns Type Description Task<IReadOnlyCollection<TValue>> GetValuesAsync(IPredicate) Transactional implementation of GetValuesAsync(IPredicate). Declaration Task<IReadOnlyCollection<TValue>> GetValuesAsync(IPredicate predicate) Parameters Type Name Description IPredicate predicate Returns Type Description Task<IReadOnlyCollection<TValue>>"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHTxMap-2.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHTxMap-2.html",
    "title": "Interface IHTxMap<TKey, TValue> | Hazelcast .NET Documentation",
    "keywords": "Interface IHTxMap<TKey, TValue> Represents a transactional distributed map. Inherited Members IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Syntax public interface IHTxMap<TKey, TValue> : ITransactionalObject, IDistributedObject, IAsyncDisposable Type Parameters Name Description TKey key type TValue Value type Methods Name Description ContainsKeyAsync(TKey) Transactional implementation of . DeleteAsync(TKey) Transactional implementation of DeleteAsync(TKey). GetAsync(TKey) Transactional implementation of . GetForUpdateAsync(TKey) Locks the key and then gets and returns the value to which the specified key is mapped. GetKeysAsync() Transactional implementation of . GetKeysAsync(IPredicate) Transactional implementation of GetKeysAsync(IPredicate). GetSizeAsync() Transactional implementation of GetSizeAsync(). GetValuesAsync() Transactional implementation of . GetValuesAsync(IPredicate) Transactional implementation of GetValuesAsync(IPredicate). IsEmptyAsync() Transactional implementation of . PutAsync(TKey, TValue, TimeSpan) Transactional implementation of PutAsync(TKey, TValue, TimeSpan). PutAsync(TKey, TValue) Transactional implementation of PutAsync(TKey, TValue). PutIfAbsentAsync(TKey, TValue) Transactional implementation of . RemoveAsync(TKey, TValue) Transactional implementation of RemoveAsync(TKey, TValue). RemoveAsync(TKey) Transactional implementation of RemoveAsync(TKey). ReplaceAsync(TKey, TValue, TValue) Transactional implementation of ReplaceAsync(TKey, TValue, TValue). ReplaceAsync(TKey, TValue) Transactional implementation of ReplaceAsync(TKey, TValue). SetAsync(TKey, TValue) Transactional implementation of SetAsync(TKey, TValue)."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHTxMap-2.IsEmptyAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHTxMap-2.IsEmptyAsync.html",
    "title": "Method IsEmptyAsync | Hazelcast .NET Documentation",
    "keywords": "Method IsEmptyAsync IsEmptyAsync() Transactional implementation of . Declaration Task<bool> IsEmptyAsync() Returns Type Description Task<bool> true if the map does not contain entries; otherwise false."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHTxMap-2.PutAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHTxMap-2.PutAsync.html",
    "title": "Method PutAsync | Hazelcast .NET Documentation",
    "keywords": "Method PutAsync PutAsync(TKey, TValue) Transactional implementation of PutAsync(TKey, TValue). Declaration Task<TValue> PutAsync(TKey key, TValue value) Parameters Type Name Description TKey key A key. TValue value A value. Returns Type Description Task<TValue> Remarks The inserted entry wil be visible only in the current transaction context, until the transaction is committed. PutAsync(TKey, TValue, TimeSpan) Transactional implementation of PutAsync(TKey, TValue, TimeSpan). Declaration Task<TValue> PutAsync(TKey key, TValue value, TimeSpan timeToLive) Parameters Type Name Description TKey key A key. TValue value A value. TimeSpan timeToLive A time to live. Returns Type Description Task<TValue> Remarks The inserted entry wil be visible only in the current transaction context, until the transaction is committed."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHTxMap-2.PutIfAbsentAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHTxMap-2.PutIfAbsentAsync.html",
    "title": "Method PutIfAbsentAsync | Hazelcast .NET Documentation",
    "keywords": "Method PutIfAbsentAsync PutIfAbsentAsync(TKey, TValue) Transactional implementation of . Declaration Task<TValue> PutIfAbsentAsync(TKey key, TValue value) Parameters Type Name Description TKey key TValue value Returns Type Description Task<TValue> Remarks The inserted entry wil be visible only in the current transaction context, until the transaction is committed."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHTxMap-2.RemoveAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHTxMap-2.RemoveAsync.html",
    "title": "Method RemoveAsync | Hazelcast .NET Documentation",
    "keywords": "Method RemoveAsync RemoveAsync(TKey) Transactional implementation of RemoveAsync(TKey). Declaration Task<TValue> RemoveAsync(TKey key) Parameters Type Name Description TKey key Returns Type Description Task<TValue> Remarks The removed entry wil be removed only in the current transaction context, until the transaction is committed. RemoveAsync(TKey, TValue) Transactional implementation of RemoveAsync(TKey, TValue). Declaration Task<bool> RemoveAsync(TKey key, TValue value) Parameters Type Name Description TKey key TValue value Returns Type Description Task<bool> Remarks The removed entry wil be removed only in the current transaction context, until the transaction is committed."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHTxMap-2.ReplaceAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHTxMap-2.ReplaceAsync.html",
    "title": "Method ReplaceAsync | Hazelcast .NET Documentation",
    "keywords": "Method ReplaceAsync ReplaceAsync(TKey, TValue) Transactional implementation of ReplaceAsync(TKey, TValue). Declaration Task<TValue> ReplaceAsync(TKey key, TValue newValue) Parameters Type Name Description TKey key A key. TValue newValue The new value. Returns Type Description Task<TValue> Remarks The updated entry wil be visible only in the current transaction context, until the transaction is committed. ReplaceAsync(TKey, TValue, TValue) Transactional implementation of ReplaceAsync(TKey, TValue, TValue). Declaration Task<bool> ReplaceAsync(TKey key, TValue oldValue, TValue newValue) Parameters Type Name Description TKey key TValue oldValue TValue newValue Returns Type Description Task<bool> Remarks The updated entry wil be visible only in the current transaction context, until the transaction is committed."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHTxMap-2.SetAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHTxMap-2.SetAsync.html",
    "title": "Method SetAsync | Hazelcast .NET Documentation",
    "keywords": "Method SetAsync SetAsync(TKey, TValue) Transactional implementation of SetAsync(TKey, TValue). Declaration Task SetAsync(TKey key, TValue value) Parameters Type Name Description TKey key A key. TValue value A value. Returns Type Description Task Remarks The inserted entry wil be visible only in the current transaction context, until the transaction is committed."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHTxMultiMap-2.GetAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHTxMultiMap-2.GetAsync.html",
    "title": "Method GetAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetAsync GetAsync(TKey) Declaration Task<IReadOnlyCollection<TValue>> GetAsync(TKey key) Parameters Type Name Description TKey key Returns Type Description Task<IReadOnlyCollection<TValue>>"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHTxMultiMap-2.GetSizeAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHTxMultiMap-2.GetSizeAsync.html",
    "title": "Method GetSizeAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetSizeAsync GetSizeAsync() Declaration Task<int> GetSizeAsync() Returns Type Description Task<int>"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHTxMultiMap-2.GetValueCountAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHTxMultiMap-2.GetValueCountAsync.html",
    "title": "Method GetValueCountAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetValueCountAsync GetValueCountAsync(TKey) Declaration Task<int> GetValueCountAsync(TKey key) Parameters Type Name Description TKey key Returns Type Description Task<int>"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHTxMultiMap-2.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHTxMultiMap-2.html",
    "title": "Interface IHTxMultiMap<TKey, TValue> | Hazelcast .NET Documentation",
    "keywords": "Interface IHTxMultiMap<TKey, TValue> Transactional implementation of MultiMap Inherited Members IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Syntax public interface IHTxMultiMap<TKey, TValue> : ITransactionalObject, IDistributedObject, IAsyncDisposable Type Parameters Name Description TKey TValue Methods Name Description GetAsync(TKey) GetSizeAsync() GetValueCountAsync(TKey) PutAsync(TKey, TValue) RemoveAsync(TKey, TValue) RemoveAsync(TKey)"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHTxMultiMap-2.PutAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHTxMultiMap-2.PutAsync.html",
    "title": "Method PutAsync | Hazelcast .NET Documentation",
    "keywords": "Method PutAsync PutAsync(TKey, TValue) Declaration Task<bool> PutAsync(TKey key, TValue value) Parameters Type Name Description TKey key TValue value Returns Type Description Task<bool>"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHTxMultiMap-2.RemoveAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHTxMultiMap-2.RemoveAsync.html",
    "title": "Method RemoveAsync | Hazelcast .NET Documentation",
    "keywords": "Method RemoveAsync RemoveAsync(TKey, TValue) Declaration Task<bool> RemoveAsync(TKey key, TValue value) Parameters Type Name Description TKey key TValue value Returns Type Description Task<bool> RemoveAsync(TKey) Declaration Task<IReadOnlyCollection<TValue>> RemoveAsync(TKey key) Parameters Type Name Description TKey key Returns Type Description Task<IReadOnlyCollection<TValue>>"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHTxQueue-1.GetSizeAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHTxQueue-1.GetSizeAsync.html",
    "title": "Method GetSizeAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetSizeAsync GetSizeAsync() Declaration Task<int> GetSizeAsync() Returns Type Description Task<int>"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHTxQueue-1.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHTxQueue-1.html",
    "title": "Interface IHTxQueue<TItem> | Hazelcast .NET Documentation",
    "keywords": "Interface IHTxQueue<TItem> Transactional implementation of Queue Inherited Members IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Syntax public interface IHTxQueue<TItem> : ITransactionalObject, IDistributedObject, IAsyncDisposable Type Parameters Name Description TItem Methods Name Description GetSizeAsync() OfferAsync(TItem, TimeSpan) OfferAsync(TItem) PeekAsync(TimeSpan) PollAsync(TimeSpan) TakeAsync()"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHTxQueue-1.OfferAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHTxQueue-1.OfferAsync.html",
    "title": "Method OfferAsync | Hazelcast .NET Documentation",
    "keywords": "Method OfferAsync OfferAsync(TItem) Declaration Task<bool> OfferAsync(TItem item) Parameters Type Name Description TItem item Returns Type Description Task<bool> OfferAsync(TItem, TimeSpan) Declaration Task<bool> OfferAsync(TItem item, TimeSpan timeToWait) Parameters Type Name Description TItem item TimeSpan timeToWait Returns Type Description Task<bool>"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHTxQueue-1.PeekAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHTxQueue-1.PeekAsync.html",
    "title": "Method PeekAsync | Hazelcast .NET Documentation",
    "keywords": "Method PeekAsync PeekAsync(TimeSpan) Declaration Task<TItem> PeekAsync(TimeSpan timeToWait = default) Parameters Type Name Description TimeSpan timeToWait Returns Type Description Task<TItem>"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHTxQueue-1.PollAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHTxQueue-1.PollAsync.html",
    "title": "Method PollAsync | Hazelcast .NET Documentation",
    "keywords": "Method PollAsync PollAsync(TimeSpan) Declaration Task<TItem> PollAsync(TimeSpan timeToWait = default) Parameters Type Name Description TimeSpan timeToWait Returns Type Description Task<TItem>"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHTxQueue-1.TakeAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHTxQueue-1.TakeAsync.html",
    "title": "Method TakeAsync | Hazelcast .NET Documentation",
    "keywords": "Method TakeAsync TakeAsync() Declaration Task<TItem> TakeAsync() Returns Type Description Task<TItem>"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHTxSet-1.AddAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHTxSet-1.AddAsync.html",
    "title": "Method AddAsync | Hazelcast .NET Documentation",
    "keywords": "Method AddAsync AddAsync(TItem) Add new item to transactional set Declaration Task<bool> AddAsync(TItem item) Parameters Type Name Description TItem item Returns Type Description Task<bool> true if item is added successfully"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHTxSet-1.GetSizeAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHTxSet-1.GetSizeAsync.html",
    "title": "Method GetSizeAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetSizeAsync GetSizeAsync() Returns the size of the set Declaration Task<int> GetSizeAsync() Returns Type Description Task<int> size"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHTxSet-1.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHTxSet-1.html",
    "title": "Interface IHTxSet<TItem> | Hazelcast .NET Documentation",
    "keywords": "Interface IHTxSet<TItem> Transactional implementation of IHSet<E> . Inherited Members IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Syntax public interface IHTxSet<in TItem> : ITransactionalObject, IDistributedObject, IAsyncDisposable Type Parameters Name Description TItem Methods Name Description AddAsync(TItem) Add new item to transactional set GetSizeAsync() Returns the size of the set RemoveAsync(TItem) Add item from transactional set"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IHTxSet-1.RemoveAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IHTxSet-1.RemoveAsync.html",
    "title": "Method RemoveAsync | Hazelcast .NET Documentation",
    "keywords": "Method RemoveAsync RemoveAsync(TItem) Add item from transactional set Declaration Task<bool> RemoveAsync(TItem item) Parameters Type Name Description TItem item Returns Type Description Task<bool> true if item is remove successfully"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IKeyLockable-1.ForceUnlockAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IKeyLockable-1.ForceUnlockAsync.html",
    "title": "Method ForceUnlockAsync | Hazelcast .NET Documentation",
    "keywords": "Method ForceUnlockAsync ForceUnlockAsync(TKey) Force-unlocks an entry. Declaration Task ForceUnlockAsync(TKey key) Parameters Type Name Description TKey key The key identifying the entry. Returns Type Description Task A task that will complete when the entry has been unlocked. Remarks The entry is unlocked, regardless of the lock owner. This always succeeds, never blocks, and returns immediately."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IKeyLockable-1.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IKeyLockable-1.html",
    "title": "Interface IKeyLockable<TKey> | Hazelcast .NET Documentation",
    "keywords": "Interface IKeyLockable<TKey> Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Syntax public interface IKeyLockable<TKey> Type Parameters Name Description TKey Methods Name Description ForceUnlockAsync(TKey) Force-unlocks an entry. IsLockedAsync(TKey) Determines whether an entry is locked. LockAsync(TKey, TimeSpan) Locks an entry for a given time duration (lease time), LockAsync(TKey) Locks an entry. TryLockAsync(TKey, TimeSpan, TimeSpan) Tries to lock an entry for a given time duration (lease time), within a server-side timeout. TryLockAsync(TKey, TimeSpan) Tries to lock an entry within a server-side timeout. TryLockAsync(TKey) Tries to lock an entry immediately. UnlockAsync(TKey) Unlocks an entry."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IKeyLockable-1.IsLockedAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IKeyLockable-1.IsLockedAsync.html",
    "title": "Method IsLockedAsync | Hazelcast .NET Documentation",
    "keywords": "Method IsLockedAsync IsLockedAsync(TKey) Determines whether an entry is locked. Declaration Task<bool> IsLockedAsync(TKey key) Parameters Type Name Description TKey key The key identifying the entry. Returns Type Description Task<bool> true if the entry is locked; otherwise false."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IKeyLockable-1.LockAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IKeyLockable-1.LockAsync.html",
    "title": "Method LockAsync | Hazelcast .NET Documentation",
    "keywords": "Method LockAsync LockAsync(TKey) Locks an entry. Declaration Task LockAsync(TKey key) Parameters Type Name Description TKey key The key identifying the entry. Returns Type Description Task A task that will complete when the lock has been acquired. Remarks If the lock is already owned by another owner, this will wait indefinitely until the lock can be acquired. Locks are re-entrant, but counted: if a key is locked N times, then it should be unlocked N times before another thread can lock it. The lock is automatically released after the server-configured maximum lease time has elapsed. LockAsync(TKey, TimeSpan) Locks an entry for a given time duration (lease time), Declaration Task LockAsync(TKey key, TimeSpan leaseTime) Parameters Type Name Description TKey key The key identifying the entry. TimeSpan leaseTime The lease time. Returns Type Description Task A task that will complete when the lock has been acquired. Remarks If the lock is already owned by another owner, this will wait indefinitely until the lock can be acquired. Locks are re-entrant, but counted: if an entry is locked N times, then it should be unlocked N times before another owner can lock it. The lock is automatically released after the specified leaseTime has elapsed."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IKeyLockable-1.TryLockAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IKeyLockable-1.TryLockAsync.html",
    "title": "Method TryLockAsync | Hazelcast .NET Documentation",
    "keywords": "Method TryLockAsync TryLockAsync(TKey) Tries to lock an entry immediately. Declaration Task<bool> TryLockAsync(TKey key) Parameters Type Name Description TKey key The key identifying the entry. Returns Type Description Task<bool> true if the lock was immediately acquired; otherwise false. Remarks If the entry cannot be locked, returns false immediately. Locks are re-entrant, but counted: if an entry is locked N times, then it should be unlocked N times before another owner can lock it. The lock is automatically released after the server-configured maximum lease time has elapsed. TryLockAsync(TKey, TimeSpan) Tries to lock an entry within a server-side timeout. Declaration Task<bool> TryLockAsync(TKey key, TimeSpan timeToWait) Parameters Type Name Description TKey key The key identifying the entry. TimeSpan timeToWait How long to wait for the lock (-1ms to wait forever; 0ms to not wait at all). Returns Type Description Task<bool> true if the lock was acquired; otherwise false. Remarks If the entry cannot be locked after timeToWait has elapsed, returns false. If timeToWait is -1ms, waits forever. If it is 0ms, does not wait at all. Locks are re-entrant, but counted: if an entry is locked N times, then it should be unlocked N times before another owner can lock it. The lock is automatically released after the server-configured maximum lease time has elapsed. TryLockAsync(TKey, TimeSpan, TimeSpan) Tries to lock an entry for a given time duration (lease time), within a server-side timeout. Declaration Task<bool> TryLockAsync(TKey key, TimeSpan timeToWait, TimeSpan leaseTime) Parameters Type Name Description TKey key The key identifying the entry. TimeSpan timeToWait How long to wait for the lock (-1ms to wait forever; 0ms to not wait at all). TimeSpan leaseTime The lease time. Returns Type Description Task<bool> true if the lock was acquired; otherwise false. Remarks If the entry cannot be locked after timeToWait has elapsed, returns false. If timeToWait is -1ms, waits forever. If it is 0ms, does not wait at all. The lock is automatically released after the specified leaseTime has elapsed. Locks are re-entrant, but counted: if an entry is locked N times, then it should be unlocked N times before another owner can lock it."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IKeyLockable-1.UnlockAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IKeyLockable-1.UnlockAsync.html",
    "title": "Method UnlockAsync | Hazelcast .NET Documentation",
    "keywords": "Method UnlockAsync UnlockAsync(TKey) Unlocks an entry. Declaration Task UnlockAsync(TKey key) Parameters Type Name Description TKey key The key identifying the entry. Returns Type Description Task A task that will complete when the entry has been unlocked. Remarks An entry can be unlocked only by the owner of the lock. Locks are re-entrant, but counted: if an entry is locked N times, then it should be unlocked N times before another owner can lock it."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IMapEntryEventHandler-3.HandleAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IMapEntryEventHandler-3.HandleAsync.html",
    "title": "Method HandleAsync | Hazelcast .NET Documentation",
    "keywords": "Method HandleAsync HandleAsync(TSender, MemberInfo, Lazy<TKey>, Lazy<TValue>, Lazy<TValue>, Lazy<TValue>, MapEventTypes, int, object) Handles an event. Declaration ValueTask HandleAsync(TSender sender, MemberInfo member, Lazy<TKey> key, Lazy<TValue> value, Lazy<TValue> oldValue, Lazy<TValue> mergeValue, MapEventTypes eventType, int numberOfAffectedEntries, object state) Parameters Type Name Description TSender sender The sender (map) that triggered the event. MemberInfo member The member. Lazy<TKey> key The key. Lazy<TValue> value The value. Lazy<TValue> oldValue The old value. Lazy<TValue> mergeValue The merged value. MapEventTypes eventType The event type. int numberOfAffectedEntries The number of affected entries. object state A state object. Returns Type Description ValueTask"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IMapEntryEventHandler-3.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IMapEntryEventHandler-3.html",
    "title": "Interface IMapEntryEventHandler<TKey, TValue, TSender> | Hazelcast .NET Documentation",
    "keywords": "Interface IMapEntryEventHandler<TKey, TValue, TSender> Specifies a map entry event handler. Inherited Members IMapEventHandlerBase.EventType Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Syntax public interface IMapEntryEventHandler<TKey, TValue, in TSender> : IMapEventHandlerBase Type Parameters Name Description TKey The type of the keys. TValue The type of the values. TSender The type of the sender. Methods Name Description HandleAsync(TSender, MemberInfo, Lazy<TKey>, Lazy<TValue>, Lazy<TValue>, Lazy<TValue>, MapEventTypes, int, object) Handles an event."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IMapEventHandler-3.HandleAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IMapEventHandler-3.HandleAsync.html",
    "title": "Method HandleAsync | Hazelcast .NET Documentation",
    "keywords": "Method HandleAsync HandleAsync(TSender, MemberInfo, int, object) Handles an event. Declaration ValueTask HandleAsync(TSender sender, MemberInfo member, int numberOfAffectedEntries, object state) Parameters Type Name Description TSender sender The sender (map) that triggered the event. MemberInfo member The member. int numberOfAffectedEntries The number of affected entries. object state A state object. Returns Type Description ValueTask"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IMapEventHandler-3.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IMapEventHandler-3.html",
    "title": "Interface IMapEventHandler<TKey, TValue, TSender> | Hazelcast .NET Documentation",
    "keywords": "Interface IMapEventHandler<TKey, TValue, TSender> Specifies a map event handler. Inherited Members IMapEventHandlerBase.EventType Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Syntax public interface IMapEventHandler<TKey, TValue, in TSender> : IMapEventHandlerBase Type Parameters Name Description TKey The type of the keys. TValue The type of the values. TSender The type of the sender. Methods Name Description HandleAsync(TSender, MemberInfo, int, object) Handles an event."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IMapEventHandlerBase.EventType.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IMapEventHandlerBase.EventType.html",
    "title": "Property EventType | Hazelcast .NET Documentation",
    "keywords": "Property EventType EventType Gets the handled event type. Declaration MapEventTypes EventType { get; } Property Value Type Description MapEventTypes"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IMapEventHandlerBase.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IMapEventHandlerBase.html",
    "title": "Interface IMapEventHandlerBase | Hazelcast .NET Documentation",
    "keywords": "Interface IMapEventHandlerBase Specifies a generic map event handler. Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Syntax public interface IMapEventHandlerBase Properties Name Description EventType Gets the handled event type."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.IMapInterceptor.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.IMapInterceptor.html",
    "title": "Interface IMapInterceptor | Hazelcast .NET Documentation",
    "keywords": "Interface IMapInterceptor A place holder interface for com.hazelcast.map.MapInterceptor on server side. Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Syntax public interface IMapInterceptor Remarks it is used to intercept changes to the IHMap, allowing access to the values before and after adding them to it."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.ITopicEventHandler-1.HandleAsync.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.ITopicEventHandler-1.HandleAsync.html",
    "title": "Method HandleAsync | Hazelcast .NET Documentation",
    "keywords": "Method HandleAsync HandleAsync(IHTopic<T>, MemberInfo, long, T, object) Handles an event. Declaration ValueTask HandleAsync(IHTopic<T> sender, MemberInfo member, long publishTime, T payload, object state) Parameters Type Name Description IHTopic<T> sender The IHTopic<T> that triggered the event. MemberInfo member The member. long publishTime The publish time. T payload The topic object carried by the message. object state A state object. Returns Type Description ValueTask"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.ITopicEventHandler-1.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.ITopicEventHandler-1.html",
    "title": "Interface ITopicEventHandler<T> | Hazelcast .NET Documentation",
    "keywords": "Interface ITopicEventHandler<T> Specifies a topic event handler. Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Syntax public interface ITopicEventHandler<T> Type Parameters Name Description T The topic objects type. Methods Name Description HandleAsync(IHTopic<T>, MemberInfo, long, T, object) Handles an event."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.ITransactionalDistributedObject.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.ITransactionalDistributedObject.html",
    "title": "Interface ITransactionalDistributedObject | Hazelcast .NET Documentation",
    "keywords": "Interface ITransactionalDistributedObject Defines the base contract for all transactional Hazelcast distributed objects. Inherited Members IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Syntax public interface ITransactionalDistributedObject : IDistributedObject, IAsyncDisposable Properties Name Description TransactionId Gets the unique identifier of the transaction."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.ITransactionalDistributedObject.TransactionId.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.ITransactionalDistributedObject.TransactionId.html",
    "title": "Property TransactionId | Hazelcast .NET Documentation",
    "keywords": "Property TransactionId TransactionId Gets the unique identifier of the transaction. Declaration Guid TransactionId { get; } Property Value Type Description Guid"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.ITransactionalObject.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.ITransactionalObject.html",
    "title": "Interface ITransactionalObject | Hazelcast .NET Documentation",
    "keywords": "Interface ITransactionalObject Marker interface for all transactional distributed objects. Inherited Members IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Syntax public interface ITransactionalObject : IDistributedObject, IAsyncDisposable Remarks Marker interface for all transactional distributed objects."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MapClearedEventArgs.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MapClearedEventArgs.-ctor.html",
    "title": "Constructor MapClearedEventArgs | Hazelcast .NET Documentation",
    "keywords": "Constructor MapClearedEventArgs MapClearedEventArgs(MemberInfo, int, object) Declaration public MapClearedEventArgs(MemberInfo member, int numberOfAffectedEntries, object state) Parameters Type Name Description MemberInfo member int numberOfAffectedEntries object state"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MapClearedEventArgs.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MapClearedEventArgs.html",
    "title": "Class MapClearedEventArgs | Hazelcast .NET Documentation",
    "keywords": "Class MapClearedEventArgs Inheritance object MapEventArgsBase MapClearedEventArgs Inherited Members MapEventArgsBase.Member MapEventArgsBase.NumberOfAffectedEntries MapEventArgsBase.State object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Syntax public sealed class MapClearedEventArgs : MapEventArgsBase Constructors Name Description MapClearedEventArgs(MemberInfo, int, object)"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MapEntryAddedEventArgs-2.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MapEntryAddedEventArgs-2.-ctor.html",
    "title": "Constructor MapEntryAddedEventArgs | Hazelcast .NET Documentation",
    "keywords": "Constructor MapEntryAddedEventArgs MapEntryAddedEventArgs(MemberInfo, Lazy<TKey>, Lazy<TValue>, object) Declaration public MapEntryAddedEventArgs(MemberInfo member, Lazy<TKey> key, Lazy<TValue> value, object state) Parameters Type Name Description MemberInfo member Lazy<TKey> key Lazy<TValue> value object state"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MapEntryAddedEventArgs-2.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MapEntryAddedEventArgs-2.html",
    "title": "Class MapEntryAddedEventArgs<TKey, TValue> | Hazelcast .NET Documentation",
    "keywords": "Class MapEntryAddedEventArgs<TKey, TValue> Inheritance object EventArgsBase MapEntryEventArgsBase<TKey> MapEntryAddedEventArgs<TKey, TValue> Inherited Members MapEntryEventArgsBase<TKey>.Member MapEntryEventArgsBase<TKey>.Key EventArgsBase.State object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Syntax public sealed class MapEntryAddedEventArgs<TKey, TValue> : MapEntryEventArgsBase<TKey> Type Parameters Name Description TKey TValue Constructors Name Description MapEntryAddedEventArgs(MemberInfo, Lazy<TKey>, Lazy<TValue>, object) Properties Name Description Value Gets the added value."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MapEntryAddedEventArgs-2.Value.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MapEntryAddedEventArgs-2.Value.html",
    "title": "Property Value | Hazelcast .NET Documentation",
    "keywords": "Property Value Value Gets the added value. Declaration public TValue Value { get; } Property Value Type Description TValue"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MapEntryEventArgsBase-1.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MapEntryEventArgsBase-1.-ctor.html",
    "title": "Constructor MapEntryEventArgsBase | Hazelcast .NET Documentation",
    "keywords": "Constructor MapEntryEventArgsBase MapEntryEventArgsBase(MemberInfo, Lazy<TKey>, object) Initializes a new instance of the MapEntryEventArgsBase<TKey> class. Declaration protected MapEntryEventArgsBase(MemberInfo member, Lazy<TKey> key, object state) Parameters Type Name Description MemberInfo member The member. Lazy<TKey> key The key. object state A state object."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MapEntryEventArgsBase-1.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MapEntryEventArgsBase-1.html",
    "title": "Class MapEntryEventArgsBase<TKey> | Hazelcast .NET Documentation",
    "keywords": "Class MapEntryEventArgsBase<TKey> Represents event data for map entry events. Inheritance object EventArgsBase MapEntryEventArgsBase<TKey> MapEntryAddedEventArgs<TKey, TValue> MapEntryEvictedEventArgs<TKey, TValue> MapEntryExpiredEventArgs<TKey, TValue> MapEntryInvalidatedEventArgs<TKey, TValue> MapEntryLoadedEventArgs<TKey, TValue> MapEntryMergedEventArgs<TKey, TValue> MapEntryRemovedEventArgs<TKey, TValue> MapEntryUpdatedEventArgs<TKey, TValue> Inherited Members EventArgsBase.State object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Syntax public abstract class MapEntryEventArgsBase<TKey> : EventArgsBase Type Parameters Name Description TKey The type of the keys. Constructors Name Description MapEntryEventArgsBase(MemberInfo, Lazy<TKey>, object) Initializes a new instance of the MapEntryEventArgsBase<TKey> class. Properties Name Description Key Gets the key. Member Gets the member that originated the event."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MapEntryEventArgsBase-1.Key.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MapEntryEventArgsBase-1.Key.html",
    "title": "Property Key | Hazelcast .NET Documentation",
    "keywords": "Property Key Key Gets the key. Declaration public TKey Key { get; } Property Value Type Description TKey"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MapEntryEventArgsBase-1.Member.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MapEntryEventArgsBase-1.Member.html",
    "title": "Property Member | Hazelcast .NET Documentation",
    "keywords": "Property Member Member Gets the member that originated the event. Declaration public MemberInfo Member { get; } Property Value Type Description MemberInfo"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MapEntryEvictedEventArgs-2.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MapEntryEvictedEventArgs-2.-ctor.html",
    "title": "Constructor MapEntryEvictedEventArgs | Hazelcast .NET Documentation",
    "keywords": "Constructor MapEntryEvictedEventArgs MapEntryEvictedEventArgs(MemberInfo, Lazy<TKey>, Lazy<TValue>, object) Declaration public MapEntryEvictedEventArgs(MemberInfo member, Lazy<TKey> key, Lazy<TValue> oldValue, object state) Parameters Type Name Description MemberInfo member Lazy<TKey> key Lazy<TValue> oldValue object state"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MapEntryEvictedEventArgs-2.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MapEntryEvictedEventArgs-2.html",
    "title": "Class MapEntryEvictedEventArgs<TKey, TValue> | Hazelcast .NET Documentation",
    "keywords": "Class MapEntryEvictedEventArgs<TKey, TValue> Inheritance object EventArgsBase MapEntryEventArgsBase<TKey> MapEntryEvictedEventArgs<TKey, TValue> Inherited Members MapEntryEventArgsBase<TKey>.Member MapEntryEventArgsBase<TKey>.Key EventArgsBase.State object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Syntax public sealed class MapEntryEvictedEventArgs<TKey, TValue> : MapEntryEventArgsBase<TKey> Type Parameters Name Description TKey TValue Constructors Name Description MapEntryEvictedEventArgs(MemberInfo, Lazy<TKey>, Lazy<TValue>, object) Properties Name Description OldValue Gets the value that was evicted."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MapEntryEvictedEventArgs-2.OldValue.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MapEntryEvictedEventArgs-2.OldValue.html",
    "title": "Property OldValue | Hazelcast .NET Documentation",
    "keywords": "Property OldValue OldValue Gets the value that was evicted. Declaration public TValue OldValue { get; } Property Value Type Description TValue"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MapEntryExpiredEventArgs-2.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MapEntryExpiredEventArgs-2.-ctor.html",
    "title": "Constructor MapEntryExpiredEventArgs | Hazelcast .NET Documentation",
    "keywords": "Constructor MapEntryExpiredEventArgs MapEntryExpiredEventArgs(MemberInfo, Lazy<TKey>, Lazy<TValue>, object) Declaration public MapEntryExpiredEventArgs(MemberInfo member, Lazy<TKey> key, Lazy<TValue> oldValue, object state) Parameters Type Name Description MemberInfo member Lazy<TKey> key Lazy<TValue> oldValue object state"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MapEntryExpiredEventArgs-2.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MapEntryExpiredEventArgs-2.html",
    "title": "Class MapEntryExpiredEventArgs<TKey, TValue> | Hazelcast .NET Documentation",
    "keywords": "Class MapEntryExpiredEventArgs<TKey, TValue> Inheritance object EventArgsBase MapEntryEventArgsBase<TKey> MapEntryExpiredEventArgs<TKey, TValue> Inherited Members MapEntryEventArgsBase<TKey>.Member MapEntryEventArgsBase<TKey>.Key EventArgsBase.State object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Syntax public sealed class MapEntryExpiredEventArgs<TKey, TValue> : MapEntryEventArgsBase<TKey> Type Parameters Name Description TKey TValue Constructors Name Description MapEntryExpiredEventArgs(MemberInfo, Lazy<TKey>, Lazy<TValue>, object) Properties Name Description OldValue Gets the value that expired."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MapEntryExpiredEventArgs-2.OldValue.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MapEntryExpiredEventArgs-2.OldValue.html",
    "title": "Property OldValue | Hazelcast .NET Documentation",
    "keywords": "Property OldValue OldValue Gets the value that expired. Declaration public TValue OldValue { get; } Property Value Type Description TValue"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MapEntryInvalidatedEventArgs-2.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MapEntryInvalidatedEventArgs-2.-ctor.html",
    "title": "Constructor MapEntryInvalidatedEventArgs | Hazelcast .NET Documentation",
    "keywords": "Constructor MapEntryInvalidatedEventArgs MapEntryInvalidatedEventArgs(MemberInfo, Lazy<TKey>, object) Declaration public MapEntryInvalidatedEventArgs(MemberInfo member, Lazy<TKey> key, object state) Parameters Type Name Description MemberInfo member Lazy<TKey> key object state"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MapEntryInvalidatedEventArgs-2.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MapEntryInvalidatedEventArgs-2.html",
    "title": "Class MapEntryInvalidatedEventArgs<TKey, TValue> | Hazelcast .NET Documentation",
    "keywords": "Class MapEntryInvalidatedEventArgs<TKey, TValue> Inheritance object EventArgsBase MapEntryEventArgsBase<TKey> MapEntryInvalidatedEventArgs<TKey, TValue> Inherited Members MapEntryEventArgsBase<TKey>.Member MapEntryEventArgsBase<TKey>.Key EventArgsBase.State object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Syntax public sealed class MapEntryInvalidatedEventArgs<TKey, TValue> : MapEntryEventArgsBase<TKey> Type Parameters Name Description TKey TValue Constructors Name Description MapEntryInvalidatedEventArgs(MemberInfo, Lazy<TKey>, object)"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MapEntryLoadedEventArgs-2.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MapEntryLoadedEventArgs-2.-ctor.html",
    "title": "Constructor MapEntryLoadedEventArgs | Hazelcast .NET Documentation",
    "keywords": "Constructor MapEntryLoadedEventArgs MapEntryLoadedEventArgs(MemberInfo, Lazy<TKey>, Lazy<TValue>, Lazy<TValue>, object) Declaration public MapEntryLoadedEventArgs(MemberInfo member, Lazy<TKey> key, Lazy<TValue> value, Lazy<TValue> oldValue, object state) Parameters Type Name Description MemberInfo member Lazy<TKey> key Lazy<TValue> value Lazy<TValue> oldValue object state"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MapEntryLoadedEventArgs-2.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MapEntryLoadedEventArgs-2.html",
    "title": "Class MapEntryLoadedEventArgs<TKey, TValue> | Hazelcast .NET Documentation",
    "keywords": "Class MapEntryLoadedEventArgs<TKey, TValue> Inheritance object EventArgsBase MapEntryEventArgsBase<TKey> MapEntryLoadedEventArgs<TKey, TValue> Inherited Members MapEntryEventArgsBase<TKey>.Member MapEntryEventArgsBase<TKey>.Key EventArgsBase.State object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Syntax public sealed class MapEntryLoadedEventArgs<TKey, TValue> : MapEntryEventArgsBase<TKey> Type Parameters Name Description TKey TValue Constructors Name Description MapEntryLoadedEventArgs(MemberInfo, Lazy<TKey>, Lazy<TValue>, Lazy<TValue>, object) Properties Name Description OldValue Gets the value before load, if the entry existed. Value Gets the value that was loaded."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MapEntryLoadedEventArgs-2.OldValue.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MapEntryLoadedEventArgs-2.OldValue.html",
    "title": "Property OldValue | Hazelcast .NET Documentation",
    "keywords": "Property OldValue OldValue Gets the value before load, if the entry existed. Declaration public TValue OldValue { get; } Property Value Type Description TValue"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MapEntryLoadedEventArgs-2.Value.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MapEntryLoadedEventArgs-2.Value.html",
    "title": "Property Value | Hazelcast .NET Documentation",
    "keywords": "Property Value Value Gets the value that was loaded. Declaration public TValue Value { get; } Property Value Type Description TValue"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MapEntryMergedEventArgs-2.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MapEntryMergedEventArgs-2.-ctor.html",
    "title": "Constructor MapEntryMergedEventArgs | Hazelcast .NET Documentation",
    "keywords": "Constructor MapEntryMergedEventArgs MapEntryMergedEventArgs(MemberInfo, Lazy<TKey>, Lazy<TValue>, Lazy<TValue>, Lazy<TValue>, object) Declaration public MapEntryMergedEventArgs(MemberInfo member, Lazy<TKey> key, Lazy<TValue> value, Lazy<TValue> oldValue, Lazy<TValue> mergeValue, object state) Parameters Type Name Description MemberInfo member Lazy<TKey> key Lazy<TValue> value Lazy<TValue> oldValue Lazy<TValue> mergeValue object state"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MapEntryMergedEventArgs-2.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MapEntryMergedEventArgs-2.html",
    "title": "Class MapEntryMergedEventArgs<TKey, TValue> | Hazelcast .NET Documentation",
    "keywords": "Class MapEntryMergedEventArgs<TKey, TValue> Inheritance object EventArgsBase MapEntryEventArgsBase<TKey> MapEntryMergedEventArgs<TKey, TValue> Inherited Members MapEntryEventArgsBase<TKey>.Member MapEntryEventArgsBase<TKey>.Key EventArgsBase.State object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Syntax public sealed class MapEntryMergedEventArgs<TKey, TValue> : MapEntryEventArgsBase<TKey> Type Parameters Name Description TKey TValue Constructors Name Description MapEntryMergedEventArgs(MemberInfo, Lazy<TKey>, Lazy<TValue>, Lazy<TValue>, Lazy<TValue>, object) Properties Name Description MergeValue Gets the value proposed during merge. OldValue Gets the value before merge. Value Gets the value after merge."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MapEntryMergedEventArgs-2.MergeValue.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MapEntryMergedEventArgs-2.MergeValue.html",
    "title": "Property MergeValue | Hazelcast .NET Documentation",
    "keywords": "Property MergeValue MergeValue Gets the value proposed during merge. Declaration public TValue MergeValue { get; } Property Value Type Description TValue"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MapEntryMergedEventArgs-2.OldValue.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MapEntryMergedEventArgs-2.OldValue.html",
    "title": "Property OldValue | Hazelcast .NET Documentation",
    "keywords": "Property OldValue OldValue Gets the value before merge. Declaration public TValue OldValue { get; } Property Value Type Description TValue"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MapEntryMergedEventArgs-2.Value.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MapEntryMergedEventArgs-2.Value.html",
    "title": "Property Value | Hazelcast .NET Documentation",
    "keywords": "Property Value Value Gets the value after merge. Declaration public TValue Value { get; } Property Value Type Description TValue"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MapEntryRemovedEventArgs-2.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MapEntryRemovedEventArgs-2.-ctor.html",
    "title": "Constructor MapEntryRemovedEventArgs | Hazelcast .NET Documentation",
    "keywords": "Constructor MapEntryRemovedEventArgs MapEntryRemovedEventArgs(MemberInfo, Lazy<TKey>, Lazy<TValue>, object) Declaration public MapEntryRemovedEventArgs(MemberInfo member, Lazy<TKey> key, Lazy<TValue> oldValue, object state) Parameters Type Name Description MemberInfo member Lazy<TKey> key Lazy<TValue> oldValue object state"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MapEntryRemovedEventArgs-2.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MapEntryRemovedEventArgs-2.html",
    "title": "Class MapEntryRemovedEventArgs<TKey, TValue> | Hazelcast .NET Documentation",
    "keywords": "Class MapEntryRemovedEventArgs<TKey, TValue> Inheritance object EventArgsBase MapEntryEventArgsBase<TKey> MapEntryRemovedEventArgs<TKey, TValue> Inherited Members MapEntryEventArgsBase<TKey>.Member MapEntryEventArgsBase<TKey>.Key EventArgsBase.State object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Syntax public sealed class MapEntryRemovedEventArgs<TKey, TValue> : MapEntryEventArgsBase<TKey> Type Parameters Name Description TKey TValue Constructors Name Description MapEntryRemovedEventArgs(MemberInfo, Lazy<TKey>, Lazy<TValue>, object) Properties Name Description OldValue Gets the value that was removed."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MapEntryRemovedEventArgs-2.OldValue.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MapEntryRemovedEventArgs-2.OldValue.html",
    "title": "Property OldValue | Hazelcast .NET Documentation",
    "keywords": "Property OldValue OldValue Gets the value that was removed. Declaration public TValue OldValue { get; } Property Value Type Description TValue"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MapEntryUpdatedEventArgs-2.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MapEntryUpdatedEventArgs-2.-ctor.html",
    "title": "Constructor MapEntryUpdatedEventArgs | Hazelcast .NET Documentation",
    "keywords": "Constructor MapEntryUpdatedEventArgs MapEntryUpdatedEventArgs(MemberInfo, Lazy<TKey>, Lazy<TValue>, Lazy<TValue>, object) Declaration public MapEntryUpdatedEventArgs(MemberInfo member, Lazy<TKey> key, Lazy<TValue> oldValue, Lazy<TValue> value, object state) Parameters Type Name Description MemberInfo member Lazy<TKey> key Lazy<TValue> oldValue Lazy<TValue> value object state"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MapEntryUpdatedEventArgs-2.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MapEntryUpdatedEventArgs-2.html",
    "title": "Class MapEntryUpdatedEventArgs<TKey, TValue> | Hazelcast .NET Documentation",
    "keywords": "Class MapEntryUpdatedEventArgs<TKey, TValue> Inheritance object EventArgsBase MapEntryEventArgsBase<TKey> MapEntryUpdatedEventArgs<TKey, TValue> Inherited Members MapEntryEventArgsBase<TKey>.Member MapEntryEventArgsBase<TKey>.Key EventArgsBase.State object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Syntax public sealed class MapEntryUpdatedEventArgs<TKey, TValue> : MapEntryEventArgsBase<TKey> Type Parameters Name Description TKey TValue Constructors Name Description MapEntryUpdatedEventArgs(MemberInfo, Lazy<TKey>, Lazy<TValue>, Lazy<TValue>, object) Properties Name Description OldValue Gets the value before the update. Value Gets the updated value."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MapEntryUpdatedEventArgs-2.OldValue.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MapEntryUpdatedEventArgs-2.OldValue.html",
    "title": "Property OldValue | Hazelcast .NET Documentation",
    "keywords": "Property OldValue OldValue Gets the value before the update. Declaration public TValue OldValue { get; } Property Value Type Description TValue"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MapEntryUpdatedEventArgs-2.Value.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MapEntryUpdatedEventArgs-2.Value.html",
    "title": "Property Value | Hazelcast .NET Documentation",
    "keywords": "Property Value Value Gets the updated value. Declaration public TValue Value { get; } Property Value Type Description TValue"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MapEventArgsBase.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MapEventArgsBase.-ctor.html",
    "title": "Constructor MapEventArgsBase | Hazelcast .NET Documentation",
    "keywords": "Constructor MapEventArgsBase MapEventArgsBase(MemberInfo, int, object) Initializes a new instance of the MapEventArgsBase class. Declaration protected MapEventArgsBase(MemberInfo member, int numberOfAffectedEntries, object state) Parameters Type Name Description MemberInfo member The member. int numberOfAffectedEntries The number of affected entries. object state A state object."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MapEventArgsBase.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MapEventArgsBase.html",
    "title": "Class MapEventArgsBase | Hazelcast .NET Documentation",
    "keywords": "Class MapEventArgsBase Represents event data for map events. Inheritance object MapEventArgsBase MapClearedEventArgs MapEvictedEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Syntax public abstract class MapEventArgsBase Constructors Name Description MapEventArgsBase(MemberInfo, int, object) Initializes a new instance of the MapEventArgsBase class. Properties Name Description Member Gets the member that originated the event. NumberOfAffectedEntries Gets the number of affected entries. State Gets the state object."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MapEventArgsBase.Member.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MapEventArgsBase.Member.html",
    "title": "Property Member | Hazelcast .NET Documentation",
    "keywords": "Property Member Member Gets the member that originated the event. Declaration public MemberInfo Member { get; } Property Value Type Description MemberInfo"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MapEventArgsBase.NumberOfAffectedEntries.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MapEventArgsBase.NumberOfAffectedEntries.html",
    "title": "Property NumberOfAffectedEntries | Hazelcast .NET Documentation",
    "keywords": "Property NumberOfAffectedEntries NumberOfAffectedEntries Gets the number of affected entries. Declaration public int NumberOfAffectedEntries { get; } Property Value Type Description int"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MapEventArgsBase.State.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MapEventArgsBase.State.html",
    "title": "Property State | Hazelcast .NET Documentation",
    "keywords": "Property State State Gets the state object. Declaration public object State { get; } Property Value Type Description object"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MapEventHandlers-2.Cleared.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MapEventHandlers-2.Cleared.html",
    "title": "Method Cleared | Hazelcast .NET Documentation",
    "keywords": "Method Cleared Cleared(Action<IHMap<TKey, TValue>, MapClearedEventArgs>) Adds an handler which runs when the map is cleared. Declaration public MapEventHandlers<TKey, TValue> Cleared(Action<IHMap<TKey, TValue>, MapClearedEventArgs> handler) Parameters Type Name Description Action<IHMap<TKey, TValue>, MapClearedEventArgs> handler The handler. Returns Type Description MapEventHandlers<TKey, TValue> The handlers. Cleared(Func<IHMap<TKey, TValue>, MapClearedEventArgs, ValueTask>) Adds an handler which runs when the map is cleared. Declaration public MapEventHandlers<TKey, TValue> Cleared(Func<IHMap<TKey, TValue>, MapClearedEventArgs, ValueTask> handler) Parameters Type Name Description Func<IHMap<TKey, TValue>, MapClearedEventArgs, ValueTask> handler The handler. Returns Type Description MapEventHandlers<TKey, TValue> The handlers."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MapEventHandlers-2.EntryAdded.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MapEventHandlers-2.EntryAdded.html",
    "title": "Method EntryAdded | Hazelcast .NET Documentation",
    "keywords": "Method EntryAdded EntryAdded(Action<IHMap<TKey, TValue>, MapEntryAddedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is added. Declaration public MapEventHandlers<TKey, TValue> EntryAdded(Action<IHMap<TKey, TValue>, MapEntryAddedEventArgs<TKey, TValue>> handler) Parameters Type Name Description Action<IHMap<TKey, TValue>, MapEntryAddedEventArgs<TKey, TValue>> handler The handler. Returns Type Description MapEventHandlers<TKey, TValue> The handlers. EntryAdded(Func<IHMap<TKey, TValue>, MapEntryAddedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is added. Declaration public MapEventHandlers<TKey, TValue> EntryAdded(Func<IHMap<TKey, TValue>, MapEntryAddedEventArgs<TKey, TValue>, ValueTask> handler) Parameters Type Name Description Func<IHMap<TKey, TValue>, MapEntryAddedEventArgs<TKey, TValue>, ValueTask> handler The handler. Returns Type Description MapEventHandlers<TKey, TValue> The handlers."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MapEventHandlers-2.EntryEvicted.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MapEventHandlers-2.EntryEvicted.html",
    "title": "Method EntryEvicted | Hazelcast .NET Documentation",
    "keywords": "Method EntryEvicted EntryEvicted(Action<IHMap<TKey, TValue>, MapEntryEvictedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is evicted. Declaration public MapEventHandlers<TKey, TValue> EntryEvicted(Action<IHMap<TKey, TValue>, MapEntryEvictedEventArgs<TKey, TValue>> handler) Parameters Type Name Description Action<IHMap<TKey, TValue>, MapEntryEvictedEventArgs<TKey, TValue>> handler The handler. Returns Type Description MapEventHandlers<TKey, TValue> The handlers. EntryEvicted(Func<IHMap<TKey, TValue>, MapEntryEvictedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is evicted. Declaration public MapEventHandlers<TKey, TValue> EntryEvicted(Func<IHMap<TKey, TValue>, MapEntryEvictedEventArgs<TKey, TValue>, ValueTask> handler) Parameters Type Name Description Func<IHMap<TKey, TValue>, MapEntryEvictedEventArgs<TKey, TValue>, ValueTask> handler The handler. Returns Type Description MapEventHandlers<TKey, TValue> The handlers."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MapEventHandlers-2.EntryExpired.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MapEventHandlers-2.EntryExpired.html",
    "title": "Method EntryExpired | Hazelcast .NET Documentation",
    "keywords": "Method EntryExpired EntryExpired(Action<IHMap<TKey, TValue>, MapEntryExpiredEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is expired. Declaration public MapEventHandlers<TKey, TValue> EntryExpired(Action<IHMap<TKey, TValue>, MapEntryExpiredEventArgs<TKey, TValue>> handler) Parameters Type Name Description Action<IHMap<TKey, TValue>, MapEntryExpiredEventArgs<TKey, TValue>> handler The handler. Returns Type Description MapEventHandlers<TKey, TValue> The handlers. EntryExpired(Func<IHMap<TKey, TValue>, MapEntryExpiredEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is expired. Declaration public MapEventHandlers<TKey, TValue> EntryExpired(Func<IHMap<TKey, TValue>, MapEntryExpiredEventArgs<TKey, TValue>, ValueTask> handler) Parameters Type Name Description Func<IHMap<TKey, TValue>, MapEntryExpiredEventArgs<TKey, TValue>, ValueTask> handler The handler. Returns Type Description MapEventHandlers<TKey, TValue> The handlers."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MapEventHandlers-2.EntryInvalidated.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MapEventHandlers-2.EntryInvalidated.html",
    "title": "Method EntryInvalidated | Hazelcast .NET Documentation",
    "keywords": "Method EntryInvalidated EntryInvalidated(Action<IHMap<TKey, TValue>, MapEntryInvalidatedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is invalidated. Declaration public MapEventHandlers<TKey, TValue> EntryInvalidated(Action<IHMap<TKey, TValue>, MapEntryInvalidatedEventArgs<TKey, TValue>> handler) Parameters Type Name Description Action<IHMap<TKey, TValue>, MapEntryInvalidatedEventArgs<TKey, TValue>> handler The handler. Returns Type Description MapEventHandlers<TKey, TValue> The handlers. EntryInvalidated(Func<IHMap<TKey, TValue>, MapEntryInvalidatedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is invalidated. Declaration public MapEventHandlers<TKey, TValue> EntryInvalidated(Func<IHMap<TKey, TValue>, MapEntryInvalidatedEventArgs<TKey, TValue>, ValueTask> handler) Parameters Type Name Description Func<IHMap<TKey, TValue>, MapEntryInvalidatedEventArgs<TKey, TValue>, ValueTask> handler The handler. Returns Type Description MapEventHandlers<TKey, TValue> The handlers."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MapEventHandlers-2.EntryLoaded.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MapEventHandlers-2.EntryLoaded.html",
    "title": "Method EntryLoaded | Hazelcast .NET Documentation",
    "keywords": "Method EntryLoaded EntryLoaded(Action<IHMap<TKey, TValue>, MapEntryLoadedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is loaded. Declaration public MapEventHandlers<TKey, TValue> EntryLoaded(Action<IHMap<TKey, TValue>, MapEntryLoadedEventArgs<TKey, TValue>> handler) Parameters Type Name Description Action<IHMap<TKey, TValue>, MapEntryLoadedEventArgs<TKey, TValue>> handler The handler. Returns Type Description MapEventHandlers<TKey, TValue> The handlers. EntryLoaded(Func<IHMap<TKey, TValue>, MapEntryLoadedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is loaded. Declaration public MapEventHandlers<TKey, TValue> EntryLoaded(Func<IHMap<TKey, TValue>, MapEntryLoadedEventArgs<TKey, TValue>, ValueTask> handler) Parameters Type Name Description Func<IHMap<TKey, TValue>, MapEntryLoadedEventArgs<TKey, TValue>, ValueTask> handler The handler. Returns Type Description MapEventHandlers<TKey, TValue> The handlers."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MapEventHandlers-2.EntryMerged.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MapEventHandlers-2.EntryMerged.html",
    "title": "Method EntryMerged | Hazelcast .NET Documentation",
    "keywords": "Method EntryMerged EntryMerged(Action<IHMap<TKey, TValue>, MapEntryMergedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is merged. Declaration public MapEventHandlers<TKey, TValue> EntryMerged(Action<IHMap<TKey, TValue>, MapEntryMergedEventArgs<TKey, TValue>> handler) Parameters Type Name Description Action<IHMap<TKey, TValue>, MapEntryMergedEventArgs<TKey, TValue>> handler The handler. Returns Type Description MapEventHandlers<TKey, TValue> The handlers. EntryMerged(Func<IHMap<TKey, TValue>, MapEntryMergedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is merged. Declaration public MapEventHandlers<TKey, TValue> EntryMerged(Func<IHMap<TKey, TValue>, MapEntryMergedEventArgs<TKey, TValue>, ValueTask> handler) Parameters Type Name Description Func<IHMap<TKey, TValue>, MapEntryMergedEventArgs<TKey, TValue>, ValueTask> handler The handler. Returns Type Description MapEventHandlers<TKey, TValue> The handlers."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MapEventHandlers-2.EntryRemoved.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MapEventHandlers-2.EntryRemoved.html",
    "title": "Method EntryRemoved | Hazelcast .NET Documentation",
    "keywords": "Method EntryRemoved EntryRemoved(Action<IHMap<TKey, TValue>, MapEntryRemovedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is removed. Declaration public MapEventHandlers<TKey, TValue> EntryRemoved(Action<IHMap<TKey, TValue>, MapEntryRemovedEventArgs<TKey, TValue>> handler) Parameters Type Name Description Action<IHMap<TKey, TValue>, MapEntryRemovedEventArgs<TKey, TValue>> handler The handler. Returns Type Description MapEventHandlers<TKey, TValue> The handlers. EntryRemoved(Func<IHMap<TKey, TValue>, MapEntryRemovedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is removed. Declaration public MapEventHandlers<TKey, TValue> EntryRemoved(Func<IHMap<TKey, TValue>, MapEntryRemovedEventArgs<TKey, TValue>, ValueTask> handler) Parameters Type Name Description Func<IHMap<TKey, TValue>, MapEntryRemovedEventArgs<TKey, TValue>, ValueTask> handler The handler. Returns Type Description MapEventHandlers<TKey, TValue> The handlers."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MapEventHandlers-2.EntryUpdated.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MapEventHandlers-2.EntryUpdated.html",
    "title": "Method EntryUpdated | Hazelcast .NET Documentation",
    "keywords": "Method EntryUpdated EntryUpdated(Action<IHMap<TKey, TValue>, MapEntryUpdatedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is updated. Declaration public MapEventHandlers<TKey, TValue> EntryUpdated(Action<IHMap<TKey, TValue>, MapEntryUpdatedEventArgs<TKey, TValue>> handler) Parameters Type Name Description Action<IHMap<TKey, TValue>, MapEntryUpdatedEventArgs<TKey, TValue>> handler The handler. Returns Type Description MapEventHandlers<TKey, TValue> The handlers. EntryUpdated(Func<IHMap<TKey, TValue>, MapEntryUpdatedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is updated. Declaration public MapEventHandlers<TKey, TValue> EntryUpdated(Func<IHMap<TKey, TValue>, MapEntryUpdatedEventArgs<TKey, TValue>, ValueTask> handler) Parameters Type Name Description Func<IHMap<TKey, TValue>, MapEntryUpdatedEventArgs<TKey, TValue>, ValueTask> handler The handler. Returns Type Description MapEventHandlers<TKey, TValue> The handlers."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MapEventHandlers-2.Evicted.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MapEventHandlers-2.Evicted.html",
    "title": "Method Evicted | Hazelcast .NET Documentation",
    "keywords": "Method Evicted Evicted(Action<IHMap<TKey, TValue>, MapEvictedEventArgs>) Adds an handler which runs when the map is evicted. Declaration public MapEventHandlers<TKey, TValue> Evicted(Action<IHMap<TKey, TValue>, MapEvictedEventArgs> handler) Parameters Type Name Description Action<IHMap<TKey, TValue>, MapEvictedEventArgs> handler The handler. Returns Type Description MapEventHandlers<TKey, TValue> The handlers. Evicted(Func<IHMap<TKey, TValue>, MapEvictedEventArgs, ValueTask>) Adds an handler which runs when the map is evicted. Declaration public MapEventHandlers<TKey, TValue> Evicted(Func<IHMap<TKey, TValue>, MapEvictedEventArgs, ValueTask> handler) Parameters Type Name Description Func<IHMap<TKey, TValue>, MapEvictedEventArgs, ValueTask> handler The handler. Returns Type Description MapEventHandlers<TKey, TValue> The handlers."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MapEventHandlers-2.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MapEventHandlers-2.html",
    "title": "Class MapEventHandlers<TKey, TValue> | Hazelcast .NET Documentation",
    "keywords": "Class MapEventHandlers<TKey, TValue> Represents distributed map event handlers. Inheritance object EventHandlersBase<IMapEventHandlerBase> MapEventHandlers<TKey, TValue> Implements IEnumerable<IMapEventHandlerBase> IEnumerable Inherited Members EventHandlersBase<IMapEventHandlerBase>.GetEnumerator() EventHandlersBase<IMapEventHandlerBase>.Remove(IMapEventHandlerBase) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Syntax public sealed class MapEventHandlers<TKey, TValue> : EventHandlersBase<IMapEventHandlerBase>, IEnumerable<IMapEventHandlerBase>, IEnumerable Type Parameters Name Description TKey TValue Methods Name Description Cleared(Action<IHMap<TKey, TValue>, MapClearedEventArgs>) Adds an handler which runs when the map is cleared. Cleared(Func<IHMap<TKey, TValue>, MapClearedEventArgs, ValueTask>) Adds an handler which runs when the map is cleared. EntryAdded(Action<IHMap<TKey, TValue>, MapEntryAddedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is added. EntryAdded(Func<IHMap<TKey, TValue>, MapEntryAddedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is added. EntryEvicted(Action<IHMap<TKey, TValue>, MapEntryEvictedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is evicted. EntryEvicted(Func<IHMap<TKey, TValue>, MapEntryEvictedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is evicted. EntryExpired(Action<IHMap<TKey, TValue>, MapEntryExpiredEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is expired. EntryExpired(Func<IHMap<TKey, TValue>, MapEntryExpiredEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is expired. EntryInvalidated(Action<IHMap<TKey, TValue>, MapEntryInvalidatedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is invalidated. EntryInvalidated(Func<IHMap<TKey, TValue>, MapEntryInvalidatedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is invalidated. EntryLoaded(Action<IHMap<TKey, TValue>, MapEntryLoadedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is loaded. EntryLoaded(Func<IHMap<TKey, TValue>, MapEntryLoadedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is loaded. EntryMerged(Action<IHMap<TKey, TValue>, MapEntryMergedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is merged. EntryMerged(Func<IHMap<TKey, TValue>, MapEntryMergedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is merged. EntryRemoved(Action<IHMap<TKey, TValue>, MapEntryRemovedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is removed. EntryRemoved(Func<IHMap<TKey, TValue>, MapEntryRemovedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is removed. EntryUpdated(Action<IHMap<TKey, TValue>, MapEntryUpdatedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is updated. EntryUpdated(Func<IHMap<TKey, TValue>, MapEntryUpdatedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is updated. Evicted(Action<IHMap<TKey, TValue>, MapEvictedEventArgs>) Adds an handler which runs when the map is evicted. Evicted(Func<IHMap<TKey, TValue>, MapEvictedEventArgs, ValueTask>) Adds an handler which runs when the map is evicted."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MapEvictedEventArgs.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MapEvictedEventArgs.-ctor.html",
    "title": "Constructor MapEvictedEventArgs | Hazelcast .NET Documentation",
    "keywords": "Constructor MapEvictedEventArgs MapEvictedEventArgs(MemberInfo, int, object) Declaration public MapEvictedEventArgs(MemberInfo member, int numberOfAffectedEntries, object state) Parameters Type Name Description MemberInfo member int numberOfAffectedEntries object state"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MapEvictedEventArgs.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MapEvictedEventArgs.html",
    "title": "Class MapEvictedEventArgs | Hazelcast .NET Documentation",
    "keywords": "Class MapEvictedEventArgs Inheritance object MapEventArgsBase MapEvictedEventArgs Inherited Members MapEventArgsBase.Member MapEventArgsBase.NumberOfAffectedEntries MapEventArgsBase.State object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Syntax public sealed class MapEvictedEventArgs : MapEventArgsBase Constructors Name Description MapEvictedEventArgs(MemberInfo, int, object)"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MultiMapEventHandlers-2.Cleared.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MultiMapEventHandlers-2.Cleared.html",
    "title": "Method Cleared | Hazelcast .NET Documentation",
    "keywords": "Method Cleared Cleared(Action<IHMultiMap<TKey, TValue>, MapClearedEventArgs>) Adds an handler which runs when the map is cleared. Declaration public MultiMapEventHandlers<TKey, TValue> Cleared(Action<IHMultiMap<TKey, TValue>, MapClearedEventArgs> handler) Parameters Type Name Description Action<IHMultiMap<TKey, TValue>, MapClearedEventArgs> handler The handler. Returns Type Description MultiMapEventHandlers<TKey, TValue> The handlers. Cleared(Func<IHMultiMap<TKey, TValue>, MapClearedEventArgs, ValueTask>) Adds an handler which runs when the map is cleared. Declaration public MultiMapEventHandlers<TKey, TValue> Cleared(Func<IHMultiMap<TKey, TValue>, MapClearedEventArgs, ValueTask> handler) Parameters Type Name Description Func<IHMultiMap<TKey, TValue>, MapClearedEventArgs, ValueTask> handler The handler. Returns Type Description MultiMapEventHandlers<TKey, TValue> The handlers."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MultiMapEventHandlers-2.EntryAdded.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MultiMapEventHandlers-2.EntryAdded.html",
    "title": "Method EntryAdded | Hazelcast .NET Documentation",
    "keywords": "Method EntryAdded EntryAdded(Action<IHMultiMap<TKey, TValue>, MapEntryAddedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is added. Declaration public MultiMapEventHandlers<TKey, TValue> EntryAdded(Action<IHMultiMap<TKey, TValue>, MapEntryAddedEventArgs<TKey, TValue>> handler) Parameters Type Name Description Action<IHMultiMap<TKey, TValue>, MapEntryAddedEventArgs<TKey, TValue>> handler The handler. Returns Type Description MultiMapEventHandlers<TKey, TValue> The handlers. EntryAdded(Func<IHMultiMap<TKey, TValue>, MapEntryAddedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is added. Declaration public MultiMapEventHandlers<TKey, TValue> EntryAdded(Func<IHMultiMap<TKey, TValue>, MapEntryAddedEventArgs<TKey, TValue>, ValueTask> handler) Parameters Type Name Description Func<IHMultiMap<TKey, TValue>, MapEntryAddedEventArgs<TKey, TValue>, ValueTask> handler The handler. Returns Type Description MultiMapEventHandlers<TKey, TValue> The handlers."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MultiMapEventHandlers-2.EntryMerged.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MultiMapEventHandlers-2.EntryMerged.html",
    "title": "Method EntryMerged | Hazelcast .NET Documentation",
    "keywords": "Method EntryMerged EntryMerged(Action<IHMultiMap<TKey, TValue>, MapEntryMergedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is merged. Declaration public MultiMapEventHandlers<TKey, TValue> EntryMerged(Action<IHMultiMap<TKey, TValue>, MapEntryMergedEventArgs<TKey, TValue>> handler) Parameters Type Name Description Action<IHMultiMap<TKey, TValue>, MapEntryMergedEventArgs<TKey, TValue>> handler The handler. Returns Type Description MultiMapEventHandlers<TKey, TValue> The handlers. EntryMerged(Func<IHMultiMap<TKey, TValue>, MapEntryMergedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is merged. Declaration public MultiMapEventHandlers<TKey, TValue> EntryMerged(Func<IHMultiMap<TKey, TValue>, MapEntryMergedEventArgs<TKey, TValue>, ValueTask> handler) Parameters Type Name Description Func<IHMultiMap<TKey, TValue>, MapEntryMergedEventArgs<TKey, TValue>, ValueTask> handler The handler. Returns Type Description MultiMapEventHandlers<TKey, TValue> The handlers."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MultiMapEventHandlers-2.EntryRemoved.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MultiMapEventHandlers-2.EntryRemoved.html",
    "title": "Method EntryRemoved | Hazelcast .NET Documentation",
    "keywords": "Method EntryRemoved EntryRemoved(Action<IHMultiMap<TKey, TValue>, MapEntryRemovedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is removed. Declaration public MultiMapEventHandlers<TKey, TValue> EntryRemoved(Action<IHMultiMap<TKey, TValue>, MapEntryRemovedEventArgs<TKey, TValue>> handler) Parameters Type Name Description Action<IHMultiMap<TKey, TValue>, MapEntryRemovedEventArgs<TKey, TValue>> handler The handler. Returns Type Description MultiMapEventHandlers<TKey, TValue> The handlers. EntryRemoved(Func<IHMultiMap<TKey, TValue>, MapEntryRemovedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is removed. Declaration public MultiMapEventHandlers<TKey, TValue> EntryRemoved(Func<IHMultiMap<TKey, TValue>, MapEntryRemovedEventArgs<TKey, TValue>, ValueTask> handler) Parameters Type Name Description Func<IHMultiMap<TKey, TValue>, MapEntryRemovedEventArgs<TKey, TValue>, ValueTask> handler The handler. Returns Type Description MultiMapEventHandlers<TKey, TValue> The handlers."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MultiMapEventHandlers-2.EntryUpdated.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MultiMapEventHandlers-2.EntryUpdated.html",
    "title": "Method EntryUpdated | Hazelcast .NET Documentation",
    "keywords": "Method EntryUpdated EntryUpdated(Action<IHMultiMap<TKey, TValue>, MapEntryUpdatedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is updated. Declaration public MultiMapEventHandlers<TKey, TValue> EntryUpdated(Action<IHMultiMap<TKey, TValue>, MapEntryUpdatedEventArgs<TKey, TValue>> handler) Parameters Type Name Description Action<IHMultiMap<TKey, TValue>, MapEntryUpdatedEventArgs<TKey, TValue>> handler The handler. Returns Type Description MultiMapEventHandlers<TKey, TValue> The handlers. EntryUpdated(Func<IHMultiMap<TKey, TValue>, MapEntryUpdatedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is updated. Declaration public MultiMapEventHandlers<TKey, TValue> EntryUpdated(Func<IHMultiMap<TKey, TValue>, MapEntryUpdatedEventArgs<TKey, TValue>, ValueTask> handler) Parameters Type Name Description Func<IHMultiMap<TKey, TValue>, MapEntryUpdatedEventArgs<TKey, TValue>, ValueTask> handler The handler. Returns Type Description MultiMapEventHandlers<TKey, TValue> The handlers."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.MultiMapEventHandlers-2.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.MultiMapEventHandlers-2.html",
    "title": "Class MultiMapEventHandlers<TKey, TValue> | Hazelcast .NET Documentation",
    "keywords": "Class MultiMapEventHandlers<TKey, TValue> Represents multi distributed map event handlers. Inheritance object EventHandlersBase<IMapEventHandlerBase> MultiMapEventHandlers<TKey, TValue> Implements IEnumerable<IMapEventHandlerBase> IEnumerable Inherited Members EventHandlersBase<IMapEventHandlerBase>.Add(IMapEventHandlerBase) EventHandlersBase<IMapEventHandlerBase>.GetEnumerator() EventHandlersBase<IMapEventHandlerBase>.Remove(IMapEventHandlerBase) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Syntax public class MultiMapEventHandlers<TKey, TValue> : EventHandlersBase<IMapEventHandlerBase>, IEnumerable<IMapEventHandlerBase>, IEnumerable Type Parameters Name Description TKey The type of the keys. TValue The type of the values. Methods Name Description Cleared(Action<IHMultiMap<TKey, TValue>, MapClearedEventArgs>) Adds an handler which runs when the map is cleared. Cleared(Func<IHMultiMap<TKey, TValue>, MapClearedEventArgs, ValueTask>) Adds an handler which runs when the map is cleared. EntryAdded(Action<IHMultiMap<TKey, TValue>, MapEntryAddedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is added. EntryAdded(Func<IHMultiMap<TKey, TValue>, MapEntryAddedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is added. EntryMerged(Action<IHMultiMap<TKey, TValue>, MapEntryMergedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is merged. EntryMerged(Func<IHMultiMap<TKey, TValue>, MapEntryMergedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is merged. EntryRemoved(Action<IHMultiMap<TKey, TValue>, MapEntryRemovedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is removed. EntryRemoved(Func<IHMultiMap<TKey, TValue>, MapEntryRemovedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is removed. EntryUpdated(Action<IHMultiMap<TKey, TValue>, MapEntryUpdatedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is updated. EntryUpdated(Func<IHMultiMap<TKey, TValue>, MapEntryUpdatedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is updated."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.OverflowPolicy.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.OverflowPolicy.html",
    "title": "Enum OverflowPolicy | Hazelcast .NET Documentation",
    "keywords": "Enum OverflowPolicy Using this policy one can control the behavior what should to be done when an item is about to be added to the ringbuffer, but there is 0 remaining capacity. Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Syntax public enum OverflowPolicy Remarks Using this policy one can control the behavior what should to be done when an item is about to be added to the ringbuffer, but there is 0 remaining capacity. Overflowing happens when a time-to-live is set and the oldest item in the ringbuffer (the head) is not old enough to expire. Fields Name Description Fail Using this policy the call will fail immediately and the oldest item will not be overwritten before it is old enough to retire. Overwrite Using this policy the oldest item is overwritten no matter it is not old enough to retire."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.ReplicatedMapEventHandlers-2.Cleared.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.ReplicatedMapEventHandlers-2.Cleared.html",
    "title": "Method Cleared | Hazelcast .NET Documentation",
    "keywords": "Method Cleared Cleared(Action<IHReplicatedMap<TKey, TValue>, MapClearedEventArgs>) Adds an handler which runs when the map is cleared. Declaration public ReplicatedMapEventHandlers<TKey, TValue> Cleared(Action<IHReplicatedMap<TKey, TValue>, MapClearedEventArgs> handler) Parameters Type Name Description Action<IHReplicatedMap<TKey, TValue>, MapClearedEventArgs> handler The handler. Returns Type Description ReplicatedMapEventHandlers<TKey, TValue> The handlers. Cleared(Func<IHReplicatedMap<TKey, TValue>, MapClearedEventArgs, ValueTask>) Adds an handler which runs when the map is cleared. Declaration public ReplicatedMapEventHandlers<TKey, TValue> Cleared(Func<IHReplicatedMap<TKey, TValue>, MapClearedEventArgs, ValueTask> handler) Parameters Type Name Description Func<IHReplicatedMap<TKey, TValue>, MapClearedEventArgs, ValueTask> handler The handler. Returns Type Description ReplicatedMapEventHandlers<TKey, TValue> The handlers."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.ReplicatedMapEventHandlers-2.EntryAdded.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.ReplicatedMapEventHandlers-2.EntryAdded.html",
    "title": "Method EntryAdded | Hazelcast .NET Documentation",
    "keywords": "Method EntryAdded EntryAdded(Action<IHReplicatedMap<TKey, TValue>, MapEntryAddedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is added. Declaration public ReplicatedMapEventHandlers<TKey, TValue> EntryAdded(Action<IHReplicatedMap<TKey, TValue>, MapEntryAddedEventArgs<TKey, TValue>> handler) Parameters Type Name Description Action<IHReplicatedMap<TKey, TValue>, MapEntryAddedEventArgs<TKey, TValue>> handler The handler. Returns Type Description ReplicatedMapEventHandlers<TKey, TValue> The handlers. EntryAdded(Func<IHReplicatedMap<TKey, TValue>, MapEntryAddedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is added. Declaration public ReplicatedMapEventHandlers<TKey, TValue> EntryAdded(Func<IHReplicatedMap<TKey, TValue>, MapEntryAddedEventArgs<TKey, TValue>, ValueTask> handler) Parameters Type Name Description Func<IHReplicatedMap<TKey, TValue>, MapEntryAddedEventArgs<TKey, TValue>, ValueTask> handler The handler. Returns Type Description ReplicatedMapEventHandlers<TKey, TValue> The handlers."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.ReplicatedMapEventHandlers-2.EntryMerged.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.ReplicatedMapEventHandlers-2.EntryMerged.html",
    "title": "Method EntryMerged | Hazelcast .NET Documentation",
    "keywords": "Method EntryMerged EntryMerged(Action<IHReplicatedMap<TKey, TValue>, MapEntryMergedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is merged. Declaration public ReplicatedMapEventHandlers<TKey, TValue> EntryMerged(Action<IHReplicatedMap<TKey, TValue>, MapEntryMergedEventArgs<TKey, TValue>> handler) Parameters Type Name Description Action<IHReplicatedMap<TKey, TValue>, MapEntryMergedEventArgs<TKey, TValue>> handler The handler. Returns Type Description ReplicatedMapEventHandlers<TKey, TValue> The handlers. EntryMerged(Func<IHReplicatedMap<TKey, TValue>, MapEntryMergedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is merged. Declaration public ReplicatedMapEventHandlers<TKey, TValue> EntryMerged(Func<IHReplicatedMap<TKey, TValue>, MapEntryMergedEventArgs<TKey, TValue>, ValueTask> handler) Parameters Type Name Description Func<IHReplicatedMap<TKey, TValue>, MapEntryMergedEventArgs<TKey, TValue>, ValueTask> handler The handler. Returns Type Description ReplicatedMapEventHandlers<TKey, TValue> The handlers."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.ReplicatedMapEventHandlers-2.EntryRemoved.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.ReplicatedMapEventHandlers-2.EntryRemoved.html",
    "title": "Method EntryRemoved | Hazelcast .NET Documentation",
    "keywords": "Method EntryRemoved EntryRemoved(Action<IHReplicatedMap<TKey, TValue>, MapEntryRemovedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is removed. Declaration public ReplicatedMapEventHandlers<TKey, TValue> EntryRemoved(Action<IHReplicatedMap<TKey, TValue>, MapEntryRemovedEventArgs<TKey, TValue>> handler) Parameters Type Name Description Action<IHReplicatedMap<TKey, TValue>, MapEntryRemovedEventArgs<TKey, TValue>> handler The handler. Returns Type Description ReplicatedMapEventHandlers<TKey, TValue> The handlers. EntryRemoved(Func<IHReplicatedMap<TKey, TValue>, MapEntryRemovedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is removed. Declaration public ReplicatedMapEventHandlers<TKey, TValue> EntryRemoved(Func<IHReplicatedMap<TKey, TValue>, MapEntryRemovedEventArgs<TKey, TValue>, ValueTask> handler) Parameters Type Name Description Func<IHReplicatedMap<TKey, TValue>, MapEntryRemovedEventArgs<TKey, TValue>, ValueTask> handler The handler. Returns Type Description ReplicatedMapEventHandlers<TKey, TValue> The handlers."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.ReplicatedMapEventHandlers-2.EntryUpdated.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.ReplicatedMapEventHandlers-2.EntryUpdated.html",
    "title": "Method EntryUpdated | Hazelcast .NET Documentation",
    "keywords": "Method EntryUpdated EntryUpdated(Action<IHReplicatedMap<TKey, TValue>, MapEntryUpdatedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is updated. Declaration public ReplicatedMapEventHandlers<TKey, TValue> EntryUpdated(Action<IHReplicatedMap<TKey, TValue>, MapEntryUpdatedEventArgs<TKey, TValue>> handler) Parameters Type Name Description Action<IHReplicatedMap<TKey, TValue>, MapEntryUpdatedEventArgs<TKey, TValue>> handler The handler. Returns Type Description ReplicatedMapEventHandlers<TKey, TValue> The handlers. EntryUpdated(Func<IHReplicatedMap<TKey, TValue>, MapEntryUpdatedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is updated. Declaration public ReplicatedMapEventHandlers<TKey, TValue> EntryUpdated(Func<IHReplicatedMap<TKey, TValue>, MapEntryUpdatedEventArgs<TKey, TValue>, ValueTask> handler) Parameters Type Name Description Func<IHReplicatedMap<TKey, TValue>, MapEntryUpdatedEventArgs<TKey, TValue>, ValueTask> handler The handler. Returns Type Description ReplicatedMapEventHandlers<TKey, TValue> The handlers."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.ReplicatedMapEventHandlers-2.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.ReplicatedMapEventHandlers-2.html",
    "title": "Class ReplicatedMapEventHandlers<TKey, TValue> | Hazelcast .NET Documentation",
    "keywords": "Class ReplicatedMapEventHandlers<TKey, TValue> Represents replicated distributed map event handlers. Inheritance object EventHandlersBase<IMapEventHandlerBase> ReplicatedMapEventHandlers<TKey, TValue> Implements IEnumerable<IMapEventHandlerBase> IEnumerable Inherited Members EventHandlersBase<IMapEventHandlerBase>.Add(IMapEventHandlerBase) EventHandlersBase<IMapEventHandlerBase>.GetEnumerator() EventHandlersBase<IMapEventHandlerBase>.Remove(IMapEventHandlerBase) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Syntax public class ReplicatedMapEventHandlers<TKey, TValue> : EventHandlersBase<IMapEventHandlerBase>, IEnumerable<IMapEventHandlerBase>, IEnumerable Type Parameters Name Description TKey The type of the keys. TValue The type of the values. Methods Name Description Cleared(Action<IHReplicatedMap<TKey, TValue>, MapClearedEventArgs>) Adds an handler which runs when the map is cleared. Cleared(Func<IHReplicatedMap<TKey, TValue>, MapClearedEventArgs, ValueTask>) Adds an handler which runs when the map is cleared. EntryAdded(Action<IHReplicatedMap<TKey, TValue>, MapEntryAddedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is added. EntryAdded(Func<IHReplicatedMap<TKey, TValue>, MapEntryAddedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is added. EntryMerged(Action<IHReplicatedMap<TKey, TValue>, MapEntryMergedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is merged. EntryMerged(Func<IHReplicatedMap<TKey, TValue>, MapEntryMergedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is merged. EntryRemoved(Action<IHReplicatedMap<TKey, TValue>, MapEntryRemovedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is removed. EntryRemoved(Func<IHReplicatedMap<TKey, TValue>, MapEntryRemovedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is removed. EntryUpdated(Action<IHReplicatedMap<TKey, TValue>, MapEntryUpdatedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is updated. EntryUpdated(Func<IHReplicatedMap<TKey, TValue>, MapEntryUpdatedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is updated."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.TopicEventHandlers-1.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.TopicEventHandlers-1.html",
    "title": "Class TopicEventHandlers<T> | Hazelcast .NET Documentation",
    "keywords": "Class TopicEventHandlers<T> Represent topic event handlers. Inheritance object EventHandlersBase<ITopicEventHandler<T>> TopicEventHandlers<T> Implements IEnumerable<ITopicEventHandler<T>> IEnumerable Inherited Members EventHandlersBase<ITopicEventHandler<T>>.GetEnumerator() EventHandlersBase<ITopicEventHandler<T>>.Remove(ITopicEventHandler<T>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Syntax public sealed class TopicEventHandlers<T> : EventHandlersBase<ITopicEventHandler<T>>, IEnumerable<ITopicEventHandler<T>>, IEnumerable Type Parameters Name Description T The topic message type. Methods Name Description Message(Action<IHTopic<T>, TopicMessageEventArgs<T>>) Adds an handler which runs when a message is submitted. Message(Func<IHTopic<T>, TopicMessageEventArgs<T>, ValueTask>) Adds an handler which runs when a message is submitted."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.TopicEventHandlers-1.Message.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.TopicEventHandlers-1.Message.html",
    "title": "Method Message | Hazelcast .NET Documentation",
    "keywords": "Method Message Message(Action<IHTopic<T>, TopicMessageEventArgs<T>>) Adds an handler which runs when a message is submitted. Declaration public TopicEventHandlers<T> Message(Action<IHTopic<T>, TopicMessageEventArgs<T>> handler) Parameters Type Name Description Action<IHTopic<T>, TopicMessageEventArgs<T>> handler The handler. Returns Type Description TopicEventHandlers<T> The handlers. Message(Func<IHTopic<T>, TopicMessageEventArgs<T>, ValueTask>) Adds an handler which runs when a message is submitted. Declaration public TopicEventHandlers<T> Message(Func<IHTopic<T>, TopicMessageEventArgs<T>, ValueTask> handler) Parameters Type Name Description Func<IHTopic<T>, TopicMessageEventArgs<T>, ValueTask> handler The handler. Returns Type Description TopicEventHandlers<T> The handlers."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.TopicMessageEventArgs-1.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.TopicMessageEventArgs-1.-ctor.html",
    "title": "Constructor TopicMessageEventArgs | Hazelcast .NET Documentation",
    "keywords": "Constructor TopicMessageEventArgs TopicMessageEventArgs(MemberInfo, long, T, object) Initializes a new instance of the TopicMessageEventArgs<T> class. Declaration public TopicMessageEventArgs(MemberInfo member, long publishTime, T payload, object state) Parameters Type Name Description MemberInfo member The member. long publishTime The publish time. T payload The object. object state A state object"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.TopicMessageEventArgs-1.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.TopicMessageEventArgs-1.html",
    "title": "Class TopicMessageEventArgs<T> | Hazelcast .NET Documentation",
    "keywords": "Class TopicMessageEventArgs<T> Represents event data for the event. Inheritance object EventArgsBase TopicMessageEventArgs<T> Inherited Members EventArgsBase.State object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Syntax public sealed class TopicMessageEventArgs<T> : EventArgsBase Type Parameters Name Description T The topic object type. Constructors Name Description TopicMessageEventArgs(MemberInfo, long, T, object) Initializes a new instance of the TopicMessageEventArgs<T> class. Properties Name Description Member Gets the member. Payload Gets the topic object carried by the message. PublishTime Gets the message publish time."
  },
  "5.2.2/api/Hazelcast.DistributedObjects.TopicMessageEventArgs-1.Member.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.TopicMessageEventArgs-1.Member.html",
    "title": "Property Member | Hazelcast .NET Documentation",
    "keywords": "Property Member Member Gets the member. Declaration public MemberInfo Member { get; } Property Value Type Description MemberInfo"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.TopicMessageEventArgs-1.Payload.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.TopicMessageEventArgs-1.Payload.html",
    "title": "Property Payload | Hazelcast .NET Documentation",
    "keywords": "Property Payload Payload Gets the topic object carried by the message. Declaration public T Payload { get; } Property Value Type Description T"
  },
  "5.2.2/api/Hazelcast.DistributedObjects.TopicMessageEventArgs-1.PublishTime.html": {
    "href": "5.2.2/api/Hazelcast.DistributedObjects.TopicMessageEventArgs-1.PublishTime.html",
    "title": "Property PublishTime | Hazelcast .NET Documentation",
    "keywords": "Property PublishTime PublishTime Gets the message publish time. Declaration public long PublishTime { get; } Property Value Type Description long"
  },
  "5.2.2/api/Hazelcast.Events.DistributedObjectCreatedEventArgs.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Events.DistributedObjectCreatedEventArgs.-ctor.html",
    "title": "Constructor DistributedObjectCreatedEventArgs | Hazelcast .NET Documentation",
    "keywords": "Constructor DistributedObjectCreatedEventArgs DistributedObjectCreatedEventArgs(string, string, Guid) Initializes a new instance of the DistributedObjectCreatedEventArgs class. Declaration public DistributedObjectCreatedEventArgs(string serviceName, string name, Guid sourceMemberId) Parameters Type Name Description string serviceName The service unique name. string name The object unique name. Guid sourceMemberId The unique identifier of the source member."
  },
  "5.2.2/api/Hazelcast.Events.DistributedObjectCreatedEventArgs.html": {
    "href": "5.2.2/api/Hazelcast.Events.DistributedObjectCreatedEventArgs.html",
    "title": "Class DistributedObjectCreatedEventArgs | Hazelcast .NET Documentation",
    "keywords": "Class DistributedObjectCreatedEventArgs Represents event data for a cluster object created event. Inheritance object DistributedObjectLifecycleEventArgs DistributedObjectCreatedEventArgs Inherited Members DistributedObjectLifecycleEventArgs.ServiceName DistributedObjectLifecycleEventArgs.Name DistributedObjectLifecycleEventArgs.SourceMemberId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.Events Assembly: Hazelcast.Net.dll Syntax public sealed class DistributedObjectCreatedEventArgs : DistributedObjectLifecycleEventArgs Constructors Name Description DistributedObjectCreatedEventArgs(string, string, Guid) Initializes a new instance of the DistributedObjectCreatedEventArgs class."
  },
  "5.2.2/api/Hazelcast.Events.DistributedObjectDestroyedEventArgs.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Events.DistributedObjectDestroyedEventArgs.-ctor.html",
    "title": "Constructor DistributedObjectDestroyedEventArgs | Hazelcast .NET Documentation",
    "keywords": "Constructor DistributedObjectDestroyedEventArgs DistributedObjectDestroyedEventArgs(string, string, Guid) Initializes a new instance of the DistributedObjectDestroyedEventArgs class. Declaration public DistributedObjectDestroyedEventArgs(string serviceName, string name, Guid sourceMemberId) Parameters Type Name Description string serviceName The service unique name. string name The object unique name. Guid sourceMemberId The unique identifier of the source member."
  },
  "5.2.2/api/Hazelcast.Events.DistributedObjectDestroyedEventArgs.html": {
    "href": "5.2.2/api/Hazelcast.Events.DistributedObjectDestroyedEventArgs.html",
    "title": "Class DistributedObjectDestroyedEventArgs | Hazelcast .NET Documentation",
    "keywords": "Class DistributedObjectDestroyedEventArgs Represents event data for a cluster object destroyed event. Inheritance object DistributedObjectLifecycleEventArgs DistributedObjectDestroyedEventArgs Inherited Members DistributedObjectLifecycleEventArgs.ServiceName DistributedObjectLifecycleEventArgs.Name DistributedObjectLifecycleEventArgs.SourceMemberId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.Events Assembly: Hazelcast.Net.dll Syntax public sealed class DistributedObjectDestroyedEventArgs : DistributedObjectLifecycleEventArgs Constructors Name Description DistributedObjectDestroyedEventArgs(string, string, Guid) Initializes a new instance of the DistributedObjectDestroyedEventArgs class."
  },
  "5.2.2/api/Hazelcast.Events.DistributedObjectLifecycleEventArgs.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Events.DistributedObjectLifecycleEventArgs.-ctor.html",
    "title": "Constructor DistributedObjectLifecycleEventArgs | Hazelcast .NET Documentation",
    "keywords": "Constructor DistributedObjectLifecycleEventArgs DistributedObjectLifecycleEventArgs(string, string, Guid) Initializes a new instance of the DistributedObjectLifecycleEventArgs class. Declaration protected DistributedObjectLifecycleEventArgs(string serviceName, string name, Guid sourceMemberId) Parameters Type Name Description string serviceName The service unique name. string name The object unique name. Guid sourceMemberId The unique identifier of the source member."
  },
  "5.2.2/api/Hazelcast.Events.DistributedObjectLifecycleEventArgs.html": {
    "href": "5.2.2/api/Hazelcast.Events.DistributedObjectLifecycleEventArgs.html",
    "title": "Class DistributedObjectLifecycleEventArgs | Hazelcast .NET Documentation",
    "keywords": "Class DistributedObjectLifecycleEventArgs Provides a base class for cluster object lifecycle events data. Inheritance object DistributedObjectLifecycleEventArgs DistributedObjectCreatedEventArgs DistributedObjectDestroyedEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.Events Assembly: Hazelcast.Net.dll Syntax public abstract class DistributedObjectLifecycleEventArgs Constructors Name Description DistributedObjectLifecycleEventArgs(string, string, Guid) Initializes a new instance of the DistributedObjectLifecycleEventArgs class. Properties Name Description Name Gets the name of the impacted object. ServiceName Gets the name of the service handling the impacted object. SourceMemberId Gets the unique identifier of the source member."
  },
  "5.2.2/api/Hazelcast.Events.DistributedObjectLifecycleEventArgs.Name.html": {
    "href": "5.2.2/api/Hazelcast.Events.DistributedObjectLifecycleEventArgs.Name.html",
    "title": "Property Name | Hazelcast .NET Documentation",
    "keywords": "Property Name Name Gets the name of the impacted object. Declaration public string Name { get; } Property Value Type Description string"
  },
  "5.2.2/api/Hazelcast.Events.DistributedObjectLifecycleEventArgs.ServiceName.html": {
    "href": "5.2.2/api/Hazelcast.Events.DistributedObjectLifecycleEventArgs.ServiceName.html",
    "title": "Property ServiceName | Hazelcast .NET Documentation",
    "keywords": "Property ServiceName ServiceName Gets the name of the service handling the impacted object. Declaration public string ServiceName { get; } Property Value Type Description string"
  },
  "5.2.2/api/Hazelcast.Events.DistributedObjectLifecycleEventArgs.SourceMemberId.html": {
    "href": "5.2.2/api/Hazelcast.Events.DistributedObjectLifecycleEventArgs.SourceMemberId.html",
    "title": "Property SourceMemberId | Hazelcast .NET Documentation",
    "keywords": "Property SourceMemberId SourceMemberId Gets the unique identifier of the source member. Declaration public Guid SourceMemberId { get; } Property Value Type Description Guid"
  },
  "5.2.2/api/Hazelcast.Events.EventsOptions.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Events.EventsOptions.-ctor.html",
    "title": "Constructor EventsOptions | Hazelcast .NET Documentation",
    "keywords": "Constructor EventsOptions EventsOptions() Initializes a new instance of the EventsOptions class. Declaration public EventsOptions()"
  },
  "5.2.2/api/Hazelcast.Events.EventsOptions.Clone.html": {
    "href": "5.2.2/api/Hazelcast.Events.EventsOptions.Clone.html",
    "title": "Method Clone | Hazelcast .NET Documentation",
    "keywords": "Method Clone Clone() Clones the options. Declaration public EventsOptions Clone() Returns Type Description EventsOptions The cloned options."
  },
  "5.2.2/api/Hazelcast.Events.EventsOptions.html": {
    "href": "5.2.2/api/Hazelcast.Events.EventsOptions.html",
    "title": "Class EventsOptions | Hazelcast .NET Documentation",
    "keywords": "Class EventsOptions Represents the events options. Inheritance object EventsOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.Events Assembly: Hazelcast.Net.dll Syntax public class EventsOptions Constructors Name Description EventsOptions() Initializes a new instance of the EventsOptions class. Properties Name Description SubscriptionCollectDelay Gets or sets the delay before collecting subscriptions starts. SubscriptionCollectPeriod Gets or sets the period of the subscription collection. SubscriptionCollectTimeout Gets or sets the subscription collection timeout, after which a subscription is considered dead and removed. Methods Name Description Clone() Clones the options."
  },
  "5.2.2/api/Hazelcast.Events.EventsOptions.SubscriptionCollectDelay.html": {
    "href": "5.2.2/api/Hazelcast.Events.EventsOptions.SubscriptionCollectDelay.html",
    "title": "Property SubscriptionCollectDelay | Hazelcast .NET Documentation",
    "keywords": "Property SubscriptionCollectDelay SubscriptionCollectDelay Gets or sets the delay before collecting subscriptions starts. Declaration public TimeSpan SubscriptionCollectDelay { get; set; } Property Value Type Description TimeSpan"
  },
  "5.2.2/api/Hazelcast.Events.EventsOptions.SubscriptionCollectPeriod.html": {
    "href": "5.2.2/api/Hazelcast.Events.EventsOptions.SubscriptionCollectPeriod.html",
    "title": "Property SubscriptionCollectPeriod | Hazelcast .NET Documentation",
    "keywords": "Property SubscriptionCollectPeriod SubscriptionCollectPeriod Gets or sets the period of the subscription collection. Declaration public TimeSpan SubscriptionCollectPeriod { get; set; } Property Value Type Description TimeSpan"
  },
  "5.2.2/api/Hazelcast.Events.EventsOptions.SubscriptionCollectTimeout.html": {
    "href": "5.2.2/api/Hazelcast.Events.EventsOptions.SubscriptionCollectTimeout.html",
    "title": "Property SubscriptionCollectTimeout | Hazelcast .NET Documentation",
    "keywords": "Property SubscriptionCollectTimeout SubscriptionCollectTimeout Gets or sets the subscription collection timeout, after which a subscription is considered dead and removed. Declaration public TimeSpan SubscriptionCollectTimeout { get; set; } Property Value Type Description TimeSpan"
  },
  "5.2.2/api/Hazelcast.Events.html": {
    "href": "5.2.2/api/Hazelcast.Events.html",
    "title": "Namespace Hazelcast.Events | Hazelcast .NET Documentation",
    "keywords": "Namespace Hazelcast.Events Classes DistributedObjectCreatedEventArgs Represents event data for a cluster object created event. DistributedObjectDestroyedEventArgs Represents event data for a cluster object destroyed event. DistributedObjectLifecycleEventArgs Provides a base class for cluster object lifecycle events data. EventsOptions Represents the events options. MembersUpdatedEventArgs Represents event data for the members updated event. PartitionLostEventArgs"
  },
  "5.2.2/api/Hazelcast.Events.MembersUpdatedEventArgs.AddedMembers.html": {
    "href": "5.2.2/api/Hazelcast.Events.MembersUpdatedEventArgs.AddedMembers.html",
    "title": "Property AddedMembers | Hazelcast .NET Documentation",
    "keywords": "Property AddedMembers AddedMembers Gets the added members. Declaration public IReadOnlyCollection<MemberInfo> AddedMembers { get; } Property Value Type Description IReadOnlyCollection<MemberInfo>"
  },
  "5.2.2/api/Hazelcast.Events.MembersUpdatedEventArgs.html": {
    "href": "5.2.2/api/Hazelcast.Events.MembersUpdatedEventArgs.html",
    "title": "Class MembersUpdatedEventArgs | Hazelcast .NET Documentation",
    "keywords": "Class MembersUpdatedEventArgs Represents event data for the members updated event. Inheritance object MembersUpdatedEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.Events Assembly: Hazelcast.Net.dll Syntax public class MembersUpdatedEventArgs Properties Name Description AddedMembers Gets the added members. Members Gets the complete, updated list of members. RemovedMembers Gets the removed members."
  },
  "5.2.2/api/Hazelcast.Events.MembersUpdatedEventArgs.Members.html": {
    "href": "5.2.2/api/Hazelcast.Events.MembersUpdatedEventArgs.Members.html",
    "title": "Property Members | Hazelcast .NET Documentation",
    "keywords": "Property Members Members Gets the complete, updated list of members. Declaration public IReadOnlyCollection<MemberInfo> Members { get; } Property Value Type Description IReadOnlyCollection<MemberInfo>"
  },
  "5.2.2/api/Hazelcast.Events.MembersUpdatedEventArgs.RemovedMembers.html": {
    "href": "5.2.2/api/Hazelcast.Events.MembersUpdatedEventArgs.RemovedMembers.html",
    "title": "Property RemovedMembers | Hazelcast .NET Documentation",
    "keywords": "Property RemovedMembers RemovedMembers Gets the removed members. Declaration public IReadOnlyCollection<MemberInfo> RemovedMembers { get; } Property Value Type Description IReadOnlyCollection<MemberInfo>"
  },
  "5.2.2/api/Hazelcast.Events.PartitionLostEventArgs.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Events.PartitionLostEventArgs.-ctor.html",
    "title": "Constructor PartitionLostEventArgs | Hazelcast .NET Documentation",
    "keywords": "Constructor PartitionLostEventArgs PartitionLostEventArgs(int, int, bool, MemberInfo) Declaration public PartitionLostEventArgs(int partitionId, int lostBackupCount, bool isAllReplicasInPartitionLost, MemberInfo member) Parameters Type Name Description int partitionId int lostBackupCount bool isAllReplicasInPartitionLost MemberInfo member"
  },
  "5.2.2/api/Hazelcast.Events.PartitionLostEventArgs.html": {
    "href": "5.2.2/api/Hazelcast.Events.PartitionLostEventArgs.html",
    "title": "Class PartitionLostEventArgs | Hazelcast .NET Documentation",
    "keywords": "Class PartitionLostEventArgs Inheritance object PartitionLostEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.Events Assembly: Hazelcast.Net.dll Syntax public class PartitionLostEventArgs Constructors Name Description PartitionLostEventArgs(int, int, bool, MemberInfo) Properties Name Description IsAllReplicasInPartitionLost LostBackupCount Member PartitionId"
  },
  "5.2.2/api/Hazelcast.Events.PartitionLostEventArgs.IsAllReplicasInPartitionLost.html": {
    "href": "5.2.2/api/Hazelcast.Events.PartitionLostEventArgs.IsAllReplicasInPartitionLost.html",
    "title": "Property IsAllReplicasInPartitionLost | Hazelcast .NET Documentation",
    "keywords": "Property IsAllReplicasInPartitionLost IsAllReplicasInPartitionLost Declaration public bool IsAllReplicasInPartitionLost { get; } Property Value Type Description bool"
  },
  "5.2.2/api/Hazelcast.Events.PartitionLostEventArgs.LostBackupCount.html": {
    "href": "5.2.2/api/Hazelcast.Events.PartitionLostEventArgs.LostBackupCount.html",
    "title": "Property LostBackupCount | Hazelcast .NET Documentation",
    "keywords": "Property LostBackupCount LostBackupCount Declaration public int LostBackupCount { get; } Property Value Type Description int"
  },
  "5.2.2/api/Hazelcast.Events.PartitionLostEventArgs.Member.html": {
    "href": "5.2.2/api/Hazelcast.Events.PartitionLostEventArgs.Member.html",
    "title": "Property Member | Hazelcast .NET Documentation",
    "keywords": "Property Member Member Declaration public MemberInfo Member { get; } Property Value Type Description MemberInfo"
  },
  "5.2.2/api/Hazelcast.Events.PartitionLostEventArgs.PartitionId.html": {
    "href": "5.2.2/api/Hazelcast.Events.PartitionLostEventArgs.PartitionId.html",
    "title": "Property PartitionId | Hazelcast .NET Documentation",
    "keywords": "Property PartitionId PartitionId Declaration public int PartitionId { get; } Property Value Type Description int"
  },
  "5.2.2/api/Hazelcast.Exceptions.AuthenticationException.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Exceptions.AuthenticationException.-ctor.html",
    "title": "Constructor AuthenticationException | Hazelcast .NET Documentation",
    "keywords": "Constructor AuthenticationException AuthenticationException() Initializes a new instance of the AuthenticationException class. Declaration public AuthenticationException() AuthenticationException(string) Initializes a new instance of the AuthenticationException class with a specified error message. Declaration public AuthenticationException(string message) Parameters Type Name Description string message The message that describes the error. AuthenticationException(Exception) Initializes a new instance of the AuthenticationException class with a reference to the inner exception that is the cause of this exception. Declaration public AuthenticationException(Exception innerException) Parameters Type Name Description Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. AuthenticationException(string, Exception) Initializes a new instance of the AuthenticationException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public AuthenticationException(string message, Exception innerException) Parameters Type Name Description string message The message that describes the error. Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified."
  },
  "5.2.2/api/Hazelcast.Exceptions.AuthenticationException.html": {
    "href": "5.2.2/api/Hazelcast.Exceptions.AuthenticationException.html",
    "title": "Class AuthenticationException | Hazelcast .NET Documentation",
    "keywords": "Class AuthenticationException Represents the exception that is thrown when authentication fails. Inheritance object Exception HazelcastException AuthenticationException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Namespace: Hazelcast.Exceptions Assembly: Hazelcast.Net.dll Syntax [Serializable] public sealed class AuthenticationException : HazelcastException, ISerializable Constructors Name Description AuthenticationException() Initializes a new instance of the AuthenticationException class. AuthenticationException(Exception) Initializes a new instance of the AuthenticationException class with a reference to the inner exception that is the cause of this exception. AuthenticationException(string, Exception) Initializes a new instance of the AuthenticationException class with a specified error message and a reference to the inner exception that is the cause of this exception. AuthenticationException(string) Initializes a new instance of the AuthenticationException class with a specified error message."
  },
  "5.2.2/api/Hazelcast.Exceptions.ClientNotAllowedInClusterException.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Exceptions.ClientNotAllowedInClusterException.-ctor.html",
    "title": "Constructor ClientNotAllowedInClusterException | Hazelcast .NET Documentation",
    "keywords": "Constructor ClientNotAllowedInClusterException ClientNotAllowedInClusterException() Initializes a new instance of the ClientNotAllowedInClusterException class. Declaration public ClientNotAllowedInClusterException() ClientNotAllowedInClusterException(string) Initializes a new instance of the ClientNotAllowedInClusterException class with a specified error message. Declaration public ClientNotAllowedInClusterException(string message) Parameters Type Name Description string message The message that describes the error. ClientNotAllowedInClusterException(Exception) Initializes a new instance of the ClientNotAllowedInClusterException class with a reference to the inner exception that is the cause of this exception. Declaration public ClientNotAllowedInClusterException(Exception innerException) Parameters Type Name Description Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. ClientNotAllowedInClusterException(string, Exception) Initializes a new instance of the ClientNotAllowedInClusterException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public ClientNotAllowedInClusterException(string message, Exception innerException) Parameters Type Name Description string message The message that describes the error. Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified."
  },
  "5.2.2/api/Hazelcast.Exceptions.ClientNotAllowedInClusterException.html": {
    "href": "5.2.2/api/Hazelcast.Exceptions.ClientNotAllowedInClusterException.html",
    "title": "Class ClientNotAllowedInClusterException | Hazelcast .NET Documentation",
    "keywords": "Class ClientNotAllowedInClusterException Represents the exception that is thrown when Inheritance object Exception HazelcastException ClientNotAllowedInClusterException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Namespace: Hazelcast.Exceptions Assembly: Hazelcast.Net.dll Syntax [Serializable] public sealed class ClientNotAllowedInClusterException : HazelcastException, ISerializable Constructors Name Description ClientNotAllowedInClusterException() Initializes a new instance of the ClientNotAllowedInClusterException class. ClientNotAllowedInClusterException(Exception) Initializes a new instance of the ClientNotAllowedInClusterException class with a reference to the inner exception that is the cause of this exception. ClientNotAllowedInClusterException(string, Exception) Initializes a new instance of the ClientNotAllowedInClusterException class with a specified error message and a reference to the inner exception that is the cause of this exception. ClientNotAllowedInClusterException(string) Initializes a new instance of the ClientNotAllowedInClusterException class with a specified error message."
  },
  "5.2.2/api/Hazelcast.Exceptions.ClientOfflineException.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Exceptions.ClientOfflineException.-ctor.html",
    "title": "Constructor ClientOfflineException | Hazelcast .NET Documentation",
    "keywords": "Constructor ClientOfflineException ClientOfflineException(ClientState) Initializes a new instance of the ClientOfflineException class. Declaration public ClientOfflineException(ClientState state) Parameters Type Name Description ClientState state The client state. ClientOfflineException(string) Initializes a new instance of the ClientOfflineException class with a specified error message. Declaration public ClientOfflineException(string message) Parameters Type Name Description string message The message that describes the error. ClientOfflineException(string, ClientState) Initializes a new instance of the ClientOfflineException class with a specified error message. Declaration public ClientOfflineException(string message, ClientState state) Parameters Type Name Description string message The message that describes the error. ClientState state The client state. ClientOfflineException(Exception) Initializes a new instance of the ClientOfflineException class with a reference to the inner exception that is the cause of this exception. Declaration public ClientOfflineException(Exception innerException) Parameters Type Name Description Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. ClientOfflineException(Exception, ClientState) Initializes a new instance of the ClientOfflineException class with a reference to the inner exception that is the cause of this exception. Declaration public ClientOfflineException(Exception innerException, ClientState state) Parameters Type Name Description Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. ClientState state The client state. ClientOfflineException(string, Exception) Initializes a new instance of the ClientOfflineException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public ClientOfflineException(string message, Exception innerException) Parameters Type Name Description string message The message that describes the error. Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. ClientOfflineException(string, Exception, ClientState) Initializes a new instance of the ClientOfflineException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public ClientOfflineException(string message, Exception innerException, ClientState state) Parameters Type Name Description string message The message that describes the error. Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. ClientState state The client state."
  },
  "5.2.2/api/Hazelcast.Exceptions.ClientOfflineException.GetObjectData.html": {
    "href": "5.2.2/api/Hazelcast.Exceptions.ClientOfflineException.GetObjectData.html",
    "title": "Method GetObjectData | Hazelcast .NET Documentation",
    "keywords": "Method GetObjectData GetObjectData(SerializationInfo, StreamingContext) Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context Overrides Exception.GetObjectData(SerializationInfo, StreamingContext)"
  },
  "5.2.2/api/Hazelcast.Exceptions.ClientOfflineException.html": {
    "href": "5.2.2/api/Hazelcast.Exceptions.ClientOfflineException.html",
    "title": "Class ClientOfflineException | Hazelcast .NET Documentation",
    "keywords": "Class ClientOfflineException Represents the exception that is thrown when the Hazelcast client is invoked but is not connected. Inheritance object Exception HazelcastException ClientOfflineException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Namespace: Hazelcast.Exceptions Assembly: Hazelcast.Net.dll Syntax [Serializable] public sealed class ClientOfflineException : HazelcastException, ISerializable Remarks The State property provides the ClientState of the client at the time the exception was thrown. The client may be either not connected at all, in which case retrying an operation will not succeed. Or, it may be temporarily disconnected and trying to reconnect, in which case retrying an operation may eventually succeed. Constructors Name Description ClientOfflineException(ClientState) Initializes a new instance of the ClientOfflineException class. ClientOfflineException(Exception, ClientState) Initializes a new instance of the ClientOfflineException class with a reference to the inner exception that is the cause of this exception. ClientOfflineException(Exception) Initializes a new instance of the ClientOfflineException class with a reference to the inner exception that is the cause of this exception. ClientOfflineException(string, ClientState) Initializes a new instance of the ClientOfflineException class with a specified error message. ClientOfflineException(string, Exception, ClientState) Initializes a new instance of the ClientOfflineException class with a specified error message and a reference to the inner exception that is the cause of this exception. ClientOfflineException(string, Exception) Initializes a new instance of the ClientOfflineException class with a specified error message and a reference to the inner exception that is the cause of this exception. ClientOfflineException(string) Initializes a new instance of the ClientOfflineException class with a specified error message. Properties Name Description State Gets the client state. Methods Name Description GetObjectData(SerializationInfo, StreamingContext)"
  },
  "5.2.2/api/Hazelcast.Exceptions.ClientOfflineException.State.html": {
    "href": "5.2.2/api/Hazelcast.Exceptions.ClientOfflineException.State.html",
    "title": "Property State | Hazelcast .NET Documentation",
    "keywords": "Property State State Gets the client state. Declaration public ClientState State { get; } Property Value Type Description ClientState"
  },
  "5.2.2/api/Hazelcast.Exceptions.ConnectionException.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Exceptions.ConnectionException.-ctor.html",
    "title": "Constructor ConnectionException | Hazelcast .NET Documentation",
    "keywords": "Constructor ConnectionException ConnectionException() Initializes a new instance of the ConnectionException class. Declaration public ConnectionException() ConnectionException(string) Initializes a new instance of the ConnectionException class with a specified error message. Declaration public ConnectionException(string message) Parameters Type Name Description string message The message that describes the error. ConnectionException(Exception) Initializes a new instance of the ConnectionException class with a reference to the inner exception that is the cause of this exception. Declaration public ConnectionException(Exception innerException) Parameters Type Name Description Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. ConnectionException(string, Exception) Initializes a new instance of the ConnectionException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public ConnectionException(string message, Exception innerException) Parameters Type Name Description string message The message that describes the error. Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified."
  },
  "5.2.2/api/Hazelcast.Exceptions.ConnectionException.html": {
    "href": "5.2.2/api/Hazelcast.Exceptions.ConnectionException.html",
    "title": "Class ConnectionException | Hazelcast .NET Documentation",
    "keywords": "Class ConnectionException Represents the exception that is thrown when connection to a member fails. Inheritance object Exception HazelcastException ConnectionException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Namespace: Hazelcast.Exceptions Assembly: Hazelcast.Net.dll Syntax [Serializable] public sealed class ConnectionException : HazelcastException, ISerializable Constructors Name Description ConnectionException() Initializes a new instance of the ConnectionException class. ConnectionException(Exception) Initializes a new instance of the ConnectionException class with a reference to the inner exception that is the cause of this exception. ConnectionException(string, Exception) Initializes a new instance of the ConnectionException class with a specified error message and a reference to the inner exception that is the cause of this exception. ConnectionException(string) Initializes a new instance of the ConnectionException class with a specified error message."
  },
  "5.2.2/api/Hazelcast.Exceptions.HazelcastException.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Exceptions.HazelcastException.-ctor.html",
    "title": "Constructor HazelcastException | Hazelcast .NET Documentation",
    "keywords": "Constructor HazelcastException HazelcastException() Initializes a new instance of the HazelcastException class. Declaration public HazelcastException() HazelcastException(string) Initializes a new instance of the HazelcastException class with a specified error message. Declaration public HazelcastException(string message) Parameters Type Name Description string message The message that describes the error. HazelcastException(Exception) Initializes a new instance of the HazelcastException class with a reference to the inner exception that is the cause of this exception. Declaration public HazelcastException(Exception innerException) Parameters Type Name Description Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. HazelcastException(string, Exception) Initializes a new instance of the HazelcastException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public HazelcastException(string message, Exception innerException) Parameters Type Name Description string message The message that describes the error. Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. HazelcastException(SerializationInfo, StreamingContext) Initializes a new instance of the HazelcastException class with serialized data. Declaration protected HazelcastException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The SerializationInfo that holds the serialized object data about the exception being thrown. StreamingContext context The StreamingContext that contains contextual information about the source or destination."
  },
  "5.2.2/api/Hazelcast.Exceptions.HazelcastException.html": {
    "href": "5.2.2/api/Hazelcast.Exceptions.HazelcastException.html",
    "title": "Class HazelcastException | Hazelcast .NET Documentation",
    "keywords": "Class HazelcastException Represents the generic exception that is throw when Hazelcast goes south. Inheritance object Exception HazelcastException ConfigurationException ServiceFactoryException AuthenticationException ClientNotAllowedInClusterException ClientOfflineException ConnectionException TargetUnreachableException TaskTimeoutException RemoteException SerializationException HazelcastSqlException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Hazelcast.Exceptions Assembly: Hazelcast.Net.dll Syntax [Serializable] public class HazelcastException : Exception, ISerializable Constructors Name Description HazelcastException() Initializes a new instance of the HazelcastException class. HazelcastException(Exception) Initializes a new instance of the HazelcastException class with a reference to the inner exception that is the cause of this exception. HazelcastException(SerializationInfo, StreamingContext) Initializes a new instance of the HazelcastException class with serialized data. HazelcastException(string, Exception) Initializes a new instance of the HazelcastException class with a specified error message and a reference to the inner exception that is the cause of this exception. HazelcastException(string) Initializes a new instance of the HazelcastException class with a specified error message."
  },
  "5.2.2/api/Hazelcast.Exceptions.html": {
    "href": "5.2.2/api/Hazelcast.Exceptions.html",
    "title": "Namespace Hazelcast.Exceptions | Hazelcast .NET Documentation",
    "keywords": "Namespace Hazelcast.Exceptions Classes AuthenticationException Represents the exception that is thrown when authentication fails. ClientNotAllowedInClusterException Represents the exception that is thrown when ClientOfflineException Represents the exception that is thrown when the Hazelcast client is invoked but is not connected. ConnectionException Represents the exception that is thrown when connection to a member fails. HazelcastException Represents the generic exception that is throw when Hazelcast goes south. TargetDisconnectedException Represents the exception that is thrown when the target of an invocation disconnects. TargetUnreachableException Represents the exception that is thrown when the target of an invocation is not reachable. TaskTimeoutException Represents the exception that is throw when an async task times out."
  },
  "5.2.2/api/Hazelcast.Exceptions.TargetDisconnectedException.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Exceptions.TargetDisconnectedException.-ctor.html",
    "title": "Constructor TargetDisconnectedException | Hazelcast .NET Documentation",
    "keywords": "Constructor TargetDisconnectedException TargetDisconnectedException() Initializes a new instance of the ConfigurationException class. Declaration public TargetDisconnectedException() TargetDisconnectedException(string) Initializes a new instance of the TargetDisconnectedException class with a specified error message. Declaration public TargetDisconnectedException(string message) Parameters Type Name Description string message The message that describes the error. TargetDisconnectedException(Exception) Initializes a new instance of the TargetDisconnectedException class with a reference to the inner exception that is the cause of this exception. Declaration public TargetDisconnectedException(Exception innerException) Parameters Type Name Description Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. TargetDisconnectedException(string, Exception) Initializes a new instance of the TargetDisconnectedException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public TargetDisconnectedException(string message, Exception innerException) Parameters Type Name Description string message The message that describes the error. Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified."
  },
  "5.2.2/api/Hazelcast.Exceptions.TargetDisconnectedException.html": {
    "href": "5.2.2/api/Hazelcast.Exceptions.TargetDisconnectedException.html",
    "title": "Class TargetDisconnectedException | Hazelcast .NET Documentation",
    "keywords": "Class TargetDisconnectedException Represents the exception that is thrown when the target of an invocation disconnects. Inheritance object Exception HazelcastException TargetUnreachableException TargetDisconnectedException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Namespace: Hazelcast.Exceptions Assembly: Hazelcast.Net.dll Syntax [Serializable] public sealed class TargetDisconnectedException : TargetUnreachableException, ISerializable Constructors Name Description TargetDisconnectedException() Initializes a new instance of the ConfigurationException class. TargetDisconnectedException(Exception) Initializes a new instance of the TargetDisconnectedException class with a reference to the inner exception that is the cause of this exception. TargetDisconnectedException(string, Exception) Initializes a new instance of the TargetDisconnectedException class with a specified error message and a reference to the inner exception that is the cause of this exception. TargetDisconnectedException(string) Initializes a new instance of the TargetDisconnectedException class with a specified error message."
  },
  "5.2.2/api/Hazelcast.Exceptions.TargetUnreachableException.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Exceptions.TargetUnreachableException.-ctor.html",
    "title": "Constructor TargetUnreachableException | Hazelcast .NET Documentation",
    "keywords": "Constructor TargetUnreachableException TargetUnreachableException() Initializes a new instance of the TargetUnreachableException class. Declaration public TargetUnreachableException() TargetUnreachableException(string) Initializes a new instance of the TargetUnreachableException class with a specified error message. Declaration public TargetUnreachableException(string message) Parameters Type Name Description string message The message that describes the error. TargetUnreachableException(Exception) Initializes a new instance of the TargetUnreachableException class with a reference to the inner exception that is the cause of this exception. Declaration public TargetUnreachableException(Exception innerException) Parameters Type Name Description Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. TargetUnreachableException(string, Exception) Initializes a new instance of the TargetUnreachableException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public TargetUnreachableException(string message, Exception innerException) Parameters Type Name Description string message The message that describes the error. Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. TargetUnreachableException(SerializationInfo, StreamingContext) Initializes a new instance of the TargetUnreachableException class with serialized data. Declaration protected TargetUnreachableException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The SerializationInfo that holds the serialized object data about the exception being thrown. StreamingContext context The StreamingContext that contains contextual information about the source or destination."
  },
  "5.2.2/api/Hazelcast.Exceptions.TargetUnreachableException.html": {
    "href": "5.2.2/api/Hazelcast.Exceptions.TargetUnreachableException.html",
    "title": "Class TargetUnreachableException | Hazelcast .NET Documentation",
    "keywords": "Class TargetUnreachableException Represents the exception that is thrown when the target of an invocation is not reachable. Inheritance object Exception HazelcastException TargetUnreachableException TargetDisconnectedException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Hazelcast.Exceptions Assembly: Hazelcast.Net.dll Syntax [Serializable] public class TargetUnreachableException : HazelcastException, ISerializable Constructors Name Description TargetUnreachableException() Initializes a new instance of the TargetUnreachableException class. TargetUnreachableException(Exception) Initializes a new instance of the TargetUnreachableException class with a reference to the inner exception that is the cause of this exception. TargetUnreachableException(SerializationInfo, StreamingContext) Initializes a new instance of the TargetUnreachableException class with serialized data. TargetUnreachableException(string, Exception) Initializes a new instance of the TargetUnreachableException class with a specified error message and a reference to the inner exception that is the cause of this exception. TargetUnreachableException(string) Initializes a new instance of the TargetUnreachableException class with a specified error message."
  },
  "5.2.2/api/Hazelcast.Exceptions.TaskTimeoutException.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Exceptions.TaskTimeoutException.-ctor.html",
    "title": "Constructor TaskTimeoutException | Hazelcast .NET Documentation",
    "keywords": "Constructor TaskTimeoutException TaskTimeoutException(string, Task) Initializes a new instance of the TaskTimeoutException class with a specified error message and the task that timed out. Declaration public TaskTimeoutException(string message, Task task) Parameters Type Name Description string message The message that describes the error. Task task The task that timed out. TaskTimeoutException() Initializes a new instance of the TaskTimeoutException. Declaration public TaskTimeoutException() Remarks This constructor method is provided to comply with CA1032 and ensure that the exception class is a good .NET citizen. It is not meant to be used in code. TaskTimeoutException(string) Initializes a new instance of the TaskTimeoutException with a specified error message. Declaration public TaskTimeoutException(string message) Parameters Type Name Description string message The message that describes the error. Remarks This constructor method is provided to comply with CA1032 and ensure that the exception class is a good .NET citizen. It is not meant to be used in code. TaskTimeoutException(string, Exception) Initializes a new instance of the TaskTimeoutException with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public TaskTimeoutException(string message, Exception innerException) Parameters Type Name Description string message The message that describes the error. Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. Remarks This constructor method is provided to comply with CA1032 and ensure that the exception class is a good .NET citizen. It is not meant to be used in code."
  },
  "5.2.2/api/Hazelcast.Exceptions.TaskTimeoutException.html": {
    "href": "5.2.2/api/Hazelcast.Exceptions.TaskTimeoutException.html",
    "title": "Class TaskTimeoutException | Hazelcast .NET Documentation",
    "keywords": "Class TaskTimeoutException Represents the exception that is throw when an async task times out. Inheritance object Exception HazelcastException TaskTimeoutException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Namespace: Hazelcast.Exceptions Assembly: Hazelcast.Net.dll Syntax [Serializable] public sealed class TaskTimeoutException : HazelcastException, ISerializable Constructors Name Description TaskTimeoutException() Initializes a new instance of the TaskTimeoutException. TaskTimeoutException(string, Exception) Initializes a new instance of the TaskTimeoutException with a specified error message and a reference to the inner exception that is the cause of this exception. TaskTimeoutException(string, Task) Initializes a new instance of the TaskTimeoutException class with a specified error message and the task that timed out. TaskTimeoutException(string) Initializes a new instance of the TaskTimeoutException with a specified error message. Properties Name Description Task Gets the task that timed out (and may still be executing)."
  },
  "5.2.2/api/Hazelcast.Exceptions.TaskTimeoutException.Task.html": {
    "href": "5.2.2/api/Hazelcast.Exceptions.TaskTimeoutException.Task.html",
    "title": "Property Task | Hazelcast .NET Documentation",
    "keywords": "Property Task Task Gets the task that timed out (and may still be executing). Declaration public Task Task { get; } Property Value Type Description Task"
  },
  "5.2.2/api/Hazelcast.HazelcastClientEventHandlers.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastClientEventHandlers.html",
    "title": "Class HazelcastClientEventHandlers | Hazelcast .NET Documentation",
    "keywords": "Class HazelcastClientEventHandlers Represents the client events. Inheritance object EventHandlersBase<IHazelcastClientEventHandler> HazelcastClientEventHandlers Implements IEnumerable<IHazelcastClientEventHandler> IEnumerable Inherited Members EventHandlersBase<IHazelcastClientEventHandler>.GetEnumerator() EventHandlersBase<IHazelcastClientEventHandler>.Remove(IHazelcastClientEventHandler) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast Assembly: Hazelcast.Net.dll Syntax public sealed class HazelcastClientEventHandlers : EventHandlersBase<IHazelcastClientEventHandler>, IEnumerable<IHazelcastClientEventHandler>, IEnumerable Remarks Handlers for events can be synchronous or asynchronous. Asynchronous handlers are defined by an Action{IHazelcastClient, TArgs} whereas... Methods Name Description MembersUpdated(Action<IHazelcastClient, MembersUpdatedEventArgs>) Adds a handler which runs when members are updated MembersUpdated(Func<IHazelcastClient, MembersUpdatedEventArgs, ValueTask>) Adds a handler which runs when a member is added. ObjectCreated(Action<IHazelcastClient, DistributedObjectCreatedEventArgs>) Adds a handler which runs when a distributed object is created. ObjectCreated(Func<IHazelcastClient, DistributedObjectCreatedEventArgs, ValueTask>) Adds a handler which runs when a distributed object is created. ObjectDestroyed(Action<IHazelcastClient, DistributedObjectDestroyedEventArgs>) Adds a handler which runs when a distributed object is destroyed. ObjectDestroyed(Func<IHazelcastClient, DistributedObjectDestroyedEventArgs, ValueTask>) Adds a handler which runs when a distributed object is destroyed. PartitionLost(Action<IHazelcastClient, PartitionLostEventArgs>) Adds a handler which runs when a partition is lost. PartitionLost(Func<IHazelcastClient, PartitionLostEventArgs, ValueTask>) Adds a handler which runs when a partition is lost. PartitionsUpdated(Action<IHazelcastClient, EventArgs>) Adds a handler which runs when partitions are updated. PartitionsUpdated(Func<IHazelcastClient, EventArgs, ValueTask>) Adds a handler which runs when partitions are updated. StateChanged(Action<IHazelcastClient, StateChangedEventArgs>) Adds a handler which runs when the client state changes. StateChanged(Func<IHazelcastClient, StateChangedEventArgs, ValueTask>) Adds a handler which runs when the client state changes."
  },
  "5.2.2/api/Hazelcast.HazelcastClientEventHandlers.MembersUpdated.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastClientEventHandlers.MembersUpdated.html",
    "title": "Method MembersUpdated | Hazelcast .NET Documentation",
    "keywords": "Method MembersUpdated MembersUpdated(Action<IHazelcastClient, MembersUpdatedEventArgs>) Adds a handler which runs when members are updated Declaration public HazelcastClientEventHandlers MembersUpdated(Action<IHazelcastClient, MembersUpdatedEventArgs> handler) Parameters Type Name Description Action<IHazelcastClient, MembersUpdatedEventArgs> handler The handler. Returns Type Description HazelcastClientEventHandlers The handlers. MembersUpdated(Func<IHazelcastClient, MembersUpdatedEventArgs, ValueTask>) Adds a handler which runs when a member is added. Declaration public HazelcastClientEventHandlers MembersUpdated(Func<IHazelcastClient, MembersUpdatedEventArgs, ValueTask> handler) Parameters Type Name Description Func<IHazelcastClient, MembersUpdatedEventArgs, ValueTask> handler The handler. Returns Type Description HazelcastClientEventHandlers The handlers."
  },
  "5.2.2/api/Hazelcast.HazelcastClientEventHandlers.ObjectCreated.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastClientEventHandlers.ObjectCreated.html",
    "title": "Method ObjectCreated | Hazelcast .NET Documentation",
    "keywords": "Method ObjectCreated ObjectCreated(Action<IHazelcastClient, DistributedObjectCreatedEventArgs>) Adds a handler which runs when a distributed object is created. Declaration public HazelcastClientEventHandlers ObjectCreated(Action<IHazelcastClient, DistributedObjectCreatedEventArgs> handler) Parameters Type Name Description Action<IHazelcastClient, DistributedObjectCreatedEventArgs> handler The handler. Returns Type Description HazelcastClientEventHandlers The handlers. ObjectCreated(Func<IHazelcastClient, DistributedObjectCreatedEventArgs, ValueTask>) Adds a handler which runs when a distributed object is created. Declaration public HazelcastClientEventHandlers ObjectCreated(Func<IHazelcastClient, DistributedObjectCreatedEventArgs, ValueTask> handler) Parameters Type Name Description Func<IHazelcastClient, DistributedObjectCreatedEventArgs, ValueTask> handler The handler. Returns Type Description HazelcastClientEventHandlers The handlers."
  },
  "5.2.2/api/Hazelcast.HazelcastClientEventHandlers.ObjectDestroyed.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastClientEventHandlers.ObjectDestroyed.html",
    "title": "Method ObjectDestroyed | Hazelcast .NET Documentation",
    "keywords": "Method ObjectDestroyed ObjectDestroyed(Action<IHazelcastClient, DistributedObjectDestroyedEventArgs>) Adds a handler which runs when a distributed object is destroyed. Declaration public HazelcastClientEventHandlers ObjectDestroyed(Action<IHazelcastClient, DistributedObjectDestroyedEventArgs> handler) Parameters Type Name Description Action<IHazelcastClient, DistributedObjectDestroyedEventArgs> handler The handler. Returns Type Description HazelcastClientEventHandlers The handlers. ObjectDestroyed(Func<IHazelcastClient, DistributedObjectDestroyedEventArgs, ValueTask>) Adds a handler which runs when a distributed object is destroyed. Declaration public HazelcastClientEventHandlers ObjectDestroyed(Func<IHazelcastClient, DistributedObjectDestroyedEventArgs, ValueTask> handler) Parameters Type Name Description Func<IHazelcastClient, DistributedObjectDestroyedEventArgs, ValueTask> handler The handler. Returns Type Description HazelcastClientEventHandlers The handlers."
  },
  "5.2.2/api/Hazelcast.HazelcastClientEventHandlers.PartitionLost.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastClientEventHandlers.PartitionLost.html",
    "title": "Method PartitionLost | Hazelcast .NET Documentation",
    "keywords": "Method PartitionLost PartitionLost(Action<IHazelcastClient, PartitionLostEventArgs>) Adds a handler which runs when a partition is lost. Declaration public HazelcastClientEventHandlers PartitionLost(Action<IHazelcastClient, PartitionLostEventArgs> handler) Parameters Type Name Description Action<IHazelcastClient, PartitionLostEventArgs> handler The handler. Returns Type Description HazelcastClientEventHandlers The handlers. PartitionLost(Func<IHazelcastClient, PartitionLostEventArgs, ValueTask>) Adds a handler which runs when a partition is lost. Declaration public HazelcastClientEventHandlers PartitionLost(Func<IHazelcastClient, PartitionLostEventArgs, ValueTask> handler) Parameters Type Name Description Func<IHazelcastClient, PartitionLostEventArgs, ValueTask> handler The handler. Returns Type Description HazelcastClientEventHandlers The handlers."
  },
  "5.2.2/api/Hazelcast.HazelcastClientEventHandlers.PartitionsUpdated.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastClientEventHandlers.PartitionsUpdated.html",
    "title": "Method PartitionsUpdated | Hazelcast .NET Documentation",
    "keywords": "Method PartitionsUpdated PartitionsUpdated(Action<IHazelcastClient, EventArgs>) Adds a handler which runs when partitions are updated. Declaration public HazelcastClientEventHandlers PartitionsUpdated(Action<IHazelcastClient, EventArgs> handler) Parameters Type Name Description Action<IHazelcastClient, EventArgs> handler The handler. Returns Type Description HazelcastClientEventHandlers The handlers. PartitionsUpdated(Func<IHazelcastClient, EventArgs, ValueTask>) Adds a handler which runs when partitions are updated. Declaration public HazelcastClientEventHandlers PartitionsUpdated(Func<IHazelcastClient, EventArgs, ValueTask> handler) Parameters Type Name Description Func<IHazelcastClient, EventArgs, ValueTask> handler The handler. Returns Type Description HazelcastClientEventHandlers The handlers."
  },
  "5.2.2/api/Hazelcast.HazelcastClientEventHandlers.StateChanged.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastClientEventHandlers.StateChanged.html",
    "title": "Method StateChanged | Hazelcast .NET Documentation",
    "keywords": "Method StateChanged StateChanged(Action<IHazelcastClient, StateChangedEventArgs>) Adds a handler which runs when the client state changes. Declaration public HazelcastClientEventHandlers StateChanged(Action<IHazelcastClient, StateChangedEventArgs> handler) Parameters Type Name Description Action<IHazelcastClient, StateChangedEventArgs> handler The handler. Returns Type Description HazelcastClientEventHandlers The handlers. StateChanged(Func<IHazelcastClient, StateChangedEventArgs, ValueTask>) Adds a handler which runs when the client state changes. Declaration public HazelcastClientEventHandlers StateChanged(Func<IHazelcastClient, StateChangedEventArgs, ValueTask> handler) Parameters Type Name Description Func<IHazelcastClient, StateChangedEventArgs, ValueTask> handler The handler. Returns Type Description HazelcastClientEventHandlers The handlers."
  },
  "5.2.2/api/Hazelcast.HazelcastClientFactory.GetNewStartingClient.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastClientFactory.GetNewStartingClient.html",
    "title": "Method GetNewStartingClient | Hazelcast .NET Documentation",
    "keywords": "Method GetNewStartingClient GetNewStartingClient(CancellationToken) Gets a new starting IHazelcastClient instance with automatic options. Declaration [Obsolete(\"The method is obsolete. Use other overloads.\", true)] public static HazelcastClientStart GetNewStartingClient(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken A optional cancellation token. Returns Type Description HazelcastClientStart A HazelcastClientStart instance which exposes the IHazelcastClient itself, along with a Task representing the start operation. Remarks The IHazelcastClient instance is starting, but not started yet. Its start operation is represented by the returned Task, which will complete when the client has started, or when starting has failed. Trying to use the client before the start Task has completed can have unspecified results, including throwing exceptions. Make sure that the start Task has actually completed before using the client. In any case, the start Task must be awaited, as it may fail with an exception that must be observed. Options are built via the method. By default, the client connection timeout is infinite. If this method cannot establish a connection to a cluster at the configured addresses, it may appear to hang as it retries forever. You may want to configure a timeout via the options.Networking.ConnectionRetry.ClusterConnectionTimeoutMilliseconds configuration option. GetNewStartingClient(Action<HazelcastOptions>, CancellationToken) Gets a new starting IHazelcastClient instance with configured options. Declaration public static HazelcastClientStart GetNewStartingClient(Action<HazelcastOptions> configure, CancellationToken cancellationToken = default) Parameters Type Name Description Action<HazelcastOptions> configure A HazelcastOptions configuration delegate. CancellationToken cancellationToken A optional cancellation token. Returns Type Description HazelcastClientStart A HazelcastClientStart instance which exposes the IHazelcastClient itself, along with a Task representing the start operation. Remarks The IHazelcastClient instance is starting, but not started yet. Its start operation is represented by the returned Task, which will complete when the client has started, or when starting has failed. Trying to use the client before the start Task has completed can have unspecified results, including throwing exceptions. Make sure that the start Task has actually completed before using the client. In any case, the start Task must be awaited, as it may fail with an exception that must be observed. Options are built via the method and passed to the configure method, where they can be refined and adjusted, before being used to create the client. By default, the client connection timeout is infinite. If this method cannot establish a connection to a cluster at the configured addresses, it may appear to hang as it retries forever. You may want to configure a timeout via the options.Networking.ConnectionRetry.ClusterConnectionTimeoutMilliseconds configuration option. GetNewStartingClient(HazelcastOptions, CancellationToken) Gets a new starting IHazelcastClient instance with options. Declaration public static HazelcastClientStart GetNewStartingClient(HazelcastOptions options, CancellationToken cancellationToken = default) Parameters Type Name Description HazelcastOptions options Options. CancellationToken cancellationToken A optional cancellation token. Returns Type Description HazelcastClientStart A HazelcastClientStart instance which exposes the IHazelcastClient itself, along with a Task representing the start operation. Remarks The IHazelcastClient instance is starting, but not started yet. Its start operation is represented by the returned Task, which will complete when the client has started, or when starting has failed. Trying to use the client before the start Task has completed can have unspecified results, including throwing exceptions. Make sure that the start Task has actually completed before using the client. In any case, the start Task must be awaited, as it may fail with an exception that must be observed. By default, the client connection timeout is infinite. If this method cannot establish a connection to a cluster at the configured addresses, it may appear to hang as it retries forever. You may want to configure a timeout via the options.Networking.ConnectionRetry.ClusterConnectionTimeoutMilliseconds configuration option."
  },
  "5.2.2/api/Hazelcast.HazelcastClientFactory.GetNewStartingFailoverClient.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastClientFactory.GetNewStartingFailoverClient.html",
    "title": "Method GetNewStartingFailoverClient | Hazelcast .NET Documentation",
    "keywords": "Method GetNewStartingFailoverClient GetNewStartingFailoverClient(Action<HazelcastFailoverOptions>, CancellationToken) Gets a new starting IHazelcastClient instance in failover mode with configured options. Declaration public static HazelcastClientStart GetNewStartingFailoverClient(Action<HazelcastFailoverOptions> configure, CancellationToken cancellationToken = default) Parameters Type Name Description Action<HazelcastFailoverOptions> configure A HazelcastFailoverOptions configuration delegate. CancellationToken cancellationToken A optional cancellation token. Returns Type Description HazelcastClientStart A HazelcastClientStart instance which exposes the IHazelcastClient itself, along with a Task representing the start operation. Remarks The IHazelcastClient instance is starting, but not started yet. Its start operation is represented by the returned Task, which will complete when the client has started, or when starting has failed. Trying to use the client before the start Task has completed can have unspecified results, including throwing exceptions. Make sure that the start Task has actually completed before using the client. In any case, the start Task must be awaited, as it may fail with an exception that must be observed. Options are built via the method and passed to the configure method, where they can be refined and adjusted, before being used to create the client. By default, the client connection timeout is 120 seconds. If this method cannot establish a connection to a cluster at the configured addresses, it may do failover. You may want to configure a timeout via the options.Networking.ConnectionRetry.ClusterConnectionTimeoutMilliseconds configuration option. GetNewStartingFailoverClient(HazelcastFailoverOptions, CancellationToken) Gets a new starting IHazelcastClient instance in failover mode with options. Declaration public static HazelcastClientStart GetNewStartingFailoverClient(HazelcastFailoverOptions options, CancellationToken cancellationToken = default) Parameters Type Name Description HazelcastFailoverOptions options Options. CancellationToken cancellationToken A optional cancellation token. Returns Type Description HazelcastClientStart A HazelcastClientStart instance which exposes the IHazelcastClient itself, along with a Task representing the start operation. Remarks The IHazelcastClient instance is starting, but not started yet. Its start operation is represented by the returned Task, which will complete when the client has started, or when starting has failed. Trying to use the client before the start Task has completed can have unspecified results, including throwing exceptions. Make sure that the start Task has actually completed before using the client. In any case, the start Task must be awaited, as it may fail with an exception that must be observed. By default, the client connection timeout is 120 seconds. If this method cannot establish a connection to a cluster at the configured addresses, it may do failover. You may want to configure a timeout via the options.Networking.ConnectionRetry.ClusterConnectionTimeoutMilliseconds configuration option."
  },
  "5.2.2/api/Hazelcast.HazelcastClientFactory.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastClientFactory.html",
    "title": "Class HazelcastClientFactory | Hazelcast .NET Documentation",
    "keywords": "Class HazelcastClientFactory Creates IHazelcastClient instances. The Hazelcast client starts and creates clients from configuration options. See the general configuration documentation for details on how to obtain these options. The factory is the only way to obtain new clients. Inheritance object HazelcastClientFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast Assembly: Hazelcast.Net.dll Syntax public static class HazelcastClientFactory Methods Name Description GetNewStartingClient(HazelcastOptions, CancellationToken) Gets a new starting IHazelcastClient instance with options. GetNewStartingClient(Action<HazelcastOptions>, CancellationToken) Gets a new starting IHazelcastClient instance with configured options. GetNewStartingClient(CancellationToken) Gets a new starting IHazelcastClient instance with automatic options. GetNewStartingFailoverClient(HazelcastFailoverOptions, CancellationToken) Gets a new starting IHazelcastClient instance in failover mode with options. GetNewStartingFailoverClient(Action<HazelcastFailoverOptions>, CancellationToken) Gets a new starting IHazelcastClient instance in failover mode with configured options. StartNewClientAsync(HazelcastOptions, CancellationToken) Starts a new IHazelcastClient instance with options. StartNewClientAsync(Action<HazelcastOptions>, CancellationToken) Starts a new IHazelcastClient instance with configured options. StartNewClientAsync(CancellationToken) Starts a new IHazelcastClient instance with automatic options. StartNewFailoverClientAsync(HazelcastFailoverOptions, CancellationToken) Starts a new IHazelcastClient in failover mode instance with options. StartNewFailoverClientAsync(Action<HazelcastFailoverOptions>, CancellationToken) Starts a new IHazelcastClient instance in failover mode with configured options."
  },
  "5.2.2/api/Hazelcast.HazelcastClientFactory.StartNewClientAsync.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastClientFactory.StartNewClientAsync.html",
    "title": "Method StartNewClientAsync | Hazelcast .NET Documentation",
    "keywords": "Method StartNewClientAsync StartNewClientAsync(CancellationToken) Starts a new IHazelcastClient instance with automatic options. Declaration [Obsolete(\"The method is obsolete. Use other overloads.\", true)] public static ValueTask<IHazelcastClient> StartNewClientAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken An optional cancellation token. Returns Type Description ValueTask<IHazelcastClient> A new IHazelcastClient instance. Remarks Options are built via the method. By default, the client connection timeout is infinite. If this method cannot establish a connection to a cluster at the configured addresses, it may appear to hang as it retries forever. You may want to configure a timeout via the options.Networking.ConnectionRetry.ClusterConnectionTimeoutMilliseconds configuration option. StartNewClientAsync(Action<HazelcastOptions>, CancellationToken) Starts a new IHazelcastClient instance with configured options. Declaration public static ValueTask<IHazelcastClient> StartNewClientAsync(Action<HazelcastOptions> configure, CancellationToken cancellationToken = default) Parameters Type Name Description Action<HazelcastOptions> configure A HazelcastOptions configuration delegate. CancellationToken cancellationToken A optional cancellation token. Returns Type Description ValueTask<IHazelcastClient> A new IHazelcastClient instance. Remarks Options are built via the method and passed to the configure method, where they can be refined and adjusted, before being used to create the client. By default, the client connection timeout is infinite. If this method cannot establish a connection to a cluster at the configured addresses, it may appear to hang as it retries forever. You may want to configure a timeout via the options.Networking.ConnectionRetry.ClusterConnectionTimeoutMilliseconds configuration option. StartNewClientAsync(HazelcastOptions, CancellationToken) Starts a new IHazelcastClient instance with options. Declaration public static ValueTask<IHazelcastClient> StartNewClientAsync(HazelcastOptions options, CancellationToken cancellationToken = default) Parameters Type Name Description HazelcastOptions options Options. CancellationToken cancellationToken A optional cancellation token. Returns Type Description ValueTask<IHazelcastClient> A new IHazelcastClient instance. Remarks By default, the client connection timeout is infinite. If this method cannot establish a connection to a cluster at the configured addresses, it may appear to hang as it retries forever. You may want to configure a timeout via the options.Networking.ConnectionRetry.ClusterConnectionTimeoutMilliseconds configuration option."
  },
  "5.2.2/api/Hazelcast.HazelcastClientFactory.StartNewFailoverClientAsync.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastClientFactory.StartNewFailoverClientAsync.html",
    "title": "Method StartNewFailoverClientAsync | Hazelcast .NET Documentation",
    "keywords": "Method StartNewFailoverClientAsync StartNewFailoverClientAsync(Action<HazelcastFailoverOptions>, CancellationToken) Starts a new IHazelcastClient instance in failover mode with configured options. Declaration public static ValueTask<IHazelcastClient> StartNewFailoverClientAsync(Action<HazelcastFailoverOptions> configure, CancellationToken cancellationToken = default) Parameters Type Name Description Action<HazelcastFailoverOptions> configure A HazelcastFailoverOptions configuration delegate. CancellationToken cancellationToken A optional cancellation token. Returns Type Description ValueTask<IHazelcastClient> A new IHazelcastClient instance. Remarks Options are built via the method and passed to the configure method, where they can be refined and adjusted, before being used to create the client. By default, the client connection timeout is 120 seconds. If this method cannot establish a connection to a cluster at the configured addresses, it may do failover. You may want to configure a timeout via the options.Networking.ConnectionRetry.ClusterConnectionTimeoutMilliseconds configuration option. StartNewFailoverClientAsync(HazelcastFailoverOptions, CancellationToken) Starts a new IHazelcastClient in failover mode instance with options. Declaration public static ValueTask<IHazelcastClient> StartNewFailoverClientAsync(HazelcastFailoverOptions options, CancellationToken cancellationToken = default) Parameters Type Name Description HazelcastFailoverOptions options Options. CancellationToken cancellationToken A optional cancellation token. Returns Type Description ValueTask<IHazelcastClient> A new IHazelcastClient instance. Remarks By default, the client connection timeout is 120 seconds. If this method cannot establish a connection to a cluster at the configured addresses, it may do failover. You may want to configure a timeout via the options.Networking.ConnectionRetry.ClusterConnectionTimeoutMilliseconds configuration option."
  },
  "5.2.2/api/Hazelcast.HazelcastClientStart.Client.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastClientStart.Client.html",
    "title": "Property Client | Hazelcast .NET Documentation",
    "keywords": "Property Client Client Gets the IHazelcastClient. Declaration public IHazelcastClient Client { get; } Property Value Type Description IHazelcastClient"
  },
  "5.2.2/api/Hazelcast.HazelcastClientStart.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastClientStart.html",
    "title": "Struct HazelcastClientStart | Hazelcast .NET Documentation",
    "keywords": "Struct HazelcastClientStart Represents a starting IHazelcastClient. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Hazelcast Assembly: Hazelcast.Net.dll Syntax public readonly struct HazelcastClientStart Properties Name Description Client Gets the IHazelcastClient. Task Gets the task which will complete when the client has started, or fail if the client fails to start."
  },
  "5.2.2/api/Hazelcast.HazelcastClientStart.Task.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastClientStart.Task.html",
    "title": "Property Task | Hazelcast .NET Documentation",
    "keywords": "Property Task Task Gets the task which will complete when the client has started, or fail if the client fails to start. Declaration public Task Task { get; } Property Value Type Description Task"
  },
  "5.2.2/api/Hazelcast.HazelcastFailoverOptions.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastFailoverOptions.-ctor.html",
    "title": "Constructor HazelcastFailoverOptions | Hazelcast .NET Documentation",
    "keywords": "Constructor HazelcastFailoverOptions HazelcastFailoverOptions() Initializes a new instance of the HazelcastFailoverOptions class. Declaration public HazelcastFailoverOptions()"
  },
  "5.2.2/api/Hazelcast.HazelcastFailoverOptions.Clients.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastFailoverOptions.Clients.html",
    "title": "Property Clients | Hazelcast .NET Documentation",
    "keywords": "Property Clients Clients Gets the list of cluster in the failover setup. Declaration public IList<HazelcastOptions> Clients { get; } Property Value Type Description IList<HazelcastOptions>"
  },
  "5.2.2/api/Hazelcast.HazelcastFailoverOptions.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastFailoverOptions.html",
    "title": "Class HazelcastFailoverOptions | Hazelcast .NET Documentation",
    "keywords": "Class HazelcastFailoverOptions Represents the Hazelcast client failover options. Inheritance object HazelcastOptionsBase HazelcastFailoverOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast Assembly: Hazelcast.Net.dll Syntax public sealed class HazelcastFailoverOptions : HazelcastOptionsBase Remarks The client initially tries to connect to the first cluster of the Clients list, then tries each cluster in the list in order, and cycle the list at most TryCount times before failing and shutting down. When the client gets disconnected, it first tries to reconnect to the current cluster, then tries each cluster in the list in order, and cycle the list at most TryCount times before failing and shutting down. So if the Clients list is (A, B, C) and client is disconnected from B and TryCount is 2, it will try C, B, A, C, B, A in this order and then shutdown. The retry strategy for each cluster is configured with a 2 minutes timeout, i.e. the client will try to connect to each cluster for at most 2 minutes before failing. Constructors Name Description HazelcastFailoverOptions() Initializes a new instance of the HazelcastFailoverOptions class. Properties Name Description Clients Gets the list of cluster in the failover setup. ServiceProvider Gets the IServiceProvider. TryCount Gets or sets the number of times that the client will try to reconnect to each cluster in the failover setup before shutting down."
  },
  "5.2.2/api/Hazelcast.HazelcastFailoverOptions.ServiceProvider.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastFailoverOptions.ServiceProvider.html",
    "title": "Property ServiceProvider | Hazelcast .NET Documentation",
    "keywords": "Property ServiceProvider ServiceProvider Gets the IServiceProvider. Declaration public override IServiceProvider ServiceProvider { get; } Property Value Type Description IServiceProvider The service provider. Overrides HazelcastOptionsBase.ServiceProvider Remarks In dependency-injection scenario the service provider may be available, so that service factories can return injected services. In non-dependency-injection scenario, this returns null."
  },
  "5.2.2/api/Hazelcast.HazelcastFailoverOptions.TryCount.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastFailoverOptions.TryCount.html",
    "title": "Property TryCount | Hazelcast .NET Documentation",
    "keywords": "Property TryCount TryCount Gets or sets the number of times that the client will try to reconnect to each cluster in the failover setup before shutting down. Declaration public int TryCount { get; set; } Property Value Type Description int Remarks Default try count is infinite."
  },
  "5.2.2/api/Hazelcast.HazelcastFailoverOptionsBuilder.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastFailoverOptionsBuilder.html",
    "title": "Class HazelcastFailoverOptionsBuilder | Hazelcast .NET Documentation",
    "keywords": "Class HazelcastFailoverOptionsBuilder Provides a way to build HazelcastOptions instances in a fluent way. Inheritance object HazelcastOptionsBuilderBase<HazelcastFailoverOptions, HazelcastFailoverOptionsBuilder> HazelcastFailoverOptionsBuilder Inherited Members HazelcastOptionsBuilderBase<HazelcastFailoverOptions, HazelcastFailoverOptionsBuilder>.With(string[], IDictionary<string, string>) HazelcastOptionsBuilderBase<HazelcastFailoverOptions, HazelcastFailoverOptionsBuilder>.WithDefault(string, string) HazelcastOptionsBuilderBase<HazelcastFailoverOptions, HazelcastFailoverOptionsBuilder>.WithDefault(string, object) HazelcastOptionsBuilderBase<HazelcastFailoverOptions, HazelcastFailoverOptionsBuilder>.With(string, string) HazelcastOptionsBuilderBase<HazelcastFailoverOptions, HazelcastFailoverOptionsBuilder>.With(string, object) HazelcastOptionsBuilderBase<HazelcastFailoverOptions, HazelcastFailoverOptionsBuilder>.WithFilePath(string) HazelcastOptionsBuilderBase<HazelcastFailoverOptions, HazelcastFailoverOptionsBuilder>.WithFileName(string) HazelcastOptionsBuilderBase<HazelcastFailoverOptions, HazelcastFailoverOptionsBuilder>.WithEnvironment(string) HazelcastOptionsBuilderBase<HazelcastFailoverOptions, HazelcastFailoverOptionsBuilder>.WithAltKey(string) HazelcastOptionsBuilderBase<HazelcastFailoverOptions, HazelcastFailoverOptionsBuilder>.With(Action<IConfiguration, HazelcastFailoverOptions>) HazelcastOptionsBuilderBase<HazelcastFailoverOptions, HazelcastFailoverOptionsBuilder>.WithDefault(Action<HazelcastFailoverOptions>) HazelcastOptionsBuilderBase<HazelcastFailoverOptions, HazelcastFailoverOptionsBuilder>.With(Action<HazelcastFailoverOptions>) HazelcastOptionsBuilderBase<HazelcastFailoverOptions, HazelcastFailoverOptionsBuilder>.ConfigureBuilder(Action<IConfigurationBuilder>) HazelcastOptionsBuilderBase<HazelcastFailoverOptions, HazelcastFailoverOptionsBuilder>.AddConfiguration(IConfiguration) HazelcastOptionsBuilderBase<HazelcastFailoverOptions, HazelcastFailoverOptionsBuilder>.Bind(string, object) HazelcastOptionsBuilderBase<HazelcastFailoverOptions, HazelcastFailoverOptionsBuilder>.Build() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast Assembly: Hazelcast.Net.dll Syntax public sealed class HazelcastFailoverOptionsBuilder : HazelcastOptionsBuilderBase<HazelcastFailoverOptions, HazelcastFailoverOptionsBuilder> Properties Name Description ThisBuilder Gets this instance as HazelcastFailoverOptionsBuilder."
  },
  "5.2.2/api/Hazelcast.HazelcastFailoverOptionsBuilder.ThisBuilder.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastFailoverOptionsBuilder.ThisBuilder.html",
    "title": "Property ThisBuilder | Hazelcast .NET Documentation",
    "keywords": "Property ThisBuilder ThisBuilder Gets this instance as HazelcastFailoverOptionsBuilder. Declaration protected override HazelcastFailoverOptionsBuilder ThisBuilder { get; } Property Value Type Description HazelcastFailoverOptionsBuilder Overrides HazelcastOptionsBuilderBase<HazelcastFailoverOptions, HazelcastFailoverOptionsBuilder>.ThisBuilder"
  },
  "5.2.2/api/Hazelcast.HazelcastOptions.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastOptions.-ctor.html",
    "title": "Constructor HazelcastOptions | Hazelcast .NET Documentation",
    "keywords": "Constructor HazelcastOptions HazelcastOptions() Initializes a new instance of the HazelcastOptions class. Declaration public HazelcastOptions()"
  },
  "5.2.2/api/Hazelcast.HazelcastOptions.AddSubscriber.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastOptions.AddSubscriber.html",
    "title": "Method AddSubscriber | Hazelcast .NET Documentation",
    "keywords": "Method AddSubscriber AddSubscriber(Action<HazelcastClientEventHandlers>) Adds a subscriber. Declaration public HazelcastOptions AddSubscriber(Action<HazelcastClientEventHandlers> events) Parameters Type Name Description Action<HazelcastClientEventHandlers> events An action defining event handlers. Returns Type Description HazelcastOptions The options. AddSubscriber(IHazelcastClientEventSubscriber) Adds a subscriber. Declaration public HazelcastOptions AddSubscriber(IHazelcastClientEventSubscriber subscriber) Parameters Type Name Description IHazelcastClientEventSubscriber subscriber The subscriber. Returns Type Description HazelcastOptions The options. AddSubscriber<T>() Adds a subscriber. Declaration public HazelcastOptions AddSubscriber<T>() where T : IHazelcastClientEventSubscriber Returns Type Description HazelcastOptions The options. Type Parameters Name Description T The type of the subscriber. AddSubscriber(Type) Adds a subscriber. Declaration public HazelcastOptions AddSubscriber(Type type) Parameters Type Name Description Type type The type of the subscriber. Returns Type Description HazelcastOptions The options. AddSubscriber(string) Adds a subscriber. Declaration public HazelcastOptions AddSubscriber(string typename) Parameters Type Name Description string typename The name of the type of the subscriber. Returns Type Description HazelcastOptions The options."
  },
  "5.2.2/api/Hazelcast.HazelcastOptions.Authentication.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastOptions.Authentication.html",
    "title": "Property Authentication | Hazelcast .NET Documentation",
    "keywords": "Property Authentication Authentication Gets the AuthenticationOptions. Declaration public AuthenticationOptions Authentication { get; } Property Value Type Description AuthenticationOptions"
  },
  "5.2.2/api/Hazelcast.HazelcastOptions.ClientName.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastOptions.ClientName.html",
    "title": "Property ClientName | Hazelcast .NET Documentation",
    "keywords": "Property ClientName ClientName Gets or sets the name of the client. Declaration public string ClientName { get; set; } Property Value Type Description string Remarks This is optional. If no client name is specified, a name will be generated."
  },
  "5.2.2/api/Hazelcast.HazelcastOptions.ClusterName.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastOptions.ClusterName.html",
    "title": "Property ClusterName | Hazelcast .NET Documentation",
    "keywords": "Property ClusterName ClusterName Gets or sets the name of the cluster. Declaration public string ClusterName { get; set; } Property Value Type Description string Remarks This must match the name of the cluster that the client is going to connect to."
  },
  "5.2.2/api/Hazelcast.HazelcastOptions.Events.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastOptions.Events.html",
    "title": "Property Events | Hazelcast .NET Documentation",
    "keywords": "Property Events Events Gets the EventsOptions. Declaration public EventsOptions Events { get; } Property Value Type Description EventsOptions"
  },
  "5.2.2/api/Hazelcast.HazelcastOptions.FlakeIdGenerators.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastOptions.FlakeIdGenerators.html",
    "title": "Property FlakeIdGenerators | Hazelcast .NET Documentation",
    "keywords": "Property FlakeIdGenerators FlakeIdGenerators Gets the dictionary which contains the FlakeIdGeneratorOptions for each Flake Id Generator. Declaration public IDictionary<string, FlakeIdGeneratorOptions> FlakeIdGenerators { get; } Property Value Type Description IDictionary<string, FlakeIdGeneratorOptions>"
  },
  "5.2.2/api/Hazelcast.HazelcastOptions.GetFlakeIdGeneratorOptions.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastOptions.GetFlakeIdGeneratorOptions.html",
    "title": "Method GetFlakeIdGeneratorOptions | Hazelcast .NET Documentation",
    "keywords": "Method GetFlakeIdGeneratorOptions GetFlakeIdGeneratorOptions(string) Gets options for a Flake Id Generator. Declaration public FlakeIdGeneratorOptions GetFlakeIdGeneratorOptions(string name) Parameters Type Name Description string name The name. Returns Type Description FlakeIdGeneratorOptions Options for the Flake Id Generator matching the specified name."
  },
  "5.2.2/api/Hazelcast.HazelcastOptions.GetNearCacheOptions.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastOptions.GetNearCacheOptions.html",
    "title": "Method GetNearCacheOptions | Hazelcast .NET Documentation",
    "keywords": "Method GetNearCacheOptions GetNearCacheOptions(string) Gets options for a near cache. Declaration public NearCacheOptions GetNearCacheOptions(string name) Parameters Type Name Description string name The name. Returns Type Description NearCacheOptions Options for the Near Cache matching the specified name."
  },
  "5.2.2/api/Hazelcast.HazelcastOptions.Heartbeat.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastOptions.Heartbeat.html",
    "title": "Property Heartbeat | Hazelcast .NET Documentation",
    "keywords": "Property Heartbeat Heartbeat Gets the HeartbeatOptions. Declaration public HeartbeatOptions Heartbeat { get; } Property Value Type Description HeartbeatOptions"
  },
  "5.2.2/api/Hazelcast.HazelcastOptions.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastOptions.html",
    "title": "Class HazelcastOptions | Hazelcast .NET Documentation",
    "keywords": "Class HazelcastOptions Represents the Hazelcast client options. Inheritance object HazelcastOptionsBase HazelcastOptions Inherited Members HazelcastOptionsBase.ServiceProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast Assembly: Hazelcast.Net.dll Syntax public sealed class HazelcastOptions : HazelcastOptionsBase Constructors Name Description HazelcastOptions() Initializes a new instance of the HazelcastOptions class. Properties Name Description Authentication Gets the AuthenticationOptions. ClientName Gets or sets the name of the client. ClusterName Gets or sets the name of the cluster. Events Gets the EventsOptions. FlakeIdGenerators Gets the dictionary which contains the FlakeIdGeneratorOptions for each Flake Id Generator. Heartbeat Gets the HeartbeatOptions. Labels Gets the set of client labels. LoadBalancer Gets the SingletonServiceFactory<TService> for the ILoadBalancer. LoggerFactory Gets the SingletonServiceFactory<TService> for ILoggerFactory. Messaging Gets the MessagingOptions. Metrics Gets the metrics options. NearCache Gets the CommonNearCacheOptions. NearCaches Gets the dictionary which contains the NearCacheOptions for each near cache. Networking Gets the NetworkingOptions. PatternMatcher Gets or sets the configuration pattern matcher. Preview (unsupported) Gets the PreviewOptions. Serialization Gets the SerializationOptions. Subscribers Gets the list of subscribers. Methods Name Description AddSubscriber(IHazelcastClientEventSubscriber) Adds a subscriber. AddSubscriber(Action<HazelcastClientEventHandlers>) Adds a subscriber. AddSubscriber(string) Adds a subscriber. AddSubscriber(Type) Adds a subscriber. AddSubscriber<T>() Adds a subscriber. GetFlakeIdGeneratorOptions(string) Gets options for a Flake Id Generator. GetNearCacheOptions(string) Gets options for a near cache."
  },
  "5.2.2/api/Hazelcast.HazelcastOptions.Labels.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastOptions.Labels.html",
    "title": "Property Labels | Hazelcast .NET Documentation",
    "keywords": "Property Labels Labels Gets the set of client labels. Declaration public ISet<string> Labels { get; } Property Value Type Description ISet<string>"
  },
  "5.2.2/api/Hazelcast.HazelcastOptions.LoadBalancer.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastOptions.LoadBalancer.html",
    "title": "Property LoadBalancer | Hazelcast .NET Documentation",
    "keywords": "Property LoadBalancer LoadBalancer Gets the SingletonServiceFactory<TService> for the ILoadBalancer. Declaration public SingletonServiceFactory<ILoadBalancer> LoadBalancer { get; } Property Value Type Description SingletonServiceFactory<ILoadBalancer> Remarks When set in the configuration file, it is defined as an injected type, for instance: \"loadBalancer\": { \"typeName\": \"My.LoadBalancer\", \"args\": { \"foo\": 42 } } where typeName is the name of the type, and args is an optional dictionary of arguments for the type constructor. In addition to custom type names, typeName can be any of the predefined Random, RoundRobin or Static values. The default load balancer is the RoundRobinLoadBalancer."
  },
  "5.2.2/api/Hazelcast.HazelcastOptions.LoggerFactory.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastOptions.LoggerFactory.html",
    "title": "Property LoggerFactory | Hazelcast .NET Documentation",
    "keywords": "Property LoggerFactory LoggerFactory Gets the SingletonServiceFactory<TService> for ILoggerFactory. Declaration public SingletonLoggerFactoryServiceFactory LoggerFactory { get; } Property Value Type Description SingletonLoggerFactoryServiceFactory The SingletonServiceFactory<TService> for ILoggerFactory. Remarks The only option available for logging is the ILoggerFactory creator, which can only be set programmatically. All other logging options (level, etc.) are configured via the default Microsoft configuration system. See https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging for details and documentation."
  },
  "5.2.2/api/Hazelcast.HazelcastOptions.Messaging.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastOptions.Messaging.html",
    "title": "Property Messaging | Hazelcast .NET Documentation",
    "keywords": "Property Messaging Messaging Gets the MessagingOptions. Declaration public MessagingOptions Messaging { get; } Property Value Type Description MessagingOptions"
  },
  "5.2.2/api/Hazelcast.HazelcastOptions.Metrics.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastOptions.Metrics.html",
    "title": "Property Metrics | Hazelcast .NET Documentation",
    "keywords": "Property Metrics Metrics Gets the metrics options. Declaration public MetricsOptions Metrics { get; } Property Value Type Description MetricsOptions"
  },
  "5.2.2/api/Hazelcast.HazelcastOptions.NearCache.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastOptions.NearCache.html",
    "title": "Property NearCache | Hazelcast .NET Documentation",
    "keywords": "Property NearCache NearCache Gets the CommonNearCacheOptions. Declaration public CommonNearCacheOptions NearCache { get; } Property Value Type Description CommonNearCacheOptions The common Near Cache options."
  },
  "5.2.2/api/Hazelcast.HazelcastOptions.NearCaches.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastOptions.NearCaches.html",
    "title": "Property NearCaches | Hazelcast .NET Documentation",
    "keywords": "Property NearCaches NearCaches Gets the dictionary which contains the NearCacheOptions for each near cache. Declaration public IDictionary<string, NearCacheOptions> NearCaches { get; } Property Value Type Description IDictionary<string, NearCacheOptions>"
  },
  "5.2.2/api/Hazelcast.HazelcastOptions.Networking.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastOptions.Networking.html",
    "title": "Property Networking | Hazelcast .NET Documentation",
    "keywords": "Property Networking Networking Gets the NetworkingOptions. Declaration public NetworkingOptions Networking { get; } Property Value Type Description NetworkingOptions"
  },
  "5.2.2/api/Hazelcast.HazelcastOptions.PatternMatcher.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastOptions.PatternMatcher.html",
    "title": "Property PatternMatcher | Hazelcast .NET Documentation",
    "keywords": "Property PatternMatcher PatternMatcher Gets or sets the configuration pattern matcher. Declaration public IPatternMatcher PatternMatcher { get; set; } Property Value Type Description IPatternMatcher Remarks This can only be set programmatically."
  },
  "5.2.2/api/Hazelcast.HazelcastOptions.Preview.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastOptions.Preview.html",
    "title": "Property Preview | Hazelcast .NET Documentation",
    "keywords": "Property Preview Preview (unsupported) Gets the PreviewOptions. Declaration public PreviewOptions Preview { get; } Property Value Type Description PreviewOptions"
  },
  "5.2.2/api/Hazelcast.HazelcastOptions.Serialization.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastOptions.Serialization.html",
    "title": "Property Serialization | Hazelcast .NET Documentation",
    "keywords": "Property Serialization Serialization Gets the SerializationOptions. Declaration public SerializationOptions Serialization { get; } Property Value Type Description SerializationOptions The serialization options."
  },
  "5.2.2/api/Hazelcast.HazelcastOptions.Subscribers.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastOptions.Subscribers.html",
    "title": "Property Subscribers | Hazelcast .NET Documentation",
    "keywords": "Property Subscribers Subscribers Gets the list of subscribers. Declaration public IList<IHazelcastClientEventSubscriber> Subscribers { get; } Property Value Type Description IList<IHazelcastClientEventSubscriber> The subscribers. Remarks Subscribers can be added to the configuration programmatically via the AddSubscriber(IHazelcastClientEventSubscriber) method or any of its overloads. A subscriber is a class that implements IHazelcastClientEventSubscriber and subscribes the client to events as soon as the client is connected. In a configuration file, they are defined as an array of injected types, for instance: \"subscribers\": [ { \"typeName\": \"My.Subscriber, My.Dll\" }, { \"typeName\": \"My.OtherSubscriber, My.dll\", \"args\": { \"foo\": 33 } } ] where typeName is the name of the type, and args is an optional dictionary of arguments for the type constructor."
  },
  "5.2.2/api/Hazelcast.HazelcastOptionsBase.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastOptionsBase.html",
    "title": "Class HazelcastOptionsBase | Hazelcast .NET Documentation",
    "keywords": "Class HazelcastOptionsBase Provides a base class for both HazelcastOptions and HazelcastFailoverOptions. Inheritance object HazelcastOptionsBase HazelcastFailoverOptions HazelcastOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast Assembly: Hazelcast.Net.dll Syntax public abstract class HazelcastOptionsBase Properties Name Description ServiceProvider Gets the IServiceProvider."
  },
  "5.2.2/api/Hazelcast.HazelcastOptionsBase.ServiceProvider.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastOptionsBase.ServiceProvider.html",
    "title": "Property ServiceProvider | Hazelcast .NET Documentation",
    "keywords": "Property ServiceProvider ServiceProvider Gets the IServiceProvider. Declaration public virtual IServiceProvider ServiceProvider { get; } Property Value Type Description IServiceProvider The service provider. Remarks In dependency-injection scenario the service provider may be available, so that service factories can return injected services. In non-dependency-injection scenario, this returns null."
  },
  "5.2.2/api/Hazelcast.HazelcastOptionsBuilder.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastOptionsBuilder.html",
    "title": "Class HazelcastOptionsBuilder | Hazelcast .NET Documentation",
    "keywords": "Class HazelcastOptionsBuilder Provides a way to build HazelcastOptions instances in a fluent way. Inheritance object HazelcastOptionsBuilderBase<HazelcastOptions, HazelcastOptionsBuilder> HazelcastOptionsBuilder Inherited Members HazelcastOptionsBuilderBase<HazelcastOptions, HazelcastOptionsBuilder>.With(string[], IDictionary<string, string>) HazelcastOptionsBuilderBase<HazelcastOptions, HazelcastOptionsBuilder>.WithDefault(string, string) HazelcastOptionsBuilderBase<HazelcastOptions, HazelcastOptionsBuilder>.WithDefault(string, object) HazelcastOptionsBuilderBase<HazelcastOptions, HazelcastOptionsBuilder>.With(string, string) HazelcastOptionsBuilderBase<HazelcastOptions, HazelcastOptionsBuilder>.With(string, object) HazelcastOptionsBuilderBase<HazelcastOptions, HazelcastOptionsBuilder>.WithFilePath(string) HazelcastOptionsBuilderBase<HazelcastOptions, HazelcastOptionsBuilder>.WithFileName(string) HazelcastOptionsBuilderBase<HazelcastOptions, HazelcastOptionsBuilder>.WithEnvironment(string) HazelcastOptionsBuilderBase<HazelcastOptions, HazelcastOptionsBuilder>.WithAltKey(string) HazelcastOptionsBuilderBase<HazelcastOptions, HazelcastOptionsBuilder>.With(Action<IConfiguration, HazelcastOptions>) HazelcastOptionsBuilderBase<HazelcastOptions, HazelcastOptionsBuilder>.WithDefault(Action<HazelcastOptions>) HazelcastOptionsBuilderBase<HazelcastOptions, HazelcastOptionsBuilder>.With(Action<HazelcastOptions>) HazelcastOptionsBuilderBase<HazelcastOptions, HazelcastOptionsBuilder>.ConfigureBuilder(Action<IConfigurationBuilder>) HazelcastOptionsBuilderBase<HazelcastOptions, HazelcastOptionsBuilder>.AddConfiguration(IConfiguration) HazelcastOptionsBuilderBase<HazelcastOptions, HazelcastOptionsBuilder>.Bind(string, object) HazelcastOptionsBuilderBase<HazelcastOptions, HazelcastOptionsBuilder>.Build() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast Assembly: Hazelcast.Net.dll Syntax public sealed class HazelcastOptionsBuilder : HazelcastOptionsBuilderBase<HazelcastOptions, HazelcastOptionsBuilder> Properties Name Description ThisBuilder Gets this instance as HazelcastOptionsBuilder. Methods Name Description WithLoggerFactory(Func<IConfiguration, ILoggerFactory>) Adds a logger factory."
  },
  "5.2.2/api/Hazelcast.HazelcastOptionsBuilder.ThisBuilder.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastOptionsBuilder.ThisBuilder.html",
    "title": "Property ThisBuilder | Hazelcast .NET Documentation",
    "keywords": "Property ThisBuilder ThisBuilder Gets this instance as HazelcastOptionsBuilder. Declaration protected override HazelcastOptionsBuilder ThisBuilder { get; } Property Value Type Description HazelcastOptionsBuilder Overrides HazelcastOptionsBuilderBase<HazelcastOptions, HazelcastOptionsBuilder>.ThisBuilder"
  },
  "5.2.2/api/Hazelcast.HazelcastOptionsBuilder.WithLoggerFactory.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastOptionsBuilder.WithLoggerFactory.html",
    "title": "Method WithLoggerFactory | Hazelcast .NET Documentation",
    "keywords": "Method WithLoggerFactory WithLoggerFactory(Func<IConfiguration, ILoggerFactory>) Adds a logger factory. Declaration public HazelcastOptionsBuilder WithLoggerFactory(Func<IConfiguration, ILoggerFactory> factory) Parameters Type Name Description Func<IConfiguration, ILoggerFactory> factory A delegate. Returns Type Description HazelcastOptionsBuilder This options builder."
  },
  "5.2.2/api/Hazelcast.HazelcastOptionsBuilderBase-2.AddConfiguration.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastOptionsBuilderBase-2.AddConfiguration.html",
    "title": "Method AddConfiguration | Hazelcast .NET Documentation",
    "keywords": "Method AddConfiguration AddConfiguration(IConfiguration) Sets the IConfiguration. Declaration public TBuilder AddConfiguration(IConfiguration configuration) Parameters Type Name Description IConfiguration configuration The configuration. Returns Type Description TBuilder This options builder. Remarks When an IConfiguration is added, no IConfigurationBuilder configuration delegate should be registered via ConfigureBuilder(Action<IConfigurationBuilder>)."
  },
  "5.2.2/api/Hazelcast.HazelcastOptionsBuilderBase-2.Bind.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastOptionsBuilderBase-2.Bind.html",
    "title": "Method Bind | Hazelcast .NET Documentation",
    "keywords": "Method Bind Bind(string, object) Binds an additional options instance. Declaration public TBuilder Bind(string key, object instance) Parameters Type Name Description string key The key for the instance. object instance The instance. Returns Type Description TBuilder This options builder."
  },
  "5.2.2/api/Hazelcast.HazelcastOptionsBuilderBase-2.Build.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastOptionsBuilderBase-2.Build.html",
    "title": "Method Build | Hazelcast .NET Documentation",
    "keywords": "Method Build Build() Builds the options. Declaration public TOptions Build() Returns Type Description TOptions The options."
  },
  "5.2.2/api/Hazelcast.HazelcastOptionsBuilderBase-2.ConfigureBuilder.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastOptionsBuilderBase-2.ConfigureBuilder.html",
    "title": "Method ConfigureBuilder | Hazelcast .NET Documentation",
    "keywords": "Method ConfigureBuilder ConfigureBuilder(Action<IConfigurationBuilder>) Adds an IConfigurationBuilder configuration delegate. Declaration public TBuilder ConfigureBuilder(Action<IConfigurationBuilder> configure) Parameters Type Name Description Action<IConfigurationBuilder> configure The delegate. Returns Type Description TBuilder This options builder. Remarks Do not specify configuration delegates if an IConfiguration is specified via AddConfiguration(IConfiguration)."
  },
  "5.2.2/api/Hazelcast.HazelcastOptionsBuilderBase-2.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastOptionsBuilderBase-2.html",
    "title": "Class HazelcastOptionsBuilderBase<TOptions, TBuilder> | Hazelcast .NET Documentation",
    "keywords": "Class HazelcastOptionsBuilderBase<TOptions, TBuilder> Provides a base class for both HazelcastOptionsBuilder and HazelcastFailoverOptionsBuilder. Inheritance object HazelcastOptionsBuilderBase<TOptions, TBuilder> HazelcastFailoverOptionsBuilder HazelcastOptionsBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast Assembly: Hazelcast.Net.dll Syntax public abstract class HazelcastOptionsBuilderBase<TOptions, TBuilder> where TOptions : HazelcastOptionsBase, new() Type Parameters Name Description TOptions TBuilder Properties Name Description ThisBuilder Gets this instance as TBuilder. Methods Name Description AddConfiguration(IConfiguration) Sets the IConfiguration. Bind(string, object) Binds an additional options instance. Build() Builds the options. ConfigureBuilder(Action<IConfigurationBuilder>) Adds an IConfigurationBuilder configuration delegate. With(Action<TOptions>) Adds an TOptions configuration delegate. With(Action<IConfiguration, TOptions>) Adds an TOptions configuration delegate. With(string, object) Adds a key/value pair to use when building the options. With(string, string) Adds a key/value pair to use when building the options. With(string[], IDictionary<string, string>) Sets the command-line arguments to use when building the options. WithAltKey(string) Sets the alternate key for options. WithDefault(Action<TOptions>) Adds an TOptions default configuration delegate. WithDefault(string, object) Adds a default key/value pair to use when building the options. WithDefault(string, string) Adds a default key/value pair to use when building the options. WithEnvironment(string) Sets the environment name to use when building the options. WithFileName(string) Sets the name (without path, with extension) of the options file to read when building the options. WithFilePath(string) Sets the path (without filename) to the options files to read when building the options."
  },
  "5.2.2/api/Hazelcast.HazelcastOptionsBuilderBase-2.ThisBuilder.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastOptionsBuilderBase-2.ThisBuilder.html",
    "title": "Property ThisBuilder | Hazelcast .NET Documentation",
    "keywords": "Property ThisBuilder ThisBuilder Gets this instance as TBuilder. Declaration protected abstract TBuilder ThisBuilder { get; } Property Value Type Description TBuilder"
  },
  "5.2.2/api/Hazelcast.HazelcastOptionsBuilderBase-2.With.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastOptionsBuilderBase-2.With.html",
    "title": "Method With | Hazelcast .NET Documentation",
    "keywords": "Method With With(string[], IDictionary<string, string>) Sets the command-line arguments to use when building the options. Declaration public TBuilder With(string[] args, IDictionary<string, string> switchMappings = null) Parameters Type Name Description string[] args The command-line arguments. IDictionary<string, string> switchMappings Optional command-line switch mappings. Returns Type Description TBuilder This options builder. With(string, string) Adds a key/value pair to use when building the options. Declaration public TBuilder With(string key, string value) Parameters Type Name Description string key The key. string value The value. Returns Type Description TBuilder This options builder. With(string, object) Adds a key/value pair to use when building the options. Declaration public TBuilder With(string key, object value) Parameters Type Name Description string key The key. object value The value. Returns Type Description TBuilder This options builder. With(Action<IConfiguration, TOptions>) Adds an TOptions configuration delegate. Declaration public TBuilder With(Action<IConfiguration, TOptions> configure) Parameters Type Name Description Action<IConfiguration, TOptions> configure The delegate. Returns Type Description TBuilder This options builder. With(Action<TOptions>) Adds an TOptions configuration delegate. Declaration public TBuilder With(Action<TOptions> configure) Parameters Type Name Description Action<TOptions> configure The delegate. Returns Type Description TBuilder This options builder."
  },
  "5.2.2/api/Hazelcast.HazelcastOptionsBuilderBase-2.WithAltKey.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastOptionsBuilderBase-2.WithAltKey.html",
    "title": "Method WithAltKey | Hazelcast .NET Documentation",
    "keywords": "Method WithAltKey WithAltKey(string) Sets the alternate key for options. Declaration public TBuilder WithAltKey(string key) Parameters Type Name Description string key The alternate key. Returns Type Description TBuilder This options builder."
  },
  "5.2.2/api/Hazelcast.HazelcastOptionsBuilderBase-2.WithDefault.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastOptionsBuilderBase-2.WithDefault.html",
    "title": "Method WithDefault | Hazelcast .NET Documentation",
    "keywords": "Method WithDefault WithDefault(string, string) Adds a default key/value pair to use when building the options. Declaration public TBuilder WithDefault(string key, string value) Parameters Type Name Description string key The key. string value The value. Returns Type Description TBuilder This options builder. WithDefault(string, object) Adds a default key/value pair to use when building the options. Declaration public TBuilder WithDefault(string key, object value) Parameters Type Name Description string key The key. object value The value. Returns Type Description TBuilder This options builder. WithDefault(Action<TOptions>) Adds an TOptions default configuration delegate. Declaration public TBuilder WithDefault(Action<TOptions> configure) Parameters Type Name Description Action<TOptions> configure The delegate. Returns Type Description TBuilder This options builder."
  },
  "5.2.2/api/Hazelcast.HazelcastOptionsBuilderBase-2.WithEnvironment.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastOptionsBuilderBase-2.WithEnvironment.html",
    "title": "Method WithEnvironment | Hazelcast .NET Documentation",
    "keywords": "Method WithEnvironment WithEnvironment(string) Sets the environment name to use when building the options. Declaration public TBuilder WithEnvironment(string environmentName) Parameters Type Name Description string environmentName The environment name. Returns Type Description TBuilder This options builder. Remarks By default, when not provided, the name is determined the standard .NET way, i.e. from the DOTNET_ENVIRONMENT and ASPNETCORE_ENVIRONMENT variables and, if not specified, defaults to \"Production\"."
  },
  "5.2.2/api/Hazelcast.HazelcastOptionsBuilderBase-2.WithFileName.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastOptionsBuilderBase-2.WithFileName.html",
    "title": "Method WithFileName | Hazelcast .NET Documentation",
    "keywords": "Method WithFileName WithFileName(string) Sets the name (without path, with extension) of the options file to read when building the options. Declaration public TBuilder WithFileName(string fileName) Parameters Type Name Description string fileName The name of the file. Returns Type Description TBuilder This options builder. Remarks By default, when not provided, the name is \"hazelcast\"."
  },
  "5.2.2/api/Hazelcast.HazelcastOptionsBuilderBase-2.WithFilePath.html": {
    "href": "5.2.2/api/Hazelcast.HazelcastOptionsBuilderBase-2.WithFilePath.html",
    "title": "Method WithFilePath | Hazelcast .NET Documentation",
    "keywords": "Method WithFilePath WithFilePath(string) Sets the path (without filename) to the options files to read when building the options. Declaration public TBuilder WithFilePath(string filePath) Parameters Type Name Description string filePath The file path. Returns Type Description TBuilder This options builder. Remarks By default, when not provided, the options file is searched in the default .NET configuration location, which usually is where the application resides."
  },
  "5.2.2/api/Hazelcast.html": {
    "href": "5.2.2/api/Hazelcast.html",
    "title": "Namespace Hazelcast | Hazelcast .NET Documentation",
    "keywords": "Namespace Hazelcast Classes HazelcastClientEventHandlers Represents the client events. HazelcastClientFactory Creates IHazelcastClient instances. HazelcastFailoverOptions Represents the Hazelcast client failover options. HazelcastFailoverOptionsBuilder Provides a way to build HazelcastOptions instances in a fluent way. HazelcastOptions Represents the Hazelcast client options. HazelcastOptionsBase Provides a base class for both HazelcastOptions and HazelcastFailoverOptions. HazelcastOptionsBuilder Provides a way to build HazelcastOptions instances in a fluent way. HazelcastOptionsBuilderBase<TOptions, TBuilder> Provides a base class for both HazelcastOptionsBuilder and HazelcastFailoverOptionsBuilder. PreviewOptions Represents preview options. StateChangedEventArgs Represents event data for the state changed event. Structs HazelcastClientStart Represents a starting IHazelcastClient. Interfaces IHazelcastClient Represents the Hazelcast client. IHazelcastClientEventHandler Defines a Hazelcast client event handler. IHazelcastClientEventSubscriber Defines an interface for classes that can subscribe to client events. Enums ClientState Defines the possible states of the client."
  },
  "5.2.2/api/Hazelcast.IHazelcastClient.BeginTransactionAsync.html": {
    "href": "5.2.2/api/Hazelcast.IHazelcastClient.BeginTransactionAsync.html",
    "title": "Method BeginTransactionAsync | Hazelcast .NET Documentation",
    "keywords": "Method BeginTransactionAsync Begins a new transaction. The method returns an ITransactionContext which can be used to obtain transactional distributed objects, and to commit or roll the transaction back. See general documetnation.... etc... BeginTransactionAsync() Begins a new transaction. Declaration Task<ITransactionContext> BeginTransactionAsync() Returns Type Description Task<ITransactionContext> A new transaction context. BeginTransactionAsync(TransactionOptions) Begins a new transaction. Declaration Task<ITransactionContext> BeginTransactionAsync(TransactionOptions options) Parameters Type Name Description TransactionOptions options Transaction options. Returns Type Description Task<ITransactionContext> A new transaction context."
  },
  "5.2.2/api/Hazelcast.IHazelcastClient.ClusterName.html": {
    "href": "5.2.2/api/Hazelcast.IHazelcastClient.ClusterName.html",
    "title": "Property ClusterName | Hazelcast .NET Documentation",
    "keywords": "Property ClusterName ClusterName Gets the name of the cluster. Declaration string ClusterName { get; } Property Value Type Description string Remarks The name of the cluster is specified by the ClusterName option value. Alternatively, it is \"dev\" by default."
  },
  "5.2.2/api/Hazelcast.IHazelcastClient.CPSubsystem.html": {
    "href": "5.2.2/api/Hazelcast.IHazelcastClient.CPSubsystem.html",
    "title": "Property CPSubsystem | Hazelcast .NET Documentation",
    "keywords": "Property CPSubsystem CPSubsystem Gets the CP subsystem. Declaration ICPSubsystem CPSubsystem { get; } Property Value Type Description ICPSubsystem"
  },
  "5.2.2/api/Hazelcast.IHazelcastClient.DestroyAsync.html": {
    "href": "5.2.2/api/Hazelcast.IHazelcastClient.DestroyAsync.html",
    "title": "Method DestroyAsync | Hazelcast .NET Documentation",
    "keywords": "Method DestroyAsync DestroyAsync(IDistributedObject) Destroys a distributed object. Declaration ValueTask DestroyAsync(IDistributedObject o) Parameters Type Name Description IDistributedObject o The object to destroy. Returns Type Description ValueTask A task that will complete when the object has been destroyed. Remarks Destroying a distributed object completely deletes the object on the cluster."
  },
  "5.2.2/api/Hazelcast.IHazelcastClient.GetDistributedObjectsAsync.html": {
    "href": "5.2.2/api/Hazelcast.IHazelcastClient.GetDistributedObjectsAsync.html",
    "title": "Method GetDistributedObjectsAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetDistributedObjectsAsync GetDistributedObjectsAsync() Gets information about all distributed objects known to the cluster. Declaration Task<IReadOnlyCollection<DistributedObjectInfo>> GetDistributedObjectsAsync() Returns Type Description Task<IReadOnlyCollection<DistributedObjectInfo>> Information about all distributed objects know to the cluster."
  },
  "5.2.2/api/Hazelcast.IHazelcastClient.GetFlakeIdGeneratorAsync.html": {
    "href": "5.2.2/api/Hazelcast.IHazelcastClient.GetFlakeIdGeneratorAsync.html",
    "title": "Method GetFlakeIdGeneratorAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetFlakeIdGeneratorAsync GetFlakeIdGeneratorAsync(string) Gets an IFlakeIdGenerator distributed object. Declaration Task<IFlakeIdGenerator> GetFlakeIdGeneratorAsync(string name) Parameters Type Name Description string name The unique name of the Flake Id Generator. Returns Type Description Task<IFlakeIdGenerator> The Flake Id Generator that was retrieved or created. Remarks If an object with the specified name does not exist already in the cluster, a new object is created."
  },
  "5.2.2/api/Hazelcast.IHazelcastClient.GetListAsync.html": {
    "href": "5.2.2/api/Hazelcast.IHazelcastClient.GetListAsync.html",
    "title": "Method GetListAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetListAsync GetListAsync<T>(string) Gets an IHList<T> distributed object. Declaration Task<IHList<T>> GetListAsync<T>(string name) Parameters Type Name Description string name The unique name of the list. Returns Type Description Task<IHList<T>> The list that was retrieved or created. Type Parameters Name Description T The type of the list items. Remarks If an object with the specified name does not exist already in the cluster, a new object is created."
  },
  "5.2.2/api/Hazelcast.IHazelcastClient.GetMapAsync.html": {
    "href": "5.2.2/api/Hazelcast.IHazelcastClient.GetMapAsync.html",
    "title": "Method GetMapAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetMapAsync GetMapAsync<TKey, TValue>(string) Gets an IHMap<TKey, TValue> distributed object. Declaration Task<IHMap<TKey, TValue>> GetMapAsync<TKey, TValue>(string name) Parameters Type Name Description string name The unique name of the map. Returns Type Description Task<IHMap<TKey, TValue>> The map that was retrieved or created. Type Parameters Name Description TKey The type of the keys. TValue The type of the values. Remarks If an object with the specified name does not exist already in the cluster, a new object is created."
  },
  "5.2.2/api/Hazelcast.IHazelcastClient.GetMultiMapAsync.html": {
    "href": "5.2.2/api/Hazelcast.IHazelcastClient.GetMultiMapAsync.html",
    "title": "Method GetMultiMapAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetMultiMapAsync GetMultiMapAsync<TKey, TValue>(string) Gets an IHMultiMap<TKey, TValue> distributed object. Declaration Task<IHMultiMap<TKey, TValue>> GetMultiMapAsync<TKey, TValue>(string name) Parameters Type Name Description string name The unique name of the map. Returns Type Description Task<IHMultiMap<TKey, TValue>> The map that was retrieved or created. Type Parameters Name Description TKey The type of the keys. TValue The type of the values. Remarks If an object with the specified name does not exist already in the cluster, a new object is created."
  },
  "5.2.2/api/Hazelcast.IHazelcastClient.GetQueueAsync.html": {
    "href": "5.2.2/api/Hazelcast.IHazelcastClient.GetQueueAsync.html",
    "title": "Method GetQueueAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetQueueAsync GetQueueAsync<T>(string) Gets an IHQueue<T> distributed object. Declaration Task<IHQueue<T>> GetQueueAsync<T>(string name) Parameters Type Name Description string name The unique name of the queue. Returns Type Description Task<IHQueue<T>> The queue that was retrieved or created. Type Parameters Name Description T The type of the queue items. Remarks If an object with the specified name does not exist already in the cluster, a new object is created."
  },
  "5.2.2/api/Hazelcast.IHazelcastClient.GetReplicatedMapAsync.html": {
    "href": "5.2.2/api/Hazelcast.IHazelcastClient.GetReplicatedMapAsync.html",
    "title": "Method GetReplicatedMapAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetReplicatedMapAsync GetReplicatedMapAsync<TKey, TValue>(string) Gets an IHReplicatedMap<TKey, TValue> distributed object. Declaration Task<IHReplicatedMap<TKey, TValue>> GetReplicatedMapAsync<TKey, TValue>(string name) Parameters Type Name Description string name The unique name of the map. Returns Type Description Task<IHReplicatedMap<TKey, TValue>> The map that was retrieved or created. Type Parameters Name Description TKey The type of the keys. TValue The type of the values. Remarks If an object with the specified name does not exist already in the cluster, a new object is created."
  },
  "5.2.2/api/Hazelcast.IHazelcastClient.GetRingBufferAsync.html": {
    "href": "5.2.2/api/Hazelcast.IHazelcastClient.GetRingBufferAsync.html",
    "title": "Method GetRingBufferAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetRingBufferAsync GetRingBufferAsync<T>(string) Gets an IHRingBuffer<TItem> distributed object. Declaration Task<IHRingBuffer<T>> GetRingBufferAsync<T>(string name) Parameters Type Name Description string name The unique name of the ring buffer. Returns Type Description Task<IHRingBuffer<T>> The ring buffer that was retrieved or created. Type Parameters Name Description T The type of the ring buffer items. Remarks If an object with the specified name does not exist already in the cluster, a new object is created."
  },
  "5.2.2/api/Hazelcast.IHazelcastClient.GetSetAsync.html": {
    "href": "5.2.2/api/Hazelcast.IHazelcastClient.GetSetAsync.html",
    "title": "Method GetSetAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetSetAsync GetSetAsync<T>(string) Gets an IHSet<T> distributed object. Declaration Task<IHSet<T>> GetSetAsync<T>(string name) Parameters Type Name Description string name The unique name of the set. Returns Type Description Task<IHSet<T>> The set that was retrieved or created. Type Parameters Name Description T The type of the set items. Remarks If an object with the specified name does not exist already in the cluster, a new object is created."
  },
  "5.2.2/api/Hazelcast.IHazelcastClient.GetTopicAsync.html": {
    "href": "5.2.2/api/Hazelcast.IHazelcastClient.GetTopicAsync.html",
    "title": "Method GetTopicAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetTopicAsync GetTopicAsync<T>(string) Gets an IHTopic<T> distributed object. Declaration Task<IHTopic<T>> GetTopicAsync<T>(string name) Parameters Type Name Description string name The unique name of the topic. Returns Type Description Task<IHTopic<T>> The topic that was retrieved or created. Type Parameters Name Description T The type of the topic messages. Remarks If an object with the specified name does not exist already in the cluster, a new object is created."
  },
  "5.2.2/api/Hazelcast.IHazelcastClient.html": {
    "href": "5.2.2/api/Hazelcast.IHazelcastClient.html",
    "title": "Interface IHazelcastClient | Hazelcast .NET Documentation",
    "keywords": "Interface IHazelcastClient Represents the Hazelcast client. The Hazelcast client is the entry point to all interactions with an Hazelcast cluster. A client is created by a HazelcastClientFactory. Before it can be used, it needs to be opened via the @Hazelcast.IHazelcastClient.OpenAsync* method. After it has been used, it needs to be disposed in order to properly release its resources. For example: var options = new HazelcastOptionsBuilder.Build(); var client = await HazelcastClientFactory.StartNewClientAsync(options); // ... use the client ... await client.DisposeAsync(); Inherited Members IAsyncDisposable.DisposeAsync() Namespace: Hazelcast Assembly: Hazelcast.Net.dll Syntax public interface IHazelcastClient : IAsyncDisposable Properties Name Description ClusterName Gets the name of the cluster. CPSubsystem Gets the CP subsystem. Id Gets the unique identifier of this client. IsActive Whether the client is active. IsConnected Whether the client is connected. Members Gets a snapshot of the members that the cluster declared to this client. Name Gets the name of this client. Options Gets the options that were used to configure this client. Sql Returns a service to execute distributed SQL queries. State Gets the client state. Methods Name Description BeginTransactionAsync() Begins a new transaction. BeginTransactionAsync(TransactionOptions) Begins a new transaction. DestroyAsync(IDistributedObject) Destroys a distributed object. GetDistributedObjectsAsync() Gets information about all distributed objects known to the cluster. GetFlakeIdGeneratorAsync(string) Gets an IFlakeIdGenerator distributed object. GetListAsync<T>(string) Gets an IHList<T> distributed object. GetMapAsync<TKey, TValue>(string) Gets an IHMap<TKey, TValue> distributed object. GetMultiMapAsync<TKey, TValue>(string) Gets an IHMultiMap<TKey, TValue> distributed object. GetQueueAsync<T>(string) Gets an IHQueue<T> distributed object. GetReplicatedMapAsync<TKey, TValue>(string) Gets an IHReplicatedMap<TKey, TValue> distributed object. GetRingBufferAsync<T>(string) Gets an IHRingBuffer<TItem> distributed object. GetSetAsync<T>(string) Gets an IHSet<T> distributed object. GetTopicAsync<T>(string) Gets an IHTopic<T> distributed object. SubscribeAsync(Action<HazelcastClientEventHandlers>) Subscribes to events. UnsubscribeAsync(Guid) Unsubscribe from events."
  },
  "5.2.2/api/Hazelcast.IHazelcastClient.Id.html": {
    "href": "5.2.2/api/Hazelcast.IHazelcastClient.Id.html",
    "title": "Property Id | Hazelcast .NET Documentation",
    "keywords": "Property Id Id Gets the unique identifier of this client. Declaration Guid Id { get; } Property Value Type Description Guid Remarks The unique identifier of the client is a self-assigned random Guid."
  },
  "5.2.2/api/Hazelcast.IHazelcastClient.IsActive.html": {
    "href": "5.2.2/api/Hazelcast.IHazelcastClient.IsActive.html",
    "title": "Property IsActive | Hazelcast .NET Documentation",
    "keywords": "Property IsActive IsActive Whether the client is active. Declaration bool IsActive { get; } Property Value Type Description bool true if the client is active; otherwise false. Remarks The client can be active but not connected, trying to reconnect."
  },
  "5.2.2/api/Hazelcast.IHazelcastClient.IsConnected.html": {
    "href": "5.2.2/api/Hazelcast.IHazelcastClient.IsConnected.html",
    "title": "Property IsConnected | Hazelcast .NET Documentation",
    "keywords": "Property IsConnected IsConnected Whether the client is connected. Declaration bool IsConnected { get; } Property Value Type Description bool true if the client is connected; otherwise false. Remarks The client can be active but not connected, trying to reconnect."
  },
  "5.2.2/api/Hazelcast.IHazelcastClient.Members.html": {
    "href": "5.2.2/api/Hazelcast.IHazelcastClient.Members.html",
    "title": "Property Members | Hazelcast .NET Documentation",
    "keywords": "Property Members Members Gets a snapshot of the members that the cluster declared to this client. Declaration IReadOnlyCollection<MemberInfoState> Members { get; } Property Value Type Description IReadOnlyCollection<MemberInfoState>"
  },
  "5.2.2/api/Hazelcast.IHazelcastClient.Name.html": {
    "href": "5.2.2/api/Hazelcast.IHazelcastClient.Name.html",
    "title": "Property Name | Hazelcast .NET Documentation",
    "keywords": "Property Name Name Gets the name of this client. Declaration string Name { get; } Property Value Type Description string Remarks The name of a client can be fully specified by ClientName option value. Alternatively, it is automatically generated."
  },
  "5.2.2/api/Hazelcast.IHazelcastClient.Options.html": {
    "href": "5.2.2/api/Hazelcast.IHazelcastClient.Options.html",
    "title": "Property Options | Hazelcast .NET Documentation",
    "keywords": "Property Options Options Gets the options that were used to configure this client. Declaration HazelcastOptions Options { get; } Property Value Type Description HazelcastOptions Remarks This returns a clone of the options, and modifying this clone has no effect on the actual options used by the client, nor on the behavior of the client."
  },
  "5.2.2/api/Hazelcast.IHazelcastClient.Sql.html": {
    "href": "5.2.2/api/Hazelcast.IHazelcastClient.Sql.html",
    "title": "Property Sql | Hazelcast .NET Documentation",
    "keywords": "Property Sql Sql Returns a service to execute distributed SQL queries. Declaration ISqlService Sql { get; } Property Value Type Description ISqlService Remarks The service is in beta state. Behavior and API might be changed in future releases."
  },
  "5.2.2/api/Hazelcast.IHazelcastClient.State.html": {
    "href": "5.2.2/api/Hazelcast.IHazelcastClient.State.html",
    "title": "Property State | Hazelcast .NET Documentation",
    "keywords": "Property State State Gets the client state. Declaration ClientState State { get; } Property Value Type Description ClientState"
  },
  "5.2.2/api/Hazelcast.IHazelcastClient.SubscribeAsync.html": {
    "href": "5.2.2/api/Hazelcast.IHazelcastClient.SubscribeAsync.html",
    "title": "Method SubscribeAsync | Hazelcast .NET Documentation",
    "keywords": "Method SubscribeAsync SubscribeAsync(Action<HazelcastClientEventHandlers>) Subscribes to events. Declaration Task<Guid> SubscribeAsync(Action<HazelcastClientEventHandlers> events) Parameters Type Name Description Action<HazelcastClientEventHandlers> events An event handlers collection builder. Returns Type Description Task<Guid> The unique identifier of the subscription."
  },
  "5.2.2/api/Hazelcast.IHazelcastClient.UnsubscribeAsync.html": {
    "href": "5.2.2/api/Hazelcast.IHazelcastClient.UnsubscribeAsync.html",
    "title": "Method UnsubscribeAsync | Hazelcast .NET Documentation",
    "keywords": "Method UnsubscribeAsync UnsubscribeAsync(Guid) Unsubscribe from events. Declaration ValueTask<bool> UnsubscribeAsync(Guid subscriptionId) Parameters Type Name Description Guid subscriptionId The unique identifier of the subscription. Returns Type Description ValueTask<bool> Whether the un-registration was successful on the server."
  },
  "5.2.2/api/Hazelcast.IHazelcastClientEventHandler.html": {
    "href": "5.2.2/api/Hazelcast.IHazelcastClientEventHandler.html",
    "title": "Interface IHazelcastClientEventHandler | Hazelcast .NET Documentation",
    "keywords": "Interface IHazelcastClientEventHandler Defines a Hazelcast client event handler. Namespace: Hazelcast Assembly: Hazelcast.Net.dll Syntax public interface IHazelcastClientEventHandler"
  },
  "5.2.2/api/Hazelcast.IHazelcastClientEventSubscriber.Build.html": {
    "href": "5.2.2/api/Hazelcast.IHazelcastClientEventSubscriber.Build.html",
    "title": "Method Build | Hazelcast .NET Documentation",
    "keywords": "Method Build Build(HazelcastClientEventHandlers) Builds handlers. Declaration void Build(HazelcastClientEventHandlers events) Parameters Type Name Description HazelcastClientEventHandlers events An event handlers collection builder."
  },
  "5.2.2/api/Hazelcast.IHazelcastClientEventSubscriber.html": {
    "href": "5.2.2/api/Hazelcast.IHazelcastClientEventSubscriber.html",
    "title": "Interface IHazelcastClientEventSubscriber | Hazelcast .NET Documentation",
    "keywords": "Interface IHazelcastClientEventSubscriber Defines an interface for classes that can subscribe to client events. Namespace: Hazelcast Assembly: Hazelcast.Net.dll Syntax public interface IHazelcastClientEventSubscriber Methods Name Description Build(HazelcastClientEventHandlers) Builds handlers."
  },
  "5.2.2/api/Hazelcast.Logging.html": {
    "href": "5.2.2/api/Hazelcast.Logging.html",
    "title": "Namespace Hazelcast.Logging | Hazelcast .NET Documentation",
    "keywords": "Namespace Hazelcast.Logging Classes SingletonLoggerFactoryServiceFactory Represents a singleton ILoggerFactory service factory."
  },
  "5.2.2/api/Hazelcast.Logging.SingletonLoggerFactoryServiceFactory.AddProvider.html": {
    "href": "5.2.2/api/Hazelcast.Logging.SingletonLoggerFactoryServiceFactory.AddProvider.html",
    "title": "Method AddProvider | Hazelcast .NET Documentation",
    "keywords": "Method AddProvider AddProvider(ILoggerProvider) Declaration public void AddProvider(ILoggerProvider provider) Parameters Type Name Description ILoggerProvider provider Implements ILoggerFactory.AddProvider(ILoggerProvider)"
  },
  "5.2.2/api/Hazelcast.Logging.SingletonLoggerFactoryServiceFactory.CreateLogger.html": {
    "href": "5.2.2/api/Hazelcast.Logging.SingletonLoggerFactoryServiceFactory.CreateLogger.html",
    "title": "Method CreateLogger | Hazelcast .NET Documentation",
    "keywords": "Method CreateLogger CreateLogger(string) Declaration public ILogger CreateLogger(string categoryName) Parameters Type Name Description string categoryName Returns Type Description ILogger Implements ILoggerFactory.CreateLogger(string)"
  },
  "5.2.2/api/Hazelcast.Logging.SingletonLoggerFactoryServiceFactory.html": {
    "href": "5.2.2/api/Hazelcast.Logging.SingletonLoggerFactoryServiceFactory.html",
    "title": "Class SingletonLoggerFactoryServiceFactory | Hazelcast .NET Documentation",
    "keywords": "Class SingletonLoggerFactoryServiceFactory Represents a singleton ILoggerFactory service factory. Inheritance object SingletonServiceFactory<ILoggerFactory> SingletonLoggerFactoryServiceFactory Implements ILoggerFactory IDisposable Inherited Members SingletonServiceFactory<ILoggerFactory>.Creator SingletonServiceFactory<ILoggerFactory>.IsConfigured SingletonServiceFactory<ILoggerFactory>.ServiceProvider SingletonServiceFactory<ILoggerFactory>.OwnsService SingletonServiceFactory<ILoggerFactory>.Service SingletonServiceFactory<ILoggerFactory>.Dispose() SingletonServiceFactory<ILoggerFactory>.Dispose(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.Logging Assembly: Hazelcast.Net.dll Syntax public class SingletonLoggerFactoryServiceFactory : SingletonServiceFactory<ILoggerFactory>, ILoggerFactory, IDisposable Methods Name Description AddProvider(ILoggerProvider) CreateLogger(string)"
  },
  "5.2.2/api/Hazelcast.Messaging.html": {
    "href": "5.2.2/api/Hazelcast.Messaging.html",
    "title": "Namespace Hazelcast.Messaging | Hazelcast .NET Documentation",
    "keywords": "Namespace Hazelcast.Messaging Classes MessagingOptions Represents messaging options."
  },
  "5.2.2/api/Hazelcast.Messaging.MessagingOptions.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Messaging.MessagingOptions.-ctor.html",
    "title": "Constructor MessagingOptions | Hazelcast .NET Documentation",
    "keywords": "Constructor MessagingOptions MessagingOptions(PreviewOptions) Initializes a new instance of the MessagingOptions class. Declaration public MessagingOptions(PreviewOptions preview = null) Parameters Type Name Description PreviewOptions preview"
  },
  "5.2.2/api/Hazelcast.Messaging.MessagingOptions.html": {
    "href": "5.2.2/api/Hazelcast.Messaging.MessagingOptions.html",
    "title": "Class MessagingOptions | Hazelcast .NET Documentation",
    "keywords": "Class MessagingOptions Represents messaging options. Inheritance object MessagingOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.Messaging Assembly: Hazelcast.Net.dll Syntax public class MessagingOptions Constructors Name Description MessagingOptions(PreviewOptions) Initializes a new instance of the MessagingOptions class. Properties Name Description MinRetryDelayMilliseconds Gets or sets the min retry delay. RetryOnClientReconnecting Whether to retry an invocation that has failed to start because the client was offline but still active and reconnecting. RetryTimeoutSeconds Gets or sets the invocation timeout. RetryUnsafeOperations Whether to retry all operations including unsafe operations."
  },
  "5.2.2/api/Hazelcast.Messaging.MessagingOptions.MinRetryDelayMilliseconds.html": {
    "href": "5.2.2/api/Hazelcast.Messaging.MessagingOptions.MinRetryDelayMilliseconds.html",
    "title": "Property MinRetryDelayMilliseconds | Hazelcast .NET Documentation",
    "keywords": "Property MinRetryDelayMilliseconds MinRetryDelayMilliseconds Gets or sets the min retry delay. Declaration public int MinRetryDelayMilliseconds { get; set; } Property Value Type Description int"
  },
  "5.2.2/api/Hazelcast.Messaging.MessagingOptions.RetryOnClientReconnecting.html": {
    "href": "5.2.2/api/Hazelcast.Messaging.MessagingOptions.RetryOnClientReconnecting.html",
    "title": "Property RetryOnClientReconnecting | Hazelcast .NET Documentation",
    "keywords": "Property RetryOnClientReconnecting RetryOnClientReconnecting Whether to retry an invocation that has failed to start because the client was offline but still active and reconnecting. Declaration public bool RetryOnClientReconnecting { get; set; } Property Value Type Description bool Remarks This is true by default, i.e. if the client got disconnected and is reconnecting, invocations will be retried until they reach their timeout, or the client reconnects. Set this to false if you want invocations to fail immediately in case the client gets disconnected, even if it is trying to reconnect. Note that this only applies to invocation that failed to start, and therefore this is safe for all invocations. See RetryUnsafeOperations for what happens once the invocation has started."
  },
  "5.2.2/api/Hazelcast.Messaging.MessagingOptions.RetryTimeoutSeconds.html": {
    "href": "5.2.2/api/Hazelcast.Messaging.MessagingOptions.RetryTimeoutSeconds.html",
    "title": "Property RetryTimeoutSeconds | Hazelcast .NET Documentation",
    "keywords": "Property RetryTimeoutSeconds RetryTimeoutSeconds Gets or sets the invocation timeout. Declaration public int RetryTimeoutSeconds { get; set; } Property Value Type Description int Remarks The RetryTimeoutSeconds is a soft timeout that prevents retrying an invocation for too long in case it fails. It does *not* controls the duration of a single try, and does *not* abort it. And invocation single try can run for as long as the connection that supports it remains open."
  },
  "5.2.2/api/Hazelcast.Messaging.MessagingOptions.RetryUnsafeOperations.html": {
    "href": "5.2.2/api/Hazelcast.Messaging.MessagingOptions.RetryUnsafeOperations.html",
    "title": "Property RetryUnsafeOperations | Hazelcast .NET Documentation",
    "keywords": "Property RetryUnsafeOperations RetryUnsafeOperations Whether to retry all operations including unsafe operations. Declaration public bool RetryUnsafeOperations { get; set; } Property Value Type Description bool Remarks Operations can fail due to various reasons. Read-only operations are retried by default. If you want to enable retry for all operations, set this property to true. However, note that a failed operation leaves the cluster in an undecided state. The cluster may have received the request and executed the operation, but failed to respond to the client. For idempotent operations this is harmless, but for non idempotent ones retrying can cause undesirable effects. Also note that the redo can perform on any member. For these reasons, this is false by default."
  },
  "5.2.2/api/Hazelcast.Metrics.html": {
    "href": "5.2.2/api/Hazelcast.Metrics.html",
    "title": "Namespace Hazelcast.Metrics | Hazelcast .NET Documentation",
    "keywords": "Namespace Hazelcast.Metrics Classes MetricsOptions Represents the client metrics options."
  },
  "5.2.2/api/Hazelcast.Metrics.MetricsOptions.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Metrics.MetricsOptions.-ctor.html",
    "title": "Constructor MetricsOptions | Hazelcast .NET Documentation",
    "keywords": "Constructor MetricsOptions MetricsOptions() Initializes a new instance of the MetricsOptions class. Declaration public MetricsOptions()"
  },
  "5.2.2/api/Hazelcast.Metrics.MetricsOptions.Clone.html": {
    "href": "5.2.2/api/Hazelcast.Metrics.MetricsOptions.Clone.html",
    "title": "Method Clone | Hazelcast .NET Documentation",
    "keywords": "Method Clone Clone() Clone the options. Declaration public MetricsOptions Clone() Returns Type Description MetricsOptions A deep clone of the options."
  },
  "5.2.2/api/Hazelcast.Metrics.MetricsOptions.Enabled.html": {
    "href": "5.2.2/api/Hazelcast.Metrics.MetricsOptions.Enabled.html",
    "title": "Property Enabled | Hazelcast .NET Documentation",
    "keywords": "Property Enabled Enabled Whether client statistics are enabled. Declaration public bool Enabled { get; set; } Property Value Type Description bool"
  },
  "5.2.2/api/Hazelcast.Metrics.MetricsOptions.html": {
    "href": "5.2.2/api/Hazelcast.Metrics.MetricsOptions.html",
    "title": "Class MetricsOptions | Hazelcast .NET Documentation",
    "keywords": "Class MetricsOptions Represents the client metrics options. Inheritance object MetricsOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.Metrics Assembly: Hazelcast.Net.dll Syntax public class MetricsOptions Constructors Name Description MetricsOptions() Initializes a new instance of the MetricsOptions class. Properties Name Description Enabled Whether client statistics are enabled. PeriodSeconds Gets or sets the period at which client metrics are sent to the cluster. Methods Name Description Clone() Clone the options."
  },
  "5.2.2/api/Hazelcast.Metrics.MetricsOptions.PeriodSeconds.html": {
    "href": "5.2.2/api/Hazelcast.Metrics.MetricsOptions.PeriodSeconds.html",
    "title": "Property PeriodSeconds | Hazelcast .NET Documentation",
    "keywords": "Property PeriodSeconds PeriodSeconds Gets or sets the period at which client metrics are sent to the cluster. Declaration public int PeriodSeconds { get; set; } Property Value Type Description int"
  },
  "5.2.2/api/Hazelcast.Models.BitmapIndexOptions.html": {
    "href": "5.2.2/api/Hazelcast.Models.BitmapIndexOptions.html",
    "title": "Class BitmapIndexOptions | Hazelcast .NET Documentation",
    "keywords": "Class BitmapIndexOptions Configures indexing options for Bitmap indexes. Inheritance object BitmapIndexOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.Models Assembly: Hazelcast.Net.dll Syntax public class BitmapIndexOptions Properties Name Description UniqueKey Gets or sets the unique key. UniqueKeyTransformation Gets or sets the UniqueKeyTransformation which will be applied to the UniqueKey value."
  },
  "5.2.2/api/Hazelcast.Models.BitmapIndexOptions.UniqueKey.html": {
    "href": "5.2.2/api/Hazelcast.Models.BitmapIndexOptions.UniqueKey.html",
    "title": "Property UniqueKey | Hazelcast .NET Documentation",
    "keywords": "Property UniqueKey UniqueKey Gets or sets the unique key. Declaration public string UniqueKey { get; set; } Property Value Type Description string"
  },
  "5.2.2/api/Hazelcast.Models.BitmapIndexOptions.UniqueKeyTransformation.html": {
    "href": "5.2.2/api/Hazelcast.Models.BitmapIndexOptions.UniqueKeyTransformation.html",
    "title": "Property UniqueKeyTransformation | Hazelcast .NET Documentation",
    "keywords": "Property UniqueKeyTransformation UniqueKeyTransformation Gets or sets the UniqueKeyTransformation which will be applied to the UniqueKey value. Declaration public UniqueKeyTransformation UniqueKeyTransformation { get; set; } Property Value Type Description UniqueKeyTransformation"
  },
  "5.2.2/api/Hazelcast.Models.CollectionItemEventTypes.html": {
    "href": "5.2.2/api/Hazelcast.Models.CollectionItemEventTypes.html",
    "title": "Enum CollectionItemEventTypes | Hazelcast .NET Documentation",
    "keywords": "Enum CollectionItemEventTypes Specifies the collection item event types. Namespace: Hazelcast.Models Assembly: Hazelcast.Net.dll Syntax [Flags] public enum CollectionItemEventTypes Fields Name Description Added The item was added. Removed The item was removed."
  },
  "5.2.2/api/Hazelcast.Models.DistributedObjectInfo.Equals.html": {
    "href": "5.2.2/api/Hazelcast.Models.DistributedObjectInfo.Equals.html",
    "title": "Method Equals | Hazelcast .NET Documentation",
    "keywords": "Method Equals Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides object.Equals(object) Equals(DistributedObjectInfo) Declaration public bool Equals(DistributedObjectInfo other) Parameters Type Name Description DistributedObjectInfo other Returns Type Description bool Implements IEquatable<T>.Equals(T)"
  },
  "5.2.2/api/Hazelcast.Models.DistributedObjectInfo.GetHashCode.html": {
    "href": "5.2.2/api/Hazelcast.Models.DistributedObjectInfo.GetHashCode.html",
    "title": "Method GetHashCode | Hazelcast .NET Documentation",
    "keywords": "Method GetHashCode GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode()"
  },
  "5.2.2/api/Hazelcast.Models.DistributedObjectInfo.html": {
    "href": "5.2.2/api/Hazelcast.Models.DistributedObjectInfo.html",
    "title": "Class DistributedObjectInfo | Hazelcast .NET Documentation",
    "keywords": "Class DistributedObjectInfo Describes a distributed object. Inheritance object DistributedObjectInfo Implements IEquatable<DistributedObjectInfo> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Hazelcast.Models Assembly: Hazelcast.Net.dll Syntax public class DistributedObjectInfo : IEquatable<DistributedObjectInfo> Properties Name Description Name Gets the name of the object. ServiceName Gets the service name of the object. Methods Name Description Equals(DistributedObjectInfo) Equals(object) GetHashCode() ToString() Operators Name Description operator ==(DistributedObjectInfo, DistributedObjectInfo) Determines whether two DistributedObjectInfo instances are equal. operator !=(DistributedObjectInfo, DistributedObjectInfo) Determines whether two DistributedObjectInfo instances are different."
  },
  "5.2.2/api/Hazelcast.Models.DistributedObjectInfo.Name.html": {
    "href": "5.2.2/api/Hazelcast.Models.DistributedObjectInfo.Name.html",
    "title": "Property Name | Hazelcast .NET Documentation",
    "keywords": "Property Name Name Gets the name of the object. Declaration public string Name { get; } Property Value Type Description string"
  },
  "5.2.2/api/Hazelcast.Models.DistributedObjectInfo.op_Equality.html": {
    "href": "5.2.2/api/Hazelcast.Models.DistributedObjectInfo.op_Equality.html",
    "title": "Operator operator == | Hazelcast .NET Documentation",
    "keywords": "Operator operator == operator ==(DistributedObjectInfo, DistributedObjectInfo) Determines whether two DistributedObjectInfo instances are equal. Declaration public static bool operator ==(DistributedObjectInfo left, DistributedObjectInfo right) Parameters Type Name Description DistributedObjectInfo left The left instance. DistributedObjectInfo right The right instance. Returns Type Description bool true if the instances are equal; otherwise false."
  },
  "5.2.2/api/Hazelcast.Models.DistributedObjectInfo.op_Inequality.html": {
    "href": "5.2.2/api/Hazelcast.Models.DistributedObjectInfo.op_Inequality.html",
    "title": "Operator operator != | Hazelcast .NET Documentation",
    "keywords": "Operator operator != operator !=(DistributedObjectInfo, DistributedObjectInfo) Determines whether two DistributedObjectInfo instances are different. Declaration public static bool operator !=(DistributedObjectInfo left, DistributedObjectInfo right) Parameters Type Name Description DistributedObjectInfo left The left instance. DistributedObjectInfo right The right instance. Returns Type Description bool true if the instances are different; otherwise false."
  },
  "5.2.2/api/Hazelcast.Models.DistributedObjectInfo.ServiceName.html": {
    "href": "5.2.2/api/Hazelcast.Models.DistributedObjectInfo.ServiceName.html",
    "title": "Property ServiceName | Hazelcast .NET Documentation",
    "keywords": "Property ServiceName ServiceName Gets the service name of the object. Declaration public string ServiceName { get; } Property Value Type Description string"
  },
  "5.2.2/api/Hazelcast.Models.DistributedObjectInfo.ToString.html": {
    "href": "5.2.2/api/Hazelcast.Models.DistributedObjectInfo.ToString.html",
    "title": "Method ToString | Hazelcast .NET Documentation",
    "keywords": "Method ToString ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString()"
  },
  "5.2.2/api/Hazelcast.Models.HBigDecimal.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Models.HBigDecimal.-ctor.html",
    "title": "Constructor HBigDecimal | Hazelcast .NET Documentation",
    "keywords": "Constructor HBigDecimal HBigDecimal(BigInteger, int) Initializes a new instance of the HBigDecimal struct. Declaration public HBigDecimal(BigInteger unscaledValue, int scale = 0) Parameters Type Name Description BigInteger unscaledValue The unscaled component of the number. int scale The scale component of the number. HBigDecimal(int) Initializes a new instance of the HBigDecimal struct. Declaration public HBigDecimal(int value) Parameters Type Name Description int value The value of the number. HBigDecimal(decimal) Initializes a new instance of the HBigDecimal struct. Declaration public HBigDecimal(decimal value) Parameters Type Name Description decimal value The value of the number."
  },
  "5.2.2/api/Hazelcast.Models.HBigDecimal.Equals.html": {
    "href": "5.2.2/api/Hazelcast.Models.HBigDecimal.Equals.html",
    "title": "Method Equals | Hazelcast .NET Documentation",
    "keywords": "Method Equals Equals(HBigDecimal) Declaration public bool Equals(HBigDecimal other) Parameters Type Name Description HBigDecimal other Returns Type Description bool Implements IEquatable<T>.Equals(T) Equals(object?) Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj Returns Type Description bool Overrides ValueType.Equals(object)"
  },
  "5.2.2/api/Hazelcast.Models.HBigDecimal.GetHashCode.html": {
    "href": "5.2.2/api/Hazelcast.Models.HBigDecimal.GetHashCode.html",
    "title": "Method GetHashCode | Hazelcast .NET Documentation",
    "keywords": "Method GetHashCode GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides ValueType.GetHashCode()"
  },
  "5.2.2/api/Hazelcast.Models.HBigDecimal.html": {
    "href": "5.2.2/api/Hazelcast.Models.HBigDecimal.html",
    "title": "Struct HBigDecimal | Hazelcast .NET Documentation",
    "keywords": "Struct HBigDecimal Represents an Hazelcast DECIMAL primitive type value. Implements IEquatable<HBigDecimal> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Hazelcast.Models Assembly: Hazelcast.Net.dll Syntax public readonly struct HBigDecimal : IEquatable<HBigDecimal> Remarks The DECIMAL primitive type consists of a random precision BigInteger UnscaledValue and a int Scale which indicates the number of digits of UnscaledValue that should be to the right of the decimal point. The actual value is therefore UnscaledValue*(10^-Scale). Different combinations of (UnscaledValue, Scale) may represent the same HBigDecimal number. Use the Normalize() method to get the unique normalized representation of the number. Corresponds to Java java.math.BigDecimal. Constructors Name Description HBigDecimal(decimal) Initializes a new instance of the HBigDecimal struct. HBigDecimal(int) Initializes a new instance of the HBigDecimal struct. HBigDecimal(BigInteger, int) Initializes a new instance of the HBigDecimal struct. Fields Name Description MinusOne Gets a value that represents the number -1 (minus one). One Gets a value that represents the number 1 (one). Ten Gets a value that represents the number 10 (ten). Zero Gets a value that represents the number 0 (zero). Properties Name Description Scale Gets the scale part of the number. UnscaledValue Gets the unscaled value part of the number. Methods Name Description Equals(HBigDecimal) Equals(object?) GetHashCode() Normalize() Returns equivalent HBigDecimal value but with Scale guaranteed to be non-negative. Parse(string, CultureInfo) Converts the string representation of a number to its HBigDecimal equivalent. Parse(string) Converts the string representation of a number to its HBigDecimal equivalent. ToDecimal() Converts the numeric value of this instance to its equivalent decimal representation. ToString() ToString(CultureInfo) Converts the numeric value of this instance to its equivalent string representation. TryParse(string, out HBigDecimal) Converts the string representation of a number to its HBigDecimal equivalent. A return value indicates whether the operation succeeded. TryParse(string?, CultureInfo, out HBigDecimal) Converts the string representation of a number to its HBigDecimal equivalent. A return value indicates whether the operation succeeded. TryToDecimal(out decimal) Converts the numeric value of this instance to its equivalent decimal representation. A return value indicates whether the operation succeeded. Operators Name Description operator ==(HBigDecimal, HBigDecimal) Implements the == operator. explicit operator decimal(HBigDecimal) Implements the HBigDecimal to decimal conversion. explicit operator HBigDecimal(decimal) Implements the decimal to HBigDecimal conversion. operator !=(HBigDecimal, HBigDecimal) Implements the != operator."
  },
  "5.2.2/api/Hazelcast.Models.HBigDecimal.MinusOne.html": {
    "href": "5.2.2/api/Hazelcast.Models.HBigDecimal.MinusOne.html",
    "title": "Field MinusOne | Hazelcast .NET Documentation",
    "keywords": "Field MinusOne Gets a value that represents the number -1 (minus one). Namespace: Hazelcast.Models Assembly: Hazelcast.Net.dll Syntax public static readonly HBigDecimal MinusOne Returns Type Description HBigDecimal"
  },
  "5.2.2/api/Hazelcast.Models.HBigDecimal.Normalize.html": {
    "href": "5.2.2/api/Hazelcast.Models.HBigDecimal.Normalize.html",
    "title": "Method Normalize | Hazelcast .NET Documentation",
    "keywords": "Method Normalize Normalize() Returns equivalent HBigDecimal value but with Scale guaranteed to be non-negative. Declaration public HBigDecimal Normalize() Returns Type Description HBigDecimal"
  },
  "5.2.2/api/Hazelcast.Models.HBigDecimal.One.html": {
    "href": "5.2.2/api/Hazelcast.Models.HBigDecimal.One.html",
    "title": "Field One | Hazelcast .NET Documentation",
    "keywords": "Field One Gets a value that represents the number 1 (one). Namespace: Hazelcast.Models Assembly: Hazelcast.Net.dll Syntax public static readonly HBigDecimal One Returns Type Description HBigDecimal"
  },
  "5.2.2/api/Hazelcast.Models.HBigDecimal.op_Equality.html": {
    "href": "5.2.2/api/Hazelcast.Models.HBigDecimal.op_Equality.html",
    "title": "Operator operator == | Hazelcast .NET Documentation",
    "keywords": "Operator operator == operator ==(HBigDecimal, HBigDecimal) Implements the == operator. Declaration public static bool operator ==(HBigDecimal left, HBigDecimal right) Parameters Type Name Description HBigDecimal left HBigDecimal right Returns Type Description bool"
  },
  "5.2.2/api/Hazelcast.Models.HBigDecimal.op_Explicit.html": {
    "href": "5.2.2/api/Hazelcast.Models.HBigDecimal.op_Explicit.html",
    "title": "Operator explicit operator | Hazelcast .NET Documentation",
    "keywords": "Operator explicit operator explicit operator decimal(HBigDecimal) Implements the HBigDecimal to decimal conversion. Declaration public static explicit operator decimal(HBigDecimal value) Parameters Type Name Description HBigDecimal value Returns Type Description decimal Exceptions Type Condition OverflowException The value instance represents a number that is less than MinValue or greater than MaxValue. explicit operator HBigDecimal(decimal) Implements the decimal to HBigDecimal conversion. Declaration public static explicit operator HBigDecimal(decimal value) Parameters Type Name Description decimal value Returns Type Description HBigDecimal"
  },
  "5.2.2/api/Hazelcast.Models.HBigDecimal.op_Inequality.html": {
    "href": "5.2.2/api/Hazelcast.Models.HBigDecimal.op_Inequality.html",
    "title": "Operator operator != | Hazelcast .NET Documentation",
    "keywords": "Operator operator != operator !=(HBigDecimal, HBigDecimal) Implements the != operator. Declaration public static bool operator !=(HBigDecimal left, HBigDecimal right) Parameters Type Name Description HBigDecimal left HBigDecimal right Returns Type Description bool"
  },
  "5.2.2/api/Hazelcast.Models.HBigDecimal.Parse.html": {
    "href": "5.2.2/api/Hazelcast.Models.HBigDecimal.Parse.html",
    "title": "Method Parse | Hazelcast .NET Documentation",
    "keywords": "Method Parse Parse(string, CultureInfo) Converts the string representation of a number to its HBigDecimal equivalent. Declaration public static HBigDecimal Parse(string s, CultureInfo cultureInfo) Parameters Type Name Description string s A string containing a number to convert. CultureInfo cultureInfo An object that supplies culture-specific formatting information about s. Returns Type Description HBigDecimal A HBigDecimal equivalent to the number contained in s. Parse(string) Converts the string representation of a number to its HBigDecimal equivalent. Declaration public static HBigDecimal Parse(string s) Parameters Type Name Description string s A string containing a number to convert. Returns Type Description HBigDecimal A HBigDecimal equivalent to the number contained in s."
  },
  "5.2.2/api/Hazelcast.Models.HBigDecimal.Scale.html": {
    "href": "5.2.2/api/Hazelcast.Models.HBigDecimal.Scale.html",
    "title": "Property Scale | Hazelcast .NET Documentation",
    "keywords": "Property Scale Scale Gets the scale part of the number. Declaration public int Scale { get; } Property Value Type Description int"
  },
  "5.2.2/api/Hazelcast.Models.HBigDecimal.Ten.html": {
    "href": "5.2.2/api/Hazelcast.Models.HBigDecimal.Ten.html",
    "title": "Field Ten | Hazelcast .NET Documentation",
    "keywords": "Field Ten Gets a value that represents the number 10 (ten). Namespace: Hazelcast.Models Assembly: Hazelcast.Net.dll Syntax public static readonly HBigDecimal Ten Returns Type Description HBigDecimal"
  },
  "5.2.2/api/Hazelcast.Models.HBigDecimal.ToDecimal.html": {
    "href": "5.2.2/api/Hazelcast.Models.HBigDecimal.ToDecimal.html",
    "title": "Method ToDecimal | Hazelcast .NET Documentation",
    "keywords": "Method ToDecimal ToDecimal() Converts the numeric value of this instance to its equivalent decimal representation. Declaration public decimal ToDecimal() Returns Type Description decimal The decimal representation of this instance. Exceptions Type Condition OverflowException This instance represents a number that is less than MinValue or greater than MaxValue."
  },
  "5.2.2/api/Hazelcast.Models.HBigDecimal.ToString.html": {
    "href": "5.2.2/api/Hazelcast.Models.HBigDecimal.ToString.html",
    "title": "Method ToString | Hazelcast .NET Documentation",
    "keywords": "Method ToString ToString(CultureInfo) Converts the numeric value of this instance to its equivalent string representation. Declaration public string ToString(CultureInfo cultureInfo) Parameters Type Name Description CultureInfo cultureInfo An object that supplies culture-specific formatting information. Returns Type Description string The string representation of the value of this instance as specified by cultureInfo. ToString() Declaration public override string ToString() Returns Type Description string Overrides ValueType.ToString()"
  },
  "5.2.2/api/Hazelcast.Models.HBigDecimal.TryParse.html": {
    "href": "5.2.2/api/Hazelcast.Models.HBigDecimal.TryParse.html",
    "title": "Method TryParse | Hazelcast .NET Documentation",
    "keywords": "Method TryParse TryParse(string?, CultureInfo, out HBigDecimal) Converts the string representation of a number to its HBigDecimal equivalent. A return value indicates whether the operation succeeded. Declaration public static bool TryParse(string? s, CultureInfo cultureInfo, out HBigDecimal bigDecimal) Parameters Type Name Description string s A string containing a number to convert. CultureInfo cultureInfo An object that supplies culture-specific formatting information about s. HBigDecimal bigDecimal When this method returns, contains the HBigDecimal equivalent of the number contained in s, if the conversion succeeded, or zero if the conversion failed. Returns Type Description bool true if s was converted successfully; otherwise, false. TryParse(string, out HBigDecimal) Converts the string representation of a number to its HBigDecimal equivalent. A return value indicates whether the operation succeeded. Declaration public static bool TryParse(string s, out HBigDecimal bigDecimal) Parameters Type Name Description string s A string containing a number to convert. HBigDecimal bigDecimal When this method returns, contains the HBigDecimal equivalent of the number contained in s, if the conversion succeeded, or zero if the conversion failed. Returns Type Description bool true if s was converted successfully; otherwise, false."
  },
  "5.2.2/api/Hazelcast.Models.HBigDecimal.TryToDecimal.html": {
    "href": "5.2.2/api/Hazelcast.Models.HBigDecimal.TryToDecimal.html",
    "title": "Method TryToDecimal | Hazelcast .NET Documentation",
    "keywords": "Method TryToDecimal TryToDecimal(out decimal) Converts the numeric value of this instance to its equivalent decimal representation. A return value indicates whether the operation succeeded. Declaration public bool TryToDecimal(out decimal value) Parameters Type Name Description decimal value When this method returns, contains the decimal equivalent of the number represented by this instance, if the conversion succeeded, or zero if the conversion failed. Returns Type Description bool true if the number represented by this instance was converted successfully; otherwise false. Remarks A HBigDecimal value can be converted to decimal if it is greater than or equal to MinValue and less than or equal to MaxValue."
  },
  "5.2.2/api/Hazelcast.Models.HBigDecimal.UnscaledValue.html": {
    "href": "5.2.2/api/Hazelcast.Models.HBigDecimal.UnscaledValue.html",
    "title": "Property UnscaledValue | Hazelcast .NET Documentation",
    "keywords": "Property UnscaledValue UnscaledValue Gets the unscaled value part of the number. Declaration public BigInteger UnscaledValue { get; } Property Value Type Description BigInteger"
  },
  "5.2.2/api/Hazelcast.Models.HBigDecimal.Zero.html": {
    "href": "5.2.2/api/Hazelcast.Models.HBigDecimal.Zero.html",
    "title": "Field Zero | Hazelcast .NET Documentation",
    "keywords": "Field Zero Gets a value that represents the number 0 (zero). Namespace: Hazelcast.Models Assembly: Hazelcast.Net.dll Syntax public static readonly HBigDecimal Zero Returns Type Description HBigDecimal"
  },
  "5.2.2/api/Hazelcast.Models.HLocalDate.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalDate.-ctor.html",
    "title": "Constructor HLocalDate | Hazelcast .NET Documentation",
    "keywords": "Constructor HLocalDate HLocalDate(int, byte, byte) Initializes a new instance of the HLocalDate struct. Declaration public HLocalDate(int year, byte month, byte day) Parameters Type Name Description int year The year value. byte month The month value. byte day The day value. Exceptions Type Condition ArgumentOutOfRangeException year, month and/or day are out-of-range. HLocalDate(DateTime) Initializes a new instance of the HLocalDate struct. Declaration public HLocalDate(DateTime dateTime) Parameters Type Name Description DateTime dateTime The date. HLocalDate(DateOnly) Initializes a new instance of the HLocalDate struct. Declaration public HLocalDate(DateOnly dateOnly) Parameters Type Name Description DateOnly dateOnly The date."
  },
  "5.2.2/api/Hazelcast.Models.HLocalDate.Day.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalDate.Day.html",
    "title": "Property Day | Hazelcast .NET Documentation",
    "keywords": "Property Day Day Gets the day value. Declaration public byte Day { get; } Property Value Type Description byte"
  },
  "5.2.2/api/Hazelcast.Models.HLocalDate.Equals.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalDate.Equals.html",
    "title": "Method Equals | Hazelcast .NET Documentation",
    "keywords": "Method Equals Equals(HLocalDate) Declaration public bool Equals(HLocalDate other) Parameters Type Name Description HLocalDate other Returns Type Description bool Implements IEquatable<T>.Equals(T) Equals(object?) Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj Returns Type Description bool Overrides ValueType.Equals(object)"
  },
  "5.2.2/api/Hazelcast.Models.HLocalDate.GetHashCode.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalDate.GetHashCode.html",
    "title": "Method GetHashCode | Hazelcast .NET Documentation",
    "keywords": "Method GetHashCode GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides ValueType.GetHashCode()"
  },
  "5.2.2/api/Hazelcast.Models.HLocalDate.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalDate.html",
    "title": "Struct HLocalDate | Hazelcast .NET Documentation",
    "keywords": "Struct HLocalDate Represents an Hazelcast DATE primitive type value. Implements IEquatable<HLocalDate> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Hazelcast.Models Assembly: Hazelcast.Net.dll Syntax public readonly struct HLocalDate : IEquatable<HLocalDate> Remarks The DATE primitive type consists in a day, month and year, with year being comprised between MinYear and MaxYear inclusive. Constructors Name Description HLocalDate(DateOnly) Initializes a new instance of the HLocalDate struct. HLocalDate(DateTime) Initializes a new instance of the HLocalDate struct. HLocalDate(int, byte, byte) Initializes a new instance of the HLocalDate struct. Fields Name Description Max Gets the largest possible value of a HLocalDate. MaxYear Gets the largest possible value of the year value. Min Gets the smallest possible value of a HLocalDate. MinYear Gets the smallest possible value of the year value. Properties Name Description Day Gets the day value. Month Gets the month value. Year Gets the year value. Methods Name Description Equals(HLocalDate) Equals(object?) GetHashCode() Parse(string) Converts the string representation of a date to its HLocalDate representation. ToDateOnly() Converts the value of this HLocalDate to its DateOnly equivalent. ToDateTime() Converts the value of this HLocalDate to its DateTime equivalent. ToString() TryParse(string, out HLocalDate) Converts the string representation of a date to its HLocalDate representation. A return value indicates whether the operation succeeded. TryToDateOnly(out DateOnly) Converts the value of this HLocalDate to its DateOnly equivalent. A return value indicates whether the operation succeeded. TryToDateTime(out DateTime) Converts the value of this HLocalDate to its DateTime equivalent. A return value indicates whether the operation succeeded. Operators Name Description operator ==(HLocalDate, HLocalDate) Implements the == operator. explicit operator DateOnly(HLocalDate) Implements the HLocalDate to DateOnly conversion. explicit operator DateTime(HLocalDate) Implements the HLocalDate to DateTime conversion. explicit operator HLocalDate(DateOnly) Implements the DateOnly to HLocalDate conversion. explicit operator HLocalDate(DateTime) Implements the DateTime to HLocalDate conversion. operator !=(HLocalDate, HLocalDate) Implements the != operator."
  },
  "5.2.2/api/Hazelcast.Models.HLocalDate.Max.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalDate.Max.html",
    "title": "Field Max | Hazelcast .NET Documentation",
    "keywords": "Field Max Gets the largest possible value of a HLocalDate. Namespace: Hazelcast.Models Assembly: Hazelcast.Net.dll Syntax public static readonly HLocalDate Max Returns Type Description HLocalDate"
  },
  "5.2.2/api/Hazelcast.Models.HLocalDate.MaxYear.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalDate.MaxYear.html",
    "title": "Field MaxYear | Hazelcast .NET Documentation",
    "keywords": "Field MaxYear Gets the largest possible value of the year value. Namespace: Hazelcast.Models Assembly: Hazelcast.Net.dll Syntax public const int MaxYear = 999999999 Returns Type Description int"
  },
  "5.2.2/api/Hazelcast.Models.HLocalDate.Min.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalDate.Min.html",
    "title": "Field Min | Hazelcast .NET Documentation",
    "keywords": "Field Min Gets the smallest possible value of a HLocalDate. Namespace: Hazelcast.Models Assembly: Hazelcast.Net.dll Syntax public static readonly HLocalDate Min Returns Type Description HLocalDate"
  },
  "5.2.2/api/Hazelcast.Models.HLocalDate.MinYear.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalDate.MinYear.html",
    "title": "Field MinYear | Hazelcast .NET Documentation",
    "keywords": "Field MinYear Gets the smallest possible value of the year value. Namespace: Hazelcast.Models Assembly: Hazelcast.Net.dll Syntax public const int MinYear = -999999999 Returns Type Description int"
  },
  "5.2.2/api/Hazelcast.Models.HLocalDate.Month.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalDate.Month.html",
    "title": "Property Month | Hazelcast .NET Documentation",
    "keywords": "Property Month Month Gets the month value. Declaration public byte Month { get; } Property Value Type Description byte"
  },
  "5.2.2/api/Hazelcast.Models.HLocalDate.op_Equality.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalDate.op_Equality.html",
    "title": "Operator operator == | Hazelcast .NET Documentation",
    "keywords": "Operator operator == operator ==(HLocalDate, HLocalDate) Implements the == operator. Declaration public static bool operator ==(HLocalDate left, HLocalDate right) Parameters Type Name Description HLocalDate left HLocalDate right Returns Type Description bool"
  },
  "5.2.2/api/Hazelcast.Models.HLocalDate.op_Explicit.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalDate.op_Explicit.html",
    "title": "Operator explicit operator | Hazelcast .NET Documentation",
    "keywords": "Operator explicit operator explicit operator DateTime(HLocalDate) Implements the HLocalDate to DateTime conversion. Declaration public static explicit operator DateTime(HLocalDate localDate) Parameters Type Name Description HLocalDate localDate Returns Type Description DateTime explicit operator HLocalDate(DateTime) Implements the DateTime to HLocalDate conversion. Declaration public static explicit operator HLocalDate(DateTime dateTime) Parameters Type Name Description DateTime dateTime Returns Type Description HLocalDate explicit operator DateOnly(HLocalDate) Implements the HLocalDate to DateOnly conversion. Declaration public static explicit operator DateOnly(HLocalDate localDate) Parameters Type Name Description HLocalDate localDate Returns Type Description DateOnly explicit operator HLocalDate(DateOnly) Implements the DateOnly to HLocalDate conversion. Declaration public static explicit operator HLocalDate(DateOnly dateOnly) Parameters Type Name Description DateOnly dateOnly Returns Type Description HLocalDate"
  },
  "5.2.2/api/Hazelcast.Models.HLocalDate.op_Inequality.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalDate.op_Inequality.html",
    "title": "Operator operator != | Hazelcast .NET Documentation",
    "keywords": "Operator operator != operator !=(HLocalDate, HLocalDate) Implements the != operator. Declaration public static bool operator !=(HLocalDate left, HLocalDate right) Parameters Type Name Description HLocalDate left HLocalDate right Returns Type Description bool"
  },
  "5.2.2/api/Hazelcast.Models.HLocalDate.Parse.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalDate.Parse.html",
    "title": "Method Parse | Hazelcast .NET Documentation",
    "keywords": "Method Parse Parse(string) Converts the string representation of a date to its HLocalDate representation. Declaration public static HLocalDate Parse(string s) Parameters Type Name Description string s A string containing a date to convert. Returns Type Description HLocalDate A HLocalDate equivalent to the date contained in s. Exceptions Type Condition FormatException The s string cannot be parsed."
  },
  "5.2.2/api/Hazelcast.Models.HLocalDate.ToDateOnly.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalDate.ToDateOnly.html",
    "title": "Method ToDateOnly | Hazelcast .NET Documentation",
    "keywords": "Method ToDateOnly ToDateOnly() Converts the value of this HLocalDate to its DateOnly equivalent. Declaration public DateOnly ToDateOnly() Returns Type Description DateOnly The DateOnly representation of this instance."
  },
  "5.2.2/api/Hazelcast.Models.HLocalDate.ToDateTime.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalDate.ToDateTime.html",
    "title": "Method ToDateTime | Hazelcast .NET Documentation",
    "keywords": "Method ToDateTime ToDateTime() Converts the value of this HLocalDate to its DateTime equivalent. Declaration public DateTime ToDateTime() Returns Type Description DateTime The DateTime representation of this instance."
  },
  "5.2.2/api/Hazelcast.Models.HLocalDate.ToString.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalDate.ToString.html",
    "title": "Method ToString | Hazelcast .NET Documentation",
    "keywords": "Method ToString ToString() Declaration public override string ToString() Returns Type Description string Overrides ValueType.ToString()"
  },
  "5.2.2/api/Hazelcast.Models.HLocalDate.TryParse.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalDate.TryParse.html",
    "title": "Method TryParse | Hazelcast .NET Documentation",
    "keywords": "Method TryParse TryParse(string, out HLocalDate) Converts the string representation of a date to its HLocalDate representation. A return value indicates whether the operation succeeded. Declaration public static bool TryParse(string s, out HLocalDate localDate) Parameters Type Name Description string s A string containing a date to convert. HLocalDate localDate When this method returns, contains the HLocalDate equivalent of the date in s, if the conversion succeeded, or zero if the conversion failed. Returns Type Description bool true if s was converted successfully; otherwise, false."
  },
  "5.2.2/api/Hazelcast.Models.HLocalDate.TryToDateOnly.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalDate.TryToDateOnly.html",
    "title": "Method TryToDateOnly | Hazelcast .NET Documentation",
    "keywords": "Method TryToDateOnly TryToDateOnly(out DateOnly) Converts the value of this HLocalDate to its DateOnly equivalent. A return value indicates whether the operation succeeded. Declaration public bool TryToDateOnly(out DateOnly dateOnly) Parameters Type Name Description DateOnly dateOnly When this method returns, contains the DateOnly equivalent to the value represented by this instance, if the conversion succeeded, or the default value if the conversion failed. Returns Type Description bool true if the value represented by this instance was converted successfully; otherwise false."
  },
  "5.2.2/api/Hazelcast.Models.HLocalDate.TryToDateTime.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalDate.TryToDateTime.html",
    "title": "Method TryToDateTime | Hazelcast .NET Documentation",
    "keywords": "Method TryToDateTime TryToDateTime(out DateTime) Converts the value of this HLocalDate to its DateTime equivalent. A return value indicates whether the operation succeeded. Declaration public bool TryToDateTime(out DateTime dateTime) Parameters Type Name Description DateTime dateTime When this method returns, contains the DateTime equivalent to the value represented by this instance, if the conversion succeeded, or the default value if the conversion failed. Returns Type Description bool true if the value represented by this instance was converted successfully; otherwise false."
  },
  "5.2.2/api/Hazelcast.Models.HLocalDate.Year.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalDate.Year.html",
    "title": "Property Year | Hazelcast .NET Documentation",
    "keywords": "Property Year Year Gets the year value. Declaration public int Year { get; } Property Value Type Description int"
  },
  "5.2.2/api/Hazelcast.Models.HLocalDateTime.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalDateTime.-ctor.html",
    "title": "Constructor HLocalDateTime | Hazelcast .NET Documentation",
    "keywords": "Constructor HLocalDateTime HLocalDateTime(HLocalDate, HLocalTime) Initializes a new instance of the HLocalDateTime struct. Declaration public HLocalDateTime(HLocalDate date, HLocalTime time) Parameters Type Name Description HLocalDate date The date value. HLocalTime time The time value. HLocalDateTime(int, byte, byte, byte, byte, byte, int) Initializes a new instance of the HLocalDateTime struct. Declaration public HLocalDateTime(int year, byte month, byte day, byte hour, byte minute, byte second, int nanosecond) Parameters Type Name Description int year The year value. byte month The month value. byte day The day value. byte hour The hour value. byte minute The minute value. byte second The second value. int nanosecond The nanosecond value. HLocalDateTime(int, byte, byte) Initializes a new instance of the HLocalDateTime struct. Declaration public HLocalDateTime(int year, byte month, byte day) Parameters Type Name Description int year The year value. byte month The month value. byte day The day value. HLocalDateTime(DateTime) Initializes a new instance of the HLocalDateTime struct. Declaration public HLocalDateTime(DateTime dateTime) Parameters Type Name Description DateTime dateTime The date and time value."
  },
  "5.2.2/api/Hazelcast.Models.HLocalDateTime.Date.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalDateTime.Date.html",
    "title": "Property Date | Hazelcast .NET Documentation",
    "keywords": "Property Date Date Gets the date value. Declaration public HLocalDate Date { get; } Property Value Type Description HLocalDate"
  },
  "5.2.2/api/Hazelcast.Models.HLocalDateTime.Day.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalDateTime.Day.html",
    "title": "Property Day | Hazelcast .NET Documentation",
    "keywords": "Property Day Day Gets the day value. Declaration public byte Day { get; } Property Value Type Description byte"
  },
  "5.2.2/api/Hazelcast.Models.HLocalDateTime.Equals.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalDateTime.Equals.html",
    "title": "Method Equals | Hazelcast .NET Documentation",
    "keywords": "Method Equals Equals(HLocalDateTime) Declaration public bool Equals(HLocalDateTime other) Parameters Type Name Description HLocalDateTime other Returns Type Description bool Implements IEquatable<T>.Equals(T) Equals(object?) Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj Returns Type Description bool Overrides ValueType.Equals(object)"
  },
  "5.2.2/api/Hazelcast.Models.HLocalDateTime.GetHashCode.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalDateTime.GetHashCode.html",
    "title": "Method GetHashCode | Hazelcast .NET Documentation",
    "keywords": "Method GetHashCode GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides ValueType.GetHashCode()"
  },
  "5.2.2/api/Hazelcast.Models.HLocalDateTime.Hour.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalDateTime.Hour.html",
    "title": "Property Hour | Hazelcast .NET Documentation",
    "keywords": "Property Hour Hour Gets the hour value. Declaration public byte Hour { get; } Property Value Type Description byte"
  },
  "5.2.2/api/Hazelcast.Models.HLocalDateTime.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalDateTime.html",
    "title": "Struct HLocalDateTime | Hazelcast .NET Documentation",
    "keywords": "Struct HLocalDateTime Represents an Hazelcast SQL TIMESTAMP primitive type value. Implements IEquatable<HLocalDateTime> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Hazelcast.Models Assembly: Hazelcast.Net.dll Syntax public readonly struct HLocalDateTime : IEquatable<HLocalDateTime> Remarks The TIMESTAMP primitive type consists of a DATE Date and a TIME Time. Constructors Name Description HLocalDateTime(HLocalDate, HLocalTime) Initializes a new instance of the HLocalDateTime struct. HLocalDateTime(DateTime) Initializes a new instance of the HLocalDateTime struct. HLocalDateTime(int, byte, byte, byte, byte, byte, int) Initializes a new instance of the HLocalDateTime struct. HLocalDateTime(int, byte, byte) Initializes a new instance of the HLocalDateTime struct. Fields Name Description Max Gets the largest possible value of a HLocalDateTime. Min Gets the smallest possible value of a HLocalDateTime. Properties Name Description Date Gets the date value. Day Gets the day value. Hour Gets the hour value. Minute Gets the minute value. Month Gets the month value. Nanosecond Gets the nanosecond value. Second Gets the second value. Time Gets the time value. Year Gets the year value. Methods Name Description Equals(HLocalDateTime) Equals(object?) GetHashCode() Parse(string) Converts the string representation of a date and time to its HLocalDateTime representation. ToDateTime() Converts the value of this HLocalDateTime to its DateTime equivalent. ToString() TryParse(string?, out HLocalDateTime) Converts the string representation of a date and time to its HLocalDateTime representation. A return value indicates whether the operation succeeded. TryToDateTime(out DateTime) Converts the value of this HLocalDateTime to its DateTime equivalent. A return value indicates whether the operation succeeded. Operators Name Description operator ==(HLocalDateTime, HLocalDateTime) Implements the == operator. explicit operator DateTime(HLocalDateTime) Implements the HLocalDateTime to DateTime conversion. explicit operator HLocalDateTime(DateTime) Implements the DateTime to HLocalDateTime conversion. operator !=(HLocalDateTime, HLocalDateTime) Implements the != operator."
  },
  "5.2.2/api/Hazelcast.Models.HLocalDateTime.Max.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalDateTime.Max.html",
    "title": "Field Max | Hazelcast .NET Documentation",
    "keywords": "Field Max Gets the largest possible value of a HLocalDateTime. Namespace: Hazelcast.Models Assembly: Hazelcast.Net.dll Syntax public static readonly HLocalDateTime Max Returns Type Description HLocalDateTime"
  },
  "5.2.2/api/Hazelcast.Models.HLocalDateTime.Min.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalDateTime.Min.html",
    "title": "Field Min | Hazelcast .NET Documentation",
    "keywords": "Field Min Gets the smallest possible value of a HLocalDateTime. Namespace: Hazelcast.Models Assembly: Hazelcast.Net.dll Syntax public static readonly HLocalDateTime Min Returns Type Description HLocalDateTime"
  },
  "5.2.2/api/Hazelcast.Models.HLocalDateTime.Minute.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalDateTime.Minute.html",
    "title": "Property Minute | Hazelcast .NET Documentation",
    "keywords": "Property Minute Minute Gets the minute value. Declaration public byte Minute { get; } Property Value Type Description byte"
  },
  "5.2.2/api/Hazelcast.Models.HLocalDateTime.Month.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalDateTime.Month.html",
    "title": "Property Month | Hazelcast .NET Documentation",
    "keywords": "Property Month Month Gets the month value. Declaration public byte Month { get; } Property Value Type Description byte"
  },
  "5.2.2/api/Hazelcast.Models.HLocalDateTime.Nanosecond.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalDateTime.Nanosecond.html",
    "title": "Property Nanosecond | Hazelcast .NET Documentation",
    "keywords": "Property Nanosecond Nanosecond Gets the nanosecond value. Declaration public int Nanosecond { get; } Property Value Type Description int"
  },
  "5.2.2/api/Hazelcast.Models.HLocalDateTime.op_Equality.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalDateTime.op_Equality.html",
    "title": "Operator operator == | Hazelcast .NET Documentation",
    "keywords": "Operator operator == operator ==(HLocalDateTime, HLocalDateTime) Implements the == operator. Declaration public static bool operator ==(HLocalDateTime left, HLocalDateTime right) Parameters Type Name Description HLocalDateTime left HLocalDateTime right Returns Type Description bool"
  },
  "5.2.2/api/Hazelcast.Models.HLocalDateTime.op_Explicit.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalDateTime.op_Explicit.html",
    "title": "Operator explicit operator | Hazelcast .NET Documentation",
    "keywords": "Operator explicit operator explicit operator DateTime(HLocalDateTime) Implements the HLocalDateTime to DateTime conversion. Declaration public static explicit operator DateTime(HLocalDateTime localDateTime) Parameters Type Name Description HLocalDateTime localDateTime Returns Type Description DateTime explicit operator HLocalDateTime(DateTime) Implements the DateTime to HLocalDateTime conversion. Declaration public static explicit operator HLocalDateTime(DateTime dateTime) Parameters Type Name Description DateTime dateTime Returns Type Description HLocalDateTime"
  },
  "5.2.2/api/Hazelcast.Models.HLocalDateTime.op_Inequality.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalDateTime.op_Inequality.html",
    "title": "Operator operator != | Hazelcast .NET Documentation",
    "keywords": "Operator operator != operator !=(HLocalDateTime, HLocalDateTime) Implements the != operator. Declaration public static bool operator !=(HLocalDateTime left, HLocalDateTime right) Parameters Type Name Description HLocalDateTime left HLocalDateTime right Returns Type Description bool"
  },
  "5.2.2/api/Hazelcast.Models.HLocalDateTime.Parse.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalDateTime.Parse.html",
    "title": "Method Parse | Hazelcast .NET Documentation",
    "keywords": "Method Parse Parse(string) Converts the string representation of a date and time to its HLocalDateTime representation. Declaration public static HLocalDateTime Parse(string s) Parameters Type Name Description string s A string containing a date and time to convert. Returns Type Description HLocalDateTime A HLocalDateTime equivalent to the date and time time contained in s. Exceptions Type Condition FormatException The s string cannot be parsed."
  },
  "5.2.2/api/Hazelcast.Models.HLocalDateTime.Second.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalDateTime.Second.html",
    "title": "Property Second | Hazelcast .NET Documentation",
    "keywords": "Property Second Second Gets the second value. Declaration public byte Second { get; } Property Value Type Description byte"
  },
  "5.2.2/api/Hazelcast.Models.HLocalDateTime.Time.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalDateTime.Time.html",
    "title": "Property Time | Hazelcast .NET Documentation",
    "keywords": "Property Time Time Gets the time value. Declaration public HLocalTime Time { get; } Property Value Type Description HLocalTime"
  },
  "5.2.2/api/Hazelcast.Models.HLocalDateTime.ToDateTime.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalDateTime.ToDateTime.html",
    "title": "Method ToDateTime | Hazelcast .NET Documentation",
    "keywords": "Method ToDateTime ToDateTime() Converts the value of this HLocalDateTime to its DateTime equivalent. Declaration public DateTime ToDateTime() Returns Type Description DateTime The DateTime representation of this instance."
  },
  "5.2.2/api/Hazelcast.Models.HLocalDateTime.ToString.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalDateTime.ToString.html",
    "title": "Method ToString | Hazelcast .NET Documentation",
    "keywords": "Method ToString ToString() Declaration public override string ToString() Returns Type Description string Overrides ValueType.ToString()"
  },
  "5.2.2/api/Hazelcast.Models.HLocalDateTime.TryParse.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalDateTime.TryParse.html",
    "title": "Method TryParse | Hazelcast .NET Documentation",
    "keywords": "Method TryParse TryParse(string?, out HLocalDateTime) Converts the string representation of a date and time to its HLocalDateTime representation. A return value indicates whether the operation succeeded. Declaration public static bool TryParse(string? s, out HLocalDateTime localDateTime) Parameters Type Name Description string s A string containing a date and time to convert. HLocalDateTime localDateTime When this method returns, contains the HLocalDateTime equivalent of the date and time in s, if the conversion succeeded, or zero if the conversion failed. Returns Type Description bool true if s was converted successfully; otherwise, false."
  },
  "5.2.2/api/Hazelcast.Models.HLocalDateTime.TryToDateTime.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalDateTime.TryToDateTime.html",
    "title": "Method TryToDateTime | Hazelcast .NET Documentation",
    "keywords": "Method TryToDateTime TryToDateTime(out DateTime) Converts the value of this HLocalDateTime to its DateTime equivalent. A return value indicates whether the operation succeeded. Declaration public bool TryToDateTime(out DateTime dateTime) Parameters Type Name Description DateTime dateTime When this method returns, contains the DateTime equivalent to the value represented by this instance, if the conversion succeeded, or the default value if the conversion failed. Returns Type Description bool true if the value represented by this instance was converted successfully; otherwise false."
  },
  "5.2.2/api/Hazelcast.Models.HLocalDateTime.Year.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalDateTime.Year.html",
    "title": "Property Year | Hazelcast .NET Documentation",
    "keywords": "Property Year Year Gets the year value. Declaration public int Year { get; } Property Value Type Description int"
  },
  "5.2.2/api/Hazelcast.Models.HLocalTime.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalTime.-ctor.html",
    "title": "Constructor HLocalTime | Hazelcast .NET Documentation",
    "keywords": "Constructor HLocalTime HLocalTime(byte, byte, byte, int) Initializes a new instance of the HLocalTime struct. Declaration public HLocalTime(byte hour, byte minute, byte second, int nanosecond) Parameters Type Name Description byte hour The hour value. byte minute The minute value. byte second The second value. int nanosecond The nanosecond value. Exceptions Type Condition ArgumentOutOfRangeException hour, minute, second, and/or nanosecond is out of range. HLocalTime(DateTime) Initializes a new instance of the HLocalTime struct. Declaration public HLocalTime(DateTime dateTime) Parameters Type Name Description DateTime dateTime The time. Remarks The date part of the dateTime is ignored. HLocalTime(TimeSpan) Initializes a new instance of the HLocalTime struct. Declaration public HLocalTime(TimeSpan timeSpan) Parameters Type Name Description TimeSpan timeSpan The time. Exceptions Type Condition ArgumentOutOfRangeException timeSpan is out of range. HLocalTime(TimeOnly) Initializes a new instance of the HLocalTime struct. Declaration public HLocalTime(TimeOnly timeOnly) Parameters Type Name Description TimeOnly timeOnly The time."
  },
  "5.2.2/api/Hazelcast.Models.HLocalTime.Equals.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalTime.Equals.html",
    "title": "Method Equals | Hazelcast .NET Documentation",
    "keywords": "Method Equals Equals(HLocalTime) Declaration public bool Equals(HLocalTime other) Parameters Type Name Description HLocalTime other Returns Type Description bool Implements IEquatable<T>.Equals(T) Equals(object?) Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj Returns Type Description bool Overrides ValueType.Equals(object)"
  },
  "5.2.2/api/Hazelcast.Models.HLocalTime.GetHashCode.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalTime.GetHashCode.html",
    "title": "Method GetHashCode | Hazelcast .NET Documentation",
    "keywords": "Method GetHashCode GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides ValueType.GetHashCode()"
  },
  "5.2.2/api/Hazelcast.Models.HLocalTime.Hour.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalTime.Hour.html",
    "title": "Property Hour | Hazelcast .NET Documentation",
    "keywords": "Property Hour Hour Gets the hour value. Declaration public byte Hour { get; } Property Value Type Description byte"
  },
  "5.2.2/api/Hazelcast.Models.HLocalTime.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalTime.html",
    "title": "Struct HLocalTime | Hazelcast .NET Documentation",
    "keywords": "Struct HLocalTime Represents an Hazelcast TIME primitive type value. Implements IEquatable<HLocalTime> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Hazelcast.Models Assembly: Hazelcast.Net.dll Syntax public readonly struct HLocalTime : IEquatable<HLocalTime> Remarks The TIME primitive type consists in hours, minutes, seconds and nanoseconds, with nanosecond precision and one-day range. Constructors Name Description HLocalTime(byte, byte, byte, int) Initializes a new instance of the HLocalTime struct. HLocalTime(DateTime) Initializes a new instance of the HLocalTime struct. HLocalTime(TimeOnly) Initializes a new instance of the HLocalTime struct. HLocalTime(TimeSpan) Initializes a new instance of the HLocalTime struct. Fields Name Description Max Gets the largest possible value of a HLocalTime. Midnight Gets a value that represents midnight, i.e. \"00:00:00\". Min Gets the smallest possible value of a HLocalTime. Noon Gets a value that represents noon, i.e. \"12:00:00\". Properties Name Description Hour Gets the hour value. Minute Gets the minute value. Nanosecond Gets the nanosecond value. Second Gets the second value. Methods Name Description Equals(HLocalTime) Equals(object?) GetHashCode() Parse(string) Converts the string representation of a time to its HLocalTime representation. ToString() ToTimeOnly() ToTimeSpan() Converts the value of this HLocalTime to its TimeSpan equivalent. TryParse(string, out HLocalTime) Converts the string representation of a time to its HLocalTime representation. A return value indicates whether the operation succeeded. Operators Name Description operator ==(HLocalTime, HLocalTime) Implements the == operator. explicit operator TimeOnly(HLocalTime) Implements the HLocalTime to TimeOnly conversion. explicit operator TimeSpan(HLocalTime) Implements the HLocalTime to TimeSpan conversion. explicit operator HLocalTime(DateTime) Implements the DateTime to HLocalTime conversion. explicit operator HLocalTime(TimeOnly) Implements the TimeOnly to HLocalTime conversion. explicit operator HLocalTime(TimeSpan) Implements the TimeSpan to HLocalTime conversion. operator !=(HLocalTime, HLocalTime) Implements the != operator."
  },
  "5.2.2/api/Hazelcast.Models.HLocalTime.Max.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalTime.Max.html",
    "title": "Field Max | Hazelcast .NET Documentation",
    "keywords": "Field Max Gets the largest possible value of a HLocalTime. Namespace: Hazelcast.Models Assembly: Hazelcast.Net.dll Syntax public static readonly HLocalTime Max Returns Type Description HLocalTime"
  },
  "5.2.2/api/Hazelcast.Models.HLocalTime.Midnight.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalTime.Midnight.html",
    "title": "Field Midnight | Hazelcast .NET Documentation",
    "keywords": "Field Midnight Gets a value that represents midnight, i.e. \"00:00:00\". Namespace: Hazelcast.Models Assembly: Hazelcast.Net.dll Syntax public static readonly HLocalTime Midnight Returns Type Description HLocalTime"
  },
  "5.2.2/api/Hazelcast.Models.HLocalTime.Min.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalTime.Min.html",
    "title": "Field Min | Hazelcast .NET Documentation",
    "keywords": "Field Min Gets the smallest possible value of a HLocalTime. Namespace: Hazelcast.Models Assembly: Hazelcast.Net.dll Syntax public static readonly HLocalTime Min Returns Type Description HLocalTime"
  },
  "5.2.2/api/Hazelcast.Models.HLocalTime.Minute.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalTime.Minute.html",
    "title": "Property Minute | Hazelcast .NET Documentation",
    "keywords": "Property Minute Minute Gets the minute value. Declaration public byte Minute { get; } Property Value Type Description byte"
  },
  "5.2.2/api/Hazelcast.Models.HLocalTime.Nanosecond.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalTime.Nanosecond.html",
    "title": "Property Nanosecond | Hazelcast .NET Documentation",
    "keywords": "Property Nanosecond Nanosecond Gets the nanosecond value. Declaration public int Nanosecond { get; } Property Value Type Description int"
  },
  "5.2.2/api/Hazelcast.Models.HLocalTime.Noon.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalTime.Noon.html",
    "title": "Field Noon | Hazelcast .NET Documentation",
    "keywords": "Field Noon Gets a value that represents noon, i.e. \"12:00:00\". Namespace: Hazelcast.Models Assembly: Hazelcast.Net.dll Syntax public static readonly HLocalTime Noon Returns Type Description HLocalTime"
  },
  "5.2.2/api/Hazelcast.Models.HLocalTime.op_Equality.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalTime.op_Equality.html",
    "title": "Operator operator == | Hazelcast .NET Documentation",
    "keywords": "Operator operator == operator ==(HLocalTime, HLocalTime) Implements the == operator. Declaration public static bool operator ==(HLocalTime left, HLocalTime right) Parameters Type Name Description HLocalTime left HLocalTime right Returns Type Description bool"
  },
  "5.2.2/api/Hazelcast.Models.HLocalTime.op_Explicit.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalTime.op_Explicit.html",
    "title": "Operator explicit operator | Hazelcast .NET Documentation",
    "keywords": "Operator explicit operator explicit operator TimeSpan(HLocalTime) Implements the HLocalTime to TimeSpan conversion. Declaration public static explicit operator TimeSpan(HLocalTime localTime) Parameters Type Name Description HLocalTime localTime Returns Type Description TimeSpan explicit operator HLocalTime(TimeSpan) Implements the TimeSpan to HLocalTime conversion. Declaration public static explicit operator HLocalTime(TimeSpan timeSpan) Parameters Type Name Description TimeSpan timeSpan Returns Type Description HLocalTime explicit operator HLocalTime(DateTime) Implements the DateTime to HLocalTime conversion. Declaration public static explicit operator HLocalTime(DateTime dateTime) Parameters Type Name Description DateTime dateTime Returns Type Description HLocalTime explicit operator TimeOnly(HLocalTime) Implements the HLocalTime to TimeOnly conversion. Declaration public static explicit operator TimeOnly(HLocalTime localTime) Parameters Type Name Description HLocalTime localTime Returns Type Description TimeOnly explicit operator HLocalTime(TimeOnly) Implements the TimeOnly to HLocalTime conversion. Declaration public static explicit operator HLocalTime(TimeOnly timeOnly) Parameters Type Name Description TimeOnly timeOnly Returns Type Description HLocalTime"
  },
  "5.2.2/api/Hazelcast.Models.HLocalTime.op_Inequality.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalTime.op_Inequality.html",
    "title": "Operator operator != | Hazelcast .NET Documentation",
    "keywords": "Operator operator != operator !=(HLocalTime, HLocalTime) Implements the != operator. Declaration public static bool operator !=(HLocalTime left, HLocalTime right) Parameters Type Name Description HLocalTime left HLocalTime right Returns Type Description bool"
  },
  "5.2.2/api/Hazelcast.Models.HLocalTime.Parse.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalTime.Parse.html",
    "title": "Method Parse | Hazelcast .NET Documentation",
    "keywords": "Method Parse Parse(string) Converts the string representation of a time to its HLocalTime representation. Declaration public static HLocalTime Parse(string s) Parameters Type Name Description string s A string containing a time to convert. Returns Type Description HLocalTime A HLocalTime equivalent to the time contained in s. Exceptions Type Condition FormatException The s string cannot be parsed."
  },
  "5.2.2/api/Hazelcast.Models.HLocalTime.Second.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalTime.Second.html",
    "title": "Property Second | Hazelcast .NET Documentation",
    "keywords": "Property Second Second Gets the second value. Declaration public byte Second { get; } Property Value Type Description byte"
  },
  "5.2.2/api/Hazelcast.Models.HLocalTime.ToString.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalTime.ToString.html",
    "title": "Method ToString | Hazelcast .NET Documentation",
    "keywords": "Method ToString ToString() Declaration public override string ToString() Returns Type Description string Overrides ValueType.ToString()"
  },
  "5.2.2/api/Hazelcast.Models.HLocalTime.ToTimeOnly.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalTime.ToTimeOnly.html",
    "title": "Method ToTimeOnly | Hazelcast .NET Documentation",
    "keywords": "Method ToTimeOnly ToTimeOnly() Declaration public TimeOnly ToTimeOnly() Returns Type Description TimeOnly"
  },
  "5.2.2/api/Hazelcast.Models.HLocalTime.ToTimeSpan.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalTime.ToTimeSpan.html",
    "title": "Method ToTimeSpan | Hazelcast .NET Documentation",
    "keywords": "Method ToTimeSpan ToTimeSpan() Converts the value of this HLocalTime to its TimeSpan equivalent. Declaration public TimeSpan ToTimeSpan() Returns Type Description TimeSpan The TimeSpan representation of this instance."
  },
  "5.2.2/api/Hazelcast.Models.HLocalTime.TryParse.html": {
    "href": "5.2.2/api/Hazelcast.Models.HLocalTime.TryParse.html",
    "title": "Method TryParse | Hazelcast .NET Documentation",
    "keywords": "Method TryParse TryParse(string, out HLocalTime) Converts the string representation of a time to its HLocalTime representation. A return value indicates whether the operation succeeded. Declaration public static bool TryParse(string s, out HLocalTime localTime) Parameters Type Name Description string s A string containing a time to convert. HLocalTime localTime When this method returns, contains the HLocalTime equivalent of the time in s, if the conversion succeeded, or zero if the conversion failed. Returns Type Description bool true if s was converted successfully; otherwise, false."
  },
  "5.2.2/api/Hazelcast.Models.HOffsetDateTime.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Models.HOffsetDateTime.-ctor.html",
    "title": "Constructor HOffsetDateTime | Hazelcast .NET Documentation",
    "keywords": "Constructor HOffsetDateTime HOffsetDateTime(HLocalDateTime, TimeSpan) Initializes a new instance of the HOffsetDateTime struct. Declaration public HOffsetDateTime(HLocalDateTime localDateTime, TimeSpan offset = default) Parameters Type Name Description HLocalDateTime localDateTime The local date and time part. TimeSpan offset The offset part. Exceptions Type Condition ArgumentOutOfRangeException offset is outside of the accepted range. HOffsetDateTime(HLocalDateTime, int) Initializes a new instance of the HOffsetDateTime struct. Declaration public HOffsetDateTime(HLocalDateTime localDateTime, int offsetSeconds = 0) Parameters Type Name Description HLocalDateTime localDateTime The local date and time part. int offsetSeconds The offset part. Exceptions Type Condition ArgumentOutOfRangeException offsetSeconds is outside of the accepted range. HOffsetDateTime(DateTime, TimeSpan) Initializes a new instance of the HOffsetDateTime struct. Declaration public HOffsetDateTime(DateTime localDateTime, TimeSpan offset = default) Parameters Type Name Description DateTime localDateTime The local date and time part. TimeSpan offset The offset part. Exceptions Type Condition ArgumentOutOfRangeException offset is outside of the accepted range. HOffsetDateTime(DateTimeOffset) Initializes a new instance of the HOffsetDateTime struct. Declaration public HOffsetDateTime(DateTimeOffset dateTimeOffset) Parameters Type Name Description DateTimeOffset dateTimeOffset The date, time and offset. Exceptions Type Condition ArgumentOutOfRangeException dateTimeOffset offset is outside of the accepted range."
  },
  "5.2.2/api/Hazelcast.Models.HOffsetDateTime.Equals.html": {
    "href": "5.2.2/api/Hazelcast.Models.HOffsetDateTime.Equals.html",
    "title": "Method Equals | Hazelcast .NET Documentation",
    "keywords": "Method Equals Equals(HOffsetDateTime) Declaration public bool Equals(HOffsetDateTime other) Parameters Type Name Description HOffsetDateTime other Returns Type Description bool Implements IEquatable<T>.Equals(T) Equals(object?) Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj Returns Type Description bool Overrides ValueType.Equals(object)"
  },
  "5.2.2/api/Hazelcast.Models.HOffsetDateTime.GetHashCode.html": {
    "href": "5.2.2/api/Hazelcast.Models.HOffsetDateTime.GetHashCode.html",
    "title": "Method GetHashCode | Hazelcast .NET Documentation",
    "keywords": "Method GetHashCode GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides ValueType.GetHashCode()"
  },
  "5.2.2/api/Hazelcast.Models.HOffsetDateTime.html": {
    "href": "5.2.2/api/Hazelcast.Models.HOffsetDateTime.html",
    "title": "Struct HOffsetDateTime | Hazelcast .NET Documentation",
    "keywords": "Struct HOffsetDateTime Represents an Hazelcast TIMESTAMP_WITH_TIME_ZONE primitive type value. Implements IEquatable<HOffsetDateTime> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Hazelcast.Models Assembly: Hazelcast.Net.dll Syntax public readonly struct HOffsetDateTime : IEquatable<HOffsetDateTime> Remarks The TIMESTAMP_WITH_TIME_ZONE primitive type consists of a TIMESTAMP LocalDateTime and a timezone Offset. The offset ranges between MinOffset and MaxOffset inclusive. with a 1 second precision, smaller values being rounded and lost during serialization. Constructors Name Description HOffsetDateTime(HLocalDateTime, int) Initializes a new instance of the HOffsetDateTime struct. HOffsetDateTime(HLocalDateTime, TimeSpan) Initializes a new instance of the HOffsetDateTime struct. HOffsetDateTime(DateTime, TimeSpan) Initializes a new instance of the HOffsetDateTime struct. HOffsetDateTime(DateTimeOffset) Initializes a new instance of the HOffsetDateTime struct. Fields Name Description Max Gets the largest possible value of a HOffsetDateTime. MaxOffset Gets the largest possible value of the offset part. Min Gets the smallest possible value of a HOffsetDateTime. MinOffset Gets the smallest possible value of the offset part. Properties Name Description LocalDateTime Gets the local date and time part. Offset Gets the offset part. Methods Name Description Equals(HOffsetDateTime) Equals(object?) GetHashCode() Parse(string) Converts the string representation of a date and time with timezone to its HOffsetDateTime equivalent. ToDateTimeOffset() Converts the value of this instance to its DateTimeOffset equivalent. ToString() TryParse(string, out HOffsetDateTime) Converts the string representation of a date and time with timezone to its HOffsetDateTime equivalent. A return value indicates whether the operation succeeded. TryToDateTimeOffset(out DateTimeOffset) Converts the value of this instance to its DateTimeOffset equivalent. A return value indicates whether the operation succeeded. Operators Name Description operator ==(HOffsetDateTime, HOffsetDateTime) Implements the == operator. explicit operator DateTimeOffset(HOffsetDateTime) Implements the HOffsetDateTime to DateTimeOffset conversion. explicit operator HOffsetDateTime(DateTimeOffset) Implements the DateTimeOffset to HOffsetDateTime conversion. operator !=(HOffsetDateTime, HOffsetDateTime) Implements the != operator."
  },
  "5.2.2/api/Hazelcast.Models.HOffsetDateTime.LocalDateTime.html": {
    "href": "5.2.2/api/Hazelcast.Models.HOffsetDateTime.LocalDateTime.html",
    "title": "Property LocalDateTime | Hazelcast .NET Documentation",
    "keywords": "Property LocalDateTime LocalDateTime Gets the local date and time part. Declaration public HLocalDateTime LocalDateTime { get; } Property Value Type Description HLocalDateTime"
  },
  "5.2.2/api/Hazelcast.Models.HOffsetDateTime.Max.html": {
    "href": "5.2.2/api/Hazelcast.Models.HOffsetDateTime.Max.html",
    "title": "Field Max | Hazelcast .NET Documentation",
    "keywords": "Field Max Gets the largest possible value of a HOffsetDateTime. Namespace: Hazelcast.Models Assembly: Hazelcast.Net.dll Syntax public static readonly HOffsetDateTime Max Returns Type Description HOffsetDateTime"
  },
  "5.2.2/api/Hazelcast.Models.HOffsetDateTime.MaxOffset.html": {
    "href": "5.2.2/api/Hazelcast.Models.HOffsetDateTime.MaxOffset.html",
    "title": "Field MaxOffset | Hazelcast .NET Documentation",
    "keywords": "Field MaxOffset Gets the largest possible value of the offset part. Namespace: Hazelcast.Models Assembly: Hazelcast.Net.dll Syntax public static readonly TimeSpan MaxOffset Returns Type Description TimeSpan"
  },
  "5.2.2/api/Hazelcast.Models.HOffsetDateTime.Min.html": {
    "href": "5.2.2/api/Hazelcast.Models.HOffsetDateTime.Min.html",
    "title": "Field Min | Hazelcast .NET Documentation",
    "keywords": "Field Min Gets the smallest possible value of a HOffsetDateTime. Namespace: Hazelcast.Models Assembly: Hazelcast.Net.dll Syntax public static readonly HOffsetDateTime Min Returns Type Description HOffsetDateTime"
  },
  "5.2.2/api/Hazelcast.Models.HOffsetDateTime.MinOffset.html": {
    "href": "5.2.2/api/Hazelcast.Models.HOffsetDateTime.MinOffset.html",
    "title": "Field MinOffset | Hazelcast .NET Documentation",
    "keywords": "Field MinOffset Gets the smallest possible value of the offset part. Namespace: Hazelcast.Models Assembly: Hazelcast.Net.dll Syntax public static readonly TimeSpan MinOffset Returns Type Description TimeSpan"
  },
  "5.2.2/api/Hazelcast.Models.HOffsetDateTime.Offset.html": {
    "href": "5.2.2/api/Hazelcast.Models.HOffsetDateTime.Offset.html",
    "title": "Property Offset | Hazelcast .NET Documentation",
    "keywords": "Property Offset Offset Gets the offset part. Declaration public TimeSpan Offset { get; } Property Value Type Description TimeSpan"
  },
  "5.2.2/api/Hazelcast.Models.HOffsetDateTime.op_Equality.html": {
    "href": "5.2.2/api/Hazelcast.Models.HOffsetDateTime.op_Equality.html",
    "title": "Operator operator == | Hazelcast .NET Documentation",
    "keywords": "Operator operator == operator ==(HOffsetDateTime, HOffsetDateTime) Implements the == operator. Declaration public static bool operator ==(HOffsetDateTime left, HOffsetDateTime right) Parameters Type Name Description HOffsetDateTime left HOffsetDateTime right Returns Type Description bool"
  },
  "5.2.2/api/Hazelcast.Models.HOffsetDateTime.op_Explicit.html": {
    "href": "5.2.2/api/Hazelcast.Models.HOffsetDateTime.op_Explicit.html",
    "title": "Operator explicit operator | Hazelcast .NET Documentation",
    "keywords": "Operator explicit operator explicit operator DateTimeOffset(HOffsetDateTime) Implements the HOffsetDateTime to DateTimeOffset conversion. Declaration public static explicit operator DateTimeOffset(HOffsetDateTime value) Parameters Type Name Description HOffsetDateTime value Returns Type Description DateTimeOffset explicit operator HOffsetDateTime(DateTimeOffset) Implements the DateTimeOffset to HOffsetDateTime conversion. Declaration public static explicit operator HOffsetDateTime(DateTimeOffset value) Parameters Type Name Description DateTimeOffset value Returns Type Description HOffsetDateTime"
  },
  "5.2.2/api/Hazelcast.Models.HOffsetDateTime.op_Inequality.html": {
    "href": "5.2.2/api/Hazelcast.Models.HOffsetDateTime.op_Inequality.html",
    "title": "Operator operator != | Hazelcast .NET Documentation",
    "keywords": "Operator operator != operator !=(HOffsetDateTime, HOffsetDateTime) Implements the != operator. Declaration public static bool operator !=(HOffsetDateTime left, HOffsetDateTime right) Parameters Type Name Description HOffsetDateTime left HOffsetDateTime right Returns Type Description bool"
  },
  "5.2.2/api/Hazelcast.Models.HOffsetDateTime.Parse.html": {
    "href": "5.2.2/api/Hazelcast.Models.HOffsetDateTime.Parse.html",
    "title": "Method Parse | Hazelcast .NET Documentation",
    "keywords": "Method Parse Parse(string) Converts the string representation of a date and time with timezone to its HOffsetDateTime equivalent. Declaration public static HOffsetDateTime Parse(string s) Parameters Type Name Description string s A string containing a date and time with timezone to convert. Returns Type Description HOffsetDateTime A HOffsetDateTime equivalent to the date and time with timezone contained in s. Exceptions Type Condition FormatException The s string cannot be parsed."
  },
  "5.2.2/api/Hazelcast.Models.HOffsetDateTime.ToDateTimeOffset.html": {
    "href": "5.2.2/api/Hazelcast.Models.HOffsetDateTime.ToDateTimeOffset.html",
    "title": "Method ToDateTimeOffset | Hazelcast .NET Documentation",
    "keywords": "Method ToDateTimeOffset ToDateTimeOffset() Converts the value of this instance to its DateTimeOffset equivalent. Declaration public DateTimeOffset ToDateTimeOffset() Returns Type Description DateTimeOffset The DateTimeOffset representation of this instance."
  },
  "5.2.2/api/Hazelcast.Models.HOffsetDateTime.ToString.html": {
    "href": "5.2.2/api/Hazelcast.Models.HOffsetDateTime.ToString.html",
    "title": "Method ToString | Hazelcast .NET Documentation",
    "keywords": "Method ToString ToString() Declaration public override string ToString() Returns Type Description string Overrides ValueType.ToString()"
  },
  "5.2.2/api/Hazelcast.Models.HOffsetDateTime.TryParse.html": {
    "href": "5.2.2/api/Hazelcast.Models.HOffsetDateTime.TryParse.html",
    "title": "Method TryParse | Hazelcast .NET Documentation",
    "keywords": "Method TryParse TryParse(string, out HOffsetDateTime) Converts the string representation of a date and time with timezone to its HOffsetDateTime equivalent. A return value indicates whether the operation succeeded. Declaration public static bool TryParse(string s, out HOffsetDateTime offsetDateTime) Parameters Type Name Description string s A string containing a date and time with timezone to convert. HOffsetDateTime offsetDateTime When this method returns, contains the HOffsetDateTime equivalent to the date and time with timezone contained in s, if the conversion succeeded, or the default value if the conversion failed. Returns Type Description bool true if s was converted successfully; otherwise, false."
  },
  "5.2.2/api/Hazelcast.Models.HOffsetDateTime.TryToDateTimeOffset.html": {
    "href": "5.2.2/api/Hazelcast.Models.HOffsetDateTime.TryToDateTimeOffset.html",
    "title": "Method TryToDateTimeOffset | Hazelcast .NET Documentation",
    "keywords": "Method TryToDateTimeOffset TryToDateTimeOffset(out DateTimeOffset) Converts the value of this instance to its DateTimeOffset equivalent. A return value indicates whether the operation succeeded. Declaration public bool TryToDateTimeOffset(out DateTimeOffset dateTimeOffset) Parameters Type Name Description DateTimeOffset dateTimeOffset When this method returns, contains the DateTimeOffset equivalent to the value represented by this instance, if the conversion succeeded, or the default value if the conversion failed. Returns Type Description bool true if the value represented by this instance was converted successfully; otherwise false."
  },
  "5.2.2/api/Hazelcast.Models.html": {
    "href": "5.2.2/api/Hazelcast.Models.html",
    "title": "Namespace Hazelcast.Models | Hazelcast .NET Documentation",
    "keywords": "Namespace Hazelcast.Models Classes BitmapIndexOptions Configures indexing options for Bitmap indexes. DistributedObjectInfo Describes a distributed object. IndexOptions Configuration of an index. MemberInfo Represents a member of a cluster. MemberVersion Represents the version of a cluster member. Structs HBigDecimal Represents an Hazelcast DECIMAL primitive type value. HLocalDate Represents an Hazelcast DATE primitive type value. HLocalDateTime Represents an Hazelcast SQL TIMESTAMP primitive type value. HLocalTime Represents an Hazelcast TIME primitive type value. HOffsetDateTime Represents an Hazelcast TIMESTAMP_WITH_TIME_ZONE primitive type value. MemberInfoState Represents the state of a member of a cluster. Interfaces IMapEntryStats<TKey, TValue> Represents statistics for an entry in an IHMap<TKey, TValue>. Enums CollectionItemEventTypes Specifies the collection item event types. IndexType Type of the index. MapEventTypes Specifies the map and entries event types. UniqueKeyTransformation Defines transformations which can be applied to UniqueKey values."
  },
  "5.2.2/api/Hazelcast.Models.IMapEntryStats-2.Cost.html": {
    "href": "5.2.2/api/Hazelcast.Models.IMapEntryStats-2.Cost.html",
    "title": "Property Cost | Hazelcast .NET Documentation",
    "keywords": "Property Cost Cost Gets the cost in bytes of the entry. Declaration long Cost { get; } Property Value Type Description long The cost in bytes, if statistics are enabled; otherwise -1."
  },
  "5.2.2/api/Hazelcast.Models.IMapEntryStats-2.CreationTime.html": {
    "href": "5.2.2/api/Hazelcast.Models.IMapEntryStats-2.CreationTime.html",
    "title": "Property CreationTime | Hazelcast .NET Documentation",
    "keywords": "Property CreationTime CreationTime Gets the creation epoch time of the entry. Declaration long CreationTime { get; } Property Value Type Description long The creation epoch time of the entry, if statistics are enabled; otherwise -1."
  },
  "5.2.2/api/Hazelcast.Models.IMapEntryStats-2.ExpirationTime.html": {
    "href": "5.2.2/api/Hazelcast.Models.IMapEntryStats-2.ExpirationTime.html",
    "title": "Property ExpirationTime | Hazelcast .NET Documentation",
    "keywords": "Property ExpirationTime ExpirationTime Gets the expiration epoch time of the entry. Declaration long ExpirationTime { get; } Property Value Type Description long The expiration epoch time of the entry, if statistics are enabled; otherwise -1."
  },
  "5.2.2/api/Hazelcast.Models.IMapEntryStats-2.Hits.html": {
    "href": "5.2.2/api/Hazelcast.Models.IMapEntryStats-2.Hits.html",
    "title": "Property Hits | Hazelcast .NET Documentation",
    "keywords": "Property Hits Hits Gets number of hits of the entry. Declaration long Hits { get; } Property Value Type Description long The number of hits of the entry, if statistics are enabled; otherwise -1."
  },
  "5.2.2/api/Hazelcast.Models.IMapEntryStats-2.html": {
    "href": "5.2.2/api/Hazelcast.Models.IMapEntryStats-2.html",
    "title": "Interface IMapEntryStats<TKey, TValue> | Hazelcast .NET Documentation",
    "keywords": "Interface IMapEntryStats<TKey, TValue> Represents statistics for an entry in an IHMap<TKey, TValue>. Namespace: Hazelcast.Models Assembly: Hazelcast.Net.dll Syntax public interface IMapEntryStats<out TKey, out TValue> Type Parameters Name Description TKey TValue Properties Name Description Cost Gets the cost in bytes of the entry. CreationTime Gets the creation epoch time of the entry. ExpirationTime Gets the expiration epoch time of the entry. Hits Gets number of hits of the entry. Key Gets the key of the entry. LastAccessTime Gets the last access epoch time to the entry. LastStoredTime Gets the last epoch time the value was flushed to MapStore. LastUpdateTime Gets the last epoch time the value was updated. Value Gets the value of the entry. Version Gets the version of the entry."
  },
  "5.2.2/api/Hazelcast.Models.IMapEntryStats-2.Key.html": {
    "href": "5.2.2/api/Hazelcast.Models.IMapEntryStats-2.Key.html",
    "title": "Property Key | Hazelcast .NET Documentation",
    "keywords": "Property Key Key Gets the key of the entry. Declaration TKey Key { get; } Property Value Type Description TKey The key of the entry."
  },
  "5.2.2/api/Hazelcast.Models.IMapEntryStats-2.LastAccessTime.html": {
    "href": "5.2.2/api/Hazelcast.Models.IMapEntryStats-2.LastAccessTime.html",
    "title": "Property LastAccessTime | Hazelcast .NET Documentation",
    "keywords": "Property LastAccessTime LastAccessTime Gets the last access epoch time to the entry. Declaration long LastAccessTime { get; } Property Value Type Description long The last access epoch time of the entry, if statistics are enabled; otherwise -1."
  },
  "5.2.2/api/Hazelcast.Models.IMapEntryStats-2.LastStoredTime.html": {
    "href": "5.2.2/api/Hazelcast.Models.IMapEntryStats-2.LastStoredTime.html",
    "title": "Property LastStoredTime | Hazelcast .NET Documentation",
    "keywords": "Property LastStoredTime LastStoredTime Gets the last epoch time the value was flushed to MapStore. Declaration long LastStoredTime { get; } Property Value Type Description long The last epoch time the value was flushed to MapStore, if statistics are enabled; otherwise -1."
  },
  "5.2.2/api/Hazelcast.Models.IMapEntryStats-2.LastUpdateTime.html": {
    "href": "5.2.2/api/Hazelcast.Models.IMapEntryStats-2.LastUpdateTime.html",
    "title": "Property LastUpdateTime | Hazelcast .NET Documentation",
    "keywords": "Property LastUpdateTime LastUpdateTime Gets the last epoch time the value was updated. Declaration long LastUpdateTime { get; } Property Value Type Description long The last epoch time the value was updated, if statistics are enabled; otherwise -1."
  },
  "5.2.2/api/Hazelcast.Models.IMapEntryStats-2.Value.html": {
    "href": "5.2.2/api/Hazelcast.Models.IMapEntryStats-2.Value.html",
    "title": "Property Value | Hazelcast .NET Documentation",
    "keywords": "Property Value Value Gets the value of the entry. Declaration TValue Value { get; } Property Value Type Description TValue The value of the entry."
  },
  "5.2.2/api/Hazelcast.Models.IMapEntryStats-2.Version.html": {
    "href": "5.2.2/api/Hazelcast.Models.IMapEntryStats-2.Version.html",
    "title": "Property Version | Hazelcast .NET Documentation",
    "keywords": "Property Version Version Gets the version of the entry. Declaration long Version { get; } Property Value Type Description long The version of the entry."
  },
  "5.2.2/api/Hazelcast.Models.IndexOptions.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Models.IndexOptions.-ctor.html",
    "title": "Constructor IndexOptions | Hazelcast .NET Documentation",
    "keywords": "Constructor IndexOptions IndexOptions() Initializes a new instance of the IndexOptions class. Declaration public IndexOptions() IndexOptions(IEnumerable<string>) Initializes a new instance of the IndexOptions class. Declaration public IndexOptions(IEnumerable<string> attributes) Parameters Type Name Description IEnumerable<string> attributes"
  },
  "5.2.2/api/Hazelcast.Models.IndexOptions.AddAttribute.html": {
    "href": "5.2.2/api/Hazelcast.Models.IndexOptions.AddAttribute.html",
    "title": "Method AddAttribute | Hazelcast .NET Documentation",
    "keywords": "Method AddAttribute AddAttribute(string) Adds an indexed attribute. Declaration public IndexOptions AddAttribute(string attribute) Parameters Type Name Description string attribute The name of the attribute. Returns Type Description IndexOptions This instance for chaining."
  },
  "5.2.2/api/Hazelcast.Models.IndexOptions.AddAttributes.html": {
    "href": "5.2.2/api/Hazelcast.Models.IndexOptions.AddAttributes.html",
    "title": "Method AddAttributes | Hazelcast .NET Documentation",
    "keywords": "Method AddAttributes AddAttributes(params string[]) Adds indexed attributes. Declaration public IndexOptions AddAttributes(params string[] attributes) Parameters Type Name Description string[] attributes The names of the attributes. Returns Type Description IndexOptions This instance for chaining."
  },
  "5.2.2/api/Hazelcast.Models.IndexOptions.Attributes.html": {
    "href": "5.2.2/api/Hazelcast.Models.IndexOptions.Attributes.html",
    "title": "Property Attributes | Hazelcast .NET Documentation",
    "keywords": "Property Attributes Attributes Gets the indexed attributes. Declaration public IList<string> Attributes { get; } Property Value Type Description IList<string>"
  },
  "5.2.2/api/Hazelcast.Models.IndexOptions.BitmapIndexOptions.html": {
    "href": "5.2.2/api/Hazelcast.Models.IndexOptions.BitmapIndexOptions.html",
    "title": "Property BitmapIndexOptions | Hazelcast .NET Documentation",
    "keywords": "Property BitmapIndexOptions BitmapIndexOptions Gets or sets the bitmap index options. Declaration public BitmapIndexOptions BitmapIndexOptions { get; set; } Property Value Type Description BitmapIndexOptions"
  },
  "5.2.2/api/Hazelcast.Models.IndexOptions.DefaultType.html": {
    "href": "5.2.2/api/Hazelcast.Models.IndexOptions.DefaultType.html",
    "title": "Field DefaultType | Hazelcast .NET Documentation",
    "keywords": "Field DefaultType Namespace: Hazelcast.Models Assembly: Hazelcast.Net.dll Syntax public static readonly IndexType DefaultType Returns Type Description IndexType"
  },
  "5.2.2/api/Hazelcast.Models.IndexOptions.html": {
    "href": "5.2.2/api/Hazelcast.Models.IndexOptions.html",
    "title": "Class IndexOptions | Hazelcast .NET Documentation",
    "keywords": "Class IndexOptions Configuration of an index. Inheritance object IndexOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Hazelcast.Models Assembly: Hazelcast.Net.dll Syntax public class IndexOptions Remarks Hazelcast support three types of indexes: sorted, hash and bitmap indexes. They can be created on one or more attributes, specified by their name. Sorted indexes can be used with equality and range predicates and have logarithmic search time. Hash indexes can be used with equality predicates and have constant search time assuming the hash function of the indexed field disperses the elements properly. Bitmap indexes (to be completed). Constructors Name Description IndexOptions() Initializes a new instance of the IndexOptions class. IndexOptions(IEnumerable<string>) Initializes a new instance of the IndexOptions class. Fields Name Description DefaultType Properties Name Description Attributes Gets the indexed attributes. BitmapIndexOptions Gets or sets the bitmap index options. Name Gets or sets the name of the index. Type Gets or sets the type of the index. Methods Name Description AddAttribute(string) Adds an indexed attribute. AddAttributes(params string[]) Adds indexed attributes. ToString()"
  },
  "5.2.2/api/Hazelcast.Models.IndexOptions.Name.html": {
    "href": "5.2.2/api/Hazelcast.Models.IndexOptions.Name.html",
    "title": "Property Name | Hazelcast .NET Documentation",
    "keywords": "Property Name Name Gets or sets the name of the index. Declaration public string Name { get; set; } Property Value Type Description string"
  },
  "5.2.2/api/Hazelcast.Models.IndexOptions.ToString.html": {
    "href": "5.2.2/api/Hazelcast.Models.IndexOptions.ToString.html",
    "title": "Method ToString | Hazelcast .NET Documentation",
    "keywords": "Method ToString ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString()"
  },
  "5.2.2/api/Hazelcast.Models.IndexOptions.Type.html": {
    "href": "5.2.2/api/Hazelcast.Models.IndexOptions.Type.html",
    "title": "Property Type | Hazelcast .NET Documentation",
    "keywords": "Property Type Type Gets or sets the type of the index. Declaration public IndexType Type { get; set; } Property Value Type Description IndexType"
  },
  "5.2.2/api/Hazelcast.Models.IndexType.html": {
    "href": "5.2.2/api/Hazelcast.Models.IndexType.html",
    "title": "Enum IndexType | Hazelcast .NET Documentation",
    "keywords": "Enum IndexType Type of the index. Namespace: Hazelcast.Models Assembly: Hazelcast.Net.dll Syntax public enum IndexType Fields Name Description Bitmap Bitmap index. Can be used with equality predicates. Hashed Hash index. Can be used with equality predicates. Sorted Sorted index. Can be used with equality and range predicates."
  },
  "5.2.2/api/Hazelcast.Models.MapEventTypes.html": {
    "href": "5.2.2/api/Hazelcast.Models.MapEventTypes.html",
    "title": "Enum MapEventTypes | Hazelcast .NET Documentation",
    "keywords": "Enum MapEventTypes Specifies the map and entries event types. Namespace: Hazelcast.Models Assembly: Hazelcast.Net.dll Syntax [Flags] public enum MapEventTypes Fields Name Description Added The entry was added. AllCleared All entries were cleared. AllEvicted All entries were evicted. Evicted The entry was evicted. Expired The entry has expired. Invalidated The entry was invalidated. Loaded The entry was loaded. Merged The entry was merged. Removed The entry was removed. Updated The entry was updated."
  },
  "5.2.2/api/Hazelcast.Models.MemberInfo.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Models.MemberInfo.-ctor.html",
    "title": "Constructor MemberInfo | Hazelcast .NET Documentation",
    "keywords": "Constructor MemberInfo MemberInfo(Guid, NetworkAddress, MemberVersion, bool, IReadOnlyDictionary<string, string>) Initializes a new instance of the MemberInfo class. Declaration public MemberInfo(Guid id, NetworkAddress address, MemberVersion version, bool isLiteMember, IReadOnlyDictionary<string, string> attributes) Parameters Type Name Description Guid id The unique identifier of the member. NetworkAddress address The network address of the member. MemberVersion version The version of the server running the member. bool isLiteMember Whether the member is a \"lite\" member. IReadOnlyDictionary<string, string> attributes Attributes of the member."
  },
  "5.2.2/api/Hazelcast.Models.MemberInfo.Address.html": {
    "href": "5.2.2/api/Hazelcast.Models.MemberInfo.Address.html",
    "title": "Property Address | Hazelcast .NET Documentation",
    "keywords": "Property Address Address Gets the network address of the member. Declaration public NetworkAddress Address { get; } Property Value Type Description NetworkAddress"
  },
  "5.2.2/api/Hazelcast.Models.MemberInfo.Attributes.html": {
    "href": "5.2.2/api/Hazelcast.Models.MemberInfo.Attributes.html",
    "title": "Property Attributes | Hazelcast .NET Documentation",
    "keywords": "Property Attributes Attributes Gets the attributes of the member. Declaration public IReadOnlyDictionary<string, string> Attributes { get; } Property Value Type Description IReadOnlyDictionary<string, string>"
  },
  "5.2.2/api/Hazelcast.Models.MemberInfo.Equals.html": {
    "href": "5.2.2/api/Hazelcast.Models.MemberInfo.Equals.html",
    "title": "Method Equals | Hazelcast .NET Documentation",
    "keywords": "Method Equals Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides object.Equals(object) Equals(MemberInfo) Determines whether this MemberInfo instance is equal to another MemberInfo instance. Declaration public bool Equals(MemberInfo other) Parameters Type Name Description MemberInfo other The other MemberInfo instance. Returns Type Description bool true if this MemberInfo instance and the other MemberInfo instance are considered being equal; otherwise false. Implements IEquatable<T>.Equals(T)"
  },
  "5.2.2/api/Hazelcast.Models.MemberInfo.GetHashCode.html": {
    "href": "5.2.2/api/Hazelcast.Models.MemberInfo.GetHashCode.html",
    "title": "Method GetHashCode | Hazelcast .NET Documentation",
    "keywords": "Method GetHashCode GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode()"
  },
  "5.2.2/api/Hazelcast.Models.MemberInfo.HasPublicAddress.html": {
    "href": "5.2.2/api/Hazelcast.Models.MemberInfo.HasPublicAddress.html",
    "title": "Property HasPublicAddress | Hazelcast .NET Documentation",
    "keywords": "Property HasPublicAddress HasPublicAddress Whether the member has a public address in addition to its address. Declaration public bool HasPublicAddress { get; } Property Value Type Description bool"
  },
  "5.2.2/api/Hazelcast.Models.MemberInfo.html": {
    "href": "5.2.2/api/Hazelcast.Models.MemberInfo.html",
    "title": "Class MemberInfo | Hazelcast .NET Documentation",
    "keywords": "Class MemberInfo Represents a member of a cluster. Inheritance object MemberInfo Implements IEquatable<MemberInfo> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Hazelcast.Models Assembly: Hazelcast.Net.dll Syntax public class MemberInfo : IEquatable<MemberInfo> Remarks This class implements IEquatable<T> and two instances are considered equal if their Id are identical (the other fields are not considered for equality). Constructors Name Description MemberInfo(Guid, NetworkAddress, MemberVersion, bool, IReadOnlyDictionary<string, string>) Initializes a new instance of the MemberInfo class. Properties Name Description Address Gets the network address of the member. Attributes Gets the attributes of the member. HasPublicAddress Whether the member has a public address in addition to its address. Id Gets the unique identifier of the member. IsLiteMember Determines whether the member is a \"lite\" member. PublicAddress Gets the public network address of the member. Version Gets the version of the server running the member. Methods Name Description Equals(MemberInfo) Determines whether this MemberInfo instance is equal to another MemberInfo instance. Equals(object) GetHashCode() ToShortString(bool) ToString() Operators Name Description operator ==(MemberInfo, MemberInfo) Determines whether two MemberInfo instances are equal. operator !=(MemberInfo, MemberInfo) Determines whether two MemberInfo instances are not equal."
  },
  "5.2.2/api/Hazelcast.Models.MemberInfo.Id.html": {
    "href": "5.2.2/api/Hazelcast.Models.MemberInfo.Id.html",
    "title": "Property Id | Hazelcast .NET Documentation",
    "keywords": "Property Id Id Gets the unique identifier of the member. Declaration public Guid Id { get; } Property Value Type Description Guid"
  },
  "5.2.2/api/Hazelcast.Models.MemberInfo.IsLiteMember.html": {
    "href": "5.2.2/api/Hazelcast.Models.MemberInfo.IsLiteMember.html",
    "title": "Property IsLiteMember | Hazelcast .NET Documentation",
    "keywords": "Property IsLiteMember IsLiteMember Determines whether the member is a \"lite\" member. Declaration public bool IsLiteMember { get; } Property Value Type Description bool Remarks Lite members do not own partitions."
  },
  "5.2.2/api/Hazelcast.Models.MemberInfo.op_Equality.html": {
    "href": "5.2.2/api/Hazelcast.Models.MemberInfo.op_Equality.html",
    "title": "Operator operator == | Hazelcast .NET Documentation",
    "keywords": "Operator operator == operator ==(MemberInfo, MemberInfo) Determines whether two MemberInfo instances are equal. Declaration public static bool operator ==(MemberInfo left, MemberInfo right) Parameters Type Name Description MemberInfo left The first MemberInfo instance. MemberInfo right The second MemberInfo instance. Returns Type Description bool true if the two MemberInfo instances are considered being equal; otherwise false."
  },
  "5.2.2/api/Hazelcast.Models.MemberInfo.op_Inequality.html": {
    "href": "5.2.2/api/Hazelcast.Models.MemberInfo.op_Inequality.html",
    "title": "Operator operator != | Hazelcast .NET Documentation",
    "keywords": "Operator operator != operator !=(MemberInfo, MemberInfo) Determines whether two MemberInfo instances are not equal. Declaration public static bool operator !=(MemberInfo left, MemberInfo right) Parameters Type Name Description MemberInfo left The first MemberInfo instance. MemberInfo right The second MemberInfo instance. Returns Type Description bool true if the two MemberInfo instances are considered being not equal; otherwise false."
  },
  "5.2.2/api/Hazelcast.Models.MemberInfo.PublicAddress.html": {
    "href": "5.2.2/api/Hazelcast.Models.MemberInfo.PublicAddress.html",
    "title": "Property PublicAddress | Hazelcast .NET Documentation",
    "keywords": "Property PublicAddress PublicAddress Gets the public network address of the member. Declaration public NetworkAddress PublicAddress { get; } Property Value Type Description NetworkAddress"
  },
  "5.2.2/api/Hazelcast.Models.MemberInfo.ToShortString.html": {
    "href": "5.2.2/api/Hazelcast.Models.MemberInfo.ToShortString.html",
    "title": "Method ToShortString | Hazelcast .NET Documentation",
    "keywords": "Method ToShortString ToShortString(bool) Declaration public string ToShortString(bool flagConnectAddress) Parameters Type Name Description bool flagConnectAddress Returns Type Description string"
  },
  "5.2.2/api/Hazelcast.Models.MemberInfo.ToString.html": {
    "href": "5.2.2/api/Hazelcast.Models.MemberInfo.ToString.html",
    "title": "Method ToString | Hazelcast .NET Documentation",
    "keywords": "Method ToString ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString()"
  },
  "5.2.2/api/Hazelcast.Models.MemberInfo.Version.html": {
    "href": "5.2.2/api/Hazelcast.Models.MemberInfo.Version.html",
    "title": "Property Version | Hazelcast .NET Documentation",
    "keywords": "Property Version Version Gets the version of the server running the member. Declaration public MemberVersion Version { get; } Property Value Type Description MemberVersion"
  },
  "5.2.2/api/Hazelcast.Models.MemberInfoState.Equals.html": {
    "href": "5.2.2/api/Hazelcast.Models.MemberInfoState.Equals.html",
    "title": "Method Equals | Hazelcast .NET Documentation",
    "keywords": "Method Equals Equals(object?) Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj Returns Type Description bool Overrides ValueType.Equals(object) Equals(MemberInfoState) Declaration public bool Equals(MemberInfoState other) Parameters Type Name Description MemberInfoState other Returns Type Description bool Implements IEquatable<T>.Equals(T)"
  },
  "5.2.2/api/Hazelcast.Models.MemberInfoState.GetHashCode.html": {
    "href": "5.2.2/api/Hazelcast.Models.MemberInfoState.GetHashCode.html",
    "title": "Method GetHashCode | Hazelcast .NET Documentation",
    "keywords": "Method GetHashCode GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides ValueType.GetHashCode()"
  },
  "5.2.2/api/Hazelcast.Models.MemberInfoState.html": {
    "href": "5.2.2/api/Hazelcast.Models.MemberInfoState.html",
    "title": "Struct MemberInfoState | Hazelcast .NET Documentation",
    "keywords": "Struct MemberInfoState Represents the state of a member of a cluster. Implements IEquatable<MemberInfoState> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Hazelcast.Models Assembly: Hazelcast.Net.dll Syntax public readonly struct MemberInfoState : IEquatable<MemberInfoState> Properties Name Description IsConnected Whether the member is connected. Member Gets the member. Methods Name Description Equals(MemberInfoState) Equals(object?) GetHashCode() Operators Name Description operator ==(MemberInfoState, MemberInfoState) operator !=(MemberInfoState, MemberInfoState)"
  },
  "5.2.2/api/Hazelcast.Models.MemberInfoState.IsConnected.html": {
    "href": "5.2.2/api/Hazelcast.Models.MemberInfoState.IsConnected.html",
    "title": "Property IsConnected | Hazelcast .NET Documentation",
    "keywords": "Property IsConnected IsConnected Whether the member is connected. Declaration public bool IsConnected { get; } Property Value Type Description bool"
  },
  "5.2.2/api/Hazelcast.Models.MemberInfoState.Member.html": {
    "href": "5.2.2/api/Hazelcast.Models.MemberInfoState.Member.html",
    "title": "Property Member | Hazelcast .NET Documentation",
    "keywords": "Property Member Member Gets the member. Declaration public MemberInfo Member { get; } Property Value Type Description MemberInfo"
  },
  "5.2.2/api/Hazelcast.Models.MemberInfoState.op_Equality.html": {
    "href": "5.2.2/api/Hazelcast.Models.MemberInfoState.op_Equality.html",
    "title": "Operator operator == | Hazelcast .NET Documentation",
    "keywords": "Operator operator == operator ==(MemberInfoState, MemberInfoState) Declaration public static bool operator ==(MemberInfoState left, MemberInfoState right) Parameters Type Name Description MemberInfoState left MemberInfoState right Returns Type Description bool"
  },
  "5.2.2/api/Hazelcast.Models.MemberInfoState.op_Inequality.html": {
    "href": "5.2.2/api/Hazelcast.Models.MemberInfoState.op_Inequality.html",
    "title": "Operator operator != | Hazelcast .NET Documentation",
    "keywords": "Operator operator != operator !=(MemberInfoState, MemberInfoState) Declaration public static bool operator !=(MemberInfoState left, MemberInfoState right) Parameters Type Name Description MemberInfoState left MemberInfoState right Returns Type Description bool"
  },
  "5.2.2/api/Hazelcast.Models.MemberVersion.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Models.MemberVersion.-ctor.html",
    "title": "Constructor MemberVersion | Hazelcast .NET Documentation",
    "keywords": "Constructor MemberVersion MemberVersion(byte, byte, byte) Initializes a new instance of the MemberVersion class. Declaration public MemberVersion(byte major, byte minor, byte patch) Parameters Type Name Description byte major The major version number. byte minor The minor version number. byte patch The patch version number."
  },
  "5.2.2/api/Hazelcast.Models.MemberVersion.CompareTo.html": {
    "href": "5.2.2/api/Hazelcast.Models.MemberVersion.CompareTo.html",
    "title": "Method CompareTo | Hazelcast .NET Documentation",
    "keywords": "Method CompareTo CompareTo(MemberVersion) Declaration public int CompareTo(MemberVersion other) Parameters Type Name Description MemberVersion other Returns Type Description int Implements IComparable<T>.CompareTo(T)"
  },
  "5.2.2/api/Hazelcast.Models.MemberVersion.Equals.html": {
    "href": "5.2.2/api/Hazelcast.Models.MemberVersion.Equals.html",
    "title": "Method Equals | Hazelcast .NET Documentation",
    "keywords": "Method Equals Equals(MemberVersion, bool) Checks if this member version is equal to other. Declaration public bool Equals(MemberVersion other, bool ignorePatchVersion) Parameters Type Name Description MemberVersion other Other member version to compare with. bool ignorePatchVersion Whether to ignore Patch number differences. Returns Type Description bool true if versions are equal, false otherwise. Equals(MemberVersion) Checks if this member version is equal to other. Declaration public bool Equals(MemberVersion other) Parameters Type Name Description MemberVersion other Other member version to compare with. Returns Type Description bool true if versions are equal, false otherwise. Implements IEquatable<T>.Equals(T) Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides object.Equals(object)"
  },
  "5.2.2/api/Hazelcast.Models.MemberVersion.GetHashCode.html": {
    "href": "5.2.2/api/Hazelcast.Models.MemberVersion.GetHashCode.html",
    "title": "Method GetHashCode | Hazelcast .NET Documentation",
    "keywords": "Method GetHashCode GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode()"
  },
  "5.2.2/api/Hazelcast.Models.MemberVersion.html": {
    "href": "5.2.2/api/Hazelcast.Models.MemberVersion.html",
    "title": "Class MemberVersion | Hazelcast .NET Documentation",
    "keywords": "Class MemberVersion Represents the version of a cluster member. Inheritance object MemberVersion Implements IEquatable<MemberVersion> IComparable<MemberVersion> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Hazelcast.Models Assembly: Hazelcast.Net.dll Syntax public class MemberVersion : IEquatable<MemberVersion>, IComparable<MemberVersion> Constructors Name Description MemberVersion(byte, byte, byte) Initializes a new instance of the MemberVersion class. Properties Name Description Major Gets the major version number. Minor Gets the minor version number. Patch Gets the patch version number. Methods Name Description CompareTo(MemberVersion) Equals(MemberVersion, bool) Checks if this member version is equal to other. Equals(MemberVersion) Checks if this member version is equal to other. Equals(object) GetHashCode() ToString() Returns a string that represents current member version. ToString(bool) Returns a string that represents current member version. Operators Name Description operator ==(MemberVersion, MemberVersion) operator >(MemberVersion, MemberVersion) operator >=(MemberVersion, MemberVersion) operator !=(MemberVersion, MemberVersion) operator <(MemberVersion, MemberVersion) operator <=(MemberVersion, MemberVersion)"
  },
  "5.2.2/api/Hazelcast.Models.MemberVersion.Major.html": {
    "href": "5.2.2/api/Hazelcast.Models.MemberVersion.Major.html",
    "title": "Property Major | Hazelcast .NET Documentation",
    "keywords": "Property Major Major Gets the major version number. Declaration public byte Major { get; } Property Value Type Description byte"
  },
  "5.2.2/api/Hazelcast.Models.MemberVersion.Minor.html": {
    "href": "5.2.2/api/Hazelcast.Models.MemberVersion.Minor.html",
    "title": "Property Minor | Hazelcast .NET Documentation",
    "keywords": "Property Minor Minor Gets the minor version number. Declaration public byte Minor { get; } Property Value Type Description byte"
  },
  "5.2.2/api/Hazelcast.Models.MemberVersion.op_Equality.html": {
    "href": "5.2.2/api/Hazelcast.Models.MemberVersion.op_Equality.html",
    "title": "Operator operator == | Hazelcast .NET Documentation",
    "keywords": "Operator operator == operator ==(MemberVersion, MemberVersion) Declaration public static bool operator ==(MemberVersion left, MemberVersion right) Parameters Type Name Description MemberVersion left MemberVersion right Returns Type Description bool"
  },
  "5.2.2/api/Hazelcast.Models.MemberVersion.op_GreaterThan.html": {
    "href": "5.2.2/api/Hazelcast.Models.MemberVersion.op_GreaterThan.html",
    "title": "Operator operator > | Hazelcast .NET Documentation",
    "keywords": "Operator operator > operator >(MemberVersion, MemberVersion) Declaration public static bool operator >(MemberVersion left, MemberVersion right) Parameters Type Name Description MemberVersion left MemberVersion right Returns Type Description bool"
  },
  "5.2.2/api/Hazelcast.Models.MemberVersion.op_GreaterThanOrEqual.html": {
    "href": "5.2.2/api/Hazelcast.Models.MemberVersion.op_GreaterThanOrEqual.html",
    "title": "Operator operator >= | Hazelcast .NET Documentation",
    "keywords": "Operator operator >= operator >=(MemberVersion, MemberVersion) Declaration public static bool operator >=(MemberVersion left, MemberVersion right) Parameters Type Name Description MemberVersion left MemberVersion right Returns Type Description bool"
  },
  "5.2.2/api/Hazelcast.Models.MemberVersion.op_Inequality.html": {
    "href": "5.2.2/api/Hazelcast.Models.MemberVersion.op_Inequality.html",
    "title": "Operator operator != | Hazelcast .NET Documentation",
    "keywords": "Operator operator != operator !=(MemberVersion, MemberVersion) Declaration public static bool operator !=(MemberVersion left, MemberVersion right) Parameters Type Name Description MemberVersion left MemberVersion right Returns Type Description bool"
  },
  "5.2.2/api/Hazelcast.Models.MemberVersion.op_LessThan.html": {
    "href": "5.2.2/api/Hazelcast.Models.MemberVersion.op_LessThan.html",
    "title": "Operator operator < | Hazelcast .NET Documentation",
    "keywords": "Operator operator < operator <(MemberVersion, MemberVersion) Declaration public static bool operator <(MemberVersion left, MemberVersion right) Parameters Type Name Description MemberVersion left MemberVersion right Returns Type Description bool"
  },
  "5.2.2/api/Hazelcast.Models.MemberVersion.op_LessThanOrEqual.html": {
    "href": "5.2.2/api/Hazelcast.Models.MemberVersion.op_LessThanOrEqual.html",
    "title": "Operator operator <= | Hazelcast .NET Documentation",
    "keywords": "Operator operator <= operator <=(MemberVersion, MemberVersion) Declaration public static bool operator <=(MemberVersion left, MemberVersion right) Parameters Type Name Description MemberVersion left MemberVersion right Returns Type Description bool"
  },
  "5.2.2/api/Hazelcast.Models.MemberVersion.Patch.html": {
    "href": "5.2.2/api/Hazelcast.Models.MemberVersion.Patch.html",
    "title": "Property Patch | Hazelcast .NET Documentation",
    "keywords": "Property Patch Patch Gets the patch version number. Declaration public byte Patch { get; } Property Value Type Description byte"
  },
  "5.2.2/api/Hazelcast.Models.MemberVersion.ToString.html": {
    "href": "5.2.2/api/Hazelcast.Models.MemberVersion.ToString.html",
    "title": "Method ToString | Hazelcast .NET Documentation",
    "keywords": "Method ToString ToString(bool) Returns a string that represents current member version. Declaration public string ToString(bool ignorePatchVersion) Parameters Type Name Description bool ignorePatchVersion Whether to skip or include path version to the string. Returns Type Description string ToString() Returns a string that represents current member version. Declaration public override string ToString() Returns Type Description string Overrides object.ToString()"
  },
  "5.2.2/api/Hazelcast.Models.UniqueKeyTransformation.html": {
    "href": "5.2.2/api/Hazelcast.Models.UniqueKeyTransformation.html",
    "title": "Enum UniqueKeyTransformation | Hazelcast .NET Documentation",
    "keywords": "Enum UniqueKeyTransformation Defines transformations which can be applied to UniqueKey values. Namespace: Hazelcast.Models Assembly: Hazelcast.Net.dll Syntax public enum UniqueKeyTransformation Fields Name Description Long The unique key value is interpreted as a whole integer value of byte, short, int or long type. The extracted value is upcasted to long (if necessary) and unique non-negative ID is assigned to every distinct value. Object The unique key value is interpreted as an object value. Non-negative unique ID is assigned to every distinct object value. Raw The unique key value is interpreted as a whole integer value of byte, short, int or long type. The extracted value is upcasted to long (if necessary) and the resulting value is used directly as an ID."
  },
  "5.2.2/api/Hazelcast.NearCaching.CommonNearCacheOptions.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.NearCaching.CommonNearCacheOptions.-ctor.html",
    "title": "Constructor CommonNearCacheOptions | Hazelcast .NET Documentation",
    "keywords": "Constructor CommonNearCacheOptions CommonNearCacheOptions() Initializes a new instance of the CommonNearCacheOptions class. Declaration public CommonNearCacheOptions()"
  },
  "5.2.2/api/Hazelcast.NearCaching.CommonNearCacheOptions.html": {
    "href": "5.2.2/api/Hazelcast.NearCaching.CommonNearCacheOptions.html",
    "title": "Class CommonNearCacheOptions | Hazelcast .NET Documentation",
    "keywords": "Class CommonNearCacheOptions Represents the advanced Near Cache options. Inheritance object CommonNearCacheOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.NearCaching Assembly: Hazelcast.Net.dll Syntax public class CommonNearCacheOptions Constructors Name Description CommonNearCacheOptions() Initializes a new instance of the CommonNearCacheOptions class. Properties Name Description MaxToleratedMissCount Gets or sets the maximum tolerated miss count. MinReconciliationIntervalSeconds Gets or sets the minimum reconciliation interval. ReconciliationIntervalSeconds Gets or sets the reconciliation interval."
  },
  "5.2.2/api/Hazelcast.NearCaching.CommonNearCacheOptions.MaxToleratedMissCount.html": {
    "href": "5.2.2/api/Hazelcast.NearCaching.CommonNearCacheOptions.MaxToleratedMissCount.html",
    "title": "Property MaxToleratedMissCount | Hazelcast .NET Documentation",
    "keywords": "Property MaxToleratedMissCount MaxToleratedMissCount Gets or sets the maximum tolerated miss count. Declaration public int MaxToleratedMissCount { get; set; } Property Value Type Description int"
  },
  "5.2.2/api/Hazelcast.NearCaching.CommonNearCacheOptions.MinReconciliationIntervalSeconds.html": {
    "href": "5.2.2/api/Hazelcast.NearCaching.CommonNearCacheOptions.MinReconciliationIntervalSeconds.html",
    "title": "Property MinReconciliationIntervalSeconds | Hazelcast .NET Documentation",
    "keywords": "Property MinReconciliationIntervalSeconds MinReconciliationIntervalSeconds Gets or sets the minimum reconciliation interval. Declaration public int MinReconciliationIntervalSeconds { get; set; } Property Value Type Description int"
  },
  "5.2.2/api/Hazelcast.NearCaching.CommonNearCacheOptions.ReconciliationIntervalSeconds.html": {
    "href": "5.2.2/api/Hazelcast.NearCaching.CommonNearCacheOptions.ReconciliationIntervalSeconds.html",
    "title": "Property ReconciliationIntervalSeconds | Hazelcast .NET Documentation",
    "keywords": "Property ReconciliationIntervalSeconds ReconciliationIntervalSeconds Gets or sets the reconciliation interval. Declaration public int ReconciliationIntervalSeconds { get; set; } Property Value Type Description int"
  },
  "5.2.2/api/Hazelcast.NearCaching.EvictionPolicy.html": {
    "href": "5.2.2/api/Hazelcast.NearCaching.EvictionPolicy.html",
    "title": "Enum EvictionPolicy | Hazelcast .NET Documentation",
    "keywords": "Enum EvictionPolicy Defines near caching eviction policies. Namespace: Hazelcast.NearCaching Assembly: Hazelcast.Net.dll Syntax public enum EvictionPolicy Fields Name Description Lfu Evict least-frequently used entries first. Lru Evict least-recently used entries first. None No eviction policy. Random Evict random entries."
  },
  "5.2.2/api/Hazelcast.NearCaching.html": {
    "href": "5.2.2/api/Hazelcast.NearCaching.html",
    "title": "Namespace Hazelcast.NearCaching | Hazelcast .NET Documentation",
    "keywords": "Namespace Hazelcast.NearCaching Classes CommonNearCacheOptions Represents the advanced Near Cache options. NearCacheOptions Represents the options for one Near Cache. Enums EvictionPolicy Defines near caching eviction policies."
  },
  "5.2.2/api/Hazelcast.NearCaching.NearCacheOptions.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.NearCaching.NearCacheOptions.-ctor.html",
    "title": "Constructor NearCacheOptions | Hazelcast .NET Documentation",
    "keywords": "Constructor NearCacheOptions NearCacheOptions() Initializes a new instance of the NearCacheOptions class. Declaration public NearCacheOptions()"
  },
  "5.2.2/api/Hazelcast.NearCaching.NearCacheOptions.EvictionPolicy.html": {
    "href": "5.2.2/api/Hazelcast.NearCaching.NearCacheOptions.EvictionPolicy.html",
    "title": "Property EvictionPolicy | Hazelcast .NET Documentation",
    "keywords": "Property EvictionPolicy EvictionPolicy Gets or sets the eviction policy. Declaration public EvictionPolicy EvictionPolicy { get; set; } Property Value Type Description EvictionPolicy"
  },
  "5.2.2/api/Hazelcast.NearCaching.NearCacheOptions.html": {
    "href": "5.2.2/api/Hazelcast.NearCaching.NearCacheOptions.html",
    "title": "Class NearCacheOptions | Hazelcast .NET Documentation",
    "keywords": "Class NearCacheOptions Represents the options for one Near Cache. Inheritance object NearCacheOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Hazelcast.NearCaching Assembly: Hazelcast.Net.dll Syntax public class NearCacheOptions Constructors Name Description NearCacheOptions() Initializes a new instance of the NearCacheOptions class. Properties Name Description EvictionPolicy Gets or sets the eviction policy. InMemoryFormat Gets or sets the in-memory format. InvalidateOnChange Whether to invalidate entries when entries in the backing data structure are changed. MaxIdleSeconds Gets or sets the maximum number of seconds an entry can stay in the cache untouched before being evicted. MaxSize Gets or sets the maximum size of the cache (number of entries) before entries get evicted. TimeToLiveSeconds Gets or sets the number of seconds entries stay in the cache before being evicted. Methods Name Description ToString()"
  },
  "5.2.2/api/Hazelcast.NearCaching.NearCacheOptions.InMemoryFormat.html": {
    "href": "5.2.2/api/Hazelcast.NearCaching.NearCacheOptions.InMemoryFormat.html",
    "title": "Property InMemoryFormat | Hazelcast .NET Documentation",
    "keywords": "Property InMemoryFormat InMemoryFormat Gets or sets the in-memory format. Declaration public InMemoryFormat InMemoryFormat { get; set; } Property Value Type Description InMemoryFormat"
  },
  "5.2.2/api/Hazelcast.NearCaching.NearCacheOptions.InvalidateOnChange.html": {
    "href": "5.2.2/api/Hazelcast.NearCaching.NearCacheOptions.InvalidateOnChange.html",
    "title": "Property InvalidateOnChange | Hazelcast .NET Documentation",
    "keywords": "Property InvalidateOnChange InvalidateOnChange Whether to invalidate entries when entries in the backing data structure are changed. Declaration public bool InvalidateOnChange { get; set; } Property Value Type Description bool Remarks When true, the cache listens for cluster-wide changes and invalidate entries accordingly. Changes to the local Hazelcast instance always invalidate the cache immediately."
  },
  "5.2.2/api/Hazelcast.NearCaching.NearCacheOptions.MaxIdleSeconds.html": {
    "href": "5.2.2/api/Hazelcast.NearCaching.NearCacheOptions.MaxIdleSeconds.html",
    "title": "Property MaxIdleSeconds | Hazelcast .NET Documentation",
    "keywords": "Property MaxIdleSeconds MaxIdleSeconds Gets or sets the maximum number of seconds an entry can stay in the cache untouched before being evicted. Declaration public int MaxIdleSeconds { get; set; } Property Value Type Description int Remarks zero means forever."
  },
  "5.2.2/api/Hazelcast.NearCaching.NearCacheOptions.MaxSize.html": {
    "href": "5.2.2/api/Hazelcast.NearCaching.NearCacheOptions.MaxSize.html",
    "title": "Property MaxSize | Hazelcast .NET Documentation",
    "keywords": "Property MaxSize MaxSize Gets or sets the maximum size of the cache (number of entries) before entries get evicted. Declaration public int MaxSize { get; set; } Property Value Type Description int"
  },
  "5.2.2/api/Hazelcast.NearCaching.NearCacheOptions.TimeToLiveSeconds.html": {
    "href": "5.2.2/api/Hazelcast.NearCaching.NearCacheOptions.TimeToLiveSeconds.html",
    "title": "Property TimeToLiveSeconds | Hazelcast .NET Documentation",
    "keywords": "Property TimeToLiveSeconds TimeToLiveSeconds Gets or sets the number of seconds entries stay in the cache before being evicted. Declaration public int TimeToLiveSeconds { get; set; } Property Value Type Description int"
  },
  "5.2.2/api/Hazelcast.NearCaching.NearCacheOptions.ToString.html": {
    "href": "5.2.2/api/Hazelcast.NearCaching.NearCacheOptions.ToString.html",
    "title": "Method ToString | Hazelcast .NET Documentation",
    "keywords": "Method ToString ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString()"
  },
  "5.2.2/api/Hazelcast.Networking.CloudOptions.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Networking.CloudOptions.-ctor.html",
    "title": "Constructor CloudOptions | Hazelcast .NET Documentation",
    "keywords": "Constructor CloudOptions CloudOptions() Initializes a new instance of the CloudOptions class. Declaration public CloudOptions()"
  },
  "5.2.2/api/Hazelcast.Networking.CloudOptions.DiscoveryToken.html": {
    "href": "5.2.2/api/Hazelcast.Networking.CloudOptions.DiscoveryToken.html",
    "title": "Property DiscoveryToken | Hazelcast .NET Documentation",
    "keywords": "Property DiscoveryToken DiscoveryToken Gets or sets the discovery token of the cluster. Declaration public string DiscoveryToken { get; set; } Property Value Type Description string"
  },
  "5.2.2/api/Hazelcast.Networking.CloudOptions.Enabled.html": {
    "href": "5.2.2/api/Hazelcast.Networking.CloudOptions.Enabled.html",
    "title": "Property Enabled | Hazelcast .NET Documentation",
    "keywords": "Property Enabled Enabled Whether Hazelcast Cloud is enabled. Declaration public bool Enabled { get; } Property Value Type Description bool Remarks This property is read-only and is set automatically when DiscoveryToken is not null nor empty."
  },
  "5.2.2/api/Hazelcast.Networking.CloudOptions.html": {
    "href": "5.2.2/api/Hazelcast.Networking.CloudOptions.html",
    "title": "Class CloudOptions | Hazelcast .NET Documentation",
    "keywords": "Class CloudOptions Represents the Hazelcast Cloud options. Inheritance object CloudOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.Networking Assembly: Hazelcast.Net.dll Syntax public class CloudOptions Constructors Name Description CloudOptions() Initializes a new instance of the CloudOptions class. Properties Name Description DiscoveryToken Gets or sets the discovery token of the cluster. Enabled Whether Hazelcast Cloud is enabled. Url Gets or sets the cloud url base."
  },
  "5.2.2/api/Hazelcast.Networking.CloudOptions.Url.html": {
    "href": "5.2.2/api/Hazelcast.Networking.CloudOptions.Url.html",
    "title": "Property Url | Hazelcast .NET Documentation",
    "keywords": "Property Url Url Gets or sets the cloud url base. Declaration public Uri Url { get; set; } Property Value Type Description Uri"
  },
  "5.2.2/api/Hazelcast.Networking.html": {
    "href": "5.2.2/api/Hazelcast.Networking.html",
    "title": "Namespace Hazelcast.Networking | Hazelcast .NET Documentation",
    "keywords": "Namespace Hazelcast.Networking Classes CloudOptions Represents the Hazelcast Cloud options. NetworkAddress Represents a network address. NetworkingOptions Represents the networking options. SocketOptions Represents the TCP socket options. SslOptions Represents the SSL options. Enums ReconnectMode Defines options for reconnecting a disconnected client."
  },
  "5.2.2/api/Hazelcast.Networking.NetworkAddress.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Networking.NetworkAddress.-ctor.html",
    "title": "Constructor NetworkAddress | Hazelcast .NET Documentation",
    "keywords": "Constructor NetworkAddress NetworkAddress(string, int) Initializes a new instance of the NetworkAddress class with a hostname and a port. Declaration public NetworkAddress(string hostName, int port = 0) Parameters Type Name Description string hostName The hostname. int port The port. NetworkAddress(IPAddress, int) Initializes a new instance of the NetworkAddress class with an IP address and a port. Declaration public NetworkAddress(IPAddress ipAddress, int port = 0) Parameters Type Name Description IPAddress ipAddress The IP address. int port The port."
  },
  "5.2.2/api/Hazelcast.Networking.NetworkAddress.Equals.html": {
    "href": "5.2.2/api/Hazelcast.Networking.NetworkAddress.Equals.html",
    "title": "Method Equals | Hazelcast .NET Documentation",
    "keywords": "Method Equals Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides object.Equals(object) Equals(NetworkAddress) Declaration public bool Equals(NetworkAddress other) Parameters Type Name Description NetworkAddress other Returns Type Description bool Implements IEquatable<T>.Equals(T)"
  },
  "5.2.2/api/Hazelcast.Networking.NetworkAddress.GetHashCode.html": {
    "href": "5.2.2/api/Hazelcast.Networking.NetworkAddress.GetHashCode.html",
    "title": "Method GetHashCode | Hazelcast .NET Documentation",
    "keywords": "Method GetHashCode GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode()"
  },
  "5.2.2/api/Hazelcast.Networking.NetworkAddress.HostName.html": {
    "href": "5.2.2/api/Hazelcast.Networking.NetworkAddress.HostName.html",
    "title": "Property HostName | Hazelcast .NET Documentation",
    "keywords": "Property HostName HostName Gets the host name. Declaration public string HostName { get; } Property Value Type Description string"
  },
  "5.2.2/api/Hazelcast.Networking.NetworkAddress.html": {
    "href": "5.2.2/api/Hazelcast.Networking.NetworkAddress.html",
    "title": "Class NetworkAddress | Hazelcast .NET Documentation",
    "keywords": "Class NetworkAddress Represents a network address. Inheritance object NetworkAddress Implements IEquatable<NetworkAddress> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Hazelcast.Networking Assembly: Hazelcast.Net.dll Syntax public class NetworkAddress : IEquatable<NetworkAddress> Constructors Name Description NetworkAddress(IPAddress, int) Initializes a new instance of the NetworkAddress class with an IP address and a port. NetworkAddress(string, int) Initializes a new instance of the NetworkAddress class with a hostname and a port. Properties Name Description HostName Gets the host name. IPAddress Gets the IP address corresponding to this address. IPEndPoint Gets the IP endpoint corresponding to this address. IsIpV4 Whether the address is an IP v4 address. IsIpV6 Whether the address is an IP v6 address. IsIpV6GlobalOrScoped Whether the address is an IP v6 address which is global (non-local), or scoped. Port Gets the port. Methods Name Description Equals(NetworkAddress) Equals(object) GetHashCode() ToString() Operators Name Description operator ==(NetworkAddress, NetworkAddress) Overrides the == operator. operator !=(NetworkAddress, NetworkAddress) Overrides the != operator."
  },
  "5.2.2/api/Hazelcast.Networking.NetworkAddress.IPAddress.html": {
    "href": "5.2.2/api/Hazelcast.Networking.NetworkAddress.IPAddress.html",
    "title": "Property IPAddress | Hazelcast .NET Documentation",
    "keywords": "Property IPAddress IPAddress Gets the IP address corresponding to this address. Declaration public IPAddress IPAddress { get; } Property Value Type Description IPAddress"
  },
  "5.2.2/api/Hazelcast.Networking.NetworkAddress.IPEndPoint.html": {
    "href": "5.2.2/api/Hazelcast.Networking.NetworkAddress.IPEndPoint.html",
    "title": "Property IPEndPoint | Hazelcast .NET Documentation",
    "keywords": "Property IPEndPoint IPEndPoint Gets the IP endpoint corresponding to this address. Declaration public IPEndPoint IPEndPoint { get; } Property Value Type Description IPEndPoint"
  },
  "5.2.2/api/Hazelcast.Networking.NetworkAddress.IsIpV4.html": {
    "href": "5.2.2/api/Hazelcast.Networking.NetworkAddress.IsIpV4.html",
    "title": "Property IsIpV4 | Hazelcast .NET Documentation",
    "keywords": "Property IsIpV4 IsIpV4 Whether the address is an IP v4 address. Declaration public bool IsIpV4 { get; } Property Value Type Description bool"
  },
  "5.2.2/api/Hazelcast.Networking.NetworkAddress.IsIpV6.html": {
    "href": "5.2.2/api/Hazelcast.Networking.NetworkAddress.IsIpV6.html",
    "title": "Property IsIpV6 | Hazelcast .NET Documentation",
    "keywords": "Property IsIpV6 IsIpV6 Whether the address is an IP v6 address. Declaration public bool IsIpV6 { get; } Property Value Type Description bool"
  },
  "5.2.2/api/Hazelcast.Networking.NetworkAddress.IsIpV6GlobalOrScoped.html": {
    "href": "5.2.2/api/Hazelcast.Networking.NetworkAddress.IsIpV6GlobalOrScoped.html",
    "title": "Property IsIpV6GlobalOrScoped | Hazelcast .NET Documentation",
    "keywords": "Property IsIpV6GlobalOrScoped IsIpV6GlobalOrScoped Whether the address is an IP v6 address which is global (non-local), or scoped. Declaration public bool IsIpV6GlobalOrScoped { get; } Property Value Type Description bool"
  },
  "5.2.2/api/Hazelcast.Networking.NetworkAddress.op_Equality.html": {
    "href": "5.2.2/api/Hazelcast.Networking.NetworkAddress.op_Equality.html",
    "title": "Operator operator == | Hazelcast .NET Documentation",
    "keywords": "Operator operator == operator ==(NetworkAddress, NetworkAddress) Overrides the == operator. Declaration public static bool operator ==(NetworkAddress a1, NetworkAddress a2) Parameters Type Name Description NetworkAddress a1 NetworkAddress a2 Returns Type Description bool"
  },
  "5.2.2/api/Hazelcast.Networking.NetworkAddress.op_Inequality.html": {
    "href": "5.2.2/api/Hazelcast.Networking.NetworkAddress.op_Inequality.html",
    "title": "Operator operator != | Hazelcast .NET Documentation",
    "keywords": "Operator operator != operator !=(NetworkAddress, NetworkAddress) Overrides the != operator. Declaration public static bool operator !=(NetworkAddress a1, NetworkAddress a2) Parameters Type Name Description NetworkAddress a1 NetworkAddress a2 Returns Type Description bool"
  },
  "5.2.2/api/Hazelcast.Networking.NetworkAddress.Port.html": {
    "href": "5.2.2/api/Hazelcast.Networking.NetworkAddress.Port.html",
    "title": "Property Port | Hazelcast .NET Documentation",
    "keywords": "Property Port Port Gets the port. Declaration public int Port { get; } Property Value Type Description int"
  },
  "5.2.2/api/Hazelcast.Networking.NetworkAddress.ToString.html": {
    "href": "5.2.2/api/Hazelcast.Networking.NetworkAddress.ToString.html",
    "title": "Method ToString | Hazelcast .NET Documentation",
    "keywords": "Method ToString ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString()"
  },
  "5.2.2/api/Hazelcast.Networking.NetworkingOptions.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Networking.NetworkingOptions.-ctor.html",
    "title": "Constructor NetworkingOptions | Hazelcast .NET Documentation",
    "keywords": "Constructor NetworkingOptions NetworkingOptions(PreviewOptions) Initializes a new instance of the NetworkingOptions class. Declaration public NetworkingOptions(PreviewOptions preview = null) Parameters Type Name Description PreviewOptions preview"
  },
  "5.2.2/api/Hazelcast.Networking.NetworkingOptions.Addresses.html": {
    "href": "5.2.2/api/Hazelcast.Networking.NetworkingOptions.Addresses.html",
    "title": "Property Addresses | Hazelcast .NET Documentation",
    "keywords": "Property Addresses Addresses Gets or sets the list of initial addresses. Declaration public IList<string> Addresses { get; } Property Value Type Description IList<string> Remarks The client uses this list to find a running member and connect to it. This initial member will then send the list of other members to the client. Each address must be a valid IPv4 or IPv6 address."
  },
  "5.2.2/api/Hazelcast.Networking.NetworkingOptions.Cloud.html": {
    "href": "5.2.2/api/Hazelcast.Networking.NetworkingOptions.Cloud.html",
    "title": "Property Cloud | Hazelcast .NET Documentation",
    "keywords": "Property Cloud Cloud Gets the CloudOptions. Declaration public CloudOptions Cloud { get; } Property Value Type Description CloudOptions"
  },
  "5.2.2/api/Hazelcast.Networking.NetworkingOptions.ConnectionRetry.html": {
    "href": "5.2.2/api/Hazelcast.Networking.NetworkingOptions.ConnectionRetry.html",
    "title": "Property ConnectionRetry | Hazelcast .NET Documentation",
    "keywords": "Property ConnectionRetry ConnectionRetry Gets the connection ConnectionRetryOptions. Declaration public ConnectionRetryOptions ConnectionRetry { get; } Property Value Type Description ConnectionRetryOptions Remarks Specifies the Hazelcast client connection parameters, including the timeout, i.e. the maximum amount of time that the Hazelcast client can spend trying to establish a connection to the cluster before failing. See SocketOptions for specifying the individual socket parameters, including the individual socket connection timeout."
  },
  "5.2.2/api/Hazelcast.Networking.NetworkingOptions.ConnectionTimeoutMilliseconds.html": {
    "href": "5.2.2/api/Hazelcast.Networking.NetworkingOptions.ConnectionTimeoutMilliseconds.html",
    "title": "Property ConnectionTimeoutMilliseconds | Hazelcast .NET Documentation",
    "keywords": "Property ConnectionTimeoutMilliseconds ConnectionTimeoutMilliseconds Gets or sets the connection timeout. Declaration public int ConnectionTimeoutMilliseconds { get; set; } Property Value Type Description int Remarks This timeout is used in various places. It is the connection timeout for each individual socket. It is also the timeout for cloud discovery."
  },
  "5.2.2/api/Hazelcast.Networking.NetworkingOptions.html": {
    "href": "5.2.2/api/Hazelcast.Networking.NetworkingOptions.html",
    "title": "Class NetworkingOptions | Hazelcast .NET Documentation",
    "keywords": "Class NetworkingOptions Represents the networking options. Inheritance object NetworkingOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.Networking Assembly: Hazelcast.Net.dll Syntax public class NetworkingOptions Constructors Name Description NetworkingOptions(PreviewOptions) Initializes a new instance of the NetworkingOptions class. Properties Name Description Addresses Gets or sets the list of initial addresses. Cloud Gets the CloudOptions. ConnectionRetry Gets the connection ConnectionRetryOptions. ConnectionTimeoutMilliseconds Gets or sets the connection timeout. Reconnect Whether to attempt to automatically reconnect a client that has been disconnected. ReconnectMode Gets or sets the ReconnectMode in case the client is disconnected. RedoOperations Whether to retry operations. ShuffleAddresses Whether to shuffle addresses when attempting to connect to the cluster. SmartRouting Whether smart routing is enabled. Socket Gets the SocketOptions. Ssl Gets the SslOptions. UsePublicAddresses Whether to use the public addresses of members."
  },
  "5.2.2/api/Hazelcast.Networking.NetworkingOptions.Reconnect.html": {
    "href": "5.2.2/api/Hazelcast.Networking.NetworkingOptions.Reconnect.html",
    "title": "Property Reconnect | Hazelcast .NET Documentation",
    "keywords": "Property Reconnect Reconnect Whether to attempt to automatically reconnect a client that has been disconnected. Declaration public bool Reconnect { get; set; } Property Value Type Description bool Remarks This is true by default, i.e. a client that has been disconnected but is still active will try to reconnect to the cluster. Set this to false if you want it to shut down and never reconnect."
  },
  "5.2.2/api/Hazelcast.Networking.NetworkingOptions.ReconnectMode.html": {
    "href": "5.2.2/api/Hazelcast.Networking.NetworkingOptions.ReconnectMode.html",
    "title": "Property ReconnectMode | Hazelcast .NET Documentation",
    "keywords": "Property ReconnectMode ReconnectMode Gets or sets the ReconnectMode in case the client is disconnected. Declaration public ReconnectMode ReconnectMode { get; set; } Property Value Type Description ReconnectMode"
  },
  "5.2.2/api/Hazelcast.Networking.NetworkingOptions.RedoOperations.html": {
    "href": "5.2.2/api/Hazelcast.Networking.NetworkingOptions.RedoOperations.html",
    "title": "Property RedoOperations | Hazelcast .NET Documentation",
    "keywords": "Property RedoOperations RedoOperations Whether to retry operations. Declaration public bool RedoOperations { get; set; } Property Value Type Description bool Remarks While sending the requests to related members, operations can fail due to various reasons. Read-only operations are retried by default. If you want to enable retry for the other operations, set this property to true. Note that it is not clear whether the operation is performed or not. For idempotent operations this is harmless, but for non idempotent ones retrying can cause undesirable effects. Also note that the redo can perform on any member."
  },
  "5.2.2/api/Hazelcast.Networking.NetworkingOptions.ShuffleAddresses.html": {
    "href": "5.2.2/api/Hazelcast.Networking.NetworkingOptions.ShuffleAddresses.html",
    "title": "Property ShuffleAddresses | Hazelcast .NET Documentation",
    "keywords": "Property ShuffleAddresses ShuffleAddresses Whether to shuffle addresses when attempting to connect to the cluster. Declaration public bool ShuffleAddresses { get; set; } Property Value Type Description bool"
  },
  "5.2.2/api/Hazelcast.Networking.NetworkingOptions.SmartRouting.html": {
    "href": "5.2.2/api/Hazelcast.Networking.NetworkingOptions.SmartRouting.html",
    "title": "Property SmartRouting | Hazelcast .NET Documentation",
    "keywords": "Property SmartRouting SmartRouting Whether smart routing is enabled. Declaration public bool SmartRouting { get; set; } Property Value Type Description bool Remarks If true (default), client will route the key based operations to owner of the key at the best effort. Note that it however does not guarantee that the operation will always be executed on the owner, as the member table is only updated every 10 seconds."
  },
  "5.2.2/api/Hazelcast.Networking.NetworkingOptions.Socket.html": {
    "href": "5.2.2/api/Hazelcast.Networking.NetworkingOptions.Socket.html",
    "title": "Property Socket | Hazelcast .NET Documentation",
    "keywords": "Property Socket Socket Gets the SocketOptions. Declaration public SocketOptions Socket { get; } Property Value Type Description SocketOptions"
  },
  "5.2.2/api/Hazelcast.Networking.NetworkingOptions.Ssl.html": {
    "href": "5.2.2/api/Hazelcast.Networking.NetworkingOptions.Ssl.html",
    "title": "Property Ssl | Hazelcast .NET Documentation",
    "keywords": "Property Ssl Ssl Gets the SslOptions. Declaration public SslOptions Ssl { get; } Property Value Type Description SslOptions"
  },
  "5.2.2/api/Hazelcast.Networking.NetworkingOptions.UsePublicAddresses.html": {
    "href": "5.2.2/api/Hazelcast.Networking.NetworkingOptions.UsePublicAddresses.html",
    "title": "Property UsePublicAddresses | Hazelcast .NET Documentation",
    "keywords": "Property UsePublicAddresses UsePublicAddresses Whether to use the public addresses of members. Declaration public bool? UsePublicAddresses { get; set; } Property Value Type Description bool? Remarks When connecting to clusters where members have different public and internal addresses, this option can be used to indicate whether to use, or not use, the public addresses. When null (by default), the client will try to determine which address to use automatically."
  },
  "5.2.2/api/Hazelcast.Networking.ReconnectMode.html": {
    "href": "5.2.2/api/Hazelcast.Networking.ReconnectMode.html",
    "title": "Enum ReconnectMode | Hazelcast .NET Documentation",
    "keywords": "Enum ReconnectMode Defines options for reconnecting a disconnected client. Namespace: Hazelcast.Networking Assembly: Hazelcast.Net.dll Syntax public enum ReconnectMode Fields Name Description DoNotReconnect Do not reconnect. ReconnectAsync Reconnect without blocking invocations. Invocations will fail. ReconnectSync Reconnect while blocking invocations."
  },
  "5.2.2/api/Hazelcast.Networking.SocketOptions.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Networking.SocketOptions.-ctor.html",
    "title": "Constructor SocketOptions | Hazelcast .NET Documentation",
    "keywords": "Constructor SocketOptions SocketOptions() Initializes a new instance of the SocketOptions class. Declaration public SocketOptions()"
  },
  "5.2.2/api/Hazelcast.Networking.SocketOptions.BufferSizeKiB.html": {
    "href": "5.2.2/api/Hazelcast.Networking.SocketOptions.BufferSizeKiB.html",
    "title": "Property BufferSizeKiB | Hazelcast .NET Documentation",
    "keywords": "Property BufferSizeKiB BufferSizeKiB The send and receive buffers size. Declaration public int BufferSizeKiB { get; set; } Property Value Type Description int Remarks The buffer size is expressed in Kibibytes, ie units of 1024 bytes. This sets the size of both the send and receive buffers."
  },
  "5.2.2/api/Hazelcast.Networking.SocketOptions.html": {
    "href": "5.2.2/api/Hazelcast.Networking.SocketOptions.html",
    "title": "Class SocketOptions | Hazelcast .NET Documentation",
    "keywords": "Class SocketOptions Represents the TCP socket options. Inheritance object SocketOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.Networking Assembly: Hazelcast.Net.dll Syntax public class SocketOptions Constructors Name Description SocketOptions() Initializes a new instance of the SocketOptions class. Properties Name Description BufferSizeKiB The send and receive buffers size. KeepAlive Whether to keep the socket alive. LingerSeconds The number of seconds to remain connected after the socket Close() method is called, or zero to disconnect immediately. TcpNoDelay Whether the socket is using the Nagle algorithm."
  },
  "5.2.2/api/Hazelcast.Networking.SocketOptions.KeepAlive.html": {
    "href": "5.2.2/api/Hazelcast.Networking.SocketOptions.KeepAlive.html",
    "title": "Property KeepAlive | Hazelcast .NET Documentation",
    "keywords": "Property KeepAlive KeepAlive Whether to keep the socket alive. Declaration public bool KeepAlive { get; set; } Property Value Type Description bool"
  },
  "5.2.2/api/Hazelcast.Networking.SocketOptions.LingerSeconds.html": {
    "href": "5.2.2/api/Hazelcast.Networking.SocketOptions.LingerSeconds.html",
    "title": "Property LingerSeconds | Hazelcast .NET Documentation",
    "keywords": "Property LingerSeconds LingerSeconds The number of seconds to remain connected after the socket Close() method is called, or zero to disconnect immediately. Declaration public int LingerSeconds { get; set; } Property Value Type Description int"
  },
  "5.2.2/api/Hazelcast.Networking.SocketOptions.TcpNoDelay.html": {
    "href": "5.2.2/api/Hazelcast.Networking.SocketOptions.TcpNoDelay.html",
    "title": "Property TcpNoDelay | Hazelcast .NET Documentation",
    "keywords": "Property TcpNoDelay TcpNoDelay Whether the socket is using the Nagle algorithm. Declaration public bool TcpNoDelay { get; set; } Property Value Type Description bool"
  },
  "5.2.2/api/Hazelcast.Networking.SslOptions.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Networking.SslOptions.-ctor.html",
    "title": "Constructor SslOptions | Hazelcast .NET Documentation",
    "keywords": "Constructor SslOptions SslOptions() Initializes a new instance of the SslOptions class. Declaration public SslOptions()"
  },
  "5.2.2/api/Hazelcast.Networking.SslOptions.CertificateName.html": {
    "href": "5.2.2/api/Hazelcast.Networking.SslOptions.CertificateName.html",
    "title": "Property CertificateName | Hazelcast .NET Documentation",
    "keywords": "Property CertificateName CertificateName Gets or sets the name of the certificate. Declaration public string CertificateName { get; set; } Property Value Type Description string"
  },
  "5.2.2/api/Hazelcast.Networking.SslOptions.CertificatePassword.html": {
    "href": "5.2.2/api/Hazelcast.Networking.SslOptions.CertificatePassword.html",
    "title": "Property CertificatePassword | Hazelcast .NET Documentation",
    "keywords": "Property CertificatePassword CertificatePassword Gets or sets the password for the certificate file. Declaration public string CertificatePassword { get; set; } Property Value Type Description string"
  },
  "5.2.2/api/Hazelcast.Networking.SslOptions.CertificatePath.html": {
    "href": "5.2.2/api/Hazelcast.Networking.SslOptions.CertificatePath.html",
    "title": "Property CertificatePath | Hazelcast .NET Documentation",
    "keywords": "Property CertificatePath CertificatePath Gets or sets the full path to the certificate file. Declaration public string CertificatePath { get; set; } Property Value Type Description string"
  },
  "5.2.2/api/Hazelcast.Networking.SslOptions.CheckCertificateRevocation.html": {
    "href": "5.2.2/api/Hazelcast.Networking.SslOptions.CheckCertificateRevocation.html",
    "title": "Property CheckCertificateRevocation | Hazelcast .NET Documentation",
    "keywords": "Property CheckCertificateRevocation CheckCertificateRevocation Whether to check for certificate revocation. Declaration public bool CheckCertificateRevocation { get; set; } Property Value Type Description bool"
  },
  "5.2.2/api/Hazelcast.Networking.SslOptions.Enabled.html": {
    "href": "5.2.2/api/Hazelcast.Networking.SslOptions.Enabled.html",
    "title": "Property Enabled | Hazelcast .NET Documentation",
    "keywords": "Property Enabled Enabled Whether to enable SSL. Declaration public bool Enabled { get; set; } Property Value Type Description bool"
  },
  "5.2.2/api/Hazelcast.Networking.SslOptions.html": {
    "href": "5.2.2/api/Hazelcast.Networking.SslOptions.html",
    "title": "Class SslOptions | Hazelcast .NET Documentation",
    "keywords": "Class SslOptions Represents the SSL options. Inheritance object SslOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Hazelcast.Networking Assembly: Hazelcast.Net.dll Syntax public class SslOptions Constructors Name Description SslOptions() Initializes a new instance of the SslOptions class. Properties Name Description CertificateName Gets or sets the name of the certificate. CertificatePassword Gets or sets the password for the certificate file. CertificatePath Gets or sets the full path to the certificate file. CheckCertificateRevocation Whether to check for certificate revocation. Enabled Whether to enable SSL. Protocol Gets or sets the SSL protocol. ValidateCertificateChain Whether to validate the certificate chain. ValidateCertificateName Whether to validate the certificate name. Methods Name Description ToString()"
  },
  "5.2.2/api/Hazelcast.Networking.SslOptions.Protocol.html": {
    "href": "5.2.2/api/Hazelcast.Networking.SslOptions.Protocol.html",
    "title": "Property Protocol | Hazelcast .NET Documentation",
    "keywords": "Property Protocol Protocol Gets or sets the SSL protocol. Declaration public SslProtocols Protocol { get; set; } Property Value Type Description SslProtocols Remarks The protocol must be a member of the SslProtocols enum, and currently only Tls, Tls11 and Tls12 are supported, though only the latest is recommended."
  },
  "5.2.2/api/Hazelcast.Networking.SslOptions.ToString.html": {
    "href": "5.2.2/api/Hazelcast.Networking.SslOptions.ToString.html",
    "title": "Method ToString | Hazelcast .NET Documentation",
    "keywords": "Method ToString ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString()"
  },
  "5.2.2/api/Hazelcast.Networking.SslOptions.ValidateCertificateChain.html": {
    "href": "5.2.2/api/Hazelcast.Networking.SslOptions.ValidateCertificateChain.html",
    "title": "Property ValidateCertificateChain | Hazelcast .NET Documentation",
    "keywords": "Property ValidateCertificateChain ValidateCertificateChain Whether to validate the certificate chain. Declaration public bool ValidateCertificateChain { get; set; } Property Value Type Description bool"
  },
  "5.2.2/api/Hazelcast.Networking.SslOptions.ValidateCertificateName.html": {
    "href": "5.2.2/api/Hazelcast.Networking.SslOptions.ValidateCertificateName.html",
    "title": "Property ValidateCertificateName | Hazelcast .NET Documentation",
    "keywords": "Property ValidateCertificateName ValidateCertificateName Whether to validate the certificate name. Declaration public bool ValidateCertificateName { get; set; } Property Value Type Description bool"
  },
  "5.2.2/api/Hazelcast.Partitioning.Strategies.html": {
    "href": "5.2.2/api/Hazelcast.Partitioning.Strategies.html",
    "title": "Namespace Hazelcast.Partitioning.Strategies | Hazelcast .NET Documentation",
    "keywords": "Namespace Hazelcast.Partitioning.Strategies Interfaces IPartitionAware Describes objects that provide their own partition keys. IPartitioningStrategy Defines ways to get the partition key of objects."
  },
  "5.2.2/api/Hazelcast.Partitioning.Strategies.IPartitionAware.GetPartitionKey.html": {
    "href": "5.2.2/api/Hazelcast.Partitioning.Strategies.IPartitionAware.GetPartitionKey.html",
    "title": "Method GetPartitionKey | Hazelcast .NET Documentation",
    "keywords": "Method GetPartitionKey GetPartitionKey() Gets the partition key. Declaration object GetPartitionKey() Returns Type Description object The partition key of the object, or null to fallback to the default strategy."
  },
  "5.2.2/api/Hazelcast.Partitioning.Strategies.IPartitionAware.html": {
    "href": "5.2.2/api/Hazelcast.Partitioning.Strategies.IPartitionAware.html",
    "title": "Interface IPartitionAware | Hazelcast .NET Documentation",
    "keywords": "Interface IPartitionAware Describes objects that provide their own partition keys. Namespace: Hazelcast.Partitioning.Strategies Assembly: Hazelcast.Net.dll Syntax public interface IPartitionAware Methods Name Description GetPartitionKey() Gets the partition key."
  },
  "5.2.2/api/Hazelcast.Partitioning.Strategies.IPartitioningStrategy.GetPartitionKey.html": {
    "href": "5.2.2/api/Hazelcast.Partitioning.Strategies.IPartitioningStrategy.GetPartitionKey.html",
    "title": "Method GetPartitionKey | Hazelcast .NET Documentation",
    "keywords": "Method GetPartitionKey GetPartitionKey(object) Gets the partition key of an object. Declaration object GetPartitionKey(object o) Parameters Type Name Description object o The object. Returns Type Description object The partition key of the object, or null to fallback to the default strategy."
  },
  "5.2.2/api/Hazelcast.Partitioning.Strategies.IPartitioningStrategy.html": {
    "href": "5.2.2/api/Hazelcast.Partitioning.Strategies.IPartitioningStrategy.html",
    "title": "Interface IPartitioningStrategy | Hazelcast .NET Documentation",
    "keywords": "Interface IPartitioningStrategy Defines ways to get the partition key of objects. Namespace: Hazelcast.Partitioning.Strategies Assembly: Hazelcast.Net.dll Syntax public interface IPartitioningStrategy Methods Name Description GetPartitionKey(object) Gets the partition key of an object."
  },
  "5.2.2/api/Hazelcast.PreviewOptions.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.PreviewOptions.-ctor.html",
    "title": "Constructor PreviewOptions | Hazelcast .NET Documentation",
    "keywords": "Constructor PreviewOptions PreviewOptions() Initializes a new instance of the PreviewOptions class. Declaration public PreviewOptions()"
  },
  "5.2.2/api/Hazelcast.PreviewOptions.Clone.html": {
    "href": "5.2.2/api/Hazelcast.PreviewOptions.Clone.html",
    "title": "Method Clone | Hazelcast .NET Documentation",
    "keywords": "Method Clone Clone() Clones the options. Declaration public PreviewOptions Clone() Returns Type Description PreviewOptions"
  },
  "5.2.2/api/Hazelcast.PreviewOptions.EnableNewReconnectOptions.html": {
    "href": "5.2.2/api/Hazelcast.PreviewOptions.EnableNewReconnectOptions.html",
    "title": "Property EnableNewReconnectOptions | Hazelcast .NET Documentation",
    "keywords": "Property EnableNewReconnectOptions EnableNewReconnectOptions (unsupported) Whether to enable the new reconnect options. Declaration public bool EnableNewReconnectOptions { get; set; } Property Value Type Description bool Remarks The ReconnectMode option specifies a synchronous and an asynchronous mode, but they are both implemented in the same way. These modes actually don't make a lot of sense. And, reconnection is disabled by default. When the new reconnect options are enabled, this option is ignored, and replaced by the Reconnect option, which is a boolean and indicates whether to reconnect or not. It is true by default. Invocations that fail because the client is reconnecting will be retried (all of them, reads and writes) until the client is reconnected, or the invocation times out."
  },
  "5.2.2/api/Hazelcast.PreviewOptions.EnableNewRetryOptions.html": {
    "href": "5.2.2/api/Hazelcast.PreviewOptions.EnableNewRetryOptions.html",
    "title": "Property EnableNewRetryOptions | Hazelcast .NET Documentation",
    "keywords": "Property EnableNewRetryOptions EnableNewRetryOptions (unsupported) Whether to enable the new retry options. Declaration public bool EnableNewRetryOptions { get; set; } Property Value Type Description bool Remarks Retrying failed invocations was originally controlled by the RedoOperations option. This option belongs more to messaging, where we may want to enable finer-grain control of retries. When the new retry options are enabled, this option is ignored and replaced by the RetryUnsafeOperations option: all safe (read) operations are retried by default, and this option controls whether to retry unsafe (write) operations. It is false by default.In addition, a new option is introduced, RetryOnClientReconnecting which controls retries when the operation cannot even start because the client is reconnecting. It is true by default."
  },
  "5.2.2/api/Hazelcast.PreviewOptions.html": {
    "href": "5.2.2/api/Hazelcast.PreviewOptions.html",
    "title": "Class PreviewOptions | Hazelcast .NET Documentation",
    "keywords": "Class PreviewOptions Represents preview options. Inheritance object PreviewOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast Assembly: Hazelcast.Net.dll Syntax public class PreviewOptions Remarks Preview options are unsupported options that are provided to enable behaviors of the client that remain experimental and/or may break backward compatibility. Constructors Name Description PreviewOptions() Initializes a new instance of the PreviewOptions class. Properties Name Description EnableNewReconnectOptions (unsupported) Whether to enable the new reconnect options. EnableNewRetryOptions (unsupported) Whether to enable the new retry options. Methods Name Description Clone() Clones the options."
  },
  "5.2.2/api/Hazelcast.Projection.html": {
    "href": "5.2.2/api/Hazelcast.Projection.html",
    "title": "Namespace Hazelcast.Projection | Hazelcast .NET Documentation",
    "keywords": "Namespace Hazelcast.Projection Classes Projections Creates IProjection instances. Interfaces IProjection Transform an object into another object."
  },
  "5.2.2/api/Hazelcast.Projection.IProjection.html": {
    "href": "5.2.2/api/Hazelcast.Projection.IProjection.html",
    "title": "Interface IProjection | Hazelcast .NET Documentation",
    "keywords": "Interface IProjection Transform an object into another object. Namespace: Hazelcast.Projection Assembly: Hazelcast.Net.dll Syntax public interface IProjection Remarks Only 1-to-1 projections are allowed. Use an IAggregator<TResult> to perform n-to-1 or n-to-n projections. Projections must have a server-side counterpart."
  },
  "5.2.2/api/Hazelcast.Projection.Projections.html": {
    "href": "5.2.2/api/Hazelcast.Projection.Projections.html",
    "title": "Class Projections | Hazelcast .NET Documentation",
    "keywords": "Class Projections Creates IProjection instances. Inheritance object Projections Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.Projection Assembly: Hazelcast.Net.dll Syntax public static class Projections Methods Name Description MultipleAttribute(params string[]) Projects multiple attributes. SingleAttribute(string) Projects a single attribute."
  },
  "5.2.2/api/Hazelcast.Projection.Projections.MultipleAttribute.html": {
    "href": "5.2.2/api/Hazelcast.Projection.Projections.MultipleAttribute.html",
    "title": "Method MultipleAttribute | Hazelcast .NET Documentation",
    "keywords": "Method MultipleAttribute MultipleAttribute(params string[]) Projects multiple attributes. Declaration public static IProjection MultipleAttribute(params string[] attributePaths) Parameters Type Name Description string[] attributePaths The attribute paths. Returns Type Description IProjection A projection."
  },
  "5.2.2/api/Hazelcast.Projection.Projections.SingleAttribute.html": {
    "href": "5.2.2/api/Hazelcast.Projection.Projections.SingleAttribute.html",
    "title": "Method SingleAttribute | Hazelcast .NET Documentation",
    "keywords": "Method SingleAttribute SingleAttribute(string) Projects a single attribute. Declaration public static IProjection SingleAttribute(string attributePath) Parameters Type Name Description string attributePath The attribute. Returns Type Description IProjection A projection."
  },
  "5.2.2/api/Hazelcast.Protocol.html": {
    "href": "5.2.2/api/Hazelcast.Protocol.html",
    "title": "Namespace Hazelcast.Protocol | Hazelcast .NET Documentation",
    "keywords": "Namespace Hazelcast.Protocol Classes RemoteException Represents an exception that was thrown remotely on a server."
  },
  "5.2.2/api/Hazelcast.Protocol.Models.html": {
    "href": "5.2.2/api/Hazelcast.Protocol.Models.html",
    "title": "Namespace Hazelcast.Protocol.Models | Hazelcast .NET Documentation",
    "keywords": "Namespace Hazelcast.Protocol.Models Enums RemoteError Defines the error codes that can be returned by a remote server."
  },
  "5.2.2/api/Hazelcast.Protocol.Models.RemoteError.html": {
    "href": "5.2.2/api/Hazelcast.Protocol.Models.RemoteError.html",
    "title": "Enum RemoteError | Hazelcast .NET Documentation",
    "keywords": "Enum RemoteError Defines the error codes that can be returned by a remote server. Namespace: Hazelcast.Protocol.Models Assembly: Hazelcast.Net.dll Syntax public enum RemoteError Fields Name Description AccessControl ArrayIndexOutOfBounds ArrayStore AssertionError Authentication Cache CacheLoader CacheNotExists CacheWriter CallerNotMember Cancellation CannotReplicateException ClassCast ClassNotFound ConcurrentModification ConfigMismatch ConsistencyLostException CpGroupDestroyedException DistributedObjectDestroyed DuplicateTask EntryProcessor Eof Execution FlakeIdNodeIdOutOfRangeException Hazelcast HazelcastInstanceNotActive HazelcastOverload HazelcastSerialization IllegalAccessError IllegalAccessException IllegalArgument IllegalMonitorState IllegalState IllegalThreadState IndeterminateOperationState IndexOutOfBounds Interrupted InvalidAddress InvalidConfiguration IO JetExceptionsRangeEnd JetExceptionsRangeStart LeaderDemotedException LocalMemberReset LockAcquireLimitReachedException LockOwnershipLostException Login MaxMessageSizeExceeded MemberLeft MutationDisallowedException NativeOutOfMemoryError NegativeArraySize NoClassDefinitionFound NoDataMember NoSuchElement NoSuchFieldError NoSuchFieldException NoSuchMethodError NoSuchMethodException NotLeaderException NotSerializable NullPointer OperationTimeout OutOfMemoryError PartitionMigrating Query QueryResultSizeExceeded ReachedMaxSize RejectedExecution ReplicatedMapCantBeCreated ResponseAlreadySent RetryableHazelcast RetryableIO Runtime Security ServiceNotFound SessionExpiredException Socket SplitBrainProtection StackOverflowError StaleAppendRequestException StaleSequence StaleTask StaleTaskId TargetDisconnected TargetNotMember TargetNotReplicaException Timeout TopicOverload Transaction TransactionNotActive TransactionTimedOut Undefined UnsupportedCallback UnsupportedOperation UriSyntax UserExceptionsRangeStart UTFDataFormat VersionMismatchException WaitKeyCancelledException WanReplicationQueueFull WrongTarget Xa"
  },
  "5.2.2/api/Hazelcast.Protocol.RemoteException.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Protocol.RemoteException.-ctor.html",
    "title": "Constructor RemoteException | Hazelcast .NET Documentation",
    "keywords": "Constructor RemoteException RemoteException() Initializes a new instance of the HazelcastException class. Declaration public RemoteException() RemoteException(Guid) Initializes a new instance of the HazelcastException class. Declaration public RemoteException(Guid memberId) Parameters Type Name Description Guid memberId The unique identifier of the member that threw the exception. RemoteException(string) Initializes a new instance of the HazelcastException class. Declaration public RemoteException(string message) Parameters Type Name Description string message The message that describes the error. RemoteException(Guid, string) Initializes a new instance of the HazelcastException class. Declaration public RemoteException(Guid memberId, string message) Parameters Type Name Description Guid memberId The unique identifier of the member that threw the exception. string message The message that describes the error. RemoteException(string, Exception) Initializes a new instance of the HazelcastException class. Declaration public RemoteException(string message, Exception innerException) Parameters Type Name Description string message The message that describes the error. Exception innerException The exception that is the cause of the current exception. RemoteException(Guid, string, Exception) Initializes a new instance of the HazelcastException class. Declaration public RemoteException(Guid memberId, string message, Exception innerException) Parameters Type Name Description Guid memberId The unique identifier of the member that threw the exception. string message The message that describes the error. Exception innerException The exception that is the cause of the current exception. RemoteException(Guid, RemoteError, bool) Initializes a new instance of the HazelcastException class. Declaration public RemoteException(Guid memberId, RemoteError error, bool retryable = false) Parameters Type Name Description Guid memberId The unique identifier of the member that threw the exception. RemoteError error The client protocol error. bool retryable Whether the operation that threw the exception can be retried. RemoteException(Guid, RemoteError, string, bool) Initializes a new instance of the HazelcastException class with a specified error message. Declaration public RemoteException(Guid memberId, RemoteError error, string message, bool retryable = false) Parameters Type Name Description Guid memberId The unique identifier of the member that threw the exception. RemoteError error The client protocol error. string message The message that describes the error. bool retryable Whether the operation that threw the exception can be retried. RemoteException(Guid, RemoteError, Exception, bool) Initializes a new instance of the HazelcastException class with a reference to the inner exception that is the cause of this exception. Declaration public RemoteException(Guid memberId, RemoteError error, Exception innerException, bool retryable = false) Parameters Type Name Description Guid memberId The unique identifier of the member that threw the exception. RemoteError error The client protocol error. Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. bool retryable Whether the operation that threw the exception can be retried. RemoteException(Guid, RemoteError, string, Exception, string, bool) Initializes a new instance of the HazelcastException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public RemoteException(Guid memberId, RemoteError error, string message, Exception innerException, string serverStackTrace = \"\", bool retryable = false) Parameters Type Name Description Guid memberId The unique identifier of the member that threw the exception. RemoteError error The client protocol error. string message The message that describes the error. Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. string serverStackTrace A string representation of the frames on the server call stack. bool retryable Whether the operation that threw the exception can be retried."
  },
  "5.2.2/api/Hazelcast.Protocol.RemoteException.Error.html": {
    "href": "5.2.2/api/Hazelcast.Protocol.RemoteException.Error.html",
    "title": "Property Error | Hazelcast .NET Documentation",
    "keywords": "Property Error Error Gets the protocol error. Declaration public RemoteError Error { get; set; } Property Value Type Description RemoteError"
  },
  "5.2.2/api/Hazelcast.Protocol.RemoteException.GetObjectData.html": {
    "href": "5.2.2/api/Hazelcast.Protocol.RemoteException.GetObjectData.html",
    "title": "Method GetObjectData | Hazelcast .NET Documentation",
    "keywords": "Method GetObjectData GetObjectData(SerializationInfo, StreamingContext) Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context Overrides Exception.GetObjectData(SerializationInfo, StreamingContext)"
  },
  "5.2.2/api/Hazelcast.Protocol.RemoteException.html": {
    "href": "5.2.2/api/Hazelcast.Protocol.RemoteException.html",
    "title": "Class RemoteException | Hazelcast .NET Documentation",
    "keywords": "Class RemoteException Represents an exception that was thrown remotely on a server. Inheritance object Exception HazelcastException RemoteException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Namespace: Hazelcast.Protocol Assembly: Hazelcast.Net.dll Syntax [Serializable] public sealed class RemoteException : HazelcastException, ISerializable Constructors Name Description RemoteException() Initializes a new instance of the HazelcastException class. RemoteException(Guid, RemoteError, bool) Initializes a new instance of the HazelcastException class. RemoteException(Guid, RemoteError, Exception, bool) Initializes a new instance of the HazelcastException class with a reference to the inner exception that is the cause of this exception. RemoteException(Guid, RemoteError, string, bool) Initializes a new instance of the HazelcastException class with a specified error message. RemoteException(Guid, RemoteError, string, Exception, string, bool) Initializes a new instance of the HazelcastException class with a specified error message and a reference to the inner exception that is the cause of this exception. RemoteException(Guid, string, Exception) Initializes a new instance of the HazelcastException class. RemoteException(Guid, string) Initializes a new instance of the HazelcastException class. RemoteException(Guid) Initializes a new instance of the HazelcastException class. RemoteException(string, Exception) Initializes a new instance of the HazelcastException class. RemoteException(string) Initializes a new instance of the HazelcastException class. Properties Name Description Error Gets the protocol error. MemberId Gets the unique identifier of the member which threw the exception. Retryable Whether the operation that threw the exception can be retried. ServerStackTrace Gets a string representation of the frames on the server call stack. Methods Name Description GetObjectData(SerializationInfo, StreamingContext) ToString()"
  },
  "5.2.2/api/Hazelcast.Protocol.RemoteException.MemberId.html": {
    "href": "5.2.2/api/Hazelcast.Protocol.RemoteException.MemberId.html",
    "title": "Property MemberId | Hazelcast .NET Documentation",
    "keywords": "Property MemberId MemberId Gets the unique identifier of the member which threw the exception. Declaration public Guid MemberId { get; set; } Property Value Type Description Guid"
  },
  "5.2.2/api/Hazelcast.Protocol.RemoteException.Retryable.html": {
    "href": "5.2.2/api/Hazelcast.Protocol.RemoteException.Retryable.html",
    "title": "Property Retryable | Hazelcast .NET Documentation",
    "keywords": "Property Retryable Retryable Whether the operation that threw the exception can be retried. Declaration public bool Retryable { get; set; } Property Value Type Description bool"
  },
  "5.2.2/api/Hazelcast.Protocol.RemoteException.ServerStackTrace.html": {
    "href": "5.2.2/api/Hazelcast.Protocol.RemoteException.ServerStackTrace.html",
    "title": "Property ServerStackTrace | Hazelcast .NET Documentation",
    "keywords": "Property ServerStackTrace ServerStackTrace Gets a string representation of the frames on the server call stack. Declaration public string ServerStackTrace { get; set; } Property Value Type Description string"
  },
  "5.2.2/api/Hazelcast.Protocol.RemoteException.ToString.html": {
    "href": "5.2.2/api/Hazelcast.Protocol.RemoteException.ToString.html",
    "title": "Method ToString | Hazelcast .NET Documentation",
    "keywords": "Method ToString ToString() Declaration public override string ToString() Returns Type Description string Overrides Exception.ToString()"
  },
  "5.2.2/api/Hazelcast.Query.html": {
    "href": "5.2.2/api/Hazelcast.Query.html",
    "title": "Namespace Hazelcast.Query | Hazelcast .NET Documentation",
    "keywords": "Namespace Hazelcast.Query Classes PredicateBuilder Builds a predicate. Predicates Creates IPredicate instances. Interfaces IPagingPredicate Defines a paging predicate. IPartitionPredicate Defines a partition predicate. IPredicate A place holder interface for com.hazelcast.query.Predicate on server side. Enums IterationType To differentiate users selection on result collection on map-wide operations like values , keySet , query etc."
  },
  "5.2.2/api/Hazelcast.Query.IPagingPredicate.html": {
    "href": "5.2.2/api/Hazelcast.Query.IPagingPredicate.html",
    "title": "Interface IPagingPredicate | Hazelcast .NET Documentation",
    "keywords": "Interface IPagingPredicate Defines a paging predicate. Namespace: Hazelcast.Query Assembly: Hazelcast.Net.dll Syntax public interface IPagingPredicate : IPredicate Properties Name Description Page Gets or sets the current page index PageSize Gets the page size of each iteration. Methods Name Description NextPage() Moves to the next page. PreviousPage() Moves to the previous page. Reset() Resets the predicate for re-use."
  },
  "5.2.2/api/Hazelcast.Query.IPagingPredicate.NextPage.html": {
    "href": "5.2.2/api/Hazelcast.Query.IPagingPredicate.NextPage.html",
    "title": "Method NextPage | Hazelcast .NET Documentation",
    "keywords": "Method NextPage NextPage() Moves to the next page. Declaration void NextPage() Remarks This is equivalent to incrementing Page."
  },
  "5.2.2/api/Hazelcast.Query.IPagingPredicate.Page.html": {
    "href": "5.2.2/api/Hazelcast.Query.IPagingPredicate.Page.html",
    "title": "Property Page | Hazelcast .NET Documentation",
    "keywords": "Property Page Page Gets or sets the current page index Declaration int Page { get; set; } Property Value Type Description int"
  },
  "5.2.2/api/Hazelcast.Query.IPagingPredicate.PageSize.html": {
    "href": "5.2.2/api/Hazelcast.Query.IPagingPredicate.PageSize.html",
    "title": "Property PageSize | Hazelcast .NET Documentation",
    "keywords": "Property PageSize PageSize Gets the page size of each iteration. Declaration int PageSize { get; } Property Value Type Description int"
  },
  "5.2.2/api/Hazelcast.Query.IPagingPredicate.PreviousPage.html": {
    "href": "5.2.2/api/Hazelcast.Query.IPagingPredicate.PreviousPage.html",
    "title": "Method PreviousPage | Hazelcast .NET Documentation",
    "keywords": "Method PreviousPage PreviousPage() Moves to the previous page. Declaration void PreviousPage() Remarks This is equivalent to decrementing Page."
  },
  "5.2.2/api/Hazelcast.Query.IPagingPredicate.Reset.html": {
    "href": "5.2.2/api/Hazelcast.Query.IPagingPredicate.Reset.html",
    "title": "Method Reset | Hazelcast .NET Documentation",
    "keywords": "Method Reset Reset() Resets the predicate for re-use. Declaration void Reset()"
  },
  "5.2.2/api/Hazelcast.Query.IPartitionPredicate.html": {
    "href": "5.2.2/api/Hazelcast.Query.IPartitionPredicate.html",
    "title": "Interface IPartitionPredicate | Hazelcast .NET Documentation",
    "keywords": "Interface IPartitionPredicate Defines a partition predicate. Namespace: Hazelcast.Query Assembly: Hazelcast.Net.dll Syntax public interface IPartitionPredicate : IPredicate Properties Name Description PartitionKey Gets the partition key. Target Gets the predicate that will run on the target partition."
  },
  "5.2.2/api/Hazelcast.Query.IPartitionPredicate.PartitionKey.html": {
    "href": "5.2.2/api/Hazelcast.Query.IPartitionPredicate.PartitionKey.html",
    "title": "Property PartitionKey | Hazelcast .NET Documentation",
    "keywords": "Property PartitionKey PartitionKey Gets the partition key. Declaration object PartitionKey { get; } Property Value Type Description object"
  },
  "5.2.2/api/Hazelcast.Query.IPartitionPredicate.Target.html": {
    "href": "5.2.2/api/Hazelcast.Query.IPartitionPredicate.Target.html",
    "title": "Property Target | Hazelcast .NET Documentation",
    "keywords": "Property Target Target Gets the predicate that will run on the target partition. Declaration IPredicate Target { get; } Property Value Type Description IPredicate"
  },
  "5.2.2/api/Hazelcast.Query.IPredicate.html": {
    "href": "5.2.2/api/Hazelcast.Query.IPredicate.html",
    "title": "Interface IPredicate | Hazelcast .NET Documentation",
    "keywords": "Interface IPredicate A place holder interface for com.hazelcast.query.Predicate on server side. Namespace: Hazelcast.Query Assembly: Hazelcast.Net.dll Syntax public interface IPredicate Remarks All builtin predicates can be accessed via Predicates static class. A custom predicate must be serializable via Hazelcast serialization, and have a counterpart on the server."
  },
  "5.2.2/api/Hazelcast.Query.IterationType.html": {
    "href": "5.2.2/api/Hazelcast.Query.IterationType.html",
    "title": "Enum IterationType | Hazelcast .NET Documentation",
    "keywords": "Enum IterationType To differentiate users selection on result collection on map-wide operations like values , keySet , query etc. Namespace: Hazelcast.Query Assembly: Hazelcast.Net.dll Syntax public enum IterationType Fields Name Description Entry Iterate over whole entry (so key and value) Key Iterate over keys Value Iterate over values"
  },
  "5.2.2/api/Hazelcast.Query.PredicateBuilder.html": {
    "href": "5.2.2/api/Hazelcast.Query.PredicateBuilder.html",
    "title": "Class PredicateBuilder | Hazelcast .NET Documentation",
    "keywords": "Class PredicateBuilder Builds a predicate. Inheritance object PredicateBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.Query Assembly: Hazelcast.Net.dll Syntax public class PredicateBuilder Methods Name Description IsBetween(object, object) Succeeds if the target value is between the specified inclusive bounds. IsEqualTo(object) Succeeds if the target value is equal to the specified value. IsGreaterThan(object) Succeeds if the target value is greater than the specified value. IsGreaterThanOrEqualTo(object) Succeeds if the target value is greater than, or equal to, the specified value. IsILike(string) Succeeds if the target value matches the specified case-insensitive pattern. IsIn(params object[]) Succeeds if the target value is equal to one of the specified values. IsLessThan(object) Succeeds if the target value is less than the specified value. IsLessThanOrEqualTo(object) Succeeds if the target value is less than, or equal to, the specified value. IsLike(string) Succeeds if the target value matches the specified case-sensitive pattern. IsNotEqualTo(object) Succeeds if the target value is not equal to the specified value. Matches(string) Succeeds if the target value matches the specified regular expression."
  },
  "5.2.2/api/Hazelcast.Query.PredicateBuilder.IsBetween.html": {
    "href": "5.2.2/api/Hazelcast.Query.PredicateBuilder.IsBetween.html",
    "title": "Method IsBetween | Hazelcast .NET Documentation",
    "keywords": "Method IsBetween IsBetween(object, object) Succeeds if the target value is between the specified inclusive bounds. Declaration public virtual IPredicate IsBetween(object lowerBound, object upperBound) Parameters Type Name Description object lowerBound The lower inclusive bound. object upperBound The upper inclusive bound. Returns Type Description IPredicate A new predicate."
  },
  "5.2.2/api/Hazelcast.Query.PredicateBuilder.IsEqualTo.html": {
    "href": "5.2.2/api/Hazelcast.Query.PredicateBuilder.IsEqualTo.html",
    "title": "Method IsEqualTo | Hazelcast .NET Documentation",
    "keywords": "Method IsEqualTo IsEqualTo(object) Succeeds if the target value is equal to the specified value. Declaration public virtual IPredicate IsEqualTo(object value) Parameters Type Name Description object value The value. Returns Type Description IPredicate A new predicate."
  },
  "5.2.2/api/Hazelcast.Query.PredicateBuilder.IsGreaterThan.html": {
    "href": "5.2.2/api/Hazelcast.Query.PredicateBuilder.IsGreaterThan.html",
    "title": "Method IsGreaterThan | Hazelcast .NET Documentation",
    "keywords": "Method IsGreaterThan IsGreaterThan(object) Succeeds if the target value is greater than the specified value. Declaration public virtual IPredicate IsGreaterThan(object value) Parameters Type Name Description object value The value. Returns Type Description IPredicate A new predicate."
  },
  "5.2.2/api/Hazelcast.Query.PredicateBuilder.IsGreaterThanOrEqualTo.html": {
    "href": "5.2.2/api/Hazelcast.Query.PredicateBuilder.IsGreaterThanOrEqualTo.html",
    "title": "Method IsGreaterThanOrEqualTo | Hazelcast .NET Documentation",
    "keywords": "Method IsGreaterThanOrEqualTo IsGreaterThanOrEqualTo(object) Succeeds if the target value is greater than, or equal to, the specified value. Declaration public virtual IPredicate IsGreaterThanOrEqualTo(object value) Parameters Type Name Description object value The value. Returns Type Description IPredicate A new predicate."
  },
  "5.2.2/api/Hazelcast.Query.PredicateBuilder.IsILike.html": {
    "href": "5.2.2/api/Hazelcast.Query.PredicateBuilder.IsILike.html",
    "title": "Method IsILike | Hazelcast .NET Documentation",
    "keywords": "Method IsILike IsILike(string) Succeeds if the target value matches the specified case-insensitive pattern. Declaration public virtual IPredicate IsILike(string pattern) Parameters Type Name Description string pattern The pattern. Returns Type Description IPredicate A new predicate. Remarks The pattern is case-insensitive. In the pattern, the % character (percentage sign) is a placeholder for multiple characters, and the _ character (underscore) is a placeholder for a single character. These two special characters can be escaped with a backslash."
  },
  "5.2.2/api/Hazelcast.Query.PredicateBuilder.IsIn.html": {
    "href": "5.2.2/api/Hazelcast.Query.PredicateBuilder.IsIn.html",
    "title": "Method IsIn | Hazelcast .NET Documentation",
    "keywords": "Method IsIn IsIn(params object[]) Succeeds if the target value is equal to one of the specified values. Declaration public virtual IPredicate IsIn(params object[] values) Parameters Type Name Description object[] values The values. Returns Type Description IPredicate A new predicate."
  },
  "5.2.2/api/Hazelcast.Query.PredicateBuilder.IsLessThan.html": {
    "href": "5.2.2/api/Hazelcast.Query.PredicateBuilder.IsLessThan.html",
    "title": "Method IsLessThan | Hazelcast .NET Documentation",
    "keywords": "Method IsLessThan IsLessThan(object) Succeeds if the target value is less than the specified value. Declaration public virtual IPredicate IsLessThan(object value) Parameters Type Name Description object value The value. Returns Type Description IPredicate A new predicate."
  },
  "5.2.2/api/Hazelcast.Query.PredicateBuilder.IsLessThanOrEqualTo.html": {
    "href": "5.2.2/api/Hazelcast.Query.PredicateBuilder.IsLessThanOrEqualTo.html",
    "title": "Method IsLessThanOrEqualTo | Hazelcast .NET Documentation",
    "keywords": "Method IsLessThanOrEqualTo IsLessThanOrEqualTo(object) Succeeds if the target value is less than, or equal to, the specified value. Declaration public virtual IPredicate IsLessThanOrEqualTo(object value) Parameters Type Name Description object value The value. Returns Type Description IPredicate A new predicate."
  },
  "5.2.2/api/Hazelcast.Query.PredicateBuilder.IsLike.html": {
    "href": "5.2.2/api/Hazelcast.Query.PredicateBuilder.IsLike.html",
    "title": "Method IsLike | Hazelcast .NET Documentation",
    "keywords": "Method IsLike IsLike(string) Succeeds if the target value matches the specified case-sensitive pattern. Declaration public virtual IPredicate IsLike(string pattern) Parameters Type Name Description string pattern The pattern. Returns Type Description IPredicate A new predicate. Remarks The pattern is case-sensitive. In the pattern, the % character (percentage sign) is a placeholder for multiple characters, and the _ character (underscore) is a placeholder for a single character. These two special characters can be escaped with a backslash."
  },
  "5.2.2/api/Hazelcast.Query.PredicateBuilder.IsNotEqualTo.html": {
    "href": "5.2.2/api/Hazelcast.Query.PredicateBuilder.IsNotEqualTo.html",
    "title": "Method IsNotEqualTo | Hazelcast .NET Documentation",
    "keywords": "Method IsNotEqualTo IsNotEqualTo(object) Succeeds if the target value is not equal to the specified value. Declaration public virtual IPredicate IsNotEqualTo(object value) Parameters Type Name Description object value The value. Returns Type Description IPredicate A new predicate."
  },
  "5.2.2/api/Hazelcast.Query.PredicateBuilder.Matches.html": {
    "href": "5.2.2/api/Hazelcast.Query.PredicateBuilder.Matches.html",
    "title": "Method Matches | Hazelcast .NET Documentation",
    "keywords": "Method Matches Matches(string) Succeeds if the target value matches the specified regular expression. Declaration public virtual IPredicate Matches(string regex) Parameters Type Name Description string regex The regular expression. Returns Type Description IPredicate A new predicate. Remarks The pattern is interpreted exactly in the same way as described in the documentation for the Java java.util.regex.Pattern class."
  },
  "5.2.2/api/Hazelcast.Query.Predicates.And.html": {
    "href": "5.2.2/api/Hazelcast.Query.Predicates.And.html",
    "title": "Method And | Hazelcast .NET Documentation",
    "keywords": "Method And And(params IPredicate[]) Succeeds if all the specified predicates succeed. Declaration public static IPredicate And(params IPredicate[] predicates) Parameters Type Name Description IPredicate[] predicates The predicates. Returns Type Description IPredicate A new predicate."
  },
  "5.2.2/api/Hazelcast.Query.Predicates.Between.html": {
    "href": "5.2.2/api/Hazelcast.Query.Predicates.Between.html",
    "title": "Method Between | Hazelcast .NET Documentation",
    "keywords": "Method Between Between(string, object, object) Succeeds if the target value is between the specified inclusive bounds. Declaration public static IPredicate Between(string name, object lowerBound, object upperBound) Parameters Type Name Description string name The name of the target. object lowerBound The lower inclusive bound. object upperBound The upper inclusive bound. Returns Type Description IPredicate A new predicate."
  },
  "5.2.2/api/Hazelcast.Query.Predicates.EqualTo.html": {
    "href": "5.2.2/api/Hazelcast.Query.Predicates.EqualTo.html",
    "title": "Method EqualTo | Hazelcast .NET Documentation",
    "keywords": "Method EqualTo EqualTo(string, object) Succeeds if the target value is equal to the specified value. Declaration public static IPredicate EqualTo(string name, object value) Parameters Type Name Description string name The name of the target. object value The value. Returns Type Description IPredicate A new predicate."
  },
  "5.2.2/api/Hazelcast.Query.Predicates.False.html": {
    "href": "5.2.2/api/Hazelcast.Query.Predicates.False.html",
    "title": "Method False | Hazelcast .NET Documentation",
    "keywords": "Method False False() Never succeeds. Declaration public static IPredicate False() Returns Type Description IPredicate A new predicate."
  },
  "5.2.2/api/Hazelcast.Query.Predicates.GreaterThan.html": {
    "href": "5.2.2/api/Hazelcast.Query.Predicates.GreaterThan.html",
    "title": "Method GreaterThan | Hazelcast .NET Documentation",
    "keywords": "Method GreaterThan GreaterThan(string, object) Succeeds if the target value is greater than the specified value. Declaration public static IPredicate GreaterThan(string name, object value) Parameters Type Name Description string name The name of the target. object value The value. Returns Type Description IPredicate A new predicate."
  },
  "5.2.2/api/Hazelcast.Query.Predicates.GreaterThanOrEqualTo.html": {
    "href": "5.2.2/api/Hazelcast.Query.Predicates.GreaterThanOrEqualTo.html",
    "title": "Method GreaterThanOrEqualTo | Hazelcast .NET Documentation",
    "keywords": "Method GreaterThanOrEqualTo GreaterThanOrEqualTo(string, object) Succeeds if the target value is greater than, or equal to, the specified value. Declaration public static IPredicate GreaterThanOrEqualTo(string name, object value) Parameters Type Name Description string name The name of the target. object value The value. Returns Type Description IPredicate A new predicate."
  },
  "5.2.2/api/Hazelcast.Query.Predicates.html": {
    "href": "5.2.2/api/Hazelcast.Query.Predicates.html",
    "title": "Class Predicates | Hazelcast .NET Documentation",
    "keywords": "Class Predicates Creates IPredicate instances. Inheritance object Predicates Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.Query Assembly: Hazelcast.Net.dll Syntax public static class Predicates Methods Name Description And(params IPredicate[]) Succeeds if all the specified predicates succeed. Between(string, object, object) Succeeds if the target value is between the specified inclusive bounds. EqualTo(string, object) Succeeds if the target value is equal to the specified value. False() Never succeeds. GreaterThan(string, object) Succeeds if the target value is greater than the specified value. GreaterThanOrEqualTo(string, object) Succeeds if the target value is greater than, or equal to, the specified value. ILike(string, string) Succeeds if the target value matches the specified case-insensitive pattern. In(string, params object[]) Succeeds if the target value is equal to one of the specified values. In<T>(string, IEnumerable<T>) Succeeds if the target value is equal to one of the specified values. InstanceOf(string) Succeeds if the item is an instance of the specified class. Key() Begins a predicate for the key. Key(string) Begins a predicate for an attribute of the key. LessThan(string, object) Succeeds if the target value is less than the specified value. LessThanOrEqualTo(string, object) Succeeds if the target value is less than, or equal to, the specified value. Like(string, string) Succeeds if the target value matches the specified case-sensitive pattern. Match(string, string) Succeeds if the target value matches the specified regular expression. Not(IPredicate) Succeeds if the specified predicate does not succeed. NotEqualTo(string, object) Succeeds if the target value is not equal to the specified value. Or(params IPredicate[]) Succeeds if at least one of the specified predicates succeed. Page(int, IPredicate, IComparer<KeyValuePair<object, object>>) Paginates results of a predicate. Page(int, IPredicate) Paginates results of a predicate. Page(int, IComparer<KeyValuePair<object, object>>) Paginates results. Page(int) Paginates results. Partition(object, IPredicate) Restricts the execution of a predicate to a single partition. Sql(string) Succeeds if the specified SQL query succeeds. True() Always succeeds. Value() Begins a predicate for the value. Value(string) Begins a predicate for an attribute of the value."
  },
  "5.2.2/api/Hazelcast.Query.Predicates.ILike.html": {
    "href": "5.2.2/api/Hazelcast.Query.Predicates.ILike.html",
    "title": "Method ILike | Hazelcast .NET Documentation",
    "keywords": "Method ILike ILike(string, string) Succeeds if the target value matches the specified case-insensitive pattern. Declaration public static IPredicate ILike(string name, string pattern) Parameters Type Name Description string name The name of the target. string pattern The pattern. Returns Type Description IPredicate A new predicate. Remarks The pattern is case-insensitive. In the pattern, the % character (percentage sign) is a placeholder for multiple characters, and the _ character (underscore) is a placeholder for a single character. These two special characters can be escaped with a backslash."
  },
  "5.2.2/api/Hazelcast.Query.Predicates.In.html": {
    "href": "5.2.2/api/Hazelcast.Query.Predicates.In.html",
    "title": "Method In | Hazelcast .NET Documentation",
    "keywords": "Method In In(string, params object[]) Succeeds if the target value is equal to one of the specified values. Declaration public static IPredicate In(string name, params object[] values) Parameters Type Name Description string name The name of the target. object[] values The values. Returns Type Description IPredicate A new predicate. In<T>(string, IEnumerable<T>) Succeeds if the target value is equal to one of the specified values. Declaration public static IPredicate In<T>(string name, IEnumerable<T> values) Parameters Type Name Description string name The name of the target. IEnumerable<T> values The values. Returns Type Description IPredicate A new predicate. Type Parameters Name Description T"
  },
  "5.2.2/api/Hazelcast.Query.Predicates.InstanceOf.html": {
    "href": "5.2.2/api/Hazelcast.Query.Predicates.InstanceOf.html",
    "title": "Method InstanceOf | Hazelcast .NET Documentation",
    "keywords": "Method InstanceOf InstanceOf(string) Succeeds if the item is an instance of the specified class. Declaration public static IPredicate InstanceOf(string fullJavaClassName) Parameters Type Name Description string fullJavaClassName The full Java class name. Returns Type Description IPredicate A new predicate."
  },
  "5.2.2/api/Hazelcast.Query.Predicates.Key.html": {
    "href": "5.2.2/api/Hazelcast.Query.Predicates.Key.html",
    "title": "Method Key | Hazelcast .NET Documentation",
    "keywords": "Method Key Key() Begins a predicate for the key. Declaration public static PredicateBuilder Key() Returns Type Description PredicateBuilder A predicate builder. Key(string) Begins a predicate for an attribute of the key. Declaration public static PredicateBuilder Key(string name) Parameters Type Name Description string name The name of the attribute. Returns Type Description PredicateBuilder A predicate builder."
  },
  "5.2.2/api/Hazelcast.Query.Predicates.LessThan.html": {
    "href": "5.2.2/api/Hazelcast.Query.Predicates.LessThan.html",
    "title": "Method LessThan | Hazelcast .NET Documentation",
    "keywords": "Method LessThan LessThan(string, object) Succeeds if the target value is less than the specified value. Declaration public static IPredicate LessThan(string name, object value) Parameters Type Name Description string name The name of the target. object value The value. Returns Type Description IPredicate A new predicate."
  },
  "5.2.2/api/Hazelcast.Query.Predicates.LessThanOrEqualTo.html": {
    "href": "5.2.2/api/Hazelcast.Query.Predicates.LessThanOrEqualTo.html",
    "title": "Method LessThanOrEqualTo | Hazelcast .NET Documentation",
    "keywords": "Method LessThanOrEqualTo LessThanOrEqualTo(string, object) Succeeds if the target value is less than, or equal to, the specified value. Declaration public static IPredicate LessThanOrEqualTo(string name, object value) Parameters Type Name Description string name The name of the target. object value The value. Returns Type Description IPredicate A new predicate."
  },
  "5.2.2/api/Hazelcast.Query.Predicates.Like.html": {
    "href": "5.2.2/api/Hazelcast.Query.Predicates.Like.html",
    "title": "Method Like | Hazelcast .NET Documentation",
    "keywords": "Method Like Like(string, string) Succeeds if the target value matches the specified case-sensitive pattern. Declaration public static IPredicate Like(string name, string pattern) Parameters Type Name Description string name The name of the target. string pattern The pattern. Returns Type Description IPredicate A new predicate. Remarks The pattern is case-sensitive. In the pattern, the % character (percentage sign) is a placeholder for multiple characters, and the _ character (underscore) is a placeholder for a single character. These two special characters can be escaped with a backslash."
  },
  "5.2.2/api/Hazelcast.Query.Predicates.Match.html": {
    "href": "5.2.2/api/Hazelcast.Query.Predicates.Match.html",
    "title": "Method Match | Hazelcast .NET Documentation",
    "keywords": "Method Match Match(string, string) Succeeds if the target value matches the specified regular expression. Declaration public static IPredicate Match(string name, string regex) Parameters Type Name Description string name The name of the target. string regex The regular expression. Returns Type Description IPredicate A new predicate. Remarks The pattern is interpreted exactly in the same way as described in the documentation for the Java java.util.regex.Pattern class."
  },
  "5.2.2/api/Hazelcast.Query.Predicates.Not.html": {
    "href": "5.2.2/api/Hazelcast.Query.Predicates.Not.html",
    "title": "Method Not | Hazelcast .NET Documentation",
    "keywords": "Method Not Not(IPredicate) Succeeds if the specified predicate does not succeed. Declaration public static IPredicate Not(IPredicate predicate) Parameters Type Name Description IPredicate predicate The predicate. Returns Type Description IPredicate A new predicate."
  },
  "5.2.2/api/Hazelcast.Query.Predicates.NotEqualTo.html": {
    "href": "5.2.2/api/Hazelcast.Query.Predicates.NotEqualTo.html",
    "title": "Method NotEqualTo | Hazelcast .NET Documentation",
    "keywords": "Method NotEqualTo NotEqualTo(string, object) Succeeds if the target value is not equal to the specified value. Declaration public static IPredicate NotEqualTo(string name, object value) Parameters Type Name Description string name The name of the target. object value The value. Returns Type Description IPredicate A new predicate."
  },
  "5.2.2/api/Hazelcast.Query.Predicates.Or.html": {
    "href": "5.2.2/api/Hazelcast.Query.Predicates.Or.html",
    "title": "Method Or | Hazelcast .NET Documentation",
    "keywords": "Method Or Or(params IPredicate[]) Succeeds if at least one of the specified predicates succeed. Declaration public static IPredicate Or(params IPredicate[] predicates) Parameters Type Name Description IPredicate[] predicates The predicates. Returns Type Description IPredicate A new predicate."
  },
  "5.2.2/api/Hazelcast.Query.Predicates.Page.html": {
    "href": "5.2.2/api/Hazelcast.Query.Predicates.Page.html",
    "title": "Method Page | Hazelcast .NET Documentation",
    "keywords": "Method Page Page(int) Paginates results. Declaration public static IPagingPredicate Page(int pageSize) Parameters Type Name Description int pageSize The size of a page. Returns Type Description IPagingPredicate A new predicate. Page(int, IComparer<KeyValuePair<object, object>>) Paginates results. Declaration public static IPagingPredicate Page(int pageSize, IComparer<KeyValuePair<object, object>> comparer) Parameters Type Name Description int pageSize The size of a page. IComparer<KeyValuePair<object, object>> comparer A comparer used to order results. Returns Type Description IPagingPredicate A new predicate. Page(int, IPredicate) Paginates results of a predicate. Declaration public static IPagingPredicate Page(int pageSize, IPredicate predicate) Parameters Type Name Description int pageSize The size of a page. IPredicate predicate The predicate. Returns Type Description IPagingPredicate A new predicate. Page(int, IPredicate, IComparer<KeyValuePair<object, object>>) Paginates results of a predicate. Declaration public static IPagingPredicate Page(int pageSize, IPredicate predicate, IComparer<KeyValuePair<object, object>> comparer) Parameters Type Name Description int pageSize The size of a page. IPredicate predicate The predicate. IComparer<KeyValuePair<object, object>> comparer A comparer used to order results. Returns Type Description IPagingPredicate A new predicate."
  },
  "5.2.2/api/Hazelcast.Query.Predicates.Partition.html": {
    "href": "5.2.2/api/Hazelcast.Query.Predicates.Partition.html",
    "title": "Method Partition | Hazelcast .NET Documentation",
    "keywords": "Method Partition Partition(object, IPredicate) Restricts the execution of a predicate to a single partition. Declaration public static IPartitionPredicate Partition(object partitionKey, IPredicate predicate) Parameters Type Name Description object partitionKey The key of the partition. IPredicate predicate The predicate. Returns Type Description IPartitionPredicate A new predicate."
  },
  "5.2.2/api/Hazelcast.Query.Predicates.Sql.html": {
    "href": "5.2.2/api/Hazelcast.Query.Predicates.Sql.html",
    "title": "Method Sql | Hazelcast .NET Documentation",
    "keywords": "Method Sql Sql(string) Succeeds if the specified SQL query succeeds. Declaration public static IPredicate Sql(string sql) Parameters Type Name Description string sql The SQL query. Returns Type Description IPredicate A new predicate. Remarks (to be completed with SQL documentation)"
  },
  "5.2.2/api/Hazelcast.Query.Predicates.True.html": {
    "href": "5.2.2/api/Hazelcast.Query.Predicates.True.html",
    "title": "Method True | Hazelcast .NET Documentation",
    "keywords": "Method True True() Always succeeds. Declaration public static IPredicate True() Returns Type Description IPredicate A new predicate."
  },
  "5.2.2/api/Hazelcast.Query.Predicates.Value.html": {
    "href": "5.2.2/api/Hazelcast.Query.Predicates.Value.html",
    "title": "Method Value | Hazelcast .NET Documentation",
    "keywords": "Method Value Value() Begins a predicate for the value. Declaration public static PredicateBuilder Value() Returns Type Description PredicateBuilder A predicate builder. Value(string) Begins a predicate for an attribute of the value. Declaration public static PredicateBuilder Value(string name) Parameters Type Name Description string name The name of the attribute. Returns Type Description PredicateBuilder A predicate builder."
  },
  "5.2.2/api/Hazelcast.Security.html": {
    "href": "5.2.2/api/Hazelcast.Security.html",
    "title": "Namespace Hazelcast.Security | Hazelcast .NET Documentation",
    "keywords": "Namespace Hazelcast.Security Classes KerberosCredentials Implements ICredentials for the Kerberos protocol. StaticCredentialsFactory Provides an implementation of ICredentialsFactory that returns a static ICredentials instance. TokenCredentials Implements ITokenCredentials for simple token-based protocols. UsernamePasswordCredentials Implements IPasswordCredentials. Interfaces ICredentials Defines an identity to be authenticated. ICredentialsFactory Defines a factory of ICredentials. IKerberosTokenProvider Provides Kerberos tokens. IPasswordCredentials Defines an ICredentials that relies on a password. IResettableCredentialsFactory Defines an ICredentialsFactory that can be reset. ITokenCredentials Defines an ICredentials that relies on a token."
  },
  "5.2.2/api/Hazelcast.Security.ICredentials.html": {
    "href": "5.2.2/api/Hazelcast.Security.ICredentials.html",
    "title": "Interface ICredentials | Hazelcast .NET Documentation",
    "keywords": "Interface ICredentials Defines an identity to be authenticated. Namespace: Hazelcast.Security Assembly: Hazelcast.Net.dll Syntax public interface ICredentials Properties Name Description Name Gets the name of the entity."
  },
  "5.2.2/api/Hazelcast.Security.ICredentials.Name.html": {
    "href": "5.2.2/api/Hazelcast.Security.ICredentials.Name.html",
    "title": "Property Name | Hazelcast .NET Documentation",
    "keywords": "Property Name Name Gets the name of the entity. Declaration string Name { get; } Property Value Type Description string"
  },
  "5.2.2/api/Hazelcast.Security.ICredentialsFactory.html": {
    "href": "5.2.2/api/Hazelcast.Security.ICredentialsFactory.html",
    "title": "Interface ICredentialsFactory | Hazelcast .NET Documentation",
    "keywords": "Interface ICredentialsFactory Defines a factory of ICredentials. Inherited Members IDisposable.Dispose() Namespace: Hazelcast.Security Assembly: Hazelcast.Net.dll Syntax public interface ICredentialsFactory : IDisposable Methods Name Description NewCredentials() Creates and returns a new ICredentials object."
  },
  "5.2.2/api/Hazelcast.Security.ICredentialsFactory.NewCredentials.html": {
    "href": "5.2.2/api/Hazelcast.Security.ICredentialsFactory.NewCredentials.html",
    "title": "Method NewCredentials | Hazelcast .NET Documentation",
    "keywords": "Method NewCredentials NewCredentials() Creates and returns a new ICredentials object. Declaration ICredentials NewCredentials() Returns Type Description ICredentials The new credentials object. Remarks This method is invoked any time a new connection is authenticated."
  },
  "5.2.2/api/Hazelcast.Security.IKerberosTokenProvider.GetToken.html": {
    "href": "5.2.2/api/Hazelcast.Security.IKerberosTokenProvider.GetToken.html",
    "title": "Method GetToken | Hazelcast .NET Documentation",
    "keywords": "Method GetToken GetToken(string, string, string, string) Gets the token corresponding to a SPN. Declaration byte[] GetToken(string spn, string username, string password, string domain) Parameters Type Name Description string spn The SPN. string username An optional username. string password An optional password. string domain An optional domain. Returns Type Description byte[] The token bytes."
  },
  "5.2.2/api/Hazelcast.Security.IKerberosTokenProvider.html": {
    "href": "5.2.2/api/Hazelcast.Security.IKerberosTokenProvider.html",
    "title": "Interface IKerberosTokenProvider | Hazelcast .NET Documentation",
    "keywords": "Interface IKerberosTokenProvider Provides Kerberos tokens. Namespace: Hazelcast.Security Assembly: Hazelcast.Net.dll Syntax public interface IKerberosTokenProvider Methods Name Description GetToken(string, string, string, string) Gets the token corresponding to a SPN."
  },
  "5.2.2/api/Hazelcast.Security.IPasswordCredentials.html": {
    "href": "5.2.2/api/Hazelcast.Security.IPasswordCredentials.html",
    "title": "Interface IPasswordCredentials | Hazelcast .NET Documentation",
    "keywords": "Interface IPasswordCredentials Defines an ICredentials that relies on a password. Inherited Members ICredentials.Name Namespace: Hazelcast.Security Assembly: Hazelcast.Net.dll Syntax public interface IPasswordCredentials : ICredentials Properties Name Description Password Gets the password."
  },
  "5.2.2/api/Hazelcast.Security.IPasswordCredentials.Password.html": {
    "href": "5.2.2/api/Hazelcast.Security.IPasswordCredentials.Password.html",
    "title": "Property Password | Hazelcast .NET Documentation",
    "keywords": "Property Password Password Gets the password. Declaration string Password { get; } Property Value Type Description string"
  },
  "5.2.2/api/Hazelcast.Security.IResettableCredentialsFactory.html": {
    "href": "5.2.2/api/Hazelcast.Security.IResettableCredentialsFactory.html",
    "title": "Interface IResettableCredentialsFactory | Hazelcast .NET Documentation",
    "keywords": "Interface IResettableCredentialsFactory Defines an ICredentialsFactory that can be reset. Inherited Members ICredentialsFactory.NewCredentials() IDisposable.Dispose() Namespace: Hazelcast.Security Assembly: Hazelcast.Net.dll Syntax public interface IResettableCredentialsFactory : ICredentialsFactory, IDisposable Methods Name Description Reset() Resets the factory."
  },
  "5.2.2/api/Hazelcast.Security.IResettableCredentialsFactory.Reset.html": {
    "href": "5.2.2/api/Hazelcast.Security.IResettableCredentialsFactory.Reset.html",
    "title": "Method Reset | Hazelcast .NET Documentation",
    "keywords": "Method Reset Reset() Resets the factory. Declaration void Reset()"
  },
  "5.2.2/api/Hazelcast.Security.ITokenCredentials.GetToken.html": {
    "href": "5.2.2/api/Hazelcast.Security.ITokenCredentials.GetToken.html",
    "title": "Method GetToken | Hazelcast .NET Documentation",
    "keywords": "Method GetToken GetToken() Gets the token. Declaration byte[] GetToken() Returns Type Description byte[]"
  },
  "5.2.2/api/Hazelcast.Security.ITokenCredentials.html": {
    "href": "5.2.2/api/Hazelcast.Security.ITokenCredentials.html",
    "title": "Interface ITokenCredentials | Hazelcast .NET Documentation",
    "keywords": "Interface ITokenCredentials Defines an ICredentials that relies on a token. Inherited Members ICredentials.Name Namespace: Hazelcast.Security Assembly: Hazelcast.Net.dll Syntax public interface ITokenCredentials : ICredentials Methods Name Description GetToken() Gets the token."
  },
  "5.2.2/api/Hazelcast.Security.KerberosCredentials.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Security.KerberosCredentials.-ctor.html",
    "title": "Constructor KerberosCredentials | Hazelcast .NET Documentation",
    "keywords": "Constructor KerberosCredentials KerberosCredentials(byte[]) Initializes a new instance of the KerberosCredentials class with a Kerberos token. Declaration public KerberosCredentials(byte[] token) Parameters Type Name Description byte[] token The Kerberos token."
  },
  "5.2.2/api/Hazelcast.Security.KerberosCredentials.html": {
    "href": "5.2.2/api/Hazelcast.Security.KerberosCredentials.html",
    "title": "Class KerberosCredentials | Hazelcast .NET Documentation",
    "keywords": "Class KerberosCredentials Implements ICredentials for the Kerberos protocol. Inheritance object TokenCredentials KerberosCredentials Implements ITokenCredentials ICredentials Inherited Members TokenCredentials.Name TokenCredentials.GetToken() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Hazelcast.Security Assembly: Hazelcast.Net.dll Syntax public class KerberosCredentials : TokenCredentials, ITokenCredentials, ICredentials Constructors Name Description KerberosCredentials(byte[]) Initializes a new instance of the KerberosCredentials class with a Kerberos token. Methods Name Description ToString()"
  },
  "5.2.2/api/Hazelcast.Security.KerberosCredentials.ToString.html": {
    "href": "5.2.2/api/Hazelcast.Security.KerberosCredentials.ToString.html",
    "title": "Method ToString | Hazelcast .NET Documentation",
    "keywords": "Method ToString ToString() Declaration public override string ToString() Returns Type Description string Overrides TokenCredentials.ToString()"
  },
  "5.2.2/api/Hazelcast.Security.StaticCredentialsFactory.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Security.StaticCredentialsFactory.-ctor.html",
    "title": "Constructor StaticCredentialsFactory | Hazelcast .NET Documentation",
    "keywords": "Constructor StaticCredentialsFactory StaticCredentialsFactory(ICredentials) Initializes a new instance of the StaticCredentialsFactory class. Declaration public StaticCredentialsFactory(ICredentials credentials) Parameters Type Name Description ICredentials credentials The credentials."
  },
  "5.2.2/api/Hazelcast.Security.StaticCredentialsFactory.Dispose.html": {
    "href": "5.2.2/api/Hazelcast.Security.StaticCredentialsFactory.Dispose.html",
    "title": "Method Dispose | Hazelcast .NET Documentation",
    "keywords": "Method Dispose Dispose() Declaration public void Dispose() Implements IDisposable.Dispose() Dispose(bool) Disposes resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description bool disposing true when disposing deterministically."
  },
  "5.2.2/api/Hazelcast.Security.StaticCredentialsFactory.html": {
    "href": "5.2.2/api/Hazelcast.Security.StaticCredentialsFactory.html",
    "title": "Class StaticCredentialsFactory | Hazelcast .NET Documentation",
    "keywords": "Class StaticCredentialsFactory Provides an implementation of ICredentialsFactory that returns a static ICredentials instance. Inheritance object StaticCredentialsFactory Implements ICredentialsFactory IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.Security Assembly: Hazelcast.Net.dll Syntax public class StaticCredentialsFactory : ICredentialsFactory, IDisposable Constructors Name Description StaticCredentialsFactory(ICredentials) Initializes a new instance of the StaticCredentialsFactory class. Methods Name Description Dispose() Dispose(bool) Disposes resources. NewCredentials() Creates and returns a new ICredentials object."
  },
  "5.2.2/api/Hazelcast.Security.StaticCredentialsFactory.NewCredentials.html": {
    "href": "5.2.2/api/Hazelcast.Security.StaticCredentialsFactory.NewCredentials.html",
    "title": "Method NewCredentials | Hazelcast .NET Documentation",
    "keywords": "Method NewCredentials NewCredentials() Creates and returns a new ICredentials object. Declaration public ICredentials NewCredentials() Returns Type Description ICredentials The new credentials object. Implements ICredentialsFactory.NewCredentials() Remarks This method is invoked any time a new connection is authenticated."
  },
  "5.2.2/api/Hazelcast.Security.TokenCredentials.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Security.TokenCredentials.-ctor.html",
    "title": "Constructor TokenCredentials | Hazelcast .NET Documentation",
    "keywords": "Constructor TokenCredentials TokenCredentials(byte[]) Initializes a new instance of the TokenCredentials class with a token. Declaration public TokenCredentials(byte[] token) Parameters Type Name Description byte[] token The credentials token."
  },
  "5.2.2/api/Hazelcast.Security.TokenCredentials.GetToken.html": {
    "href": "5.2.2/api/Hazelcast.Security.TokenCredentials.GetToken.html",
    "title": "Method GetToken | Hazelcast .NET Documentation",
    "keywords": "Method GetToken GetToken() Gets the token representing the credentials. Declaration public byte[] GetToken() Returns Type Description byte[] Implements ITokenCredentials.GetToken()"
  },
  "5.2.2/api/Hazelcast.Security.TokenCredentials.html": {
    "href": "5.2.2/api/Hazelcast.Security.TokenCredentials.html",
    "title": "Class TokenCredentials | Hazelcast .NET Documentation",
    "keywords": "Class TokenCredentials Implements ITokenCredentials for simple token-based protocols. Inheritance object TokenCredentials KerberosCredentials Implements ITokenCredentials ICredentials Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Hazelcast.Security Assembly: Hazelcast.Net.dll Syntax [Serializable] public class TokenCredentials : ITokenCredentials, ICredentials Constructors Name Description TokenCredentials(byte[]) Initializes a new instance of the TokenCredentials class with a token. Properties Name Description Name Gets the name of the entity. Methods Name Description GetToken() Gets the token representing the credentials. ToString()"
  },
  "5.2.2/api/Hazelcast.Security.TokenCredentials.Name.html": {
    "href": "5.2.2/api/Hazelcast.Security.TokenCredentials.Name.html",
    "title": "Property Name | Hazelcast .NET Documentation",
    "keywords": "Property Name Name Gets the name of the entity. Declaration public string Name { get; } Property Value Type Description string Implements ICredentials.Name"
  },
  "5.2.2/api/Hazelcast.Security.TokenCredentials.ToString.html": {
    "href": "5.2.2/api/Hazelcast.Security.TokenCredentials.ToString.html",
    "title": "Method ToString | Hazelcast .NET Documentation",
    "keywords": "Method ToString ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString()"
  },
  "5.2.2/api/Hazelcast.Security.UsernamePasswordCredentials.html": {
    "href": "5.2.2/api/Hazelcast.Security.UsernamePasswordCredentials.html",
    "title": "Class UsernamePasswordCredentials | Hazelcast .NET Documentation",
    "keywords": "Class UsernamePasswordCredentials Implements IPasswordCredentials. Inheritance object UsernamePasswordCredentials Implements IPasswordCredentials ICredentials Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Hazelcast.Security Assembly: Hazelcast.Net.dll Syntax [Serializable] public class UsernamePasswordCredentials : IPasswordCredentials, ICredentials Properties Name Description Name Gets the name of the entity. Password Gets the password. Methods Name Description ToString()"
  },
  "5.2.2/api/Hazelcast.Security.UsernamePasswordCredentials.Name.html": {
    "href": "5.2.2/api/Hazelcast.Security.UsernamePasswordCredentials.Name.html",
    "title": "Property Name | Hazelcast .NET Documentation",
    "keywords": "Property Name Name Gets the name of the entity. Declaration public string Name { get; set; } Property Value Type Description string Implements ICredentials.Name"
  },
  "5.2.2/api/Hazelcast.Security.UsernamePasswordCredentials.Password.html": {
    "href": "5.2.2/api/Hazelcast.Security.UsernamePasswordCredentials.Password.html",
    "title": "Property Password | Hazelcast .NET Documentation",
    "keywords": "Property Password Password Gets the password. Declaration public string Password { get; set; } Property Value Type Description string Implements IPasswordCredentials.Password"
  },
  "5.2.2/api/Hazelcast.Security.UsernamePasswordCredentials.ToString.html": {
    "href": "5.2.2/api/Hazelcast.Security.UsernamePasswordCredentials.ToString.html",
    "title": "Method ToString | Hazelcast .NET Documentation",
    "keywords": "Method ToString ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString()"
  },
  "5.2.2/api/Hazelcast.Serialization.ClassDefinitionBuilder.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.ClassDefinitionBuilder.-ctor.html",
    "title": "Constructor ClassDefinitionBuilder | Hazelcast .NET Documentation",
    "keywords": "Constructor ClassDefinitionBuilder ClassDefinitionBuilder(int, int) Declaration public ClassDefinitionBuilder(int factoryId, int classId) Parameters Type Name Description int factoryId int classId ClassDefinitionBuilder(int, int, int) Declaration public ClassDefinitionBuilder(int factoryId, int classId, int version) Parameters Type Name Description int factoryId int classId int version"
  },
  "5.2.2/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddBooleanArrayField.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddBooleanArrayField.html",
    "title": "Method AddBooleanArrayField | Hazelcast .NET Documentation",
    "keywords": "Method AddBooleanArrayField AddBooleanArrayField(string) Declaration public ClassDefinitionBuilder AddBooleanArrayField(string fieldName) Parameters Type Name Description string fieldName Returns Type Description ClassDefinitionBuilder"
  },
  "5.2.2/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddBooleanField.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddBooleanField.html",
    "title": "Method AddBooleanField | Hazelcast .NET Documentation",
    "keywords": "Method AddBooleanField AddBooleanField(string) Declaration public ClassDefinitionBuilder AddBooleanField(string fieldName) Parameters Type Name Description string fieldName Returns Type Description ClassDefinitionBuilder"
  },
  "5.2.2/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddByteArrayField.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddByteArrayField.html",
    "title": "Method AddByteArrayField | Hazelcast .NET Documentation",
    "keywords": "Method AddByteArrayField AddByteArrayField(string) Declaration public ClassDefinitionBuilder AddByteArrayField(string fieldName) Parameters Type Name Description string fieldName Returns Type Description ClassDefinitionBuilder"
  },
  "5.2.2/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddByteField.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddByteField.html",
    "title": "Method AddByteField | Hazelcast .NET Documentation",
    "keywords": "Method AddByteField AddByteField(string) Declaration public ClassDefinitionBuilder AddByteField(string fieldName) Parameters Type Name Description string fieldName Returns Type Description ClassDefinitionBuilder"
  },
  "5.2.2/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddCharArrayField.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddCharArrayField.html",
    "title": "Method AddCharArrayField | Hazelcast .NET Documentation",
    "keywords": "Method AddCharArrayField AddCharArrayField(string) Declaration public ClassDefinitionBuilder AddCharArrayField(string fieldName) Parameters Type Name Description string fieldName Returns Type Description ClassDefinitionBuilder"
  },
  "5.2.2/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddCharField.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddCharField.html",
    "title": "Method AddCharField | Hazelcast .NET Documentation",
    "keywords": "Method AddCharField AddCharField(string) Declaration public ClassDefinitionBuilder AddCharField(string fieldName) Parameters Type Name Description string fieldName Returns Type Description ClassDefinitionBuilder"
  },
  "5.2.2/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddDoubleArrayField.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddDoubleArrayField.html",
    "title": "Method AddDoubleArrayField | Hazelcast .NET Documentation",
    "keywords": "Method AddDoubleArrayField AddDoubleArrayField(string) Declaration public ClassDefinitionBuilder AddDoubleArrayField(string fieldName) Parameters Type Name Description string fieldName Returns Type Description ClassDefinitionBuilder"
  },
  "5.2.2/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddDoubleField.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddDoubleField.html",
    "title": "Method AddDoubleField | Hazelcast .NET Documentation",
    "keywords": "Method AddDoubleField AddDoubleField(string) Declaration public ClassDefinitionBuilder AddDoubleField(string fieldName) Parameters Type Name Description string fieldName Returns Type Description ClassDefinitionBuilder"
  },
  "5.2.2/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddFloatArrayField.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddFloatArrayField.html",
    "title": "Method AddFloatArrayField | Hazelcast .NET Documentation",
    "keywords": "Method AddFloatArrayField AddFloatArrayField(string) Declaration public ClassDefinitionBuilder AddFloatArrayField(string fieldName) Parameters Type Name Description string fieldName Returns Type Description ClassDefinitionBuilder"
  },
  "5.2.2/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddFloatField.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddFloatField.html",
    "title": "Method AddFloatField | Hazelcast .NET Documentation",
    "keywords": "Method AddFloatField AddFloatField(string) Declaration public ClassDefinitionBuilder AddFloatField(string fieldName) Parameters Type Name Description string fieldName Returns Type Description ClassDefinitionBuilder"
  },
  "5.2.2/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddIntArrayField.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddIntArrayField.html",
    "title": "Method AddIntArrayField | Hazelcast .NET Documentation",
    "keywords": "Method AddIntArrayField AddIntArrayField(string) Declaration public ClassDefinitionBuilder AddIntArrayField(string fieldName) Parameters Type Name Description string fieldName Returns Type Description ClassDefinitionBuilder"
  },
  "5.2.2/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddIntField.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddIntField.html",
    "title": "Method AddIntField | Hazelcast .NET Documentation",
    "keywords": "Method AddIntField AddIntField(string) Declaration public ClassDefinitionBuilder AddIntField(string fieldName) Parameters Type Name Description string fieldName Returns Type Description ClassDefinitionBuilder"
  },
  "5.2.2/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddLongArrayField.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddLongArrayField.html",
    "title": "Method AddLongArrayField | Hazelcast .NET Documentation",
    "keywords": "Method AddLongArrayField AddLongArrayField(string) Declaration public ClassDefinitionBuilder AddLongArrayField(string fieldName) Parameters Type Name Description string fieldName Returns Type Description ClassDefinitionBuilder"
  },
  "5.2.2/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddLongField.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddLongField.html",
    "title": "Method AddLongField | Hazelcast .NET Documentation",
    "keywords": "Method AddLongField AddLongField(string) Declaration public ClassDefinitionBuilder AddLongField(string fieldName) Parameters Type Name Description string fieldName Returns Type Description ClassDefinitionBuilder"
  },
  "5.2.2/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddPortableArrayField.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddPortableArrayField.html",
    "title": "Method AddPortableArrayField | Hazelcast .NET Documentation",
    "keywords": "Method AddPortableArrayField AddPortableArrayField(string, IClassDefinition) Declaration public ClassDefinitionBuilder AddPortableArrayField(string fieldName, IClassDefinition def) Parameters Type Name Description string fieldName IClassDefinition def Returns Type Description ClassDefinitionBuilder"
  },
  "5.2.2/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddPortableField.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddPortableField.html",
    "title": "Method AddPortableField | Hazelcast .NET Documentation",
    "keywords": "Method AddPortableField AddPortableField(string, IClassDefinition) Declaration public ClassDefinitionBuilder AddPortableField(string fieldName, IClassDefinition def) Parameters Type Name Description string fieldName IClassDefinition def Returns Type Description ClassDefinitionBuilder"
  },
  "5.2.2/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddShortArrayField.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddShortArrayField.html",
    "title": "Method AddShortArrayField | Hazelcast .NET Documentation",
    "keywords": "Method AddShortArrayField AddShortArrayField(string) Declaration public ClassDefinitionBuilder AddShortArrayField(string fieldName) Parameters Type Name Description string fieldName Returns Type Description ClassDefinitionBuilder"
  },
  "5.2.2/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddShortField.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddShortField.html",
    "title": "Method AddShortField | Hazelcast .NET Documentation",
    "keywords": "Method AddShortField AddShortField(string) Declaration public ClassDefinitionBuilder AddShortField(string fieldName) Parameters Type Name Description string fieldName Returns Type Description ClassDefinitionBuilder"
  },
  "5.2.2/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddStringArrayField.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddStringArrayField.html",
    "title": "Method AddStringArrayField | Hazelcast .NET Documentation",
    "keywords": "Method AddStringArrayField AddStringArrayField(string) Declaration public ClassDefinitionBuilder AddStringArrayField(string fieldName) Parameters Type Name Description string fieldName Returns Type Description ClassDefinitionBuilder"
  },
  "5.2.2/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddStringField.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddStringField.html",
    "title": "Method AddStringField | Hazelcast .NET Documentation",
    "keywords": "Method AddStringField AddStringField(string) Declaration public ClassDefinitionBuilder AddStringField(string fieldName) Parameters Type Name Description string fieldName Returns Type Description ClassDefinitionBuilder"
  },
  "5.2.2/api/Hazelcast.Serialization.ClassDefinitionBuilder.Build.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.ClassDefinitionBuilder.Build.html",
    "title": "Method Build | Hazelcast .NET Documentation",
    "keywords": "Method Build Build() Declaration public IClassDefinition Build() Returns Type Description IClassDefinition"
  },
  "5.2.2/api/Hazelcast.Serialization.ClassDefinitionBuilder.ClassId.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.ClassDefinitionBuilder.ClassId.html",
    "title": "Property ClassId | Hazelcast .NET Documentation",
    "keywords": "Property ClassId ClassId Declaration public int ClassId { get; } Property Value Type Description int"
  },
  "5.2.2/api/Hazelcast.Serialization.ClassDefinitionBuilder.FactoryId.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.ClassDefinitionBuilder.FactoryId.html",
    "title": "Property FactoryId | Hazelcast .NET Documentation",
    "keywords": "Property FactoryId FactoryId Declaration public int FactoryId { get; } Property Value Type Description int"
  },
  "5.2.2/api/Hazelcast.Serialization.ClassDefinitionBuilder.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.ClassDefinitionBuilder.html",
    "title": "Class ClassDefinitionBuilder | Hazelcast .NET Documentation",
    "keywords": "Class ClassDefinitionBuilder ClassDefinitionBuilder is used to build and register ClassDefinitions manually. Inheritance object ClassDefinitionBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Syntax public sealed class ClassDefinitionBuilder Remarks ClassDefinitionBuilder is used to build and register ClassDefinitions manually. Constructors Name Description ClassDefinitionBuilder(int, int, int) ClassDefinitionBuilder(int, int) Properties Name Description ClassId FactoryId Version Methods Name Description AddBooleanArrayField(string) AddBooleanField(string) AddByteArrayField(string) AddByteField(string) AddCharArrayField(string) AddCharField(string) AddDoubleArrayField(string) AddDoubleField(string) AddFloatArrayField(string) AddFloatField(string) AddIntArrayField(string) AddIntField(string) AddLongArrayField(string) AddLongField(string) AddPortableArrayField(string, IClassDefinition) AddPortableField(string, IClassDefinition) AddShortArrayField(string) AddShortField(string) AddStringArrayField(string) AddStringField(string) Build() See Also IClassDefinition IPortable"
  },
  "5.2.2/api/Hazelcast.Serialization.ClassDefinitionBuilder.Version.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.ClassDefinitionBuilder.Version.html",
    "title": "Property Version | Hazelcast .NET Documentation",
    "keywords": "Property Version Version Declaration public int Version { get; } Property Value Type Description int"
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.CompactOptions.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.CompactOptions.-ctor.html",
    "title": "Constructor CompactOptions | Hazelcast .NET Documentation",
    "keywords": "Constructor CompactOptions CompactOptions() Initializes a new instance of the CompactOptions class. Declaration public CompactOptions()"
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.CompactOptions.AddSerializer.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.CompactOptions.AddSerializer.html",
    "title": "Method AddSerializer | Hazelcast .NET Documentation",
    "keywords": "Method AddSerializer AddSerializer<TSerialized>(ICompactSerializer<TSerialized>) Adds a serializer. Declaration public void AddSerializer<TSerialized>(ICompactSerializer<TSerialized> serializer) where TSerialized : notnull Parameters Type Name Description ICompactSerializer<TSerialized> serializer The compact serializer. Type Parameters Name Description TSerialized The serialized type. Exceptions Type Condition ArgumentNullException The serializer is null. ConfigurationException The operation conflicts with information that were already provided. AddSerializer(ICompactSerializer) Adds a serializer. Declaration public void AddSerializer(ICompactSerializer serializer) Parameters Type Name Description ICompactSerializer serializer The serialized type. Exceptions Type Condition ArgumentNullException The serializer is null. ArgumentException The serializer does not implement ICompactSerializer<T>. ConfigurationException The operation conflicts with information that were already provided. AddSerializer<TSerializerSerialized, TSerialized>(ICompactSerializer<TSerializerSerialized>) Adds a serializer. Declaration public void AddSerializer<TSerializerSerialized, TSerialized>(ICompactSerializer<TSerializerSerialized> serializer) where TSerializerSerialized : notnull where TSerialized : TSerializerSerialized Parameters Type Name Description ICompactSerializer<TSerializerSerialized> serializer The serializer. Type Parameters Name Description TSerializerSerialized The type serialized by the serializer. TSerialized The type for which the serializer is added. Exceptions Type Condition ArgumentNullException The serializer is null. ConfigurationException The operation conflicts with information that were already provided."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.CompactOptions.AddType.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.CompactOptions.AddType.html",
    "title": "Method AddType | Hazelcast .NET Documentation",
    "keywords": "Method AddType AddType<T>() Adds a type. Declaration public void AddType<T>() Type Parameters Name Description T The type to add. Remarks Use this method to declare that a type, which is not implicitly declared to compact serialization via any of the other available methods (such as registering a serializer for that type), should nevertheless be compact-serialized, even though another serialization method may also apply. All object types are implicitly compact-serialized, but only if not other serialization method applies. An IPortable object would be portable-serialized by default. Use this method to bypass serialization methods detection and force compact serialization. AddType(Type) Declaration public void AddType(Type type) Parameters Type Name Description Type type Remarks Use this method to declare that a type, which is not implicitly declared to compact serialization via any of the other available methods (such as registering a serializer for that type), should nevertheless be compact-serialized, even though another serialization method may also apply. All object types are implicitly compact-serialized, but only if not other serialization method applies. An IPortable object would be portable-serialized by default. Use this method to bypass serialization methods detection and force compact serialization."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.CompactOptions.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.CompactOptions.html",
    "title": "Class CompactOptions | Hazelcast .NET Documentation",
    "keywords": "Class CompactOptions Represents the compact serialization options. Inheritance object CompactOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.Serialization.Compact Assembly: Hazelcast.Net.dll Syntax public sealed class CompactOptions Constructors Name Description CompactOptions() Initializes a new instance of the CompactOptions class. Properties Name Description SchemaReplicationDelay Gets or sets the amount of time to wait between each schema publication retries. SchemaReplicationRetries Gets or sets the maximum number of retries for schema publication. Methods Name Description AddSerializer(ICompactSerializer) Adds a serializer. AddSerializer<TSerialized>(ICompactSerializer<TSerialized>) Adds a serializer. AddSerializer<TSerializerSerialized, TSerialized>(ICompactSerializer<TSerializerSerialized>) Adds a serializer. AddType(Type) AddType<T>() Adds a type."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.CompactOptions.SchemaReplicationDelay.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.CompactOptions.SchemaReplicationDelay.html",
    "title": "Property SchemaReplicationDelay | Hazelcast .NET Documentation",
    "keywords": "Property SchemaReplicationDelay SchemaReplicationDelay Gets or sets the amount of time to wait between each schema publication retries. Declaration public TimeSpan SchemaReplicationDelay { get; set; } Property Value Type Description TimeSpan Remarks See SchemaReplicationRetries. The default value is 1 second."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.CompactOptions.SchemaReplicationRetries.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.CompactOptions.SchemaReplicationRetries.html",
    "title": "Property SchemaReplicationRetries | Hazelcast .NET Documentation",
    "keywords": "Property SchemaReplicationRetries SchemaReplicationRetries Gets or sets the maximum number of retries for schema publication. Declaration public int SchemaReplicationRetries { get; set; } Property Value Type Description int Remarks When a schema is published to the cluster, the client ensures that it is replicated to all known members, thus protecting against split-brain situations where only some members would receive the schema. Should some members not receive the schema, publication is retried. The default value is 100."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.CompactSerializerBase-1.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.CompactSerializerBase-1.html",
    "title": "Class CompactSerializerBase<T> | Hazelcast .NET Documentation",
    "keywords": "Class CompactSerializerBase<T> Provides a base class for ICompactSerializer<T> implementations. Inheritance object CompactSerializerBase<T> Implements ICompactSerializer<T> ICompactSerializer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.Serialization.Compact Assembly: Hazelcast.Net.dll Syntax public abstract class CompactSerializerBase<T> : ICompactSerializer<T>, ICompactSerializer where T : notnull Type Parameters Name Description T The serialized type. Properties Name Description TypeName Gets the schema type name. Methods Name Description Read(ICompactReader) Reads a value. Write(ICompactWriter, T) Writes a value."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.CompactSerializerBase-1.Read.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.CompactSerializerBase-1.Read.html",
    "title": "Method Read | Hazelcast .NET Documentation",
    "keywords": "Method Read Read(ICompactReader) Reads a value. Declaration public abstract T Read(ICompactReader reader) Parameters Type Name Description ICompactReader reader The reader. Returns Type Description T The value. Implements ICompactSerializer<T>.Read(ICompactReader)"
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.CompactSerializerBase-1.TypeName.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.CompactSerializerBase-1.TypeName.html",
    "title": "Property TypeName | Hazelcast .NET Documentation",
    "keywords": "Property TypeName TypeName Gets the schema type name. Declaration public virtual string TypeName { get; } Property Value Type Description string Implements ICompactSerializer.TypeName"
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.CompactSerializerBase-1.Write.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.CompactSerializerBase-1.Write.html",
    "title": "Method Write | Hazelcast .NET Documentation",
    "keywords": "Method Write Write(ICompactWriter, T) Writes a value. Declaration public abstract void Write(ICompactWriter writer, T value) Parameters Type Name Description ICompactWriter writer The writer. T value The value. Implements ICompactSerializer<T>.Write(ICompactWriter, T)"
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.html",
    "title": "Namespace Hazelcast.Serialization.Compact | Hazelcast .NET Documentation",
    "keywords": "Namespace Hazelcast.Serialization.Compact Classes CompactOptions Represents the compact serialization options. CompactSerializerBase<T> Provides a base class for ICompactSerializer<T> implementations. Interfaces ICompactReader Defines methods for reading fields from a compact-serialized blob. ICompactSerializer Defines a compact serializer. ICompactSerializer<T> Defines a compact serializer for a specified type. ICompactWriter Defines methods for writing fields to a compact-serialized blob."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.GetFieldKind.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.GetFieldKind.html",
    "title": "Method GetFieldKind | Hazelcast .NET Documentation",
    "keywords": "Method GetFieldKind GetFieldKind(string) Gets the FieldKind of a field. Declaration FieldKind GetFieldKind(string name) Parameters Type Name Description string name The name of the field. Returns Type Description FieldKind The FieldKind of the field, which can be NotAvailable if the field does not exist."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.html",
    "title": "Interface ICompactReader | Hazelcast .NET Documentation",
    "keywords": "Interface ICompactReader Defines methods for reading fields from a compact-serialized blob. Namespace: Hazelcast.Serialization.Compact Assembly: Hazelcast.Net.dll Syntax public interface ICompactReader Methods Name Description GetFieldKind(string) Gets the FieldKind of a field. ReadArrayOfBoolean(string) Reads a ArrayOfBoolean or ArrayOfNullableBoolean field. ReadArrayOfCompact<T>(string) Reads a ArrayOfCompact field. ReadArrayOfDate(string) Reads a ArrayOfDate field. ReadArrayOfDecimal(string) Reads a ArrayOfDecimal field. ReadArrayOfFloat32(string) Reads a ArrayOfFloat32 or ArrayOfNullableFloat32 field. ReadArrayOfFloat64(string) Reads a ArrayOfFloat64 or ArrayOfNullableFloat64 field. ReadArrayOfInt16(string) Reads a ArrayOfInt16 or ArrayOfNullableInt16 field. ReadArrayOfInt32(string) Reads a ArrayOfInt32 or ArrayOfNullableInt32 field. ReadArrayOfInt64(string) Reads a ArrayOfInt64 or ArrayOfNullableInt64 field. ReadArrayOfInt8(string) Reads a ArrayOfInt8 or ArrayOfNullableInt8 field. ReadArrayOfNullableBoolean(string) Reads a ArrayOfNullableBoolean or ArrayOfBoolean field. ReadArrayOfNullableFloat32(string) Reads a ArrayOfNullableFloat32 or ArrayOfFloat32 field. ReadArrayOfNullableFloat64(string) Reads a ArrayOfNullableFloat64 or ArrayOfFloat64 field. ReadArrayOfNullableInt16(string) Reads a ArrayOfNullableInt16 or ArrayOfInt16 field. ReadArrayOfNullableInt32(string) Reads a ArrayOfNullableInt32 or ArrayOfInt32 field. ReadArrayOfNullableInt64(string) Reads a ArrayOfNullableInt64 or ArrayOfInt64 field. ReadArrayOfNullableInt8(string) Reads a ArrayOfNullableInt8 or ArrayOfInt8 field. ReadArrayOfString(string) Reads a ArrayOfString field. ReadArrayOfTime(string) Reads a ArrayOfTime field. ReadArrayOfTimeStamp(string) Reads a ArrayOfTimeStamp field. ReadArrayOfTimeStampWithTimeZone(string) Reads a ArrayOfTimeStampWithTimeZone field. ReadBoolean(string) Reads a Boolean or NullableBoolean field. ReadCompact<T>(string) Reads a Compact field. ReadDate(string) Reads a Date field. ReadDecimal(string) Reads a Decimal field. ReadFloat32(string) Reads a Float32 or NullableFloat32 field. ReadFloat64(string) Reads a Float64 or NullableFloat64 field. ReadInt16(string) Reads a Int16 or NullableInt16 field. ReadInt32(string) Reads a Int32 or NullableInt32 field. ReadInt64(string) Reads a Int64 or NullableInt64 field. ReadInt8(string) Reads a Int8 or NullableInt8 field. ReadNullableBoolean(string) Reads a NullableBoolean or Boolean field. ReadNullableFloat32(string) Reads a NullableFloat32 or Float32 field. ReadNullableFloat64(string) Reads a NullableFloat64 or Float64 field. ReadNullableInt16(string) Reads a NullableInt16 or Int16 field. ReadNullableInt32(string) Reads a NullableInt32 or Int32 field. ReadNullableInt64(string) Reads a NullableInt64 or Int64 field. ReadNullableInt8(string) Reads a NullableInt8 or Int8 field. ReadString(string) Reads a String field. ReadTime(string) Reads a Time field. ReadTimeStamp(string) Reads a TimeStamp field. ReadTimeStampWithTimeZone(string) Reads a TimeStampWithTimeZone field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadArrayOfBoolean.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadArrayOfBoolean.html",
    "title": "Method ReadArrayOfBoolean | Hazelcast .NET Documentation",
    "keywords": "Method ReadArrayOfBoolean ReadArrayOfBoolean(string) Reads a ArrayOfBoolean or ArrayOfNullableBoolean field. Declaration bool[]? ReadArrayOfBoolean(string name) Parameters Type Name Description string name The name of the field. Returns Type Description bool[] The value of the field. Remarks Throws a SerializationException if the field is nullable and a value is null."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadArrayOfCompact.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadArrayOfCompact.html",
    "title": "Method ReadArrayOfCompact | Hazelcast .NET Documentation",
    "keywords": "Method ReadArrayOfCompact ReadArrayOfCompact<T>(string) Reads a ArrayOfCompact field. Declaration T?[]? ReadArrayOfCompact<T>(string name) Parameters Type Name Description string name The name of the field. Returns Type Description T[] The value of the field. Type Parameters Name Description T The expected type of the objects."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadArrayOfDate.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadArrayOfDate.html",
    "title": "Method ReadArrayOfDate | Hazelcast .NET Documentation",
    "keywords": "Method ReadArrayOfDate ReadArrayOfDate(string) Reads a ArrayOfDate field. Declaration HLocalDate?[]? ReadArrayOfDate(string name) Parameters Type Name Description string name The name of the field. Returns Type Description HLocalDate?[] The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadArrayOfDecimal.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadArrayOfDecimal.html",
    "title": "Method ReadArrayOfDecimal | Hazelcast .NET Documentation",
    "keywords": "Method ReadArrayOfDecimal ReadArrayOfDecimal(string) Reads a ArrayOfDecimal field. Declaration HBigDecimal?[]? ReadArrayOfDecimal(string name) Parameters Type Name Description string name The name of the field. Returns Type Description HBigDecimal?[] The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadArrayOfFloat32.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadArrayOfFloat32.html",
    "title": "Method ReadArrayOfFloat32 | Hazelcast .NET Documentation",
    "keywords": "Method ReadArrayOfFloat32 ReadArrayOfFloat32(string) Reads a ArrayOfFloat32 or ArrayOfNullableFloat32 field. Declaration float[]? ReadArrayOfFloat32(string name) Parameters Type Name Description string name The name of the field. Returns Type Description float[] The value of the field. Remarks Throws a SerializationException if the field is nullable and a value is null."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadArrayOfFloat64.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadArrayOfFloat64.html",
    "title": "Method ReadArrayOfFloat64 | Hazelcast .NET Documentation",
    "keywords": "Method ReadArrayOfFloat64 ReadArrayOfFloat64(string) Reads a ArrayOfFloat64 or ArrayOfNullableFloat64 field. Declaration double[]? ReadArrayOfFloat64(string name) Parameters Type Name Description string name The name of the field. Returns Type Description double[] The value of the field. Remarks Throws a SerializationException if the field is nullable and a value is null."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadArrayOfInt16.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadArrayOfInt16.html",
    "title": "Method ReadArrayOfInt16 | Hazelcast .NET Documentation",
    "keywords": "Method ReadArrayOfInt16 ReadArrayOfInt16(string) Reads a ArrayOfInt16 or ArrayOfNullableInt16 field. Declaration short[]? ReadArrayOfInt16(string name) Parameters Type Name Description string name The name of the field. Returns Type Description short[] The value of the field. Remarks Throws a SerializationException if the field is nullable and a value is null."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadArrayOfInt32.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadArrayOfInt32.html",
    "title": "Method ReadArrayOfInt32 | Hazelcast .NET Documentation",
    "keywords": "Method ReadArrayOfInt32 ReadArrayOfInt32(string) Reads a ArrayOfInt32 or ArrayOfNullableInt32 field. Declaration int[]? ReadArrayOfInt32(string name) Parameters Type Name Description string name The name of the field. Returns Type Description int[] The value of the field. Remarks Throws a SerializationException if the field is nullable and a value is null."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadArrayOfInt64.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadArrayOfInt64.html",
    "title": "Method ReadArrayOfInt64 | Hazelcast .NET Documentation",
    "keywords": "Method ReadArrayOfInt64 ReadArrayOfInt64(string) Reads a ArrayOfInt64 or ArrayOfNullableInt64 field. Declaration long[]? ReadArrayOfInt64(string name) Parameters Type Name Description string name The name of the field. Returns Type Description long[] The value of the field. Remarks Throws a SerializationException if the field is nullable and a value is null."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadArrayOfInt8.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadArrayOfInt8.html",
    "title": "Method ReadArrayOfInt8 | Hazelcast .NET Documentation",
    "keywords": "Method ReadArrayOfInt8 ReadArrayOfInt8(string) Reads a ArrayOfInt8 or ArrayOfNullableInt8 field. Declaration sbyte[]? ReadArrayOfInt8(string name) Parameters Type Name Description string name The name of the field. Returns Type Description sbyte[] The value of the field. Remarks Throws a SerializationException if the field is nullable and a value is null."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadArrayOfNullableBoolean.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadArrayOfNullableBoolean.html",
    "title": "Method ReadArrayOfNullableBoolean | Hazelcast .NET Documentation",
    "keywords": "Method ReadArrayOfNullableBoolean ReadArrayOfNullableBoolean(string) Reads a ArrayOfNullableBoolean or ArrayOfBoolean field. Declaration bool?[]? ReadArrayOfNullableBoolean(string name) Parameters Type Name Description string name The name of the field. Returns Type Description bool?[] The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadArrayOfNullableFloat32.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadArrayOfNullableFloat32.html",
    "title": "Method ReadArrayOfNullableFloat32 | Hazelcast .NET Documentation",
    "keywords": "Method ReadArrayOfNullableFloat32 ReadArrayOfNullableFloat32(string) Reads a ArrayOfNullableFloat32 or ArrayOfFloat32 field. Declaration float?[]? ReadArrayOfNullableFloat32(string name) Parameters Type Name Description string name The name of the field. Returns Type Description float?[] The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadArrayOfNullableFloat64.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadArrayOfNullableFloat64.html",
    "title": "Method ReadArrayOfNullableFloat64 | Hazelcast .NET Documentation",
    "keywords": "Method ReadArrayOfNullableFloat64 ReadArrayOfNullableFloat64(string) Reads a ArrayOfNullableFloat64 or ArrayOfFloat64 field. Declaration double?[]? ReadArrayOfNullableFloat64(string name) Parameters Type Name Description string name The name of the field. Returns Type Description double?[] The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadArrayOfNullableInt16.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadArrayOfNullableInt16.html",
    "title": "Method ReadArrayOfNullableInt16 | Hazelcast .NET Documentation",
    "keywords": "Method ReadArrayOfNullableInt16 ReadArrayOfNullableInt16(string) Reads a ArrayOfNullableInt16 or ArrayOfInt16 field. Declaration short?[]? ReadArrayOfNullableInt16(string name) Parameters Type Name Description string name The name of the field. Returns Type Description short?[] The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadArrayOfNullableInt32.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadArrayOfNullableInt32.html",
    "title": "Method ReadArrayOfNullableInt32 | Hazelcast .NET Documentation",
    "keywords": "Method ReadArrayOfNullableInt32 ReadArrayOfNullableInt32(string) Reads a ArrayOfNullableInt32 or ArrayOfInt32 field. Declaration int?[]? ReadArrayOfNullableInt32(string name) Parameters Type Name Description string name The name of the field. Returns Type Description int?[] The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadArrayOfNullableInt64.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadArrayOfNullableInt64.html",
    "title": "Method ReadArrayOfNullableInt64 | Hazelcast .NET Documentation",
    "keywords": "Method ReadArrayOfNullableInt64 ReadArrayOfNullableInt64(string) Reads a ArrayOfNullableInt64 or ArrayOfInt64 field. Declaration long?[]? ReadArrayOfNullableInt64(string name) Parameters Type Name Description string name The name of the field. Returns Type Description long?[] The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadArrayOfNullableInt8.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadArrayOfNullableInt8.html",
    "title": "Method ReadArrayOfNullableInt8 | Hazelcast .NET Documentation",
    "keywords": "Method ReadArrayOfNullableInt8 ReadArrayOfNullableInt8(string) Reads a ArrayOfNullableInt8 or ArrayOfInt8 field. Declaration sbyte?[]? ReadArrayOfNullableInt8(string name) Parameters Type Name Description string name The name of the field. Returns Type Description sbyte?[] The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadArrayOfString.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadArrayOfString.html",
    "title": "Method ReadArrayOfString | Hazelcast .NET Documentation",
    "keywords": "Method ReadArrayOfString ReadArrayOfString(string) Reads a ArrayOfString field. Declaration string?[]? ReadArrayOfString(string name) Parameters Type Name Description string name The name of the field. Returns Type Description string[] The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadArrayOfTime.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadArrayOfTime.html",
    "title": "Method ReadArrayOfTime | Hazelcast .NET Documentation",
    "keywords": "Method ReadArrayOfTime ReadArrayOfTime(string) Reads a ArrayOfTime field. Declaration HLocalTime?[]? ReadArrayOfTime(string name) Parameters Type Name Description string name The name of the field. Returns Type Description HLocalTime?[] The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadArrayOfTimeStamp.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadArrayOfTimeStamp.html",
    "title": "Method ReadArrayOfTimeStamp | Hazelcast .NET Documentation",
    "keywords": "Method ReadArrayOfTimeStamp ReadArrayOfTimeStamp(string) Reads a ArrayOfTimeStamp field. Declaration HLocalDateTime?[]? ReadArrayOfTimeStamp(string name) Parameters Type Name Description string name The name of the field. Returns Type Description HLocalDateTime?[] The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadArrayOfTimeStampWithTimeZone.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadArrayOfTimeStampWithTimeZone.html",
    "title": "Method ReadArrayOfTimeStampWithTimeZone | Hazelcast .NET Documentation",
    "keywords": "Method ReadArrayOfTimeStampWithTimeZone ReadArrayOfTimeStampWithTimeZone(string) Reads a ArrayOfTimeStampWithTimeZone field. Declaration HOffsetDateTime?[]? ReadArrayOfTimeStampWithTimeZone(string name) Parameters Type Name Description string name The name of the field. Returns Type Description HOffsetDateTime?[] The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadBoolean.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadBoolean.html",
    "title": "Method ReadBoolean | Hazelcast .NET Documentation",
    "keywords": "Method ReadBoolean ReadBoolean(string) Reads a Boolean or NullableBoolean field. Declaration bool ReadBoolean(string name) Parameters Type Name Description string name The name of the field. Returns Type Description bool The value of the field. Remarks Throws a SerializationException if the field is nullable and the value is null."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadCompact.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadCompact.html",
    "title": "Method ReadCompact | Hazelcast .NET Documentation",
    "keywords": "Method ReadCompact ReadCompact<T>(string) Reads a Compact field. Declaration T? ReadCompact<T>(string name) Parameters Type Name Description string name The name of the field. Returns Type Description T The value of the field. Type Parameters Name Description T The expected type of the object."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadDate.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadDate.html",
    "title": "Method ReadDate | Hazelcast .NET Documentation",
    "keywords": "Method ReadDate ReadDate(string) Reads a Date field. Declaration HLocalDate? ReadDate(string name) Parameters Type Name Description string name The name of the field. Returns Type Description HLocalDate? The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadDecimal.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadDecimal.html",
    "title": "Method ReadDecimal | Hazelcast .NET Documentation",
    "keywords": "Method ReadDecimal ReadDecimal(string) Reads a Decimal field. Declaration HBigDecimal? ReadDecimal(string name) Parameters Type Name Description string name The name of the field. Returns Type Description HBigDecimal? The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadFloat32.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadFloat32.html",
    "title": "Method ReadFloat32 | Hazelcast .NET Documentation",
    "keywords": "Method ReadFloat32 ReadFloat32(string) Reads a Float32 or NullableFloat32 field. Declaration float ReadFloat32(string name) Parameters Type Name Description string name The name of the field. Returns Type Description float The value of the field. Remarks Throws a SerializationException if the field is nullable and the value is null."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadFloat64.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadFloat64.html",
    "title": "Method ReadFloat64 | Hazelcast .NET Documentation",
    "keywords": "Method ReadFloat64 ReadFloat64(string) Reads a Float64 or NullableFloat64 field. Declaration double ReadFloat64(string name) Parameters Type Name Description string name The name of the field. Returns Type Description double The value of the field. Remarks Throws a SerializationException if the field is nullable and the value is null."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadInt16.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadInt16.html",
    "title": "Method ReadInt16 | Hazelcast .NET Documentation",
    "keywords": "Method ReadInt16 ReadInt16(string) Reads a Int16 or NullableInt16 field. Declaration short ReadInt16(string name) Parameters Type Name Description string name The name of the field. Returns Type Description short The value of the field. Remarks Throws a SerializationException if the field is nullable and the value is null."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadInt32.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadInt32.html",
    "title": "Method ReadInt32 | Hazelcast .NET Documentation",
    "keywords": "Method ReadInt32 ReadInt32(string) Reads a Int32 or NullableInt32 field. Declaration int ReadInt32(string name) Parameters Type Name Description string name The name of the field. Returns Type Description int The value of the field. Remarks Throws a SerializationException if the field is nullable and the value is null."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadInt64.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadInt64.html",
    "title": "Method ReadInt64 | Hazelcast .NET Documentation",
    "keywords": "Method ReadInt64 ReadInt64(string) Reads a Int64 or NullableInt64 field. Declaration long ReadInt64(string name) Parameters Type Name Description string name The name of the field. Returns Type Description long The value of the field. Remarks Throws a SerializationException if the field is nullable and the value is null."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadInt8.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadInt8.html",
    "title": "Method ReadInt8 | Hazelcast .NET Documentation",
    "keywords": "Method ReadInt8 ReadInt8(string) Reads a Int8 or NullableInt8 field. Declaration sbyte ReadInt8(string name) Parameters Type Name Description string name The name of the field. Returns Type Description sbyte The value of the field. Remarks Throws a SerializationException if the field is nullable and the value is null."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadNullableBoolean.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadNullableBoolean.html",
    "title": "Method ReadNullableBoolean | Hazelcast .NET Documentation",
    "keywords": "Method ReadNullableBoolean ReadNullableBoolean(string) Reads a NullableBoolean or Boolean field. Declaration bool? ReadNullableBoolean(string name) Parameters Type Name Description string name The name of the field. Returns Type Description bool? The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadNullableFloat32.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadNullableFloat32.html",
    "title": "Method ReadNullableFloat32 | Hazelcast .NET Documentation",
    "keywords": "Method ReadNullableFloat32 ReadNullableFloat32(string) Reads a NullableFloat32 or Float32 field. Declaration float? ReadNullableFloat32(string name) Parameters Type Name Description string name The name of the field. Returns Type Description float? The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadNullableFloat64.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadNullableFloat64.html",
    "title": "Method ReadNullableFloat64 | Hazelcast .NET Documentation",
    "keywords": "Method ReadNullableFloat64 ReadNullableFloat64(string) Reads a NullableFloat64 or Float64 field. Declaration double? ReadNullableFloat64(string name) Parameters Type Name Description string name The name of the field. Returns Type Description double? The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadNullableInt16.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadNullableInt16.html",
    "title": "Method ReadNullableInt16 | Hazelcast .NET Documentation",
    "keywords": "Method ReadNullableInt16 ReadNullableInt16(string) Reads a NullableInt16 or Int16 field. Declaration short? ReadNullableInt16(string name) Parameters Type Name Description string name The name of the field. Returns Type Description short? The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadNullableInt32.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadNullableInt32.html",
    "title": "Method ReadNullableInt32 | Hazelcast .NET Documentation",
    "keywords": "Method ReadNullableInt32 ReadNullableInt32(string) Reads a NullableInt32 or Int32 field. Declaration int? ReadNullableInt32(string name) Parameters Type Name Description string name The name of the field. Returns Type Description int? The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadNullableInt64.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadNullableInt64.html",
    "title": "Method ReadNullableInt64 | Hazelcast .NET Documentation",
    "keywords": "Method ReadNullableInt64 ReadNullableInt64(string) Reads a NullableInt64 or Int64 field. Declaration long? ReadNullableInt64(string name) Parameters Type Name Description string name The name of the field. Returns Type Description long? The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadNullableInt8.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadNullableInt8.html",
    "title": "Method ReadNullableInt8 | Hazelcast .NET Documentation",
    "keywords": "Method ReadNullableInt8 ReadNullableInt8(string) Reads a NullableInt8 or Int8 field. Declaration sbyte? ReadNullableInt8(string name) Parameters Type Name Description string name The name of the field. Returns Type Description sbyte? The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadString.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadString.html",
    "title": "Method ReadString | Hazelcast .NET Documentation",
    "keywords": "Method ReadString ReadString(string) Reads a String field. Declaration string? ReadString(string name) Parameters Type Name Description string name The name of the field. Returns Type Description string The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadTime.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadTime.html",
    "title": "Method ReadTime | Hazelcast .NET Documentation",
    "keywords": "Method ReadTime ReadTime(string) Reads a Time field. Declaration HLocalTime? ReadTime(string name) Parameters Type Name Description string name The name of the field. Returns Type Description HLocalTime? The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadTimeStamp.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadTimeStamp.html",
    "title": "Method ReadTimeStamp | Hazelcast .NET Documentation",
    "keywords": "Method ReadTimeStamp ReadTimeStamp(string) Reads a TimeStamp field. Declaration HLocalDateTime? ReadTimeStamp(string name) Parameters Type Name Description string name The name of the field. Returns Type Description HLocalDateTime? The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadTimeStampWithTimeZone.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactReader.ReadTimeStampWithTimeZone.html",
    "title": "Method ReadTimeStampWithTimeZone | Hazelcast .NET Documentation",
    "keywords": "Method ReadTimeStampWithTimeZone ReadTimeStampWithTimeZone(string) Reads a TimeStampWithTimeZone field. Declaration HOffsetDateTime? ReadTimeStampWithTimeZone(string name) Parameters Type Name Description string name The name of the field. Returns Type Description HOffsetDateTime? The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactSerializer-1.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactSerializer-1.html",
    "title": "Interface ICompactSerializer<T> | Hazelcast .NET Documentation",
    "keywords": "Interface ICompactSerializer<T> Defines a compact serializer for a specified type. Inherited Members ICompactSerializer.TypeName Namespace: Hazelcast.Serialization.Compact Assembly: Hazelcast.Net.dll Syntax public interface ICompactSerializer<T> : ICompactSerializer where T : notnull Type Parameters Name Description T The serialized type. Methods Name Description Read(ICompactReader) Reads a value. Write(ICompactWriter, T) Writes a value."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactSerializer-1.Read.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactSerializer-1.Read.html",
    "title": "Method Read | Hazelcast .NET Documentation",
    "keywords": "Method Read Read(ICompactReader) Reads a value. Declaration T Read(ICompactReader reader) Parameters Type Name Description ICompactReader reader The reader. Returns Type Description T The value."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactSerializer-1.Write.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactSerializer-1.Write.html",
    "title": "Method Write | Hazelcast .NET Documentation",
    "keywords": "Method Write Write(ICompactWriter, T) Writes a value. Declaration void Write(ICompactWriter writer, T value) Parameters Type Name Description ICompactWriter writer The writer. T value The value."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactSerializer.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactSerializer.html",
    "title": "Interface ICompactSerializer | Hazelcast .NET Documentation",
    "keywords": "Interface ICompactSerializer Defines a compact serializer. Namespace: Hazelcast.Serialization.Compact Assembly: Hazelcast.Net.dll Syntax public interface ICompactSerializer Properties Name Description TypeName Gets the schema type name."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactSerializer.TypeName.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactSerializer.TypeName.html",
    "title": "Property TypeName | Hazelcast .NET Documentation",
    "keywords": "Property TypeName TypeName Gets the schema type name. Declaration string TypeName { get; } Property Value Type Description string"
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.html",
    "title": "Interface ICompactWriter | Hazelcast .NET Documentation",
    "keywords": "Interface ICompactWriter Defines methods for writing fields to a compact-serialized blob. Namespace: Hazelcast.Serialization.Compact Assembly: Hazelcast.Net.dll Syntax public interface ICompactWriter Methods Name Description WriteArrayOfBoolean(string, bool[]?) Writes a ArrayOfBoolean field. WriteArrayOfCompact<T>(string, T?[]?) Writes a ArrayOfCompact field. WriteArrayOfDate(string, HLocalDate?[]?) Writes a ArrayOfDate field. WriteArrayOfDecimal(string, HBigDecimal?[]?) Writes a ArrayOfDecimal field. WriteArrayOfFloat32(string, float[]?) Writes a ArrayOfFloat32 field. WriteArrayOfFloat64(string, double[]?) Writes a ArrayOfFloat64 field. WriteArrayOfInt16(string, short[]?) Writes a ArrayOfInt16 field. WriteArrayOfInt32(string, int[]?) Writes a ArrayOfInt32 field. WriteArrayOfInt64(string, long[]?) Writes a ArrayOfInt64 field. WriteArrayOfInt8(string, sbyte[]?) Writes a ArrayOfInt8 field. WriteArrayOfNullableBoolean(string, bool?[]?) Writes a ArrayOfNullableBoolean field. WriteArrayOfNullableFloat32(string, float?[]?) Writes a ArrayOfNullableFloat32 field. WriteArrayOfNullableFloat64(string, double?[]?) Writes a ArrayOfNullableFloat64 field. WriteArrayOfNullableInt16(string, short?[]?) Writes a ArrayOfNullableInt16 field. WriteArrayOfNullableInt32(string, int?[]?) Writes a ArrayOfNullableInt32 field. WriteArrayOfNullableInt64(string, long?[]?) Writes a ArrayOfNullableInt64 field. WriteArrayOfNullableInt8(string, sbyte?[]?) Writes a ArrayOfNullableInt8 field. WriteArrayOfString(string, string?[]?) Writes a ArrayOfString field. WriteArrayOfTime(string, HLocalTime?[]?) Writes a ArrayOfTime field. WriteArrayOfTimeStamp(string, HLocalDateTime?[]?) Writes a ArrayOfTimeStamp field. WriteArrayOfTimeStampWithTimeZone(string, HOffsetDateTime?[]?) Writes a ArrayOfTimeStampWithTimeZone field. WriteBoolean(string, bool) Writes a Boolean field. WriteCompact<T>(string, T?) Writes a Compact field. WriteDate(string, HLocalDate?) Writes a Date field. WriteDecimal(string, HBigDecimal?) Writes a Decimal field. WriteFloat32(string, float) Writes a Float32 field. WriteFloat64(string, double) Writes a Float64 field. WriteInt16(string, short) Writes a Int16 field. WriteInt32(string, int) Writes a Int32 field. WriteInt64(string, long) Writes a Int64 field. WriteInt8(string, sbyte) Writes a Int8 field. WriteNullableBoolean(string, bool?) Writes a NullableBoolean field. WriteNullableFloat32(string, float?) Writes a NullableFloat32 field. WriteNullableFloat64(string, double?) Writes a NullableFloat64 field. WriteNullableInt16(string, short?) Writes a NullableInt16 field. WriteNullableInt32(string, int?) Writes a NullableInt32 field. WriteNullableInt64(string, long?) Writes a NullableInt64 field. WriteNullableInt8(string, sbyte?) Writes a NullableInt8 field. WriteString(string, string?) Writes a String field. WriteTime(string, HLocalTime?) Writes a Time field. WriteTimeStamp(string, HLocalDateTime?) Writes a TimeStamp field. WriteTimeStampWithTimeZone(string, HOffsetDateTime?) Writes a TimeStampWithTimeZone field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteArrayOfBoolean.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteArrayOfBoolean.html",
    "title": "Method WriteArrayOfBoolean | Hazelcast .NET Documentation",
    "keywords": "Method WriteArrayOfBoolean WriteArrayOfBoolean(string, bool[]?) Writes a ArrayOfBoolean field. Declaration void WriteArrayOfBoolean(string name, bool[]? value) Parameters Type Name Description string name The name of the field. bool[] value The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteArrayOfCompact.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteArrayOfCompact.html",
    "title": "Method WriteArrayOfCompact | Hazelcast .NET Documentation",
    "keywords": "Method WriteArrayOfCompact WriteArrayOfCompact<T>(string, T?[]?) Writes a ArrayOfCompact field. Declaration void WriteArrayOfCompact<T>(string name, T?[]? value) Parameters Type Name Description string name The name of the field. T[] value The value of the field. Type Parameters Name Description T The type of the objects."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteArrayOfDate.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteArrayOfDate.html",
    "title": "Method WriteArrayOfDate | Hazelcast .NET Documentation",
    "keywords": "Method WriteArrayOfDate WriteArrayOfDate(string, HLocalDate?[]?) Writes a ArrayOfDate field. Declaration void WriteArrayOfDate(string name, HLocalDate?[]? value) Parameters Type Name Description string name The name of the field. HLocalDate?[] value The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteArrayOfDecimal.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteArrayOfDecimal.html",
    "title": "Method WriteArrayOfDecimal | Hazelcast .NET Documentation",
    "keywords": "Method WriteArrayOfDecimal WriteArrayOfDecimal(string, HBigDecimal?[]?) Writes a ArrayOfDecimal field. Declaration void WriteArrayOfDecimal(string name, HBigDecimal?[]? value) Parameters Type Name Description string name The name of the field. HBigDecimal?[] value The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteArrayOfFloat32.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteArrayOfFloat32.html",
    "title": "Method WriteArrayOfFloat32 | Hazelcast .NET Documentation",
    "keywords": "Method WriteArrayOfFloat32 WriteArrayOfFloat32(string, float[]?) Writes a ArrayOfFloat32 field. Declaration void WriteArrayOfFloat32(string name, float[]? value) Parameters Type Name Description string name The name of the field. float[] value The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteArrayOfFloat64.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteArrayOfFloat64.html",
    "title": "Method WriteArrayOfFloat64 | Hazelcast .NET Documentation",
    "keywords": "Method WriteArrayOfFloat64 WriteArrayOfFloat64(string, double[]?) Writes a ArrayOfFloat64 field. Declaration void WriteArrayOfFloat64(string name, double[]? value) Parameters Type Name Description string name The name of the field. double[] value The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteArrayOfInt16.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteArrayOfInt16.html",
    "title": "Method WriteArrayOfInt16 | Hazelcast .NET Documentation",
    "keywords": "Method WriteArrayOfInt16 WriteArrayOfInt16(string, short[]?) Writes a ArrayOfInt16 field. Declaration void WriteArrayOfInt16(string name, short[]? value) Parameters Type Name Description string name The name of the field. short[] value The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteArrayOfInt32.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteArrayOfInt32.html",
    "title": "Method WriteArrayOfInt32 | Hazelcast .NET Documentation",
    "keywords": "Method WriteArrayOfInt32 WriteArrayOfInt32(string, int[]?) Writes a ArrayOfInt32 field. Declaration void WriteArrayOfInt32(string name, int[]? value) Parameters Type Name Description string name The name of the field. int[] value The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteArrayOfInt64.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteArrayOfInt64.html",
    "title": "Method WriteArrayOfInt64 | Hazelcast .NET Documentation",
    "keywords": "Method WriteArrayOfInt64 WriteArrayOfInt64(string, long[]?) Writes a ArrayOfInt64 field. Declaration void WriteArrayOfInt64(string name, long[]? value) Parameters Type Name Description string name The name of the field. long[] value The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteArrayOfInt8.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteArrayOfInt8.html",
    "title": "Method WriteArrayOfInt8 | Hazelcast .NET Documentation",
    "keywords": "Method WriteArrayOfInt8 WriteArrayOfInt8(string, sbyte[]?) Writes a ArrayOfInt8 field. Declaration void WriteArrayOfInt8(string name, sbyte[]? value) Parameters Type Name Description string name The name of the field. sbyte[] value The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteArrayOfNullableBoolean.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteArrayOfNullableBoolean.html",
    "title": "Method WriteArrayOfNullableBoolean | Hazelcast .NET Documentation",
    "keywords": "Method WriteArrayOfNullableBoolean WriteArrayOfNullableBoolean(string, bool?[]?) Writes a ArrayOfNullableBoolean field. Declaration void WriteArrayOfNullableBoolean(string name, bool?[]? value) Parameters Type Name Description string name The name of the field. bool?[] value The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteArrayOfNullableFloat32.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteArrayOfNullableFloat32.html",
    "title": "Method WriteArrayOfNullableFloat32 | Hazelcast .NET Documentation",
    "keywords": "Method WriteArrayOfNullableFloat32 WriteArrayOfNullableFloat32(string, float?[]?) Writes a ArrayOfNullableFloat32 field. Declaration void WriteArrayOfNullableFloat32(string name, float?[]? value) Parameters Type Name Description string name The name of the field. float?[] value The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteArrayOfNullableFloat64.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteArrayOfNullableFloat64.html",
    "title": "Method WriteArrayOfNullableFloat64 | Hazelcast .NET Documentation",
    "keywords": "Method WriteArrayOfNullableFloat64 WriteArrayOfNullableFloat64(string, double?[]?) Writes a ArrayOfNullableFloat64 field. Declaration void WriteArrayOfNullableFloat64(string name, double?[]? value) Parameters Type Name Description string name The name of the field. double?[] value The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteArrayOfNullableInt16.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteArrayOfNullableInt16.html",
    "title": "Method WriteArrayOfNullableInt16 | Hazelcast .NET Documentation",
    "keywords": "Method WriteArrayOfNullableInt16 WriteArrayOfNullableInt16(string, short?[]?) Writes a ArrayOfNullableInt16 field. Declaration void WriteArrayOfNullableInt16(string name, short?[]? value) Parameters Type Name Description string name The name of the field. short?[] value The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteArrayOfNullableInt32.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteArrayOfNullableInt32.html",
    "title": "Method WriteArrayOfNullableInt32 | Hazelcast .NET Documentation",
    "keywords": "Method WriteArrayOfNullableInt32 WriteArrayOfNullableInt32(string, int?[]?) Writes a ArrayOfNullableInt32 field. Declaration void WriteArrayOfNullableInt32(string name, int?[]? value) Parameters Type Name Description string name The name of the field. int?[] value The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteArrayOfNullableInt64.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteArrayOfNullableInt64.html",
    "title": "Method WriteArrayOfNullableInt64 | Hazelcast .NET Documentation",
    "keywords": "Method WriteArrayOfNullableInt64 WriteArrayOfNullableInt64(string, long?[]?) Writes a ArrayOfNullableInt64 field. Declaration void WriteArrayOfNullableInt64(string name, long?[]? value) Parameters Type Name Description string name The name of the field. long?[] value The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteArrayOfNullableInt8.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteArrayOfNullableInt8.html",
    "title": "Method WriteArrayOfNullableInt8 | Hazelcast .NET Documentation",
    "keywords": "Method WriteArrayOfNullableInt8 WriteArrayOfNullableInt8(string, sbyte?[]?) Writes a ArrayOfNullableInt8 field. Declaration void WriteArrayOfNullableInt8(string name, sbyte?[]? value) Parameters Type Name Description string name The name of the field. sbyte?[] value The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteArrayOfString.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteArrayOfString.html",
    "title": "Method WriteArrayOfString | Hazelcast .NET Documentation",
    "keywords": "Method WriteArrayOfString WriteArrayOfString(string, string?[]?) Writes a ArrayOfString field. Declaration void WriteArrayOfString(string name, string?[]? value) Parameters Type Name Description string name The name of the field. string[] value The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteArrayOfTime.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteArrayOfTime.html",
    "title": "Method WriteArrayOfTime | Hazelcast .NET Documentation",
    "keywords": "Method WriteArrayOfTime WriteArrayOfTime(string, HLocalTime?[]?) Writes a ArrayOfTime field. Declaration void WriteArrayOfTime(string name, HLocalTime?[]? value) Parameters Type Name Description string name The name of the field. HLocalTime?[] value The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteArrayOfTimeStamp.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteArrayOfTimeStamp.html",
    "title": "Method WriteArrayOfTimeStamp | Hazelcast .NET Documentation",
    "keywords": "Method WriteArrayOfTimeStamp WriteArrayOfTimeStamp(string, HLocalDateTime?[]?) Writes a ArrayOfTimeStamp field. Declaration void WriteArrayOfTimeStamp(string name, HLocalDateTime?[]? value) Parameters Type Name Description string name The name of the field. HLocalDateTime?[] value The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteArrayOfTimeStampWithTimeZone.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteArrayOfTimeStampWithTimeZone.html",
    "title": "Method WriteArrayOfTimeStampWithTimeZone | Hazelcast .NET Documentation",
    "keywords": "Method WriteArrayOfTimeStampWithTimeZone WriteArrayOfTimeStampWithTimeZone(string, HOffsetDateTime?[]?) Writes a ArrayOfTimeStampWithTimeZone field. Declaration void WriteArrayOfTimeStampWithTimeZone(string name, HOffsetDateTime?[]? value) Parameters Type Name Description string name The name of the field. HOffsetDateTime?[] value The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteBoolean.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteBoolean.html",
    "title": "Method WriteBoolean | Hazelcast .NET Documentation",
    "keywords": "Method WriteBoolean WriteBoolean(string, bool) Writes a Boolean field. Declaration void WriteBoolean(string name, bool value) Parameters Type Name Description string name The name of the field. bool value The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteCompact.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteCompact.html",
    "title": "Method WriteCompact | Hazelcast .NET Documentation",
    "keywords": "Method WriteCompact WriteCompact<T>(string, T?) Writes a Compact field. Declaration void WriteCompact<T>(string name, T? value) Parameters Type Name Description string name The name of the field. T value The value of the field. Type Parameters Name Description T The type of the object."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteDate.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteDate.html",
    "title": "Method WriteDate | Hazelcast .NET Documentation",
    "keywords": "Method WriteDate WriteDate(string, HLocalDate?) Writes a Date field. Declaration void WriteDate(string name, HLocalDate? value) Parameters Type Name Description string name The name of the field. HLocalDate? value The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteDecimal.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteDecimal.html",
    "title": "Method WriteDecimal | Hazelcast .NET Documentation",
    "keywords": "Method WriteDecimal WriteDecimal(string, HBigDecimal?) Writes a Decimal field. Declaration void WriteDecimal(string name, HBigDecimal? value) Parameters Type Name Description string name The name of the field. HBigDecimal? value The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteFloat32.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteFloat32.html",
    "title": "Method WriteFloat32 | Hazelcast .NET Documentation",
    "keywords": "Method WriteFloat32 WriteFloat32(string, float) Writes a Float32 field. Declaration void WriteFloat32(string name, float value) Parameters Type Name Description string name The name of the field. float value The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteFloat64.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteFloat64.html",
    "title": "Method WriteFloat64 | Hazelcast .NET Documentation",
    "keywords": "Method WriteFloat64 WriteFloat64(string, double) Writes a Float64 field. Declaration void WriteFloat64(string name, double value) Parameters Type Name Description string name The name of the field. double value The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteInt16.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteInt16.html",
    "title": "Method WriteInt16 | Hazelcast .NET Documentation",
    "keywords": "Method WriteInt16 WriteInt16(string, short) Writes a Int16 field. Declaration void WriteInt16(string name, short value) Parameters Type Name Description string name The name of the field. short value The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteInt32.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteInt32.html",
    "title": "Method WriteInt32 | Hazelcast .NET Documentation",
    "keywords": "Method WriteInt32 WriteInt32(string, int) Writes a Int32 field. Declaration void WriteInt32(string name, int value) Parameters Type Name Description string name The name of the field. int value The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteInt64.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteInt64.html",
    "title": "Method WriteInt64 | Hazelcast .NET Documentation",
    "keywords": "Method WriteInt64 WriteInt64(string, long) Writes a Int64 field. Declaration void WriteInt64(string name, long value) Parameters Type Name Description string name The name of the field. long value The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteInt8.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteInt8.html",
    "title": "Method WriteInt8 | Hazelcast .NET Documentation",
    "keywords": "Method WriteInt8 WriteInt8(string, sbyte) Writes a Int8 field. Declaration void WriteInt8(string name, sbyte value) Parameters Type Name Description string name The name of the field. sbyte value The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteNullableBoolean.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteNullableBoolean.html",
    "title": "Method WriteNullableBoolean | Hazelcast .NET Documentation",
    "keywords": "Method WriteNullableBoolean WriteNullableBoolean(string, bool?) Writes a NullableBoolean field. Declaration void WriteNullableBoolean(string name, bool? value) Parameters Type Name Description string name The name of the field. bool? value The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteNullableFloat32.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteNullableFloat32.html",
    "title": "Method WriteNullableFloat32 | Hazelcast .NET Documentation",
    "keywords": "Method WriteNullableFloat32 WriteNullableFloat32(string, float?) Writes a NullableFloat32 field. Declaration void WriteNullableFloat32(string name, float? value) Parameters Type Name Description string name The name of the field. float? value The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteNullableFloat64.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteNullableFloat64.html",
    "title": "Method WriteNullableFloat64 | Hazelcast .NET Documentation",
    "keywords": "Method WriteNullableFloat64 WriteNullableFloat64(string, double?) Writes a NullableFloat64 field. Declaration void WriteNullableFloat64(string name, double? value) Parameters Type Name Description string name The name of the field. double? value The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteNullableInt16.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteNullableInt16.html",
    "title": "Method WriteNullableInt16 | Hazelcast .NET Documentation",
    "keywords": "Method WriteNullableInt16 WriteNullableInt16(string, short?) Writes a NullableInt16 field. Declaration void WriteNullableInt16(string name, short? value) Parameters Type Name Description string name The name of the field. short? value The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteNullableInt32.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteNullableInt32.html",
    "title": "Method WriteNullableInt32 | Hazelcast .NET Documentation",
    "keywords": "Method WriteNullableInt32 WriteNullableInt32(string, int?) Writes a NullableInt32 field. Declaration void WriteNullableInt32(string name, int? value) Parameters Type Name Description string name The name of the field. int? value The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteNullableInt64.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteNullableInt64.html",
    "title": "Method WriteNullableInt64 | Hazelcast .NET Documentation",
    "keywords": "Method WriteNullableInt64 WriteNullableInt64(string, long?) Writes a NullableInt64 field. Declaration void WriteNullableInt64(string name, long? value) Parameters Type Name Description string name The name of the field. long? value The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteNullableInt8.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteNullableInt8.html",
    "title": "Method WriteNullableInt8 | Hazelcast .NET Documentation",
    "keywords": "Method WriteNullableInt8 WriteNullableInt8(string, sbyte?) Writes a NullableInt8 field. Declaration void WriteNullableInt8(string name, sbyte? value) Parameters Type Name Description string name The name of the field. sbyte? value The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteString.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteString.html",
    "title": "Method WriteString | Hazelcast .NET Documentation",
    "keywords": "Method WriteString WriteString(string, string?) Writes a String field. Declaration void WriteString(string name, string? value) Parameters Type Name Description string name The name of the field. string value The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteTime.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteTime.html",
    "title": "Method WriteTime | Hazelcast .NET Documentation",
    "keywords": "Method WriteTime WriteTime(string, HLocalTime?) Writes a Time field. Declaration void WriteTime(string name, HLocalTime? value) Parameters Type Name Description string name The name of the field. HLocalTime? value The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteTimeStamp.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteTimeStamp.html",
    "title": "Method WriteTimeStamp | Hazelcast .NET Documentation",
    "keywords": "Method WriteTimeStamp WriteTimeStamp(string, HLocalDateTime?) Writes a TimeStamp field. Declaration void WriteTimeStamp(string name, HLocalDateTime? value) Parameters Type Name Description string name The name of the field. HLocalDateTime? value The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteTimeStampWithTimeZone.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.Compact.ICompactWriter.WriteTimeStampWithTimeZone.html",
    "title": "Method WriteTimeStampWithTimeZone | Hazelcast .NET Documentation",
    "keywords": "Method WriteTimeStampWithTimeZone WriteTimeStampWithTimeZone(string, HOffsetDateTime?) Writes a TimeStampWithTimeZone field. Declaration void WriteTimeStampWithTimeZone(string name, HOffsetDateTime? value) Parameters Type Name Description string name The name of the field. HOffsetDateTime? value The value of the field."
  },
  "5.2.2/api/Hazelcast.Serialization.FactoryOptions-1.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.FactoryOptions-1.-ctor.html",
    "title": "Constructor FactoryOptions | Hazelcast .NET Documentation",
    "keywords": "Constructor FactoryOptions FactoryOptions() Initializes a new instance of the FactoryOptions<T> class. Declaration public FactoryOptions()"
  },
  "5.2.2/api/Hazelcast.Serialization.FactoryOptions-1.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.FactoryOptions-1.html",
    "title": "Class FactoryOptions<T> | Hazelcast .NET Documentation",
    "keywords": "Class FactoryOptions<T> Inheritance object SingletonServiceFactory<T> FactoryOptions<T> Implements IDisposable Inherited Members SingletonServiceFactory<T>.Creator SingletonServiceFactory<T>.IsConfigured SingletonServiceFactory<T>.ServiceProvider SingletonServiceFactory<T>.OwnsService SingletonServiceFactory<T>.Service SingletonServiceFactory<T>.Dispose() SingletonServiceFactory<T>.Dispose(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Syntax public class FactoryOptions<T> : SingletonServiceFactory<T>, IDisposable where T : class Type Parameters Name Description T Constructors Name Description FactoryOptions() Initializes a new instance of the FactoryOptions<T> class. Properties Name Description Id Gets or sets the identifier of the factory."
  },
  "5.2.2/api/Hazelcast.Serialization.FactoryOptions-1.Id.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.FactoryOptions-1.Id.html",
    "title": "Property Id | Hazelcast .NET Documentation",
    "keywords": "Property Id Id Gets or sets the identifier of the factory. Declaration public int Id { get; set; } Property Value Type Description int"
  },
  "5.2.2/api/Hazelcast.Serialization.FieldKind.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.FieldKind.html",
    "title": "Enum FieldKind | Hazelcast .NET Documentation",
    "keywords": "Enum FieldKind Defines the kind of a field for serialization. Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Syntax public enum FieldKind Remarks In order to stay close to C# nullable names, arrays and everything named \"Nullable\" is nullable, whereas everything else is non-nullable. Therefore, for instance, String indicates a reference (which may be null) to a string. This enumeration describe types that can be used by portable and/and compact serialization. Note that one serialization solution may not support all types. Fields Name Description ArrayOfBoolean The array-of-boolean primitive type. ArrayOfCompact The array-of-compact-object primitive type. ArrayOfDate The array-of-nullable-date primitive type. ArrayOfDecimal The array-of-nullable-decimal primitive type. ArrayOfFloat32 The array-of-f32 primitive type. ArrayOfFloat64 The array-of-f64 primitive type. ArrayOfInt16 The array-of-i16 primitive type. ArrayOfInt32 The array-of-i32 primitive type. ArrayOfInt64 The array-of-i64 primitive type. ArrayOfInt8 The array-of-i8 primitive type. ArrayOfNullableBoolean The array-of-nullable-boolean primitive type. ArrayOfNullableFloat32 The array-of-nullable-f32 primitive type. ArrayOfNullableFloat64 The array-of-nullable-f24 primitive type. ArrayOfNullableInt16 The array-of-nullable-i16 primitive type. ArrayOfNullableInt32 The array-of-nullable-i32 primitive type. ArrayOfNullableInt64 The array-of-nullable-i64 primitive type. ArrayOfNullableInt8 The array-of-nullable-i8 primitive type. ArrayOfString The array-of-string primitive type. ArrayOfTime The array-of-nullable-time primitive type. ArrayOfTimeStamp The array-of-nullable-timestamp primitive type. ArrayOfTimeStampWithTimeZone The array-of-nullable-timestamp-with-timezone primitive type. Boolean The boolean primitive type. Compact The nullable compact object primitive type. Date The nullable-date primitive type. Decimal The nullable-decimal primitive type. Float32 The f32 primitive type. Float64 The f64 primitive type. Int16 The i16 primitive type. Int32 The i32 primitive type. Int64 The i64 primitive type. Int8 The i8 primitive type. NotAvailable The type of a field that is not available. NullableBoolean The nullable-boolean primitive type. NullableFloat32 The nullable-f32 primitive type. NullableFloat64 The nullable-f64 primitive type. NullableInt16 The nullable-i16 primitive type. NullableInt32 The nullable-i32 primitive type. NullableInt64 The nullable-i64 primitive type. NullableInt8 The nullable-i8 primitive type. String The nullable-string primitive type. Time The nullable-time primitive type. TimeStamp The nullable-timestamp primitive type. TimeStampWithTimeZone The nullable-timestamp-with-timezone primitive type."
  },
  "5.2.2/api/Hazelcast.Serialization.FieldType.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.FieldType.html",
    "title": "Enum FieldType | Hazelcast .NET Documentation",
    "keywords": "Enum FieldType Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Syntax public enum FieldType Fields Name Description Boolean BooleanArray Byte ByteArray Char CharArray Double DoubleArray Float FloatArray Int IntArray Long LongArray Portable PortableArray Short ShortArray Utf UtfArray"
  },
  "5.2.2/api/Hazelcast.Serialization.GenericRecordBuilder.Compact.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.GenericRecordBuilder.Compact.html",
    "title": "Method Compact | Hazelcast .NET Documentation",
    "keywords": "Method Compact Compact(string) Creates a new IGenericRecordBuilder for a compact-serialized generic record with the specified typename. Declaration public static IGenericRecordBuilder Compact(string typename) Parameters Type Name Description string typename The compact typename. Returns Type Description IGenericRecordBuilder A new IGenericRecordBuilder. Examples var rec = GenericRecordBuilder.Compact(\"thing\") .SetBoolean(\"field-bool\", true) .SetInt32(\"field-int\", 1234) .Build();"
  },
  "5.2.2/api/Hazelcast.Serialization.GenericRecordBuilder.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.GenericRecordBuilder.html",
    "title": "Class GenericRecordBuilder | Hazelcast .NET Documentation",
    "keywords": "Class GenericRecordBuilder Creates new IGenericRecordBuilder instances. Inheritance object GenericRecordBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Syntax public static class GenericRecordBuilder Methods Name Description Compact(string) Creates a new IGenericRecordBuilder for a compact-serialized generic record with the specified typename."
  },
  "5.2.2/api/Hazelcast.Serialization.GlobalSerializerOptions.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.GlobalSerializerOptions.-ctor.html",
    "title": "Constructor GlobalSerializerOptions | Hazelcast .NET Documentation",
    "keywords": "Constructor GlobalSerializerOptions GlobalSerializerOptions() Initializes a new instance of the GlobalSerializerOptions class. Declaration public GlobalSerializerOptions()"
  },
  "5.2.2/api/Hazelcast.Serialization.GlobalSerializerOptions.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.GlobalSerializerOptions.html",
    "title": "Class GlobalSerializerOptions | Hazelcast .NET Documentation",
    "keywords": "Class GlobalSerializerOptions Configures the global serializer. Inheritance object SingletonServiceFactory<ISerializer> GlobalSerializerOptions Implements IDisposable Inherited Members SingletonServiceFactory<ISerializer>.Creator SingletonServiceFactory<ISerializer>.IsConfigured SingletonServiceFactory<ISerializer>.ServiceProvider SingletonServiceFactory<ISerializer>.OwnsService SingletonServiceFactory<ISerializer>.Service SingletonServiceFactory<ISerializer>.Dispose() SingletonServiceFactory<ISerializer>.Dispose(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Syntax public class GlobalSerializerOptions : SingletonServiceFactory<ISerializer>, IDisposable Constructors Name Description GlobalSerializerOptions() Initializes a new instance of the GlobalSerializerOptions class. Properties Name Description OverrideClrSerialization Whether to fully override (and ignore) the native CLR serialization."
  },
  "5.2.2/api/Hazelcast.Serialization.GlobalSerializerOptions.OverrideClrSerialization.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.GlobalSerializerOptions.OverrideClrSerialization.html",
    "title": "Property OverrideClrSerialization | Hazelcast .NET Documentation",
    "keywords": "Property OverrideClrSerialization OverrideClrSerialization Whether to fully override (and ignore) the native CLR serialization. Declaration public bool OverrideClrSerialization { get; set; } Property Value Type Description bool"
  },
  "5.2.2/api/Hazelcast.Serialization.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.html",
    "title": "Namespace Hazelcast.Serialization | Hazelcast .NET Documentation",
    "keywords": "Namespace Hazelcast.Serialization Classes ClassDefinitionBuilder ClassDefinitionBuilder is used to build and register ClassDefinitions manually. FactoryOptions<T> GenericRecordBuilder Creates new IGenericRecordBuilder instances. GlobalSerializerOptions Configures the global serializer. JavaClass Class for serializing/deserializing Java Class types SerializationException Represents an exception that is thrown when an error occurs while serializing or de-serializing objects. SerializationOptions Contains the serialization options SerializerOptions Configures a serializer for a type. UnknownCompactSchemaException The exception that is thrown when a compact serialization schema could not be found for a specified schema identifier, even after trying to fetch it from the cluster. Interfaces IByteArraySerializer<T> Defines a generic custom serializer that operates over byte arrays. IClassDefinition ClassDefinition defines a class schema for Portable classes. IDataSerializableFactory Defines a factory that can create instances of classes implementing IIdentifiedDataSerializable. IFieldDefinition FieldDefinition defines name, type, index of a field IGenericRecord Defines a generic record. IGenericRecordBuilder Builds an IGenericRecord. IIdentifiedDataSerializable Defines the interface that classes of objects can implement to take control of their own serialization. IObjectDataInput Provides decoding methods for primitive and array of primitive types reading from the serialized byte array. IObjectDataOutput Provides encoding methods for primitive and array of primitive types writing to the serialized byte array. IPortable Portable provides an alternative serialization method. IPortableFactory PortableFactory is used to create Portable instances during de-serialization. IPortableReader Provides a mean of reading portable fields from a binary in form of primitives, arrays of primitives , nested portable fields and array of portable fields. IPortableWriter Provides a mean of writing portable fields to a binary in form of primitives, arrays of primitives , nested portable fields and array of portable fields. ISerializer Defines a custom serializer. IStreamSerializer<T> Defines a generic custom ISerializer that operates over IObjectDataInput and IObjectDataOutput. IVersionedPortable VersionedPortable is an extension to IPortable to support per class version instead of a global serialization version. Enums FieldKind Defines the kind of a field for serialization. FieldType"
  },
  "5.2.2/api/Hazelcast.Serialization.IByteArraySerializer-1.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IByteArraySerializer-1.html",
    "title": "Interface IByteArraySerializer<T> | Hazelcast .NET Documentation",
    "keywords": "Interface IByteArraySerializer<T> Defines a generic custom serializer that operates over byte arrays. Inherited Members ISerializer.TypeId IDisposable.Dispose() Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Syntax public interface IByteArraySerializer<T> : ISerializer, IDisposable Type Parameters Name Description T The type of the serialized object. Methods Name Description Read(byte[]) Reads an object. Write(T) Writes an object."
  },
  "5.2.2/api/Hazelcast.Serialization.IByteArraySerializer-1.Read.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IByteArraySerializer-1.Read.html",
    "title": "Method Read | Hazelcast .NET Documentation",
    "keywords": "Method Read Read(byte[]) Reads an object. Declaration T Read(byte[] buffer) Parameters Type Name Description byte[] buffer Input data. Returns Type Description T The object."
  },
  "5.2.2/api/Hazelcast.Serialization.IByteArraySerializer-1.Write.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IByteArraySerializer-1.Write.html",
    "title": "Method Write | Hazelcast .NET Documentation",
    "keywords": "Method Write Write(T) Writes an object. Declaration byte[] Write(T obj) Parameters Type Name Description T obj The object. Returns Type Description byte[] The serialized object."
  },
  "5.2.2/api/Hazelcast.Serialization.IClassDefinition.ClassId.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IClassDefinition.ClassId.html",
    "title": "Property ClassId | Hazelcast .NET Documentation",
    "keywords": "Property ClassId ClassId Declaration int ClassId { get; } Property Value Type Description int class id"
  },
  "5.2.2/api/Hazelcast.Serialization.IClassDefinition.FactoryId.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IClassDefinition.FactoryId.html",
    "title": "Property FactoryId | Hazelcast .NET Documentation",
    "keywords": "Property FactoryId FactoryId Declaration int FactoryId { get; } Property Value Type Description int factory id"
  },
  "5.2.2/api/Hazelcast.Serialization.IClassDefinition.GetField.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IClassDefinition.GetField.html",
    "title": "Method GetField | Hazelcast .NET Documentation",
    "keywords": "Method GetField GetField(string) Declaration IFieldDefinition GetField(string name) Parameters Type Name Description string name name of the field Returns Type Description IFieldDefinition field definition by given name or null GetField(int) Declaration IFieldDefinition GetField(int fieldIndex) Parameters Type Name Description int fieldIndex index of the field Returns Type Description IFieldDefinition field definition by given index Exceptions Type Condition IndexOutOfRangeException"
  },
  "5.2.2/api/Hazelcast.Serialization.IClassDefinition.GetFieldClassId.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IClassDefinition.GetFieldClassId.html",
    "title": "Method GetFieldClassId | Hazelcast .NET Documentation",
    "keywords": "Method GetFieldClassId GetFieldClassId(string) Declaration int GetFieldClassId(string fieldName) Parameters Type Name Description string fieldName name of the field Returns Type Description int class id of given field Exceptions Type Condition ArgumentException"
  },
  "5.2.2/api/Hazelcast.Serialization.IClassDefinition.GetFieldCount.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IClassDefinition.GetFieldCount.html",
    "title": "Method GetFieldCount | Hazelcast .NET Documentation",
    "keywords": "Method GetFieldCount GetFieldCount() Declaration int GetFieldCount() Returns Type Description int total field count"
  },
  "5.2.2/api/Hazelcast.Serialization.IClassDefinition.GetFieldNames.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IClassDefinition.GetFieldNames.html",
    "title": "Method GetFieldNames | Hazelcast .NET Documentation",
    "keywords": "Method GetFieldNames GetFieldNames() Declaration ICollection<string> GetFieldNames() Returns Type Description ICollection<string> all field names contained in this class definition"
  },
  "5.2.2/api/Hazelcast.Serialization.IClassDefinition.GetFieldType.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IClassDefinition.GetFieldType.html",
    "title": "Method GetFieldType | Hazelcast .NET Documentation",
    "keywords": "Method GetFieldType GetFieldType(string) Declaration FieldType GetFieldType(string fieldName) Parameters Type Name Description string fieldName name of the field Returns Type Description FieldType type of given field Exceptions Type Condition ArgumentException"
  },
  "5.2.2/api/Hazelcast.Serialization.IClassDefinition.HasField.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IClassDefinition.HasField.html",
    "title": "Method HasField | Hazelcast .NET Documentation",
    "keywords": "Method HasField HasField(string) Declaration bool HasField(string fieldName) Parameters Type Name Description string fieldName field name Returns Type Description bool true if this class definition contains a field named by given name"
  },
  "5.2.2/api/Hazelcast.Serialization.IClassDefinition.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IClassDefinition.html",
    "title": "Interface IClassDefinition | Hazelcast .NET Documentation",
    "keywords": "Interface IClassDefinition ClassDefinition defines a class schema for Portable classes. Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Syntax public interface IClassDefinition Remarks ClassDefinition defines a class schema for Portable classes. It allows to query field names, types, class id etc. It can be created manually using ClassDefinitionBuilder or ondemand during serialization phase. Properties Name Description ClassId FactoryId Version Methods Name Description GetField(int) GetField(string) GetFieldClassId(string) GetFieldCount() GetFieldNames() GetFieldType(string) HasField(string) See Also IPortable ClassDefinitionBuilder"
  },
  "5.2.2/api/Hazelcast.Serialization.IClassDefinition.Version.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IClassDefinition.Version.html",
    "title": "Property Version | Hazelcast .NET Documentation",
    "keywords": "Property Version Version Declaration int Version { get; } Property Value Type Description int version"
  },
  "5.2.2/api/Hazelcast.Serialization.IDataSerializableFactory.Create.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IDataSerializableFactory.Create.html",
    "title": "Method Create | Hazelcast .NET Documentation",
    "keywords": "Method Create Create(int) Creates an instance of a type. Declaration IIdentifiedDataSerializable Create(int typeId) Parameters Type Name Description int typeId The unique identified of the type. Returns Type Description IIdentifiedDataSerializable An instance of the specified type, or null if the type identifier is not know by the factory."
  },
  "5.2.2/api/Hazelcast.Serialization.IDataSerializableFactory.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IDataSerializableFactory.html",
    "title": "Interface IDataSerializableFactory | Hazelcast .NET Documentation",
    "keywords": "Interface IDataSerializableFactory Defines a factory that can create instances of classes implementing IIdentifiedDataSerializable. Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Syntax public interface IDataSerializableFactory Methods Name Description Create(int) Creates an instance of a type."
  },
  "5.2.2/api/Hazelcast.Serialization.IFieldDefinition.ClassId.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IFieldDefinition.ClassId.html",
    "title": "Property ClassId | Hazelcast .NET Documentation",
    "keywords": "Property ClassId ClassId Declaration int ClassId { get; } Property Value Type Description int class id of this field's class"
  },
  "5.2.2/api/Hazelcast.Serialization.IFieldDefinition.FactoryId.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IFieldDefinition.FactoryId.html",
    "title": "Property FactoryId | Hazelcast .NET Documentation",
    "keywords": "Property FactoryId FactoryId Declaration int FactoryId { get; } Property Value Type Description int factory id of this field's class"
  },
  "5.2.2/api/Hazelcast.Serialization.IFieldDefinition.FieldType.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IFieldDefinition.FieldType.html",
    "title": "Property FieldType | Hazelcast .NET Documentation",
    "keywords": "Property FieldType FieldType Declaration FieldType FieldType { get; } Property Value Type Description FieldType field type"
  },
  "5.2.2/api/Hazelcast.Serialization.IFieldDefinition.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IFieldDefinition.html",
    "title": "Interface IFieldDefinition | Hazelcast .NET Documentation",
    "keywords": "Interface IFieldDefinition FieldDefinition defines name, type, index of a field Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Syntax public interface IFieldDefinition Properties Name Description ClassId FactoryId FieldType Index Name Version"
  },
  "5.2.2/api/Hazelcast.Serialization.IFieldDefinition.Index.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IFieldDefinition.Index.html",
    "title": "Property Index | Hazelcast .NET Documentation",
    "keywords": "Property Index Index Declaration int Index { get; } Property Value Type Description int field index"
  },
  "5.2.2/api/Hazelcast.Serialization.IFieldDefinition.Name.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IFieldDefinition.Name.html",
    "title": "Property Name | Hazelcast .NET Documentation",
    "keywords": "Property Name Name Declaration string Name { get; } Property Value Type Description string field name"
  },
  "5.2.2/api/Hazelcast.Serialization.IFieldDefinition.Version.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IFieldDefinition.Version.html",
    "title": "Property Version | Hazelcast .NET Documentation",
    "keywords": "Property Version Version Declaration int Version { get; } Property Value Type Description int field version"
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecord.FieldNames.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecord.FieldNames.html",
    "title": "Property FieldNames | Hazelcast .NET Documentation",
    "keywords": "Property FieldNames FieldNames Gets the collection of field names for this record. Declaration IReadOnlyCollection<string> FieldNames { get; } Property Value Type Description IReadOnlyCollection<string>"
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetArrayOfBoolean.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetArrayOfBoolean.html",
    "title": "Method GetArrayOfBoolean | Hazelcast .NET Documentation",
    "keywords": "Method GetArrayOfBoolean GetArrayOfBoolean(string) Gets the value of a ArrayOfBoolean field. Declaration bool[]? GetArrayOfBoolean(string fieldname) Parameters Type Name Description string fieldname The name of the field. Returns Type Description bool[] The value of the field. Exceptions Type Condition SerializationException No field exists with the specified name in the record, or the type of the field does not match."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetArrayOfDate.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetArrayOfDate.html",
    "title": "Method GetArrayOfDate | Hazelcast .NET Documentation",
    "keywords": "Method GetArrayOfDate GetArrayOfDate(string) Gets the value of a ArrayOfDate field. Declaration HLocalDate?[]? GetArrayOfDate(string fieldname) Parameters Type Name Description string fieldname The name of the field. Returns Type Description HLocalDate?[] The value of the field. Exceptions Type Condition SerializationException No field exists with the specified name in the record, or the type of the field does not match."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetArrayOfDecimal.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetArrayOfDecimal.html",
    "title": "Method GetArrayOfDecimal | Hazelcast .NET Documentation",
    "keywords": "Method GetArrayOfDecimal GetArrayOfDecimal(string) Gets the value of a ArrayOfDecimal field. Declaration HBigDecimal?[]? GetArrayOfDecimal(string fieldname) Parameters Type Name Description string fieldname The name of the field. Returns Type Description HBigDecimal?[] The value of the field. Exceptions Type Condition SerializationException No field exists with the specified name in the record, or the type of the field does not match."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetArrayOfFloat32.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetArrayOfFloat32.html",
    "title": "Method GetArrayOfFloat32 | Hazelcast .NET Documentation",
    "keywords": "Method GetArrayOfFloat32 GetArrayOfFloat32(string) Gets the value of a ArrayOfFloat32 field. Declaration float[]? GetArrayOfFloat32(string fieldname) Parameters Type Name Description string fieldname The name of the field. Returns Type Description float[] The value of the field. Exceptions Type Condition SerializationException No field exists with the specified name in the record, or the type of the field does not match."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetArrayOfFloat64.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetArrayOfFloat64.html",
    "title": "Method GetArrayOfFloat64 | Hazelcast .NET Documentation",
    "keywords": "Method GetArrayOfFloat64 GetArrayOfFloat64(string) Gets the value of a ArrayOfFloat64 field. Declaration double[]? GetArrayOfFloat64(string fieldname) Parameters Type Name Description string fieldname The name of the field. Returns Type Description double[] The value of the field. Exceptions Type Condition SerializationException No field exists with the specified name in the record, or the type of the field does not match."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetArrayOfGenericRecord.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetArrayOfGenericRecord.html",
    "title": "Method GetArrayOfGenericRecord | Hazelcast .NET Documentation",
    "keywords": "Method GetArrayOfGenericRecord GetArrayOfGenericRecord(string) Gets the value of an array of IGenericRecord field. Declaration IGenericRecord?[]? GetArrayOfGenericRecord(string fieldname) Parameters Type Name Description string fieldname The name of the field. Returns Type Description IGenericRecord[] The value of the field. Exceptions Type Condition SerializationException No field exists with the specified name in the record, or the type of the field does not match."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetArrayOfInt16.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetArrayOfInt16.html",
    "title": "Method GetArrayOfInt16 | Hazelcast .NET Documentation",
    "keywords": "Method GetArrayOfInt16 GetArrayOfInt16(string) Gets the value of a ArrayOfInt16 field. Declaration short[]? GetArrayOfInt16(string fieldname) Parameters Type Name Description string fieldname The name of the field. Returns Type Description short[] The value of the field. Exceptions Type Condition SerializationException No field exists with the specified name in the record, or the type of the field does not match."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetArrayOfInt32.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetArrayOfInt32.html",
    "title": "Method GetArrayOfInt32 | Hazelcast .NET Documentation",
    "keywords": "Method GetArrayOfInt32 GetArrayOfInt32(string) Gets the value of a ArrayOfInt32 field. Declaration int[]? GetArrayOfInt32(string fieldname) Parameters Type Name Description string fieldname The name of the field. Returns Type Description int[] The value of the field. Exceptions Type Condition SerializationException No field exists with the specified name in the record, or the type of the field does not match."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetArrayOfInt64.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetArrayOfInt64.html",
    "title": "Method GetArrayOfInt64 | Hazelcast .NET Documentation",
    "keywords": "Method GetArrayOfInt64 GetArrayOfInt64(string) Gets the value of a ArrayOfInt64 field. Declaration long[]? GetArrayOfInt64(string fieldname) Parameters Type Name Description string fieldname The name of the field. Returns Type Description long[] The value of the field. Exceptions Type Condition SerializationException No field exists with the specified name in the record, or the type of the field does not match."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetArrayOfInt8.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetArrayOfInt8.html",
    "title": "Method GetArrayOfInt8 | Hazelcast .NET Documentation",
    "keywords": "Method GetArrayOfInt8 GetArrayOfInt8(string) Gets the value of a ArrayOfInt8 field. Declaration sbyte[]? GetArrayOfInt8(string fieldname) Parameters Type Name Description string fieldname The name of the field. Returns Type Description sbyte[] The value of the field. Exceptions Type Condition SerializationException No field exists with the specified name in the record, or the type of the field does not match."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetArrayOfNullableBoolean.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetArrayOfNullableBoolean.html",
    "title": "Method GetArrayOfNullableBoolean | Hazelcast .NET Documentation",
    "keywords": "Method GetArrayOfNullableBoolean GetArrayOfNullableBoolean(string) Gets the value of a ArrayOfNullableBoolean field. Declaration bool?[]? GetArrayOfNullableBoolean(string fieldname) Parameters Type Name Description string fieldname The name of the field. Returns Type Description bool?[] The value of the field. Exceptions Type Condition SerializationException No field exists with the specified name in the record, or the type of the field does not match."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetArrayOfNullableFloat32.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetArrayOfNullableFloat32.html",
    "title": "Method GetArrayOfNullableFloat32 | Hazelcast .NET Documentation",
    "keywords": "Method GetArrayOfNullableFloat32 GetArrayOfNullableFloat32(string) Gets the value of a ArrayOfNullableFloat32 field. Declaration float?[]? GetArrayOfNullableFloat32(string fieldname) Parameters Type Name Description string fieldname The name of the field. Returns Type Description float?[] The value of the field. Exceptions Type Condition SerializationException No field exists with the specified name in the record, or the type of the field does not match."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetArrayOfNullableFloat64.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetArrayOfNullableFloat64.html",
    "title": "Method GetArrayOfNullableFloat64 | Hazelcast .NET Documentation",
    "keywords": "Method GetArrayOfNullableFloat64 GetArrayOfNullableFloat64(string) Gets the value of a ArrayOfNullableFloat64 field. Declaration double?[]? GetArrayOfNullableFloat64(string fieldname) Parameters Type Name Description string fieldname The name of the field. Returns Type Description double?[] The value of the field. Exceptions Type Condition SerializationException No field exists with the specified name in the record, or the type of the field does not match."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetArrayOfNullableInt16.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetArrayOfNullableInt16.html",
    "title": "Method GetArrayOfNullableInt16 | Hazelcast .NET Documentation",
    "keywords": "Method GetArrayOfNullableInt16 GetArrayOfNullableInt16(string) Gets the value of a ArrayOfNullableInt16 field. Declaration short?[]? GetArrayOfNullableInt16(string fieldname) Parameters Type Name Description string fieldname The name of the field. Returns Type Description short?[] The value of the field. Exceptions Type Condition SerializationException No field exists with the specified name in the record, or the type of the field does not match."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetArrayOfNullableInt32.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetArrayOfNullableInt32.html",
    "title": "Method GetArrayOfNullableInt32 | Hazelcast .NET Documentation",
    "keywords": "Method GetArrayOfNullableInt32 GetArrayOfNullableInt32(string) Gets the value of a ArrayOfNullableInt32 field. Declaration int?[]? GetArrayOfNullableInt32(string fieldname) Parameters Type Name Description string fieldname The name of the field. Returns Type Description int?[] The value of the field. Exceptions Type Condition SerializationException No field exists with the specified name in the record, or the type of the field does not match."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetArrayOfNullableInt64.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetArrayOfNullableInt64.html",
    "title": "Method GetArrayOfNullableInt64 | Hazelcast .NET Documentation",
    "keywords": "Method GetArrayOfNullableInt64 GetArrayOfNullableInt64(string) Gets the value of a ArrayOfNullableInt64 field. Declaration long?[]? GetArrayOfNullableInt64(string fieldname) Parameters Type Name Description string fieldname The name of the field. Returns Type Description long?[] The value of the field. Exceptions Type Condition SerializationException No field exists with the specified name in the record, or the type of the field does not match."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetArrayOfNullableInt8.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetArrayOfNullableInt8.html",
    "title": "Method GetArrayOfNullableInt8 | Hazelcast .NET Documentation",
    "keywords": "Method GetArrayOfNullableInt8 GetArrayOfNullableInt8(string) Gets the value of a ArrayOfNullableInt8 field. Declaration sbyte?[]? GetArrayOfNullableInt8(string fieldname) Parameters Type Name Description string fieldname The name of the field. Returns Type Description sbyte?[] The value of the field. Exceptions Type Condition SerializationException No field exists with the specified name in the record, or the type of the field does not match."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetArrayOfString.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetArrayOfString.html",
    "title": "Method GetArrayOfString | Hazelcast .NET Documentation",
    "keywords": "Method GetArrayOfString GetArrayOfString(string) Gets the value of a ArrayOfString field. Declaration string?[]? GetArrayOfString(string fieldname) Parameters Type Name Description string fieldname The name of the field. Returns Type Description string[] The value of the field. Exceptions Type Condition SerializationException No field exists with the specified name in the record, or the type of the field does not match."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetArrayOfTime.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetArrayOfTime.html",
    "title": "Method GetArrayOfTime | Hazelcast .NET Documentation",
    "keywords": "Method GetArrayOfTime GetArrayOfTime(string) Gets the value of a ArrayOfTime field. Declaration HLocalTime?[]? GetArrayOfTime(string fieldname) Parameters Type Name Description string fieldname The name of the field. Returns Type Description HLocalTime?[] The value of the field. Exceptions Type Condition SerializationException No field exists with the specified name in the record, or the type of the field does not match."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetArrayOfTimeStamp.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetArrayOfTimeStamp.html",
    "title": "Method GetArrayOfTimeStamp | Hazelcast .NET Documentation",
    "keywords": "Method GetArrayOfTimeStamp GetArrayOfTimeStamp(string) Gets the value of a ArrayOfTimeStamp field. Declaration HLocalDateTime?[]? GetArrayOfTimeStamp(string fieldname) Parameters Type Name Description string fieldname The name of the field. Returns Type Description HLocalDateTime?[] The value of the field. Exceptions Type Condition SerializationException No field exists with the specified name in the record, or the type of the field does not match."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetArrayOfTimeStampWithTimeZone.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetArrayOfTimeStampWithTimeZone.html",
    "title": "Method GetArrayOfTimeStampWithTimeZone | Hazelcast .NET Documentation",
    "keywords": "Method GetArrayOfTimeStampWithTimeZone GetArrayOfTimeStampWithTimeZone(string) Gets the value of a ArrayOfTimeStampWithTimeZone field. Declaration HOffsetDateTime?[]? GetArrayOfTimeStampWithTimeZone(string fieldname) Parameters Type Name Description string fieldname The name of the field. Returns Type Description HOffsetDateTime?[] The value of the field. Exceptions Type Condition SerializationException No field exists with the specified name in the record, or the type of the field does not match."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetBoolean.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetBoolean.html",
    "title": "Method GetBoolean | Hazelcast .NET Documentation",
    "keywords": "Method GetBoolean GetBoolean(string) Gets the value of a Boolean field. Declaration bool GetBoolean(string fieldname) Parameters Type Name Description string fieldname The name of the field. Returns Type Description bool The value of the field. Exceptions Type Condition SerializationException No field exists with the specified name in the record, or the type of the field does not match."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetDate.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetDate.html",
    "title": "Method GetDate | Hazelcast .NET Documentation",
    "keywords": "Method GetDate GetDate(string) Gets the value of a Date field. Declaration HLocalDate? GetDate(string fieldname) Parameters Type Name Description string fieldname The name of the field. Returns Type Description HLocalDate? The value of the field. Exceptions Type Condition SerializationException No field exists with the specified name in the record, or the type of the field does not match."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetDecimal.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetDecimal.html",
    "title": "Method GetDecimal | Hazelcast .NET Documentation",
    "keywords": "Method GetDecimal GetDecimal(string) Gets the value of a Decimal field. Declaration HBigDecimal? GetDecimal(string fieldname) Parameters Type Name Description string fieldname The name of the field. Returns Type Description HBigDecimal? The value of the field. Exceptions Type Condition SerializationException No field exists with the specified name in the record, or the type of the field does not match."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetFieldKind.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetFieldKind.html",
    "title": "Method GetFieldKind | Hazelcast .NET Documentation",
    "keywords": "Method GetFieldKind GetFieldKind(string) Gets the FieldKind of the specified field, or NotAvailable if no field exists with the specified name. Declaration FieldKind GetFieldKind(string fieldname) Parameters Type Name Description string fieldname The name of the field. Returns Type Description FieldKind The FieldKind of the field, or NotAvailable if no field exists with the specified name."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetFloat32.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetFloat32.html",
    "title": "Method GetFloat32 | Hazelcast .NET Documentation",
    "keywords": "Method GetFloat32 GetFloat32(string) Gets the value of a Float32 field. Declaration float GetFloat32(string fieldname) Parameters Type Name Description string fieldname The name of the field. Returns Type Description float The value of the field. Exceptions Type Condition SerializationException No field exists with the specified name in the record, or the type of the field does not match."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetFloat64.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetFloat64.html",
    "title": "Method GetFloat64 | Hazelcast .NET Documentation",
    "keywords": "Method GetFloat64 GetFloat64(string) Gets the value of a Float64 field. Declaration double GetFloat64(string fieldname) Parameters Type Name Description string fieldname The name of the field. Returns Type Description double The value of the field. Exceptions Type Condition SerializationException No field exists with the specified name in the record, or the type of the field does not match."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetGenericRecord.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetGenericRecord.html",
    "title": "Method GetGenericRecord | Hazelcast .NET Documentation",
    "keywords": "Method GetGenericRecord GetGenericRecord(string) Gets the value of a IGenericRecord field. Declaration IGenericRecord? GetGenericRecord(string fieldname) Parameters Type Name Description string fieldname The name of the field. Returns Type Description IGenericRecord The value of the field. Exceptions Type Condition SerializationException No field exists with the specified name in the record, or the type of the field does not match."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetInt16.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetInt16.html",
    "title": "Method GetInt16 | Hazelcast .NET Documentation",
    "keywords": "Method GetInt16 GetInt16(string) Gets the value of a Int16 field. Declaration short GetInt16(string fieldname) Parameters Type Name Description string fieldname The name of the field. Returns Type Description short The value of the field. Exceptions Type Condition SerializationException No field exists with the specified name in the record, or the type of the field does not match."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetInt32.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetInt32.html",
    "title": "Method GetInt32 | Hazelcast .NET Documentation",
    "keywords": "Method GetInt32 GetInt32(string) Gets the value of a Int32 field. Declaration int GetInt32(string fieldname) Parameters Type Name Description string fieldname The name of the field. Returns Type Description int The value of the field. Exceptions Type Condition SerializationException No field exists with the specified name in the record, or the type of the field does not match."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetInt64.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetInt64.html",
    "title": "Method GetInt64 | Hazelcast .NET Documentation",
    "keywords": "Method GetInt64 GetInt64(string) Gets the value of a Int64 field. Declaration long GetInt64(string fieldname) Parameters Type Name Description string fieldname The name of the field. Returns Type Description long The value of the field. Exceptions Type Condition SerializationException No field exists with the specified name in the record, or the type of the field does not match."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetInt8.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetInt8.html",
    "title": "Method GetInt8 | Hazelcast .NET Documentation",
    "keywords": "Method GetInt8 GetInt8(string) Gets the value of a Int8 field. Declaration sbyte GetInt8(string fieldname) Parameters Type Name Description string fieldname The name of the field. Returns Type Description sbyte The value of the field. Exceptions Type Condition SerializationException No field exists with the specified name in the record, or the type of the field does not match."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetNullableBoolean.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetNullableBoolean.html",
    "title": "Method GetNullableBoolean | Hazelcast .NET Documentation",
    "keywords": "Method GetNullableBoolean GetNullableBoolean(string) Gets the value of a NullableBoolean field. Declaration bool? GetNullableBoolean(string fieldname) Parameters Type Name Description string fieldname The name of the field. Returns Type Description bool? The value of the field. Exceptions Type Condition SerializationException No field exists with the specified name in the record, or the type of the field does not match."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetNullableFloat32.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetNullableFloat32.html",
    "title": "Method GetNullableFloat32 | Hazelcast .NET Documentation",
    "keywords": "Method GetNullableFloat32 GetNullableFloat32(string) Gets the value of a NullableFloat32 field. Declaration float? GetNullableFloat32(string fieldname) Parameters Type Name Description string fieldname The name of the field. Returns Type Description float? The value of the field. Exceptions Type Condition SerializationException No field exists with the specified name in the record, or the type of the field does not match."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetNullableFloat64.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetNullableFloat64.html",
    "title": "Method GetNullableFloat64 | Hazelcast .NET Documentation",
    "keywords": "Method GetNullableFloat64 GetNullableFloat64(string) Gets the value of a NullableFloat64 field. Declaration double? GetNullableFloat64(string fieldname) Parameters Type Name Description string fieldname The name of the field. Returns Type Description double? The value of the field. Exceptions Type Condition SerializationException No field exists with the specified name in the record, or the type of the field does not match."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetNullableInt16.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetNullableInt16.html",
    "title": "Method GetNullableInt16 | Hazelcast .NET Documentation",
    "keywords": "Method GetNullableInt16 GetNullableInt16(string) Gets the value of a NullableInt16 field. Declaration short? GetNullableInt16(string fieldname) Parameters Type Name Description string fieldname The name of the field. Returns Type Description short? The value of the field. Exceptions Type Condition SerializationException No field exists with the specified name in the record, or the type of the field does not match."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetNullableInt32.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetNullableInt32.html",
    "title": "Method GetNullableInt32 | Hazelcast .NET Documentation",
    "keywords": "Method GetNullableInt32 GetNullableInt32(string) Gets the value of a NullableInt32 field. Declaration int? GetNullableInt32(string fieldname) Parameters Type Name Description string fieldname The name of the field. Returns Type Description int? The value of the field. Exceptions Type Condition SerializationException No field exists with the specified name in the record, or the type of the field does not match."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetNullableInt64.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetNullableInt64.html",
    "title": "Method GetNullableInt64 | Hazelcast .NET Documentation",
    "keywords": "Method GetNullableInt64 GetNullableInt64(string) Gets the value of a NullableInt64 field. Declaration long? GetNullableInt64(string fieldname) Parameters Type Name Description string fieldname The name of the field. Returns Type Description long? The value of the field. Exceptions Type Condition SerializationException No field exists with the specified name in the record, or the type of the field does not match."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetNullableInt8.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetNullableInt8.html",
    "title": "Method GetNullableInt8 | Hazelcast .NET Documentation",
    "keywords": "Method GetNullableInt8 GetNullableInt8(string) Gets the value of a NullableInt8 field. Declaration sbyte? GetNullableInt8(string fieldname) Parameters Type Name Description string fieldname The name of the field. Returns Type Description sbyte? The value of the field. Exceptions Type Condition SerializationException No field exists with the specified name in the record, or the type of the field does not match."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetString.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetString.html",
    "title": "Method GetString | Hazelcast .NET Documentation",
    "keywords": "Method GetString GetString(string) Gets the value of a String field. Declaration string? GetString(string fieldname) Parameters Type Name Description string fieldname The name of the field. Returns Type Description string The value of the field. Exceptions Type Condition SerializationException No field exists with the specified name in the record, or the type of the field does not match."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetTime.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetTime.html",
    "title": "Method GetTime | Hazelcast .NET Documentation",
    "keywords": "Method GetTime GetTime(string) Gets the value of a Time field. Declaration HLocalTime? GetTime(string fieldname) Parameters Type Name Description string fieldname The name of the field. Returns Type Description HLocalTime? The value of the field. Exceptions Type Condition SerializationException No field exists with the specified name in the record, or the type of the field does not match."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetTimeStamp.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetTimeStamp.html",
    "title": "Method GetTimeStamp | Hazelcast .NET Documentation",
    "keywords": "Method GetTimeStamp GetTimeStamp(string) Gets the value of a TimeStamp field. Declaration HLocalDateTime? GetTimeStamp(string fieldname) Parameters Type Name Description string fieldname The name of the field. Returns Type Description HLocalDateTime? The value of the field. Exceptions Type Condition SerializationException No field exists with the specified name in the record, or the type of the field does not match."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetTimeStampWithTimeZone.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecord.GetTimeStampWithTimeZone.html",
    "title": "Method GetTimeStampWithTimeZone | Hazelcast .NET Documentation",
    "keywords": "Method GetTimeStampWithTimeZone GetTimeStampWithTimeZone(string) Gets the value of a TimeStampWithTimeZone field. Declaration HOffsetDateTime? GetTimeStampWithTimeZone(string fieldname) Parameters Type Name Description string fieldname The name of the field. Returns Type Description HOffsetDateTime? The value of the field. Exceptions Type Condition SerializationException No field exists with the specified name in the record, or the type of the field does not match."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecord.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecord.html",
    "title": "Interface IGenericRecord | Hazelcast .NET Documentation",
    "keywords": "Interface IGenericRecord Defines a generic record. Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Syntax public interface IGenericRecord Properties Name Description FieldNames Gets the collection of field names for this record. Methods Name Description GetArrayOfBoolean(string) Gets the value of a ArrayOfBoolean field. GetArrayOfDate(string) Gets the value of a ArrayOfDate field. GetArrayOfDecimal(string) Gets the value of a ArrayOfDecimal field. GetArrayOfFloat32(string) Gets the value of a ArrayOfFloat32 field. GetArrayOfFloat64(string) Gets the value of a ArrayOfFloat64 field. GetArrayOfGenericRecord(string) Gets the value of an array of IGenericRecord field. GetArrayOfInt16(string) Gets the value of a ArrayOfInt16 field. GetArrayOfInt32(string) Gets the value of a ArrayOfInt32 field. GetArrayOfInt64(string) Gets the value of a ArrayOfInt64 field. GetArrayOfInt8(string) Gets the value of a ArrayOfInt8 field. GetArrayOfNullableBoolean(string) Gets the value of a ArrayOfNullableBoolean field. GetArrayOfNullableFloat32(string) Gets the value of a ArrayOfNullableFloat32 field. GetArrayOfNullableFloat64(string) Gets the value of a ArrayOfNullableFloat64 field. GetArrayOfNullableInt16(string) Gets the value of a ArrayOfNullableInt16 field. GetArrayOfNullableInt32(string) Gets the value of a ArrayOfNullableInt32 field. GetArrayOfNullableInt64(string) Gets the value of a ArrayOfNullableInt64 field. GetArrayOfNullableInt8(string) Gets the value of a ArrayOfNullableInt8 field. GetArrayOfString(string) Gets the value of a ArrayOfString field. GetArrayOfTime(string) Gets the value of a ArrayOfTime field. GetArrayOfTimeStamp(string) Gets the value of a ArrayOfTimeStamp field. GetArrayOfTimeStampWithTimeZone(string) Gets the value of a ArrayOfTimeStampWithTimeZone field. GetBoolean(string) Gets the value of a Boolean field. GetDate(string) Gets the value of a Date field. GetDecimal(string) Gets the value of a Decimal field. GetFieldKind(string) Gets the FieldKind of the specified field, or NotAvailable if no field exists with the specified name. GetFloat32(string) Gets the value of a Float32 field. GetFloat64(string) Gets the value of a Float64 field. GetGenericRecord(string) Gets the value of a IGenericRecord field. GetInt16(string) Gets the value of a Int16 field. GetInt32(string) Gets the value of a Int32 field. GetInt64(string) Gets the value of a Int64 field. GetInt8(string) Gets the value of a Int8 field. GetNullableBoolean(string) Gets the value of a NullableBoolean field. GetNullableFloat32(string) Gets the value of a NullableFloat32 field. GetNullableFloat64(string) Gets the value of a NullableFloat64 field. GetNullableInt16(string) Gets the value of a NullableInt16 field. GetNullableInt32(string) Gets the value of a NullableInt32 field. GetNullableInt64(string) Gets the value of a NullableInt64 field. GetNullableInt8(string) Gets the value of a NullableInt8 field. GetString(string) Gets the value of a String field. GetTime(string) Gets the value of a Time field. GetTimeStamp(string) Gets the value of a TimeStamp field. GetTimeStampWithTimeZone(string) Gets the value of a TimeStampWithTimeZone field. NewBuilder() Creates a new GenericRecordBuilder for this record's schema, with all the fields being non-initialized. NewBuilderWithClone() Creates a new GenericRecordBuilder for this record's schema, with all the fields copied from this record."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecord.NewBuilder.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecord.NewBuilder.html",
    "title": "Method NewBuilder | Hazelcast .NET Documentation",
    "keywords": "Method NewBuilder NewBuilder() Creates a new GenericRecordBuilder for this record's schema, with all the fields being non-initialized. Declaration IGenericRecordBuilder NewBuilder() Returns Type Description IGenericRecordBuilder A new GenericRecordBuilder. Remarks This method is a convenience method to get a builder without creating the schema for the type, but by re-using the schema of this record. See Compact(string) for creating a generic record in compact form, with a new schema. Examples var rec2 = rec1.NewBuilder() .SetBoolean(\"field-bool\", true) .SetInt32(\"field-int\", 1234) .Build();"
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecord.NewBuilderWithClone.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecord.NewBuilderWithClone.html",
    "title": "Method NewBuilderWithClone | Hazelcast .NET Documentation",
    "keywords": "Method NewBuilderWithClone NewBuilderWithClone() Creates a new GenericRecordBuilder for this record's schema, with all the fields copied from this record. Declaration IGenericRecordBuilder NewBuilderWithClone() Returns Type Description IGenericRecordBuilder A new GenericRecordBuilder. Remarks This method produces an exact copy of this generic record, which can then be updated. Examples // this requires you to specify all properties var rec2 = rec1.NewBuilder() .SetBoolean(\"field-bool\", true) .SetInt32(\"field-int\", 1234) .Build(); // this allows you to only specify the modified properties var rec3 = rec1.NewBuilderWithClone() .SetInt32(\"field-int\", 1234) .Build();"
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.Build.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.Build.html",
    "title": "Method Build | Hazelcast .NET Documentation",
    "keywords": "Method Build Build() Build the IGenericRecord. Declaration IGenericRecord Build() Returns Type Description IGenericRecord The IGenericRecord. Remarks In case the record was created with a schema, then all fields declared in the schema must have been assigned a value before the record can be built. Trying to build the record before all fields have been assigned a value triggers a SerializationException."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.html",
    "title": "Interface IGenericRecordBuilder | Hazelcast .NET Documentation",
    "keywords": "Interface IGenericRecordBuilder Builds an IGenericRecord. Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Syntax public interface IGenericRecordBuilder Methods Name Description Build() Build the IGenericRecord. SetArrayOfBoolean(string, bool[]?) Adds a ArrayOfBoolean field to the record. SetArrayOfDate(string, HLocalDate?[]?) Adds a ArrayOfDate field to the record. SetArrayOfDecimal(string, HBigDecimal?[]?) Adds a ArrayOfDecimal field to the record. SetArrayOfFloat32(string, float[]?) Adds a ArrayOfFloat32 field to the record. SetArrayOfFloat64(string, double[]?) Adds a ArrayOfFloat64 field to the record. SetArrayOfGenericRecord(string, IGenericRecord?[]?) Adds an array of IGenericRecord objects field to the record. SetArrayOfInt16(string, short[]?) Adds a ArrayOfInt16 field to the record. SetArrayOfInt32(string, int[]?) Adds a ArrayOfInt32 field to the record. SetArrayOfInt64(string, long[]?) Adds a ArrayOfInt64 field to the record. SetArrayOfInt8(string, sbyte[]?) Adds a ArrayOfInt8 field to the record. SetArrayOfNullableBoolean(string, bool?[]?) Adds a ArrayOfNullableBoolean field to the record. SetArrayOfNullableFloat32(string, float?[]?) Adds a ArrayOfNullableFloat32 field to the record. SetArrayOfNullableFloat64(string, double?[]?) Adds a ArrayOfNullableFloat64 field to the record. SetArrayOfNullableInt16(string, short?[]?) Adds a ArrayOfNullableInt16 field to the record. SetArrayOfNullableInt32(string, int?[]?) Adds a ArrayOfNullableInt32 field to the record. SetArrayOfNullableInt64(string, long?[]?) Adds a ArrayOfNullableInt64 field to the record. SetArrayOfNullableInt8(string, sbyte?[]?) Adds a ArrayOfNullableInt8 field to the record. SetArrayOfString(string, string?[]?) Adds a ArrayOfString field to the record. SetArrayOfTime(string, HLocalTime?[]?) Adds a ArrayOfTime field to the record. SetArrayOfTimeStamp(string, HLocalDateTime?[]?) Adds a ArrayOfTimeStamp field to the record. SetArrayOfTimeStampWithTimeZone(string, HOffsetDateTime?[]?) Adds a ArrayOfTimeStampWithTimeZone field to the record. SetBoolean(string, bool) Adds a Boolean field to the record. SetDate(string, HLocalDate?) Adds a Date field to the record. SetDecimal(string, HBigDecimal?) Adds a Decimal field to the record. SetFloat32(string, float) Adds a Float32 field to the record. SetFloat64(string, double) Adds a Float64 field to the record. SetGenericRecord(string, IGenericRecord?) Adds a IGenericRecord object field to the record. SetInt16(string, short) Adds a Int16 field to the record. SetInt32(string, int) Adds a Int32 field to the record. SetInt64(string, long) Adds a Int64 field to the record. SetInt8(string, sbyte) Adds a Int8 field to the record. SetNullableBoolean(string, bool?) Adds a NullableBoolean field to the record. SetNullableFloat32(string, float?) Adds a NullableFloat32 field to the record. SetNullableFloat64(string, double?) Adds a NullableFloat64 field to the record. SetNullableInt16(string, short?) Adds a NullableInt16 field to the record. SetNullableInt32(string, int?) Adds a NullableInt32 field to the record. SetNullableInt64(string, long?) Adds a NullableInt64 field to the record. SetNullableInt8(string, sbyte?) Adds a NullableInt8 field to the record. SetString(string, string?) Adds a String field to the record. SetTime(string, HLocalTime?) Adds a Time field to the record. SetTimeStamp(string, HLocalDateTime?) Adds a TimeStamp field to the record. SetTimeStampWithTimeZone(string, HOffsetDateTime?) Adds a TimeStampWithTimeZone field to the record."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetArrayOfBoolean.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetArrayOfBoolean.html",
    "title": "Method SetArrayOfBoolean | Hazelcast .NET Documentation",
    "keywords": "Method SetArrayOfBoolean SetArrayOfBoolean(string, bool[]?) Adds a ArrayOfBoolean field to the record. Declaration IGenericRecordBuilder SetArrayOfBoolean(string fieldname, bool[]? value) Parameters Type Name Description string fieldname The name of the field. bool[] value The value of the field. Returns Type Description IGenericRecordBuilder This IGenericRecordBuilder. Remarks It is legal to set the field again only when the builder is created with NewBuilderWithClone(); it is otherwise illegal to set to the same field twice. Exceptions Type Condition SerializationException The build has been initialized with a schema, and fieldname is not the name of field of that schema, or the type of the field does not match the specified value, or the field value is set multiple times."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetArrayOfDate.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetArrayOfDate.html",
    "title": "Method SetArrayOfDate | Hazelcast .NET Documentation",
    "keywords": "Method SetArrayOfDate SetArrayOfDate(string, HLocalDate?[]?) Adds a ArrayOfDate field to the record. Declaration IGenericRecordBuilder SetArrayOfDate(string fieldname, HLocalDate?[]? value) Parameters Type Name Description string fieldname The name of the field. HLocalDate?[] value The value of the field. Returns Type Description IGenericRecordBuilder This IGenericRecordBuilder. Remarks It is legal to set the field again only when the builder is created with NewBuilderWithClone(); it is otherwise illegal to set to the same field twice. Exceptions Type Condition SerializationException The build has been initialized with a schema, and fieldname is not the name of field of that schema, or the type of the field does not match the specified value, or the field value is set multiple times."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetArrayOfDecimal.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetArrayOfDecimal.html",
    "title": "Method SetArrayOfDecimal | Hazelcast .NET Documentation",
    "keywords": "Method SetArrayOfDecimal SetArrayOfDecimal(string, HBigDecimal?[]?) Adds a ArrayOfDecimal field to the record. Declaration IGenericRecordBuilder SetArrayOfDecimal(string fieldname, HBigDecimal?[]? value) Parameters Type Name Description string fieldname The name of the field. HBigDecimal?[] value The value of the field. Returns Type Description IGenericRecordBuilder This IGenericRecordBuilder. Remarks It is legal to set the field again only when the builder is created with NewBuilderWithClone(); it is otherwise illegal to set to the same field twice. Exceptions Type Condition SerializationException The build has been initialized with a schema, and fieldname is not the name of field of that schema, or the type of the field does not match the specified value, or the field value is set multiple times."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetArrayOfFloat32.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetArrayOfFloat32.html",
    "title": "Method SetArrayOfFloat32 | Hazelcast .NET Documentation",
    "keywords": "Method SetArrayOfFloat32 SetArrayOfFloat32(string, float[]?) Adds a ArrayOfFloat32 field to the record. Declaration IGenericRecordBuilder SetArrayOfFloat32(string fieldname, float[]? value) Parameters Type Name Description string fieldname The name of the field. float[] value The value of the field. Returns Type Description IGenericRecordBuilder This IGenericRecordBuilder. Remarks It is legal to set the field again only when the builder is created with NewBuilderWithClone(); it is otherwise illegal to set to the same field twice. Exceptions Type Condition SerializationException The build has been initialized with a schema, and fieldname is not the name of field of that schema, or the type of the field does not match the specified value, or the field value is set multiple times."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetArrayOfFloat64.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetArrayOfFloat64.html",
    "title": "Method SetArrayOfFloat64 | Hazelcast .NET Documentation",
    "keywords": "Method SetArrayOfFloat64 SetArrayOfFloat64(string, double[]?) Adds a ArrayOfFloat64 field to the record. Declaration IGenericRecordBuilder SetArrayOfFloat64(string fieldname, double[]? value) Parameters Type Name Description string fieldname The name of the field. double[] value The value of the field. Returns Type Description IGenericRecordBuilder This IGenericRecordBuilder. Remarks It is legal to set the field again only when the builder is created with NewBuilderWithClone(); it is otherwise illegal to set to the same field twice. Exceptions Type Condition SerializationException The build has been initialized with a schema, and fieldname is not the name of field of that schema, or the type of the field does not match the specified value, or the field value is set multiple times."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetArrayOfGenericRecord.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetArrayOfGenericRecord.html",
    "title": "Method SetArrayOfGenericRecord | Hazelcast .NET Documentation",
    "keywords": "Method SetArrayOfGenericRecord SetArrayOfGenericRecord(string, IGenericRecord?[]?) Adds an array of IGenericRecord objects field to the record. Declaration IGenericRecordBuilder SetArrayOfGenericRecord(string fieldname, IGenericRecord?[]? value) Parameters Type Name Description string fieldname The name of the field. IGenericRecord[] value The value of the field. Returns Type Description IGenericRecordBuilder This IGenericRecordBuilder. Remarks It is only legal to set a generic record object produced by the same type of builder. For instance, a compact generic record can only accept a compact generic record. Trying to set a different kind of generic record results in a exception. It is legal to set the field again only when the builder is created with NewBuilderWithClone(); it is otherwise illegal to set to the same field twice. This method allows nested structures; subclasses should also be created as IGenericRecord of the same nature of the nesting one. I.e. compact records can only nest compact records. Exceptions Type Condition SerializationException The build has been initialized with a schema, and fieldname is not the name of field of that schema, or the type of the field does not match the specified value, or the field value is set multiple times."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetArrayOfInt16.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetArrayOfInt16.html",
    "title": "Method SetArrayOfInt16 | Hazelcast .NET Documentation",
    "keywords": "Method SetArrayOfInt16 SetArrayOfInt16(string, short[]?) Adds a ArrayOfInt16 field to the record. Declaration IGenericRecordBuilder SetArrayOfInt16(string fieldname, short[]? value) Parameters Type Name Description string fieldname The name of the field. short[] value The value of the field. Returns Type Description IGenericRecordBuilder This IGenericRecordBuilder. Remarks It is legal to set the field again only when the builder is created with NewBuilderWithClone(); it is otherwise illegal to set to the same field twice. Exceptions Type Condition SerializationException The build has been initialized with a schema, and fieldname is not the name of field of that schema, or the type of the field does not match the specified value, or the field value is set multiple times."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetArrayOfInt32.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetArrayOfInt32.html",
    "title": "Method SetArrayOfInt32 | Hazelcast .NET Documentation",
    "keywords": "Method SetArrayOfInt32 SetArrayOfInt32(string, int[]?) Adds a ArrayOfInt32 field to the record. Declaration IGenericRecordBuilder SetArrayOfInt32(string fieldname, int[]? value) Parameters Type Name Description string fieldname The name of the field. int[] value The value of the field. Returns Type Description IGenericRecordBuilder This IGenericRecordBuilder. Remarks It is legal to set the field again only when the builder is created with NewBuilderWithClone(); it is otherwise illegal to set to the same field twice. Exceptions Type Condition SerializationException The build has been initialized with a schema, and fieldname is not the name of field of that schema, or the type of the field does not match the specified value, or the field value is set multiple times."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetArrayOfInt64.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetArrayOfInt64.html",
    "title": "Method SetArrayOfInt64 | Hazelcast .NET Documentation",
    "keywords": "Method SetArrayOfInt64 SetArrayOfInt64(string, long[]?) Adds a ArrayOfInt64 field to the record. Declaration IGenericRecordBuilder SetArrayOfInt64(string fieldname, long[]? value) Parameters Type Name Description string fieldname The name of the field. long[] value The value of the field. Returns Type Description IGenericRecordBuilder This IGenericRecordBuilder. Remarks It is legal to set the field again only when the builder is created with NewBuilderWithClone(); it is otherwise illegal to set to the same field twice. Exceptions Type Condition SerializationException The build has been initialized with a schema, and fieldname is not the name of field of that schema, or the type of the field does not match the specified value, or the field value is set multiple times."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetArrayOfInt8.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetArrayOfInt8.html",
    "title": "Method SetArrayOfInt8 | Hazelcast .NET Documentation",
    "keywords": "Method SetArrayOfInt8 SetArrayOfInt8(string, sbyte[]?) Adds a ArrayOfInt8 field to the record. Declaration IGenericRecordBuilder SetArrayOfInt8(string fieldname, sbyte[]? value) Parameters Type Name Description string fieldname The name of the field. sbyte[] value The value of the field. Returns Type Description IGenericRecordBuilder This IGenericRecordBuilder. Remarks It is legal to set the field again only when the builder is created with NewBuilderWithClone(); it is otherwise illegal to set to the same field twice. Exceptions Type Condition SerializationException The build has been initialized with a schema, and fieldname is not the name of field of that schema, or the type of the field does not match the specified value, or the field value is set multiple times."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetArrayOfNullableBoolean.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetArrayOfNullableBoolean.html",
    "title": "Method SetArrayOfNullableBoolean | Hazelcast .NET Documentation",
    "keywords": "Method SetArrayOfNullableBoolean SetArrayOfNullableBoolean(string, bool?[]?) Adds a ArrayOfNullableBoolean field to the record. Declaration IGenericRecordBuilder SetArrayOfNullableBoolean(string fieldname, bool?[]? value) Parameters Type Name Description string fieldname The name of the field. bool?[] value The value of the field. Returns Type Description IGenericRecordBuilder This IGenericRecordBuilder. Remarks It is legal to set the field again only when the builder is created with NewBuilderWithClone(); it is otherwise illegal to set to the same field twice. Exceptions Type Condition SerializationException The build has been initialized with a schema, and fieldname is not the name of field of that schema, or the type of the field does not match the specified value, or the field value is set multiple times."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetArrayOfNullableFloat32.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetArrayOfNullableFloat32.html",
    "title": "Method SetArrayOfNullableFloat32 | Hazelcast .NET Documentation",
    "keywords": "Method SetArrayOfNullableFloat32 SetArrayOfNullableFloat32(string, float?[]?) Adds a ArrayOfNullableFloat32 field to the record. Declaration IGenericRecordBuilder SetArrayOfNullableFloat32(string fieldname, float?[]? value) Parameters Type Name Description string fieldname The name of the field. float?[] value The value of the field. Returns Type Description IGenericRecordBuilder This IGenericRecordBuilder. Remarks It is legal to set the field again only when the builder is created with NewBuilderWithClone(); it is otherwise illegal to set to the same field twice. Exceptions Type Condition SerializationException The build has been initialized with a schema, and fieldname is not the name of field of that schema, or the type of the field does not match the specified value, or the field value is set multiple times."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetArrayOfNullableFloat64.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetArrayOfNullableFloat64.html",
    "title": "Method SetArrayOfNullableFloat64 | Hazelcast .NET Documentation",
    "keywords": "Method SetArrayOfNullableFloat64 SetArrayOfNullableFloat64(string, double?[]?) Adds a ArrayOfNullableFloat64 field to the record. Declaration IGenericRecordBuilder SetArrayOfNullableFloat64(string fieldname, double?[]? value) Parameters Type Name Description string fieldname The name of the field. double?[] value The value of the field. Returns Type Description IGenericRecordBuilder This IGenericRecordBuilder. Remarks It is legal to set the field again only when the builder is created with NewBuilderWithClone(); it is otherwise illegal to set to the same field twice. Exceptions Type Condition SerializationException The build has been initialized with a schema, and fieldname is not the name of field of that schema, or the type of the field does not match the specified value, or the field value is set multiple times."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetArrayOfNullableInt16.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetArrayOfNullableInt16.html",
    "title": "Method SetArrayOfNullableInt16 | Hazelcast .NET Documentation",
    "keywords": "Method SetArrayOfNullableInt16 SetArrayOfNullableInt16(string, short?[]?) Adds a ArrayOfNullableInt16 field to the record. Declaration IGenericRecordBuilder SetArrayOfNullableInt16(string fieldname, short?[]? value) Parameters Type Name Description string fieldname The name of the field. short?[] value The value of the field. Returns Type Description IGenericRecordBuilder This IGenericRecordBuilder. Remarks It is legal to set the field again only when the builder is created with NewBuilderWithClone(); it is otherwise illegal to set to the same field twice. Exceptions Type Condition SerializationException The build has been initialized with a schema, and fieldname is not the name of field of that schema, or the type of the field does not match the specified value, or the field value is set multiple times."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetArrayOfNullableInt32.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetArrayOfNullableInt32.html",
    "title": "Method SetArrayOfNullableInt32 | Hazelcast .NET Documentation",
    "keywords": "Method SetArrayOfNullableInt32 SetArrayOfNullableInt32(string, int?[]?) Adds a ArrayOfNullableInt32 field to the record. Declaration IGenericRecordBuilder SetArrayOfNullableInt32(string fieldname, int?[]? value) Parameters Type Name Description string fieldname The name of the field. int?[] value The value of the field. Returns Type Description IGenericRecordBuilder This IGenericRecordBuilder. Remarks It is legal to set the field again only when the builder is created with NewBuilderWithClone(); it is otherwise illegal to set to the same field twice. Exceptions Type Condition SerializationException The build has been initialized with a schema, and fieldname is not the name of field of that schema, or the type of the field does not match the specified value, or the field value is set multiple times."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetArrayOfNullableInt64.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetArrayOfNullableInt64.html",
    "title": "Method SetArrayOfNullableInt64 | Hazelcast .NET Documentation",
    "keywords": "Method SetArrayOfNullableInt64 SetArrayOfNullableInt64(string, long?[]?) Adds a ArrayOfNullableInt64 field to the record. Declaration IGenericRecordBuilder SetArrayOfNullableInt64(string fieldname, long?[]? value) Parameters Type Name Description string fieldname The name of the field. long?[] value The value of the field. Returns Type Description IGenericRecordBuilder This IGenericRecordBuilder. Remarks It is legal to set the field again only when the builder is created with NewBuilderWithClone(); it is otherwise illegal to set to the same field twice. Exceptions Type Condition SerializationException The build has been initialized with a schema, and fieldname is not the name of field of that schema, or the type of the field does not match the specified value, or the field value is set multiple times."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetArrayOfNullableInt8.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetArrayOfNullableInt8.html",
    "title": "Method SetArrayOfNullableInt8 | Hazelcast .NET Documentation",
    "keywords": "Method SetArrayOfNullableInt8 SetArrayOfNullableInt8(string, sbyte?[]?) Adds a ArrayOfNullableInt8 field to the record. Declaration IGenericRecordBuilder SetArrayOfNullableInt8(string fieldname, sbyte?[]? value) Parameters Type Name Description string fieldname The name of the field. sbyte?[] value The value of the field. Returns Type Description IGenericRecordBuilder This IGenericRecordBuilder. Remarks It is legal to set the field again only when the builder is created with NewBuilderWithClone(); it is otherwise illegal to set to the same field twice. Exceptions Type Condition SerializationException The build has been initialized with a schema, and fieldname is not the name of field of that schema, or the type of the field does not match the specified value, or the field value is set multiple times."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetArrayOfString.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetArrayOfString.html",
    "title": "Method SetArrayOfString | Hazelcast .NET Documentation",
    "keywords": "Method SetArrayOfString SetArrayOfString(string, string?[]?) Adds a ArrayOfString field to the record. Declaration IGenericRecordBuilder SetArrayOfString(string fieldname, string?[]? value) Parameters Type Name Description string fieldname The name of the field. string[] value The value of the field. Returns Type Description IGenericRecordBuilder This IGenericRecordBuilder. Remarks It is legal to set the field again only when the builder is created with NewBuilderWithClone(); it is otherwise illegal to set to the same field twice. Exceptions Type Condition SerializationException The build has been initialized with a schema, and fieldname is not the name of field of that schema, or the type of the field does not match the specified value, or the field value is set multiple times."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetArrayOfTime.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetArrayOfTime.html",
    "title": "Method SetArrayOfTime | Hazelcast .NET Documentation",
    "keywords": "Method SetArrayOfTime SetArrayOfTime(string, HLocalTime?[]?) Adds a ArrayOfTime field to the record. Declaration IGenericRecordBuilder SetArrayOfTime(string fieldname, HLocalTime?[]? value) Parameters Type Name Description string fieldname The name of the field. HLocalTime?[] value The value of the field. Returns Type Description IGenericRecordBuilder This IGenericRecordBuilder. Remarks It is legal to set the field again only when the builder is created with NewBuilderWithClone(); it is otherwise illegal to set to the same field twice. Exceptions Type Condition SerializationException The build has been initialized with a schema, and fieldname is not the name of field of that schema, or the type of the field does not match the specified value, or the field value is set multiple times."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetArrayOfTimeStamp.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetArrayOfTimeStamp.html",
    "title": "Method SetArrayOfTimeStamp | Hazelcast .NET Documentation",
    "keywords": "Method SetArrayOfTimeStamp SetArrayOfTimeStamp(string, HLocalDateTime?[]?) Adds a ArrayOfTimeStamp field to the record. Declaration IGenericRecordBuilder SetArrayOfTimeStamp(string fieldname, HLocalDateTime?[]? value) Parameters Type Name Description string fieldname The name of the field. HLocalDateTime?[] value The value of the field. Returns Type Description IGenericRecordBuilder This IGenericRecordBuilder. Remarks It is legal to set the field again only when the builder is created with NewBuilderWithClone(); it is otherwise illegal to set to the same field twice. Exceptions Type Condition SerializationException The build has been initialized with a schema, and fieldname is not the name of field of that schema, or the type of the field does not match the specified value, or the field value is set multiple times."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetArrayOfTimeStampWithTimeZone.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetArrayOfTimeStampWithTimeZone.html",
    "title": "Method SetArrayOfTimeStampWithTimeZone | Hazelcast .NET Documentation",
    "keywords": "Method SetArrayOfTimeStampWithTimeZone SetArrayOfTimeStampWithTimeZone(string, HOffsetDateTime?[]?) Adds a ArrayOfTimeStampWithTimeZone field to the record. Declaration IGenericRecordBuilder SetArrayOfTimeStampWithTimeZone(string fieldname, HOffsetDateTime?[]? value) Parameters Type Name Description string fieldname The name of the field. HOffsetDateTime?[] value The value of the field. Returns Type Description IGenericRecordBuilder This IGenericRecordBuilder. Remarks It is legal to set the field again only when the builder is created with NewBuilderWithClone(); it is otherwise illegal to set to the same field twice. Exceptions Type Condition SerializationException The build has been initialized with a schema, and fieldname is not the name of field of that schema, or the type of the field does not match the specified value, or the field value is set multiple times."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetBoolean.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetBoolean.html",
    "title": "Method SetBoolean | Hazelcast .NET Documentation",
    "keywords": "Method SetBoolean SetBoolean(string, bool) Adds a Boolean field to the record. Declaration IGenericRecordBuilder SetBoolean(string fieldname, bool value) Parameters Type Name Description string fieldname The name of the field. bool value The value of the field. Returns Type Description IGenericRecordBuilder This IGenericRecordBuilder. Remarks It is legal to set the field again only when the builder is created with NewBuilderWithClone(); it is otherwise illegal to set to the same field twice. Exceptions Type Condition SerializationException The build has been initialized with a schema, and fieldname is not the name of field of that schema, or the type of the field does not match the specified value, or the field value is set multiple times."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetDate.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetDate.html",
    "title": "Method SetDate | Hazelcast .NET Documentation",
    "keywords": "Method SetDate SetDate(string, HLocalDate?) Adds a Date field to the record. Declaration IGenericRecordBuilder SetDate(string fieldname, HLocalDate? value) Parameters Type Name Description string fieldname The name of the field. HLocalDate? value The value of the field. Returns Type Description IGenericRecordBuilder This IGenericRecordBuilder. Remarks It is legal to set the field again only when the builder is created with NewBuilderWithClone(); it is otherwise illegal to set to the same field twice. Exceptions Type Condition SerializationException The build has been initialized with a schema, and fieldname is not the name of field of that schema, or the type of the field does not match the specified value, or the field value is set multiple times."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetDecimal.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetDecimal.html",
    "title": "Method SetDecimal | Hazelcast .NET Documentation",
    "keywords": "Method SetDecimal SetDecimal(string, HBigDecimal?) Adds a Decimal field to the record. Declaration IGenericRecordBuilder SetDecimal(string fieldname, HBigDecimal? value) Parameters Type Name Description string fieldname The name of the field. HBigDecimal? value The value of the field. Returns Type Description IGenericRecordBuilder This IGenericRecordBuilder. Remarks It is legal to set the field again only when the builder is created with NewBuilderWithClone(); it is otherwise illegal to set to the same field twice. Exceptions Type Condition SerializationException The build has been initialized with a schema, and fieldname is not the name of field of that schema, or the type of the field does not match the specified value, or the field value is set multiple times."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetFloat32.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetFloat32.html",
    "title": "Method SetFloat32 | Hazelcast .NET Documentation",
    "keywords": "Method SetFloat32 SetFloat32(string, float) Adds a Float32 field to the record. Declaration IGenericRecordBuilder SetFloat32(string fieldname, float value) Parameters Type Name Description string fieldname The name of the field. float value The value of the field. Returns Type Description IGenericRecordBuilder This IGenericRecordBuilder. Remarks It is legal to set the field again only when the builder is created with NewBuilderWithClone(); it is otherwise illegal to set to the same field twice. Exceptions Type Condition SerializationException The build has been initialized with a schema, and fieldname is not the name of field of that schema, or the type of the field does not match the specified value, or the field value is set multiple times."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetFloat64.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetFloat64.html",
    "title": "Method SetFloat64 | Hazelcast .NET Documentation",
    "keywords": "Method SetFloat64 SetFloat64(string, double) Adds a Float64 field to the record. Declaration IGenericRecordBuilder SetFloat64(string fieldname, double value) Parameters Type Name Description string fieldname The name of the field. double value The value of the field. Returns Type Description IGenericRecordBuilder This IGenericRecordBuilder. Remarks It is legal to set the field again only when the builder is created with NewBuilderWithClone(); it is otherwise illegal to set to the same field twice. Exceptions Type Condition SerializationException The build has been initialized with a schema, and fieldname is not the name of field of that schema, or the type of the field does not match the specified value, or the field value is set multiple times."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetGenericRecord.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetGenericRecord.html",
    "title": "Method SetGenericRecord | Hazelcast .NET Documentation",
    "keywords": "Method SetGenericRecord SetGenericRecord(string, IGenericRecord?) Adds a IGenericRecord object field to the record. Declaration IGenericRecordBuilder SetGenericRecord(string fieldname, IGenericRecord? value) Parameters Type Name Description string fieldname The name of the field. IGenericRecord value The value of the field. Returns Type Description IGenericRecordBuilder This IGenericRecordBuilder. Remarks It is only legal to set a generic record object produced by the same type of builder. For instance, a compact generic record can only accept a compact generic record. Trying to set a different kind of generic record results in a exception. It is legal to set the field again only when the builder is created with NewBuilderWithClone(); it is otherwise illegal to set to the same field twice. This method allows nested structures; subclasses should also be created as IGenericRecord of the same nature of the nesting one. I.e. compact records can only nest compact records. Exceptions Type Condition SerializationException The build has been initialized with a schema, and fieldname is not the name of field of that schema, or the type of the field does not match the specified value, or the field value is set multiple times."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetInt16.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetInt16.html",
    "title": "Method SetInt16 | Hazelcast .NET Documentation",
    "keywords": "Method SetInt16 SetInt16(string, short) Adds a Int16 field to the record. Declaration IGenericRecordBuilder SetInt16(string fieldname, short value) Parameters Type Name Description string fieldname The name of the field. short value The value of the field. Returns Type Description IGenericRecordBuilder This IGenericRecordBuilder. Remarks It is legal to set the field again only when the builder is created with NewBuilderWithClone(); it is otherwise illegal to set to the same field twice. Exceptions Type Condition SerializationException The build has been initialized with a schema, and fieldname is not the name of field of that schema, or the type of the field does not match the specified value, or the field value is set multiple times."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetInt32.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetInt32.html",
    "title": "Method SetInt32 | Hazelcast .NET Documentation",
    "keywords": "Method SetInt32 SetInt32(string, int) Adds a Int32 field to the record. Declaration IGenericRecordBuilder SetInt32(string fieldname, int value) Parameters Type Name Description string fieldname The name of the field. int value The value of the field. Returns Type Description IGenericRecordBuilder This IGenericRecordBuilder. Remarks It is legal to set the field again only when the builder is created with NewBuilderWithClone(); it is otherwise illegal to set to the same field twice. Exceptions Type Condition SerializationException The build has been initialized with a schema, and fieldname is not the name of field of that schema, or the type of the field does not match the specified value, or the field value is set multiple times."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetInt64.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetInt64.html",
    "title": "Method SetInt64 | Hazelcast .NET Documentation",
    "keywords": "Method SetInt64 SetInt64(string, long) Adds a Int64 field to the record. Declaration IGenericRecordBuilder SetInt64(string fieldname, long value) Parameters Type Name Description string fieldname The name of the field. long value The value of the field. Returns Type Description IGenericRecordBuilder This IGenericRecordBuilder. Remarks It is legal to set the field again only when the builder is created with NewBuilderWithClone(); it is otherwise illegal to set to the same field twice. Exceptions Type Condition SerializationException The build has been initialized with a schema, and fieldname is not the name of field of that schema, or the type of the field does not match the specified value, or the field value is set multiple times."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetInt8.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetInt8.html",
    "title": "Method SetInt8 | Hazelcast .NET Documentation",
    "keywords": "Method SetInt8 SetInt8(string, sbyte) Adds a Int8 field to the record. Declaration IGenericRecordBuilder SetInt8(string fieldname, sbyte value) Parameters Type Name Description string fieldname The name of the field. sbyte value The value of the field. Returns Type Description IGenericRecordBuilder This IGenericRecordBuilder. Remarks It is legal to set the field again only when the builder is created with NewBuilderWithClone(); it is otherwise illegal to set to the same field twice. Exceptions Type Condition SerializationException The build has been initialized with a schema, and fieldname is not the name of field of that schema, or the type of the field does not match the specified value, or the field value is set multiple times."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetNullableBoolean.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetNullableBoolean.html",
    "title": "Method SetNullableBoolean | Hazelcast .NET Documentation",
    "keywords": "Method SetNullableBoolean SetNullableBoolean(string, bool?) Adds a NullableBoolean field to the record. Declaration IGenericRecordBuilder SetNullableBoolean(string fieldname, bool? value) Parameters Type Name Description string fieldname The name of the field. bool? value The value of the field. Returns Type Description IGenericRecordBuilder This IGenericRecordBuilder. Remarks It is legal to set the field again only when the builder is created with NewBuilderWithClone(); it is otherwise illegal to set to the same field twice. Exceptions Type Condition SerializationException The build has been initialized with a schema, and fieldname is not the name of field of that schema, or the type of the field does not match the specified value, or the field value is set multiple times."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetNullableFloat32.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetNullableFloat32.html",
    "title": "Method SetNullableFloat32 | Hazelcast .NET Documentation",
    "keywords": "Method SetNullableFloat32 SetNullableFloat32(string, float?) Adds a NullableFloat32 field to the record. Declaration IGenericRecordBuilder SetNullableFloat32(string fieldname, float? value) Parameters Type Name Description string fieldname The name of the field. float? value The value of the field. Returns Type Description IGenericRecordBuilder This IGenericRecordBuilder. Remarks It is legal to set the field again only when the builder is created with NewBuilderWithClone(); it is otherwise illegal to set to the same field twice. Exceptions Type Condition SerializationException The build has been initialized with a schema, and fieldname is not the name of field of that schema, or the type of the field does not match the specified value, or the field value is set multiple times."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetNullableFloat64.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetNullableFloat64.html",
    "title": "Method SetNullableFloat64 | Hazelcast .NET Documentation",
    "keywords": "Method SetNullableFloat64 SetNullableFloat64(string, double?) Adds a NullableFloat64 field to the record. Declaration IGenericRecordBuilder SetNullableFloat64(string fieldname, double? value) Parameters Type Name Description string fieldname The name of the field. double? value The value of the field. Returns Type Description IGenericRecordBuilder This IGenericRecordBuilder. Remarks It is legal to set the field again only when the builder is created with NewBuilderWithClone(); it is otherwise illegal to set to the same field twice. Exceptions Type Condition SerializationException The build has been initialized with a schema, and fieldname is not the name of field of that schema, or the type of the field does not match the specified value, or the field value is set multiple times."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetNullableInt16.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetNullableInt16.html",
    "title": "Method SetNullableInt16 | Hazelcast .NET Documentation",
    "keywords": "Method SetNullableInt16 SetNullableInt16(string, short?) Adds a NullableInt16 field to the record. Declaration IGenericRecordBuilder SetNullableInt16(string fieldname, short? value) Parameters Type Name Description string fieldname The name of the field. short? value The value of the field. Returns Type Description IGenericRecordBuilder This IGenericRecordBuilder. Remarks It is legal to set the field again only when the builder is created with NewBuilderWithClone(); it is otherwise illegal to set to the same field twice. Exceptions Type Condition SerializationException The build has been initialized with a schema, and fieldname is not the name of field of that schema, or the type of the field does not match the specified value, or the field value is set multiple times."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetNullableInt32.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetNullableInt32.html",
    "title": "Method SetNullableInt32 | Hazelcast .NET Documentation",
    "keywords": "Method SetNullableInt32 SetNullableInt32(string, int?) Adds a NullableInt32 field to the record. Declaration IGenericRecordBuilder SetNullableInt32(string fieldname, int? value) Parameters Type Name Description string fieldname The name of the field. int? value The value of the field. Returns Type Description IGenericRecordBuilder This IGenericRecordBuilder. Remarks It is legal to set the field again only when the builder is created with NewBuilderWithClone(); it is otherwise illegal to set to the same field twice. Exceptions Type Condition SerializationException The build has been initialized with a schema, and fieldname is not the name of field of that schema, or the type of the field does not match the specified value, or the field value is set multiple times."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetNullableInt64.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetNullableInt64.html",
    "title": "Method SetNullableInt64 | Hazelcast .NET Documentation",
    "keywords": "Method SetNullableInt64 SetNullableInt64(string, long?) Adds a NullableInt64 field to the record. Declaration IGenericRecordBuilder SetNullableInt64(string fieldname, long? value) Parameters Type Name Description string fieldname The name of the field. long? value The value of the field. Returns Type Description IGenericRecordBuilder This IGenericRecordBuilder. Remarks It is legal to set the field again only when the builder is created with NewBuilderWithClone(); it is otherwise illegal to set to the same field twice. Exceptions Type Condition SerializationException The build has been initialized with a schema, and fieldname is not the name of field of that schema, or the type of the field does not match the specified value, or the field value is set multiple times."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetNullableInt8.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetNullableInt8.html",
    "title": "Method SetNullableInt8 | Hazelcast .NET Documentation",
    "keywords": "Method SetNullableInt8 SetNullableInt8(string, sbyte?) Adds a NullableInt8 field to the record. Declaration IGenericRecordBuilder SetNullableInt8(string fieldname, sbyte? value) Parameters Type Name Description string fieldname The name of the field. sbyte? value The value of the field. Returns Type Description IGenericRecordBuilder This IGenericRecordBuilder. Remarks It is legal to set the field again only when the builder is created with NewBuilderWithClone(); it is otherwise illegal to set to the same field twice. Exceptions Type Condition SerializationException The build has been initialized with a schema, and fieldname is not the name of field of that schema, or the type of the field does not match the specified value, or the field value is set multiple times."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetString.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetString.html",
    "title": "Method SetString | Hazelcast .NET Documentation",
    "keywords": "Method SetString SetString(string, string?) Adds a String field to the record. Declaration IGenericRecordBuilder SetString(string fieldname, string? value) Parameters Type Name Description string fieldname The name of the field. string value The value of the field. Returns Type Description IGenericRecordBuilder This IGenericRecordBuilder. Remarks It is legal to set the field again only when the builder is created with NewBuilderWithClone(); it is otherwise illegal to set to the same field twice. Exceptions Type Condition SerializationException The build has been initialized with a schema, and fieldname is not the name of field of that schema, or the type of the field does not match the specified value, or the field value is set multiple times."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetTime.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetTime.html",
    "title": "Method SetTime | Hazelcast .NET Documentation",
    "keywords": "Method SetTime SetTime(string, HLocalTime?) Adds a Time field to the record. Declaration IGenericRecordBuilder SetTime(string fieldname, HLocalTime? value) Parameters Type Name Description string fieldname The name of the field. HLocalTime? value The value of the field. Returns Type Description IGenericRecordBuilder This IGenericRecordBuilder. Remarks It is legal to set the field again only when the builder is created with NewBuilderWithClone(); it is otherwise illegal to set to the same field twice. Exceptions Type Condition SerializationException The build has been initialized with a schema, and fieldname is not the name of field of that schema, or the type of the field does not match the specified value, or the field value is set multiple times."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetTimeStamp.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetTimeStamp.html",
    "title": "Method SetTimeStamp | Hazelcast .NET Documentation",
    "keywords": "Method SetTimeStamp SetTimeStamp(string, HLocalDateTime?) Adds a TimeStamp field to the record. Declaration IGenericRecordBuilder SetTimeStamp(string fieldname, HLocalDateTime? value) Parameters Type Name Description string fieldname The name of the field. HLocalDateTime? value The value of the field. Returns Type Description IGenericRecordBuilder This IGenericRecordBuilder. Remarks It is legal to set the field again only when the builder is created with NewBuilderWithClone(); it is otherwise illegal to set to the same field twice. Exceptions Type Condition SerializationException The build has been initialized with a schema, and fieldname is not the name of field of that schema, or the type of the field does not match the specified value, or the field value is set multiple times."
  },
  "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetTimeStampWithTimeZone.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IGenericRecordBuilder.SetTimeStampWithTimeZone.html",
    "title": "Method SetTimeStampWithTimeZone | Hazelcast .NET Documentation",
    "keywords": "Method SetTimeStampWithTimeZone SetTimeStampWithTimeZone(string, HOffsetDateTime?) Adds a TimeStampWithTimeZone field to the record. Declaration IGenericRecordBuilder SetTimeStampWithTimeZone(string fieldname, HOffsetDateTime? value) Parameters Type Name Description string fieldname The name of the field. HOffsetDateTime? value The value of the field. Returns Type Description IGenericRecordBuilder This IGenericRecordBuilder. Remarks It is legal to set the field again only when the builder is created with NewBuilderWithClone(); it is otherwise illegal to set to the same field twice. Exceptions Type Condition SerializationException The build has been initialized with a schema, and fieldname is not the name of field of that schema, or the type of the field does not match the specified value, or the field value is set multiple times."
  },
  "5.2.2/api/Hazelcast.Serialization.IIdentifiedDataSerializable.ClassId.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IIdentifiedDataSerializable.ClassId.html",
    "title": "Property ClassId | Hazelcast .NET Documentation",
    "keywords": "Property ClassId ClassId Gets the identifier of the class. Declaration int ClassId { get; } Property Value Type Description int The identifier of the class. Remarks The identifier is used to uniquely identify the class, i.e. the Type, so that the corresponding IDataSerializableFactory can re-create the proper instances. The identifier should therefore be unique per factory."
  },
  "5.2.2/api/Hazelcast.Serialization.IIdentifiedDataSerializable.FactoryId.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IIdentifiedDataSerializable.FactoryId.html",
    "title": "Property FactoryId | Hazelcast .NET Documentation",
    "keywords": "Property FactoryId FactoryId Gets the identifier of the IDataSerializableFactory that can create instances of the class. Declaration int FactoryId { get; } Property Value Type Description int The identifier of the factory."
  },
  "5.2.2/api/Hazelcast.Serialization.IIdentifiedDataSerializable.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IIdentifiedDataSerializable.html",
    "title": "Interface IIdentifiedDataSerializable | Hazelcast .NET Documentation",
    "keywords": "Interface IIdentifiedDataSerializable Defines the interface that classes of objects can implement to take control of their own serialization. Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Syntax public interface IIdentifiedDataSerializable Remarks Classes that implement IIdentifiedDataSerializable rely on a declared factory to create instances, and deserialize fields, thus avoiding the costs otherwise associated with reflection. Properties Name Description ClassId Gets the identifier of the class. FactoryId Gets the identifier of the IDataSerializableFactory that can create instances of the class. Methods Name Description ReadData(IObjectDataInput) Deserializes the object by reading from an IObjectDataInput. WriteData(IObjectDataOutput) Serializes the object by writing to an IObjectDataOutput."
  },
  "5.2.2/api/Hazelcast.Serialization.IIdentifiedDataSerializable.ReadData.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IIdentifiedDataSerializable.ReadData.html",
    "title": "Method ReadData | Hazelcast .NET Documentation",
    "keywords": "Method ReadData ReadData(IObjectDataInput) Deserializes the object by reading from an IObjectDataInput. Declaration void ReadData(IObjectDataInput input) Parameters Type Name Description IObjectDataInput input The input serialized data."
  },
  "5.2.2/api/Hazelcast.Serialization.IIdentifiedDataSerializable.WriteData.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IIdentifiedDataSerializable.WriteData.html",
    "title": "Method WriteData | Hazelcast .NET Documentation",
    "keywords": "Method WriteData WriteData(IObjectDataOutput) Serializes the object by writing to an IObjectDataOutput. Declaration void WriteData(IObjectDataOutput output) Parameters Type Name Description IObjectDataOutput output The output serialized data."
  },
  "5.2.2/api/Hazelcast.Serialization.IObjectDataInput.Endianness.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IObjectDataInput.Endianness.html",
    "title": "Property Endianness | Hazelcast .NET Documentation",
    "keywords": "Property Endianness Endianness The configured endianness via Endianness Declaration Endianness Endianness { get; } Property Value Type Description Endianness"
  },
  "5.2.2/api/Hazelcast.Serialization.IObjectDataInput.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IObjectDataInput.html",
    "title": "Interface IObjectDataInput | Hazelcast .NET Documentation",
    "keywords": "Interface IObjectDataInput Provides decoding methods for primitive and array of primitive types reading from the serialized byte array. Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Syntax public interface IObjectDataInput Properties Name Description Endianness The configured endianness via Endianness Methods Name Description Read(byte[], int, int) Reads into byte array bytes starting from the offset value. As much as count bytes will be written if there is available content. Read(byte[]) Reads into byte array bytes as much as possible to fill the provided array. ReadBoolean() Reads and return a bool value. ReadBooleanArray() Reads and return a bool array ReadByte() Reads and return an unsigned byte. ReadByteArray() Reads and return byte array ReadChar() Reads and return a char value ReadCharArray() Reads and return a char array ReadDouble() Reads and return double value ReadDoubleArray() Reads and return double array ReadFloat() Reads and return a float value ReadFloatArray() Reads and return a float array ReadInt() Read and return a signed integer value ReadIntArray() Reads and return an int array ReadLong() Reads and return a signed long value ReadLongArray() Reads and return long array ReadObject<T>() Reads and return the object ReadSByte() Reads and return a signed byte value ReadShort() Reads and return a signed short value. ReadShortArray() Reads and return a short array ReadString() Reads and return a UTF-8 encoded string ReadStringArray() Reads and return utf-8 encoded string array ReadUShort() Read and return am unsigned short value SkipBytes(int) Tries Skips count number of bytes if possible."
  },
  "5.2.2/api/Hazelcast.Serialization.IObjectDataInput.Read.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IObjectDataInput.Read.html",
    "title": "Method Read | Hazelcast .NET Documentation",
    "keywords": "Method Read Read(byte[]) Reads into byte array bytes as much as possible to fill the provided array. Declaration int Read(byte[] bytes) Parameters Type Name Description byte[] bytes byte array to be filled Returns Type Description int whether the number of bytes read, or -1 if end of internal serialized buffer is reached. Read(byte[], int, int) Reads into byte array bytes starting from the offset value. As much as count bytes will be written if there is available content. Declaration int Read(byte[] bytes, int offset, int count) Parameters Type Name Description byte[] bytes byte array to be filled int offset fill starting offset of the provided array int count the requested number of bytes to be filled. Returns Type Description int whether the number of bytes read, or -1 if end of internal serialized buffer is reached."
  },
  "5.2.2/api/Hazelcast.Serialization.IObjectDataInput.ReadBoolean.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IObjectDataInput.ReadBoolean.html",
    "title": "Method ReadBoolean | Hazelcast .NET Documentation",
    "keywords": "Method ReadBoolean ReadBoolean() Reads and return a bool value. Declaration bool ReadBoolean() Returns Type Description bool bool value"
  },
  "5.2.2/api/Hazelcast.Serialization.IObjectDataInput.ReadBooleanArray.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IObjectDataInput.ReadBooleanArray.html",
    "title": "Method ReadBooleanArray | Hazelcast .NET Documentation",
    "keywords": "Method ReadBooleanArray ReadBooleanArray() Reads and return a bool array Declaration bool[] ReadBooleanArray() Returns Type Description bool[] bool array"
  },
  "5.2.2/api/Hazelcast.Serialization.IObjectDataInput.ReadByte.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IObjectDataInput.ReadByte.html",
    "title": "Method ReadByte | Hazelcast .NET Documentation",
    "keywords": "Method ReadByte ReadByte() Reads and return an unsigned byte. Declaration byte ReadByte() Returns Type Description byte byte value"
  },
  "5.2.2/api/Hazelcast.Serialization.IObjectDataInput.ReadByteArray.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IObjectDataInput.ReadByteArray.html",
    "title": "Method ReadByteArray | Hazelcast .NET Documentation",
    "keywords": "Method ReadByteArray ReadByteArray() Reads and return byte array Declaration byte[] ReadByteArray() Returns Type Description byte[] byte array"
  },
  "5.2.2/api/Hazelcast.Serialization.IObjectDataInput.ReadChar.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IObjectDataInput.ReadChar.html",
    "title": "Method ReadChar | Hazelcast .NET Documentation",
    "keywords": "Method ReadChar ReadChar() Reads and return a char value Declaration char ReadChar() Returns Type Description char char value"
  },
  "5.2.2/api/Hazelcast.Serialization.IObjectDataInput.ReadCharArray.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IObjectDataInput.ReadCharArray.html",
    "title": "Method ReadCharArray | Hazelcast .NET Documentation",
    "keywords": "Method ReadCharArray ReadCharArray() Reads and return a char array Declaration char[] ReadCharArray() Returns Type Description char[] char array"
  },
  "5.2.2/api/Hazelcast.Serialization.IObjectDataInput.ReadDouble.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IObjectDataInput.ReadDouble.html",
    "title": "Method ReadDouble | Hazelcast .NET Documentation",
    "keywords": "Method ReadDouble ReadDouble() Reads and return double value Declaration double ReadDouble() Returns Type Description double double value"
  },
  "5.2.2/api/Hazelcast.Serialization.IObjectDataInput.ReadDoubleArray.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IObjectDataInput.ReadDoubleArray.html",
    "title": "Method ReadDoubleArray | Hazelcast .NET Documentation",
    "keywords": "Method ReadDoubleArray ReadDoubleArray() Reads and return double array Declaration double[] ReadDoubleArray() Returns Type Description double[] double array"
  },
  "5.2.2/api/Hazelcast.Serialization.IObjectDataInput.ReadFloat.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IObjectDataInput.ReadFloat.html",
    "title": "Method ReadFloat | Hazelcast .NET Documentation",
    "keywords": "Method ReadFloat ReadFloat() Reads and return a float value Declaration float ReadFloat() Returns Type Description float float value"
  },
  "5.2.2/api/Hazelcast.Serialization.IObjectDataInput.ReadFloatArray.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IObjectDataInput.ReadFloatArray.html",
    "title": "Method ReadFloatArray | Hazelcast .NET Documentation",
    "keywords": "Method ReadFloatArray ReadFloatArray() Reads and return a float array Declaration float[] ReadFloatArray() Returns Type Description float[] flaot array"
  },
  "5.2.2/api/Hazelcast.Serialization.IObjectDataInput.ReadInt.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IObjectDataInput.ReadInt.html",
    "title": "Method ReadInt | Hazelcast .NET Documentation",
    "keywords": "Method ReadInt ReadInt() Read and return a signed integer value Declaration int ReadInt() Returns Type Description int int value"
  },
  "5.2.2/api/Hazelcast.Serialization.IObjectDataInput.ReadIntArray.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IObjectDataInput.ReadIntArray.html",
    "title": "Method ReadIntArray | Hazelcast .NET Documentation",
    "keywords": "Method ReadIntArray ReadIntArray() Reads and return an int array Declaration int[] ReadIntArray() Returns Type Description int[] int array"
  },
  "5.2.2/api/Hazelcast.Serialization.IObjectDataInput.ReadLong.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IObjectDataInput.ReadLong.html",
    "title": "Method ReadLong | Hazelcast .NET Documentation",
    "keywords": "Method ReadLong ReadLong() Reads and return a signed long value Declaration long ReadLong() Returns Type Description long long value"
  },
  "5.2.2/api/Hazelcast.Serialization.IObjectDataInput.ReadLongArray.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IObjectDataInput.ReadLongArray.html",
    "title": "Method ReadLongArray | Hazelcast .NET Documentation",
    "keywords": "Method ReadLongArray ReadLongArray() Reads and return long array Declaration long[] ReadLongArray() Returns Type Description long[] long array"
  },
  "5.2.2/api/Hazelcast.Serialization.IObjectDataInput.ReadObject.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IObjectDataInput.ReadObject.html",
    "title": "Method ReadObject | Hazelcast .NET Documentation",
    "keywords": "Method ReadObject ReadObject<T>() Reads and return the object Declaration T ReadObject<T>() Returns Type Description T T instance Type Parameters Name Description T The type of the return object. The internal object is cast to this type before returning"
  },
  "5.2.2/api/Hazelcast.Serialization.IObjectDataInput.ReadSByte.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IObjectDataInput.ReadSByte.html",
    "title": "Method ReadSByte | Hazelcast .NET Documentation",
    "keywords": "Method ReadSByte ReadSByte() Reads and return a signed byte value Declaration sbyte ReadSByte() Returns Type Description sbyte sbyte value"
  },
  "5.2.2/api/Hazelcast.Serialization.IObjectDataInput.ReadShort.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IObjectDataInput.ReadShort.html",
    "title": "Method ReadShort | Hazelcast .NET Documentation",
    "keywords": "Method ReadShort ReadShort() Reads and return a signed short value. Declaration short ReadShort() Returns Type Description short short value"
  },
  "5.2.2/api/Hazelcast.Serialization.IObjectDataInput.ReadShortArray.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IObjectDataInput.ReadShortArray.html",
    "title": "Method ReadShortArray | Hazelcast .NET Documentation",
    "keywords": "Method ReadShortArray ReadShortArray() Reads and return a short array Declaration short[] ReadShortArray() Returns Type Description short[] short array"
  },
  "5.2.2/api/Hazelcast.Serialization.IObjectDataInput.ReadString.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IObjectDataInput.ReadString.html",
    "title": "Method ReadString | Hazelcast .NET Documentation",
    "keywords": "Method ReadString ReadString() Reads and return a UTF-8 encoded string Declaration string ReadString() Returns Type Description string"
  },
  "5.2.2/api/Hazelcast.Serialization.IObjectDataInput.ReadStringArray.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IObjectDataInput.ReadStringArray.html",
    "title": "Method ReadStringArray | Hazelcast .NET Documentation",
    "keywords": "Method ReadStringArray ReadStringArray() Reads and return utf-8 encoded string array Declaration string[] ReadStringArray() Returns Type Description string[] string array"
  },
  "5.2.2/api/Hazelcast.Serialization.IObjectDataInput.ReadUShort.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IObjectDataInput.ReadUShort.html",
    "title": "Method ReadUShort | Hazelcast .NET Documentation",
    "keywords": "Method ReadUShort ReadUShort() Read and return am unsigned short value Declaration ushort ReadUShort() Returns Type Description ushort ushort value"
  },
  "5.2.2/api/Hazelcast.Serialization.IObjectDataInput.SkipBytes.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IObjectDataInput.SkipBytes.html",
    "title": "Method SkipBytes | Hazelcast .NET Documentation",
    "keywords": "Method SkipBytes SkipBytes(int) Tries Skips count number of bytes if possible. Declaration int SkipBytes(int count) Parameters Type Name Description int count number of bytes to skip Returns Type Description int The actual number of bytes skipped"
  },
  "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.Endianness.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.Endianness.html",
    "title": "Property Endianness | Hazelcast .NET Documentation",
    "keywords": "Property Endianness Endianness The configured endianness via Endianness Declaration Endianness Endianness { get; } Property Value Type Description Endianness"
  },
  "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.html",
    "title": "Interface IObjectDataOutput | Hazelcast .NET Documentation",
    "keywords": "Interface IObjectDataOutput Provides encoding methods for primitive and array of primitive types writing to the serialized byte array. Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Syntax public interface IObjectDataOutput Properties Name Description Endianness The configured endianness via Endianness Methods Name Description ToByteArray(int) Creates a new byte array with the internal content of the serialized data. Write(byte[], int, int) Writes the content of the provided byte array to this serialization output Write(byte[]) Writes the content of the provided byte array to this serialization output WriteBoolean(bool) Writes a bool value to this serialization output WriteBooleanArray(bool[]) Writes the bool[] to this serialization output WriteByte(byte) Writes a byte value to this serialization output WriteByteArray(byte[]) Writes the byte[] to this serialization output WriteBytes(string) Writes each char of the value with WriteByte(byte) method to this serialization output /// WriteChar(char) Writes a char value to this serialization output WriteCharArray(char[]) Writes the char[] to this serialization output WriteChars(string) Writes each char of the value with WriteChar(char) method to this serialization output WriteDouble(double) Writes a double value to this serialization output WriteDoubleArray(double[]) Writes the double[] to this serialization output WriteFloat(float) Writes a float value to this serialization output WriteFloatArray(float[]) Writes the float[] to this serialization output WriteInt(int) Writes a int value to this serialization output WriteIntArray(int[]) Writes the int[] to this serialization output WriteLong(long) Writes a long value to this serialization output WriteLongArray(long[]) Writes the long[] to this serialization output WriteObject(object) Writes an object to this serialization output using hazelcast serialization WriteSByte(sbyte) Writes a sbyte value to this serialization output WriteShort(short) Writes a short value to this serialization output WriteShortArray(short[]) Writes the short[] to this serialization output WriteString(string) Writes a string value in UTF-8 encoding to this serialization output WriteStringArray(string[]) Writes the string[] to this serialization output WriteUShort(ushort) Writes a ushort value to this serialization output"
  },
  "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.ToByteArray.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.ToByteArray.html",
    "title": "Method ToByteArray | Hazelcast .NET Documentation",
    "keywords": "Method ToByteArray ToByteArray(int) Creates a new byte array with the internal content of the serialized data. Declaration byte[] ToByteArray(int padding = 0) Parameters Type Name Description int padding the number of zero byte(s) to add to beginning of the returned array Returns Type Description byte[] clone of internal byte content with optional padding bytes"
  },
  "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.Write.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.Write.html",
    "title": "Method Write | Hazelcast .NET Documentation",
    "keywords": "Method Write Write(byte[]) Writes the content of the provided byte array to this serialization output Declaration void Write(byte[] bytes) Parameters Type Name Description byte[] bytes the byte array to be written Remarks Please note that this method only writes the content of the array to the output whereas WriteByteArray(byte[]) methods also take care of the size of the array. Write(byte[], int, int) Writes the content of the provided byte array to this serialization output Declaration void Write(byte[] bytes, int offset, int count) Parameters Type Name Description byte[] bytes the byte array to be written int offset the offset of the bytes array for start reading from int count total number of bytes to be written from the bytes array"
  },
  "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.WriteBoolean.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.WriteBoolean.html",
    "title": "Method WriteBoolean | Hazelcast .NET Documentation",
    "keywords": "Method WriteBoolean WriteBoolean(bool) Writes a bool value to this serialization output Declaration void WriteBoolean(bool value) Parameters Type Name Description bool value the value to be encoded"
  },
  "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.WriteBooleanArray.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.WriteBooleanArray.html",
    "title": "Method WriteBooleanArray | Hazelcast .NET Documentation",
    "keywords": "Method WriteBooleanArray WriteBooleanArray(bool[]) Writes the bool[] to this serialization output Declaration void WriteBooleanArray(bool[] values) Parameters Type Name Description bool[] values the value to be encoded"
  },
  "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.WriteByte.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.WriteByte.html",
    "title": "Method WriteByte | Hazelcast .NET Documentation",
    "keywords": "Method WriteByte WriteByte(byte) Writes a byte value to this serialization output Declaration void WriteByte(byte value) Parameters Type Name Description byte value the value to be encoded"
  },
  "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.WriteByteArray.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.WriteByteArray.html",
    "title": "Method WriteByteArray | Hazelcast .NET Documentation",
    "keywords": "Method WriteByteArray WriteByteArray(byte[]) Writes the byte[] to this serialization output Declaration void WriteByteArray(byte[] values) Parameters Type Name Description byte[] values the value to be encoded"
  },
  "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.WriteBytes.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.WriteBytes.html",
    "title": "Method WriteBytes | Hazelcast .NET Documentation",
    "keywords": "Method WriteBytes WriteBytes(string) Writes each char of the value with WriteByte(byte) method to this serialization output /// Declaration void WriteBytes(string value) Parameters Type Name Description string value the value to be encoded Remarks Each char value of the string will be cast to byte then written to output."
  },
  "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.WriteChar.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.WriteChar.html",
    "title": "Method WriteChar | Hazelcast .NET Documentation",
    "keywords": "Method WriteChar WriteChar(char) Writes a char value to this serialization output Declaration void WriteChar(char value) Parameters Type Name Description char value the value to be encoded"
  },
  "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.WriteCharArray.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.WriteCharArray.html",
    "title": "Method WriteCharArray | Hazelcast .NET Documentation",
    "keywords": "Method WriteCharArray WriteCharArray(char[]) Writes the char[] to this serialization output Declaration void WriteCharArray(char[] values) Parameters Type Name Description char[] values the value to be encoded"
  },
  "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.WriteChars.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.WriteChars.html",
    "title": "Method WriteChars | Hazelcast .NET Documentation",
    "keywords": "Method WriteChars WriteChars(string) Writes each char of the value with WriteChar(char) method to this serialization output Declaration void WriteChars(string value) Parameters Type Name Description string value the value to be encoded Remarks This method has the same effect with the following code; foreach (var ch in value) { WriteChar(ch); }"
  },
  "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.WriteDouble.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.WriteDouble.html",
    "title": "Method WriteDouble | Hazelcast .NET Documentation",
    "keywords": "Method WriteDouble WriteDouble(double) Writes a double value to this serialization output Declaration void WriteDouble(double value) Parameters Type Name Description double value the value to be encoded"
  },
  "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.WriteDoubleArray.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.WriteDoubleArray.html",
    "title": "Method WriteDoubleArray | Hazelcast .NET Documentation",
    "keywords": "Method WriteDoubleArray WriteDoubleArray(double[]) Writes the double[] to this serialization output Declaration void WriteDoubleArray(double[] values) Parameters Type Name Description double[] values the value to be encoded"
  },
  "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.WriteFloat.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.WriteFloat.html",
    "title": "Method WriteFloat | Hazelcast .NET Documentation",
    "keywords": "Method WriteFloat WriteFloat(float) Writes a float value to this serialization output Declaration void WriteFloat(float value) Parameters Type Name Description float value the value to be encoded"
  },
  "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.WriteFloatArray.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.WriteFloatArray.html",
    "title": "Method WriteFloatArray | Hazelcast .NET Documentation",
    "keywords": "Method WriteFloatArray WriteFloatArray(float[]) Writes the float[] to this serialization output Declaration void WriteFloatArray(float[] values) Parameters Type Name Description float[] values the value to be encoded"
  },
  "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.WriteInt.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.WriteInt.html",
    "title": "Method WriteInt | Hazelcast .NET Documentation",
    "keywords": "Method WriteInt WriteInt(int) Writes a int value to this serialization output Declaration void WriteInt(int value) Parameters Type Name Description int value the value to be encoded"
  },
  "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.WriteIntArray.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.WriteIntArray.html",
    "title": "Method WriteIntArray | Hazelcast .NET Documentation",
    "keywords": "Method WriteIntArray WriteIntArray(int[]) Writes the int[] to this serialization output Declaration void WriteIntArray(int[] values) Parameters Type Name Description int[] values the value to be encoded"
  },
  "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.WriteLong.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.WriteLong.html",
    "title": "Method WriteLong | Hazelcast .NET Documentation",
    "keywords": "Method WriteLong WriteLong(long) Writes a long value to this serialization output Declaration void WriteLong(long value) Parameters Type Name Description long value the value to be encoded"
  },
  "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.WriteLongArray.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.WriteLongArray.html",
    "title": "Method WriteLongArray | Hazelcast .NET Documentation",
    "keywords": "Method WriteLongArray WriteLongArray(long[]) Writes the long[] to this serialization output Declaration void WriteLongArray(long[] values) Parameters Type Name Description long[] values the value to be encoded"
  },
  "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.WriteObject.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.WriteObject.html",
    "title": "Method WriteObject | Hazelcast .NET Documentation",
    "keywords": "Method WriteObject WriteObject(object) Writes an object to this serialization output using hazelcast serialization Declaration void WriteObject(object value) Parameters Type Name Description object value"
  },
  "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.WriteSByte.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.WriteSByte.html",
    "title": "Method WriteSByte | Hazelcast .NET Documentation",
    "keywords": "Method WriteSByte WriteSByte(sbyte) Writes a sbyte value to this serialization output Declaration void WriteSByte(sbyte value) Parameters Type Name Description sbyte value the value to be encoded"
  },
  "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.WriteShort.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.WriteShort.html",
    "title": "Method WriteShort | Hazelcast .NET Documentation",
    "keywords": "Method WriteShort WriteShort(short) Writes a short value to this serialization output Declaration void WriteShort(short value) Parameters Type Name Description short value the value to be encoded"
  },
  "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.WriteShortArray.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.WriteShortArray.html",
    "title": "Method WriteShortArray | Hazelcast .NET Documentation",
    "keywords": "Method WriteShortArray WriteShortArray(short[]) Writes the short[] to this serialization output Declaration void WriteShortArray(short[] values) Parameters Type Name Description short[] values the value to be encoded"
  },
  "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.WriteString.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.WriteString.html",
    "title": "Method WriteString | Hazelcast .NET Documentation",
    "keywords": "Method WriteString WriteString(string) Writes a string value in UTF-8 encoding to this serialization output Declaration void WriteString(string value) Parameters Type Name Description string value the value to be encoded"
  },
  "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.WriteStringArray.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.WriteStringArray.html",
    "title": "Method WriteStringArray | Hazelcast .NET Documentation",
    "keywords": "Method WriteStringArray WriteStringArray(string[]) Writes the string[] to this serialization output Declaration void WriteStringArray(string[] values) Parameters Type Name Description string[] values the value to be encoded"
  },
  "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.WriteUShort.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IObjectDataOutput.WriteUShort.html",
    "title": "Method WriteUShort | Hazelcast .NET Documentation",
    "keywords": "Method WriteUShort WriteUShort(ushort) Writes a ushort value to this serialization output Declaration void WriteUShort(ushort value) Parameters Type Name Description ushort value the value to be encoded"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortable.ClassId.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortable.ClassId.html",
    "title": "Property ClassId | Hazelcast .NET Documentation",
    "keywords": "Property ClassId ClassId Returns class identifier for this portable class. Declaration int ClassId { get; } Property Value Type Description int class id Remarks Returns class identifier for this portable class. Class id should be unique per PortableFactory."
  },
  "5.2.2/api/Hazelcast.Serialization.IPortable.FactoryId.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortable.FactoryId.html",
    "title": "Property FactoryId | Hazelcast .NET Documentation",
    "keywords": "Property FactoryId FactoryId Returns PortableFactory id for this portable class Declaration int FactoryId { get; } Property Value Type Description int factory id"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortable.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortable.html",
    "title": "Interface IPortable | Hazelcast .NET Documentation",
    "keywords": "Interface IPortable Portable provides an alternative serialization method. Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Syntax public interface IPortable Remarks Portable provides an alternative serialization method. Instead of relying on reflection, each Portable is created by a registere IPortableFactory. Portable serialization that have the following advantages: Support multiversion of the same object type. (See ) Fetching individual fields without having to rely on reflection. Querying and indexing support without de-serialization and/or reflection. Properties Name Description ClassId Returns class identifier for this portable class. FactoryId Returns PortableFactory id for this portable class Methods Name Description ReadPortable(IPortableReader) Read portable fields using PortableReader WritePortable(IPortableWriter) Serialize this portable object using PortableWriter See Also IPortableFactory IPortableWriter IPortableReader IClassDefinition IIdentifiedDataSerializable SerializationOptions"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortable.ReadPortable.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortable.ReadPortable.html",
    "title": "Method ReadPortable | Hazelcast .NET Documentation",
    "keywords": "Method ReadPortable ReadPortable(IPortableReader) Read portable fields using PortableReader Declaration void ReadPortable(IPortableReader reader) Parameters Type Name Description IPortableReader reader PortableReader Exceptions Type Condition IOException System.IO.IOException"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortable.WritePortable.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortable.WritePortable.html",
    "title": "Method WritePortable | Hazelcast .NET Documentation",
    "keywords": "Method WritePortable WritePortable(IPortableWriter) Serialize this portable object using PortableWriter Declaration void WritePortable(IPortableWriter writer) Parameters Type Name Description IPortableWriter writer PortableWriter Exceptions Type Condition IOException System.IO.IOException"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortableFactory.Create.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortableFactory.Create.html",
    "title": "Method Create | Hazelcast .NET Documentation",
    "keywords": "Method Create Create(int) Creates a Portable instance using given class id Declaration IPortable Create(int classId) Parameters Type Name Description int classId portable class id Returns Type Description IPortable portable instance or null if class id is not known by this factory"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortableFactory.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortableFactory.html",
    "title": "Interface IPortableFactory | Hazelcast .NET Documentation",
    "keywords": "Interface IPortableFactory PortableFactory is used to create Portable instances during de-serialization. Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Syntax public interface IPortableFactory Remarks PortableFactory is used to create Portable instances during de-serialization. Methods Name Description Create(int) Creates a Portable instance using given class id See Also IPortable IVersionedPortable"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortableReader.GetFieldClassId.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortableReader.GetFieldClassId.html",
    "title": "Method GetFieldClassId | Hazelcast .NET Documentation",
    "keywords": "Method GetFieldClassId GetFieldClassId(string) Declaration int GetFieldClassId(string fieldName) Parameters Type Name Description string fieldName name of the field Returns Type Description int classId of given field"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortableReader.GetFieldNames.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortableReader.GetFieldNames.html",
    "title": "Method GetFieldNames | Hazelcast .NET Documentation",
    "keywords": "Method GetFieldNames GetFieldNames() Declaration ICollection<string> GetFieldNames() Returns Type Description ICollection<string> set of field names on this portable class"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortableReader.GetFieldType.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortableReader.GetFieldType.html",
    "title": "Method GetFieldType | Hazelcast .NET Documentation",
    "keywords": "Method GetFieldType GetFieldType(string) Declaration FieldType GetFieldType(string fieldName) Parameters Type Name Description string fieldName name of the field Returns Type Description FieldType field type of given fieldName"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortableReader.GetRawDataInput.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortableReader.GetRawDataInput.html",
    "title": "Method GetRawDataInput | Hazelcast .NET Documentation",
    "keywords": "Method GetRawDataInput GetRawDataInput() IPortableWriter.GetRawDataOutput() . Note that portable fields can not read after GetRawDataInput() is called. In case this happens, IOException will be thrown. Declaration IObjectDataInput GetRawDataInput() Returns Type Description IObjectDataInput rawDataInput Exceptions Type Condition IOException System.IO.IOException"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortableReader.HasField.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortableReader.HasField.html",
    "title": "Method HasField | Hazelcast .NET Documentation",
    "keywords": "Method HasField HasField(string) Declaration bool HasField(string fieldName) Parameters Type Name Description string fieldName name of the field Returns Type Description bool true if field exist in this class."
  },
  "5.2.2/api/Hazelcast.Serialization.IPortableReader.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortableReader.html",
    "title": "Interface IPortableReader | Hazelcast .NET Documentation",
    "keywords": "Interface IPortableReader Provides a mean of reading portable fields from a binary in form of primitives, arrays of primitives , nested portable fields and array of portable fields. Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Syntax public interface IPortableReader Remarks Provides a mean of reading portable fields from a binary in form of primitives, arrays of primitives , nested portable fields and array of portable fields. Properties Name Description Version Methods Name Description GetFieldClassId(string) GetFieldNames() GetFieldType(string) GetRawDataInput() IPortableWriter.GetRawDataOutput() . Note that portable fields can not read after GetRawDataInput() is called. In case this happens, IOException will be thrown. HasField(string) ReadBoolean(string) ReadBooleanArray(string) ReadByte(string) ReadByteArray(string) ReadChar(string) ReadCharArray(string) ReadDouble(string) ReadDoubleArray(string) ReadFloat(string) ReadFloatArray(string) ReadInt(string) ReadIntArray(string) ReadLong(string) ReadLongArray(string) ReadPortable<TPortable>(string) ReadPortableArray<TPortable>(string) ReadShort(string) ReadShortArray(string) ReadString(string) ReadStringArray(string)"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortableReader.ReadBoolean.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortableReader.ReadBoolean.html",
    "title": "Method ReadBoolean | Hazelcast .NET Documentation",
    "keywords": "Method ReadBoolean ReadBoolean(string) Declaration bool ReadBoolean(string fieldName) Parameters Type Name Description string fieldName name of the field Returns Type Description bool the boolean value read Exceptions Type Condition IOException System.IO.IOException"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortableReader.ReadBooleanArray.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortableReader.ReadBooleanArray.html",
    "title": "Method ReadBooleanArray | Hazelcast .NET Documentation",
    "keywords": "Method ReadBooleanArray ReadBooleanArray(string) Declaration bool[] ReadBooleanArray(string fieldName) Parameters Type Name Description string fieldName name of the field Returns Type Description bool[] the boolean array value read Exceptions Type Condition IOException System.IO.IOException"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortableReader.ReadByte.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortableReader.ReadByte.html",
    "title": "Method ReadByte | Hazelcast .NET Documentation",
    "keywords": "Method ReadByte ReadByte(string) Declaration byte ReadByte(string fieldName) Parameters Type Name Description string fieldName name of the field Returns Type Description byte the byte value read Exceptions Type Condition IOException System.IO.IOException"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortableReader.ReadByteArray.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortableReader.ReadByteArray.html",
    "title": "Method ReadByteArray | Hazelcast .NET Documentation",
    "keywords": "Method ReadByteArray ReadByteArray(string) Declaration byte[] ReadByteArray(string fieldName) Parameters Type Name Description string fieldName name of the field Returns Type Description byte[] the byte array value read Exceptions Type Condition IOException System.IO.IOException"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortableReader.ReadChar.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortableReader.ReadChar.html",
    "title": "Method ReadChar | Hazelcast .NET Documentation",
    "keywords": "Method ReadChar ReadChar(string) Declaration char ReadChar(string fieldName) Parameters Type Name Description string fieldName name of the field Returns Type Description char the char value read Exceptions Type Condition IOException System.IO.IOException"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortableReader.ReadCharArray.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortableReader.ReadCharArray.html",
    "title": "Method ReadCharArray | Hazelcast .NET Documentation",
    "keywords": "Method ReadCharArray ReadCharArray(string) Declaration char[] ReadCharArray(string fieldName) Parameters Type Name Description string fieldName name of the field Returns Type Description char[] the char array value read Exceptions Type Condition IOException System.IO.IOException"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortableReader.ReadDouble.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortableReader.ReadDouble.html",
    "title": "Method ReadDouble | Hazelcast .NET Documentation",
    "keywords": "Method ReadDouble ReadDouble(string) Declaration double ReadDouble(string fieldName) Parameters Type Name Description string fieldName name of the field Returns Type Description double the double value read Exceptions Type Condition IOException System.IO.IOException"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortableReader.ReadDoubleArray.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortableReader.ReadDoubleArray.html",
    "title": "Method ReadDoubleArray | Hazelcast .NET Documentation",
    "keywords": "Method ReadDoubleArray ReadDoubleArray(string) Declaration double[] ReadDoubleArray(string fieldName) Parameters Type Name Description string fieldName name of the field Returns Type Description double[] the double array value read Exceptions Type Condition IOException System.IO.IOException"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortableReader.ReadFloat.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortableReader.ReadFloat.html",
    "title": "Method ReadFloat | Hazelcast .NET Documentation",
    "keywords": "Method ReadFloat ReadFloat(string) Declaration float ReadFloat(string fieldName) Parameters Type Name Description string fieldName name of the field Returns Type Description float the float value read Exceptions Type Condition IOException System.IO.IOException"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortableReader.ReadFloatArray.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortableReader.ReadFloatArray.html",
    "title": "Method ReadFloatArray | Hazelcast .NET Documentation",
    "keywords": "Method ReadFloatArray ReadFloatArray(string) Declaration float[] ReadFloatArray(string fieldName) Parameters Type Name Description string fieldName name of the field Returns Type Description float[] the float array value read Exceptions Type Condition IOException System.IO.IOException"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortableReader.ReadInt.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortableReader.ReadInt.html",
    "title": "Method ReadInt | Hazelcast .NET Documentation",
    "keywords": "Method ReadInt ReadInt(string) Declaration int ReadInt(string fieldName) Parameters Type Name Description string fieldName name of the field Returns Type Description int the int value read Exceptions Type Condition IOException System.IO.IOException"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortableReader.ReadIntArray.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortableReader.ReadIntArray.html",
    "title": "Method ReadIntArray | Hazelcast .NET Documentation",
    "keywords": "Method ReadIntArray ReadIntArray(string) Declaration int[] ReadIntArray(string fieldName) Parameters Type Name Description string fieldName name of the field Returns Type Description int[] the int array value read Exceptions Type Condition IOException System.IO.IOException"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortableReader.ReadLong.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortableReader.ReadLong.html",
    "title": "Method ReadLong | Hazelcast .NET Documentation",
    "keywords": "Method ReadLong ReadLong(string) Declaration long ReadLong(string fieldName) Parameters Type Name Description string fieldName name of the field Returns Type Description long the long value read Exceptions Type Condition IOException System.IO.IOException"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortableReader.ReadLongArray.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortableReader.ReadLongArray.html",
    "title": "Method ReadLongArray | Hazelcast .NET Documentation",
    "keywords": "Method ReadLongArray ReadLongArray(string) Declaration long[] ReadLongArray(string fieldName) Parameters Type Name Description string fieldName name of the field Returns Type Description long[] the long array value read Exceptions Type Condition IOException System.IO.IOException"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortableReader.ReadPortable.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortableReader.ReadPortable.html",
    "title": "Method ReadPortable | Hazelcast .NET Documentation",
    "keywords": "Method ReadPortable ReadPortable<TPortable>(string) Declaration TPortable ReadPortable<TPortable>(string fieldName) where TPortable : IPortable Parameters Type Name Description string fieldName name of the field Returns Type Description TPortable the portable value read Type Parameters Name Description TPortable Exceptions Type Condition IOException System.IO.IOException"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortableReader.ReadPortableArray.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortableReader.ReadPortableArray.html",
    "title": "Method ReadPortableArray | Hazelcast .NET Documentation",
    "keywords": "Method ReadPortableArray ReadPortableArray<TPortable>(string) Declaration TPortable[] ReadPortableArray<TPortable>(string fieldName) where TPortable : IPortable Parameters Type Name Description string fieldName name of the field Returns Type Description TPortable[] the portabke value read Type Parameters Name Description TPortable Exceptions Type Condition IOException System.IO.IOException"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortableReader.ReadShort.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortableReader.ReadShort.html",
    "title": "Method ReadShort | Hazelcast .NET Documentation",
    "keywords": "Method ReadShort ReadShort(string) Declaration short ReadShort(string fieldName) Parameters Type Name Description string fieldName name of the field Returns Type Description short the short value read Exceptions Type Condition IOException System.IO.IOException"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortableReader.ReadShortArray.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortableReader.ReadShortArray.html",
    "title": "Method ReadShortArray | Hazelcast .NET Documentation",
    "keywords": "Method ReadShortArray ReadShortArray(string) Declaration short[] ReadShortArray(string fieldName) Parameters Type Name Description string fieldName name of the field Returns Type Description short[] the short array value read Exceptions Type Condition IOException System.IO.IOException"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortableReader.ReadString.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortableReader.ReadString.html",
    "title": "Method ReadString | Hazelcast .NET Documentation",
    "keywords": "Method ReadString ReadString(string) Declaration string ReadString(string fieldName) Parameters Type Name Description string fieldName name of the field Returns Type Description string the utf string value read Exceptions Type Condition IOException System.IO.IOException"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortableReader.ReadStringArray.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortableReader.ReadStringArray.html",
    "title": "Method ReadStringArray | Hazelcast .NET Documentation",
    "keywords": "Method ReadStringArray ReadStringArray(string) Declaration string[] ReadStringArray(string fieldName) Parameters Type Name Description string fieldName name of the field Returns Type Description string[] the string array value read Exceptions Type Condition IOException System.IO.IOException"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortableReader.Version.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortableReader.Version.html",
    "title": "Property Version | Hazelcast .NET Documentation",
    "keywords": "Property Version Version Declaration int Version { get; } Property Value Type Description int version global version of portable classes"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortableWriter.GetRawDataOutput.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortableWriter.GetRawDataOutput.html",
    "title": "Method GetRawDataOutput | Hazelcast .NET Documentation",
    "keywords": "Method GetRawDataOutput GetRawDataOutput() After writing portable fields, one can write remaining fields in old fashioned way consecutively at the end of stream. Declaration IObjectDataOutput GetRawDataOutput() Returns Type Description IObjectDataOutput ObjectDataOutput Remarks After writing portable fields, one can write remaining fields in old fashioned way consecutively at the end of stream. User should not that after getting raw dataoutput trying to write portable fields will result in IOException Exceptions Type Condition IOException System.IO.IOException"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortableWriter.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortableWriter.html",
    "title": "Interface IPortableWriter | Hazelcast .NET Documentation",
    "keywords": "Interface IPortableWriter Provides a mean of writing portable fields to a binary in form of primitives, arrays of primitives , nested portable fields and array of portable fields. Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Syntax public interface IPortableWriter Remarks Provides a mean of writing portable fields to a binary in form of primitives, arrays of primitives , nested portable fields and array of portable fields. Methods Name Description GetRawDataOutput() After writing portable fields, one can write remaining fields in old fashioned way consecutively at the end of stream. WriteBoolean(string, bool) Writes a primitive boolean. WriteBooleanArray(string, bool[]) Writes a primitive boolean-array. WriteByte(string, byte) Writes a primitive byte. WriteByteArray(string, byte[]) Writes a primitive byte-array. WriteChar(string, char) Writes a primitive char. WriteCharArray(string, char[]) Writes a primitive char-array. WriteDouble(string, double) Writes a primitive double. WriteDoubleArray(string, double[]) Writes a primitive double array. WriteFloat(string, float) Writes a primitive float. WriteFloatArray(string, float[]) Writes a primitive float array. WriteInt(string, int) Writes a primitive int. WriteIntArray(string, int[]) Writes a primitive int-array. WriteLong(string, long) Writes a primitive long. WriteLongArray(string, long[]) Writes a primitive long-array. WriteNullPortable(string, int, int) To write a null portable value, user needs to provide class and factoryIds of related class. WritePortable(string, IPortable) Writes a Portable. WritePortableArray<TPortable>(string, TPortable[]) Writes a an array of Portables. WriteShort(string, short) Writes a primitive short. WriteShortArray(string, short[]) Writes a primitive short-array. WriteString(string, string) Writes an UTF string. WriteStringArray(string, string[]) Writes a primitive string-array."
  },
  "5.2.2/api/Hazelcast.Serialization.IPortableWriter.WriteBoolean.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortableWriter.WriteBoolean.html",
    "title": "Method WriteBoolean | Hazelcast .NET Documentation",
    "keywords": "Method WriteBoolean WriteBoolean(string, bool) Writes a primitive boolean. Declaration void WriteBoolean(string fieldName, bool value) Parameters Type Name Description string fieldName name of the field bool value int value to be written Remarks Writes a primitive boolean. Exceptions Type Condition IOException System.IO.IOException"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortableWriter.WriteBooleanArray.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortableWriter.WriteBooleanArray.html",
    "title": "Method WriteBooleanArray | Hazelcast .NET Documentation",
    "keywords": "Method WriteBooleanArray WriteBooleanArray(string, bool[]) Writes a primitive boolean-array. Declaration void WriteBooleanArray(string fieldName, bool[] bools) Parameters Type Name Description string fieldName name of the field bool[] bools boolean array to be written Remarks Writes a primitive boolean-array. Exceptions Type Condition IOException System.IO.IOException"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortableWriter.WriteByte.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortableWriter.WriteByte.html",
    "title": "Method WriteByte | Hazelcast .NET Documentation",
    "keywords": "Method WriteByte WriteByte(string, byte) Writes a primitive byte. Declaration void WriteByte(string fieldName, byte value) Parameters Type Name Description string fieldName name of the field byte value int value to be written Remarks Writes a primitive byte. Exceptions Type Condition IOException System.IO.IOException"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortableWriter.WriteByteArray.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortableWriter.WriteByteArray.html",
    "title": "Method WriteByteArray | Hazelcast .NET Documentation",
    "keywords": "Method WriteByteArray WriteByteArray(string, byte[]) Writes a primitive byte-array. Declaration void WriteByteArray(string fieldName, byte[] bytes) Parameters Type Name Description string fieldName name of the field byte[] bytes byte array to be written Remarks Writes a primitive byte-array. Exceptions Type Condition IOException System.IO.IOException"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortableWriter.WriteChar.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortableWriter.WriteChar.html",
    "title": "Method WriteChar | Hazelcast .NET Documentation",
    "keywords": "Method WriteChar WriteChar(string, char) Writes a primitive char. Declaration void WriteChar(string fieldName, char value) Parameters Type Name Description string fieldName name of the field char value int value to be written Remarks Writes a primitive char. Exceptions Type Condition IOException System.IO.IOException"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortableWriter.WriteCharArray.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortableWriter.WriteCharArray.html",
    "title": "Method WriteCharArray | Hazelcast .NET Documentation",
    "keywords": "Method WriteCharArray WriteCharArray(string, char[]) Writes a primitive char-array. Declaration void WriteCharArray(string fieldName, char[] chars) Parameters Type Name Description string fieldName name of the field char[] chars char array to be written Remarks Writes a primitive char-array. Exceptions Type Condition IOException System.IO.IOException"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortableWriter.WriteDouble.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortableWriter.WriteDouble.html",
    "title": "Method WriteDouble | Hazelcast .NET Documentation",
    "keywords": "Method WriteDouble WriteDouble(string, double) Writes a primitive double. Declaration void WriteDouble(string fieldName, double value) Parameters Type Name Description string fieldName name of the field double value int value to be written Remarks Writes a primitive double. Exceptions Type Condition IOException System.IO.IOException"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortableWriter.WriteDoubleArray.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortableWriter.WriteDoubleArray.html",
    "title": "Method WriteDoubleArray | Hazelcast .NET Documentation",
    "keywords": "Method WriteDoubleArray WriteDoubleArray(string, double[]) Writes a primitive double array. Declaration void WriteDoubleArray(string fieldName, double[] values) Parameters Type Name Description string fieldName name of the field double[] values double array to be written Remarks Writes a primitive double array. Exceptions Type Condition IOException System.IO.IOException"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortableWriter.WriteFloat.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortableWriter.WriteFloat.html",
    "title": "Method WriteFloat | Hazelcast .NET Documentation",
    "keywords": "Method WriteFloat WriteFloat(string, float) Writes a primitive float. Declaration void WriteFloat(string fieldName, float value) Parameters Type Name Description string fieldName name of the field float value int value to be written Remarks Writes a primitive float. Exceptions Type Condition IOException System.IO.IOException"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortableWriter.WriteFloatArray.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortableWriter.WriteFloatArray.html",
    "title": "Method WriteFloatArray | Hazelcast .NET Documentation",
    "keywords": "Method WriteFloatArray WriteFloatArray(string, float[]) Writes a primitive float array. Declaration void WriteFloatArray(string fieldName, float[] values) Parameters Type Name Description string fieldName name of the field float[] values float array to be written Remarks Writes a primitive float array. Exceptions Type Condition IOException System.IO.IOException"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortableWriter.WriteInt.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortableWriter.WriteInt.html",
    "title": "Method WriteInt | Hazelcast .NET Documentation",
    "keywords": "Method WriteInt WriteInt(string, int) Writes a primitive int. Declaration void WriteInt(string fieldName, int value) Parameters Type Name Description string fieldName name of the field int value int value to be written Remarks Writes a primitive int. Exceptions Type Condition IOException System.IO.IOException"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortableWriter.WriteIntArray.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortableWriter.WriteIntArray.html",
    "title": "Method WriteIntArray | Hazelcast .NET Documentation",
    "keywords": "Method WriteIntArray WriteIntArray(string, int[]) Writes a primitive int-array. Declaration void WriteIntArray(string fieldName, int[] ints) Parameters Type Name Description string fieldName name of the field int[] ints int array to be written Remarks Writes a primitive int-array. Exceptions Type Condition IOException System.IO.IOException"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortableWriter.WriteLong.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortableWriter.WriteLong.html",
    "title": "Method WriteLong | Hazelcast .NET Documentation",
    "keywords": "Method WriteLong WriteLong(string, long) Writes a primitive long. Declaration void WriteLong(string fieldName, long value) Parameters Type Name Description string fieldName name of the field long value long value to be written Remarks Writes a primitive long. Exceptions Type Condition IOException System.IO.IOException"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortableWriter.WriteLongArray.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortableWriter.WriteLongArray.html",
    "title": "Method WriteLongArray | Hazelcast .NET Documentation",
    "keywords": "Method WriteLongArray WriteLongArray(string, long[]) Writes a primitive long-array. Declaration void WriteLongArray(string fieldName, long[] longs) Parameters Type Name Description string fieldName name of the field long[] longs long array to be written Remarks Writes a primitive long-array. Exceptions Type Condition IOException System.IO.IOException"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortableWriter.WriteNullPortable.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortableWriter.WriteNullPortable.html",
    "title": "Method WriteNullPortable | Hazelcast .NET Documentation",
    "keywords": "Method WriteNullPortable WriteNullPortable(string, int, int) To write a null portable value, user needs to provide class and factoryIds of related class. Declaration void WriteNullPortable(string fieldName, int factoryId, int classId) Parameters Type Name Description string fieldName name of the field int factoryId factory id of related portable class int classId class id of related portable class Remarks To write a null portable value, user needs to provide class and factoryIds of related class. Exceptions Type Condition IOException System.IO.IOException"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortableWriter.WritePortable.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortableWriter.WritePortable.html",
    "title": "Method WritePortable | Hazelcast .NET Documentation",
    "keywords": "Method WritePortable WritePortable(string, IPortable) Writes a Portable. Declaration void WritePortable(string fieldName, IPortable portable) Parameters Type Name Description string fieldName name of the field IPortable portable Portable to be written Remarks Writes a Portable. Exceptions Type Condition IOException System.IO.IOException"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortableWriter.WritePortableArray.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortableWriter.WritePortableArray.html",
    "title": "Method WritePortableArray | Hazelcast .NET Documentation",
    "keywords": "Method WritePortableArray WritePortableArray<TPortable>(string, TPortable[]) Writes a an array of Portables. Declaration void WritePortableArray<TPortable>(string fieldName, TPortable[] portables) where TPortable : IPortable Parameters Type Name Description string fieldName name of the field TPortable[] portables portable array to be written Type Parameters Name Description TPortable Remarks Writes a an array of Portables. Exceptions Type Condition IOException System.IO.IOException"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortableWriter.WriteShort.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortableWriter.WriteShort.html",
    "title": "Method WriteShort | Hazelcast .NET Documentation",
    "keywords": "Method WriteShort WriteShort(string, short) Writes a primitive short. Declaration void WriteShort(string fieldName, short value) Parameters Type Name Description string fieldName name of the field short value int value to be written Remarks Writes a primitive short. Exceptions Type Condition IOException System.IO.IOException"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortableWriter.WriteShortArray.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortableWriter.WriteShortArray.html",
    "title": "Method WriteShortArray | Hazelcast .NET Documentation",
    "keywords": "Method WriteShortArray WriteShortArray(string, short[]) Writes a primitive short-array. Declaration void WriteShortArray(string fieldName, short[] values) Parameters Type Name Description string fieldName name of the field short[] values short array to be written Remarks Writes a primitive short-array. Exceptions Type Condition IOException System.IO.IOException"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortableWriter.WriteString.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortableWriter.WriteString.html",
    "title": "Method WriteString | Hazelcast .NET Documentation",
    "keywords": "Method WriteString WriteString(string, string) Writes an UTF string. Declaration void WriteString(string fieldName, string value) Parameters Type Name Description string fieldName name of the field string value utf string value to be written Remarks Writes an UTF string. Exceptions Type Condition IOException System.IO.IOException"
  },
  "5.2.2/api/Hazelcast.Serialization.IPortableWriter.WriteStringArray.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IPortableWriter.WriteStringArray.html",
    "title": "Method WriteStringArray | Hazelcast .NET Documentation",
    "keywords": "Method WriteStringArray WriteStringArray(string, string[]) Writes a primitive string-array. Declaration void WriteStringArray(string fieldName, string[] strings) Parameters Type Name Description string fieldName name of the field string[] strings string array to be written Remarks Writes a primitive string-array. Exceptions Type Condition IOException System.IO.IOException"
  },
  "5.2.2/api/Hazelcast.Serialization.ISerializer.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.ISerializer.html",
    "title": "Interface ISerializer | Hazelcast .NET Documentation",
    "keywords": "Interface ISerializer Defines a custom serializer. Inherited Members IDisposable.Dispose() Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Syntax public interface ISerializer : IDisposable Properties Name Description TypeId Gets the identifier of the serialized type."
  },
  "5.2.2/api/Hazelcast.Serialization.ISerializer.TypeId.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.ISerializer.TypeId.html",
    "title": "Property TypeId | Hazelcast .NET Documentation",
    "keywords": "Property TypeId TypeId Gets the identifier of the serialized type. Declaration int TypeId { get; } Property Value Type Description int"
  },
  "5.2.2/api/Hazelcast.Serialization.IStreamSerializer-1.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IStreamSerializer-1.html",
    "title": "Interface IStreamSerializer<T> | Hazelcast .NET Documentation",
    "keywords": "Interface IStreamSerializer<T> Defines a generic custom ISerializer that operates over IObjectDataInput and IObjectDataOutput. Inherited Members ISerializer.TypeId IDisposable.Dispose() Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Syntax public interface IStreamSerializer<T> : ISerializer, IDisposable Type Parameters Name Description T The type of the serialized objects. Methods Name Description Read(IObjectDataInput) Reads an object. Write(IObjectDataOutput, T) Writes an object."
  },
  "5.2.2/api/Hazelcast.Serialization.IStreamSerializer-1.Read.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IStreamSerializer-1.Read.html",
    "title": "Method Read | Hazelcast .NET Documentation",
    "keywords": "Method Read Read(IObjectDataInput) Reads an object. Declaration T Read(IObjectDataInput input) Parameters Type Name Description IObjectDataInput input Input data. Returns Type Description T The object."
  },
  "5.2.2/api/Hazelcast.Serialization.IStreamSerializer-1.Write.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IStreamSerializer-1.Write.html",
    "title": "Method Write | Hazelcast .NET Documentation",
    "keywords": "Method Write Write(IObjectDataOutput, T) Writes an object. Declaration void Write(IObjectDataOutput output, T obj) Parameters Type Name Description IObjectDataOutput output Output data. T obj The object."
  },
  "5.2.2/api/Hazelcast.Serialization.IVersionedPortable.ClassVersion.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IVersionedPortable.ClassVersion.html",
    "title": "Property ClassVersion | Hazelcast .NET Documentation",
    "keywords": "Property ClassVersion ClassVersion Returns version for this Portable class Declaration int ClassVersion { get; } Property Value Type Description int class version"
  },
  "5.2.2/api/Hazelcast.Serialization.IVersionedPortable.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.IVersionedPortable.html",
    "title": "Interface IVersionedPortable | Hazelcast .NET Documentation",
    "keywords": "Interface IVersionedPortable VersionedPortable is an extension to IPortable to support per class version instead of a global serialization version. Inherited Members IPortable.ClassId IPortable.FactoryId IPortable.ReadPortable(IPortableReader) IPortable.WritePortable(IPortableWriter) Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Syntax public interface IVersionedPortable : IPortable Properties Name Description ClassVersion Returns version for this Portable class See Also IPortable IPortableFactory"
  },
  "5.2.2/api/Hazelcast.Serialization.JavaClass.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.JavaClass.-ctor.html",
    "title": "Constructor JavaClass | Hazelcast .NET Documentation",
    "keywords": "Constructor JavaClass JavaClass(string) Declaration public JavaClass(string name) Parameters Type Name Description string name"
  },
  "5.2.2/api/Hazelcast.Serialization.JavaClass.Equals.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.JavaClass.Equals.html",
    "title": "Method Equals | Hazelcast .NET Documentation",
    "keywords": "Method Equals Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides object.Equals(object) Equals(JavaClass) Declaration protected bool Equals(JavaClass other) Parameters Type Name Description JavaClass other Returns Type Description bool Equals(JavaClass, JavaClass) Declaration public static bool Equals(JavaClass left, JavaClass right) Parameters Type Name Description JavaClass left JavaClass right Returns Type Description bool"
  },
  "5.2.2/api/Hazelcast.Serialization.JavaClass.GetHashCode.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.JavaClass.GetHashCode.html",
    "title": "Method GetHashCode | Hazelcast .NET Documentation",
    "keywords": "Method GetHashCode GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode()"
  },
  "5.2.2/api/Hazelcast.Serialization.JavaClass.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.JavaClass.html",
    "title": "Class JavaClass | Hazelcast .NET Documentation",
    "keywords": "Class JavaClass Class for serializing/deserializing Java Class types Inheritance object JavaClass Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Syntax public class JavaClass Constructors Name Description JavaClass(string) Properties Name Description Name Methods Name Description Equals(JavaClass, JavaClass) Equals(JavaClass) Equals(object) GetHashCode() ToString()"
  },
  "5.2.2/api/Hazelcast.Serialization.JavaClass.Name.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.JavaClass.Name.html",
    "title": "Property Name | Hazelcast .NET Documentation",
    "keywords": "Property Name Name Declaration public string Name { get; } Property Value Type Description string"
  },
  "5.2.2/api/Hazelcast.Serialization.JavaClass.ToString.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.JavaClass.ToString.html",
    "title": "Method ToString | Hazelcast .NET Documentation",
    "keywords": "Method ToString ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString()"
  },
  "5.2.2/api/Hazelcast.Serialization.SerializationException.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.SerializationException.-ctor.html",
    "title": "Constructor SerializationException | Hazelcast .NET Documentation",
    "keywords": "Constructor SerializationException SerializationException() Initializes a new instance of the SerializationException class. Declaration public SerializationException() SerializationException(string) Initializes a new instance of the SerializationException class with a specified error message. Declaration public SerializationException(string message) Parameters Type Name Description string message The message that describes the error. SerializationException(Exception) Initializes a new instance of the SerializationException class with a reference to the inner exception that is the cause of this exception. Declaration public SerializationException(Exception innerException) Parameters Type Name Description Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. SerializationException(string, Exception) Initializes a new instance of the SerializationException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public SerializationException(string message, Exception innerException) Parameters Type Name Description string message The message that describes the error. Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. SerializationException(SerializationInfo, StreamingContext) Initializes a new instance of the SerializationException class with serialized data. Declaration protected SerializationException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The SerializationInfo that holds the serialized object data about the exception being thrown. StreamingContext context The StreamingContext that contains contextual information about the source or destination."
  },
  "5.2.2/api/Hazelcast.Serialization.SerializationException.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.SerializationException.html",
    "title": "Class SerializationException | Hazelcast .NET Documentation",
    "keywords": "Class SerializationException Represents an exception that is thrown when an error occurs while serializing or de-serializing objects. Inheritance object Exception HazelcastException SerializationException UnknownCompactSchemaException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Syntax [Serializable] public class SerializationException : HazelcastException, ISerializable Constructors Name Description SerializationException() Initializes a new instance of the SerializationException class. SerializationException(Exception) Initializes a new instance of the SerializationException class with a reference to the inner exception that is the cause of this exception. SerializationException(SerializationInfo, StreamingContext) Initializes a new instance of the SerializationException class with serialized data. SerializationException(string, Exception) Initializes a new instance of the SerializationException class with a specified error message and a reference to the inner exception that is the cause of this exception. SerializationException(string) Initializes a new instance of the SerializationException class with a specified error message."
  },
  "5.2.2/api/Hazelcast.Serialization.SerializationOptions.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.SerializationOptions.-ctor.html",
    "title": "Constructor SerializationOptions | Hazelcast .NET Documentation",
    "keywords": "Constructor SerializationOptions SerializationOptions() Initializes a new instance of the SerializationOptions class. Declaration public SerializationOptions()"
  },
  "5.2.2/api/Hazelcast.Serialization.SerializationOptions.AddDataSerializableFactory.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.SerializationOptions.AddDataSerializableFactory.html",
    "title": "Method AddDataSerializableFactory | Hazelcast .NET Documentation",
    "keywords": "Method AddDataSerializableFactory AddDataSerializableFactory(int, IDataSerializableFactory) Adds an IDataSerializableFactory. Declaration public SerializationOptions AddDataSerializableFactory(int factoryId, IDataSerializableFactory factory) Parameters Type Name Description int factoryId The identifier of the factory. IDataSerializableFactory factory The factory. Returns Type Description SerializationOptions The SerializationOptions."
  },
  "5.2.2/api/Hazelcast.Serialization.SerializationOptions.AddDataSerializableFactoryClass.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.SerializationOptions.AddDataSerializableFactoryClass.html",
    "title": "Method AddDataSerializableFactoryClass | Hazelcast .NET Documentation",
    "keywords": "Method AddDataSerializableFactoryClass AddDataSerializableFactoryClass(int, string) Adds an IDataSerializableFactory. Declaration public SerializationOptions AddDataSerializableFactoryClass(int factoryId, string factoryTypeName) Parameters Type Name Description int factoryId The identifier of the factory. string factoryTypeName The type name of the factory Returns Type Description SerializationOptions The SerializationOptions. AddDataSerializableFactoryClass(int, Type) Adds an IDataSerializableFactory. Declaration public SerializationOptions AddDataSerializableFactoryClass(int factoryId, Type factoryType) Parameters Type Name Description int factoryId The identifier of the factory. Type factoryType The type of the factory Returns Type Description SerializationOptions The SerializationOptions."
  },
  "5.2.2/api/Hazelcast.Serialization.SerializationOptions.AddPortableFactory.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.SerializationOptions.AddPortableFactory.html",
    "title": "Method AddPortableFactory | Hazelcast .NET Documentation",
    "keywords": "Method AddPortableFactory AddPortableFactory(int, IPortableFactory) Adds an IPortableFactory. Declaration public SerializationOptions AddPortableFactory(int factoryId, IPortableFactory factory) Parameters Type Name Description int factoryId The identifier of the factory. IPortableFactory factory The factory. Returns Type Description SerializationOptions The SerializationOptions. AddPortableFactory(int, Type) Adds an IPortableFactory. Declaration public SerializationOptions AddPortableFactory(int factoryId, Type factoryType) Parameters Type Name Description int factoryId The identifier of the factory. Type factoryType The type of the factory Returns Type Description SerializationOptions The SerializationOptions. AddPortableFactory(int, string) Adds an IPortableFactory. Declaration public SerializationOptions AddPortableFactory(int factoryId, string factoryTypeName) Parameters Type Name Description int factoryId The identifier of the factory. string factoryTypeName The type name of the factory Returns Type Description SerializationOptions The SerializationOptions."
  },
  "5.2.2/api/Hazelcast.Serialization.SerializationOptions.ClassDefinitions.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.SerializationOptions.ClassDefinitions.html",
    "title": "Property ClassDefinitions | Hazelcast .NET Documentation",
    "keywords": "Property ClassDefinitions ClassDefinitions Gets the collection of IClassDefinition. Declaration public ICollection<IClassDefinition> ClassDefinitions { get; } Property Value Type Description ICollection<IClassDefinition> Remarks This can only be done programmatically."
  },
  "5.2.2/api/Hazelcast.Serialization.SerializationOptions.Compact.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.SerializationOptions.Compact.html",
    "title": "Property Compact | Hazelcast .NET Documentation",
    "keywords": "Property Compact Compact Gets the compact serialization options. Declaration public CompactOptions Compact { get; } Property Value Type Description CompactOptions"
  },
  "5.2.2/api/Hazelcast.Serialization.SerializationOptions.DataSerializableFactories.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.SerializationOptions.DataSerializableFactories.html",
    "title": "Property DataSerializableFactories | Hazelcast .NET Documentation",
    "keywords": "Property DataSerializableFactories DataSerializableFactories Gets the collection of FactoryOptions<T> of IDataSerializableFactory. Declaration public ICollection<FactoryOptions<IDataSerializableFactory>> DataSerializableFactories { get; } Property Value Type Description ICollection<FactoryOptions<IDataSerializableFactory>>"
  },
  "5.2.2/api/Hazelcast.Serialization.SerializationOptions.EnableClrSerialization.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.SerializationOptions.EnableClrSerialization.html",
    "title": "Property EnableClrSerialization | Hazelcast .NET Documentation",
    "keywords": "Property EnableClrSerialization EnableClrSerialization Whether to enable CLR serialization via BinaryFormatter. Declaration public bool EnableClrSerialization { get; set; } Property Value Type Description bool Remarks BinaryFormatter is now considered insecure, and CLR serialization is disabled by default. In order to enable CLR serialization, set this value to true. Note that if a global serializer is configured via GlobalSerializer, then this option must be true, and OverrideClrSerialization must be false, for CLR serialization to be enabled."
  },
  "5.2.2/api/Hazelcast.Serialization.SerializationOptions.Endianness.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.SerializationOptions.Endianness.html",
    "title": "Property Endianness | Hazelcast .NET Documentation",
    "keywords": "Property Endianness Endianness Gets or sets the Endianness. This value should match the server configuration. Declaration public Endianness Endianness { get; set; } Property Value Type Description Endianness"
  },
  "5.2.2/api/Hazelcast.Serialization.SerializationOptions.GlobalSerializer.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.SerializationOptions.GlobalSerializer.html",
    "title": "Property GlobalSerializer | Hazelcast .NET Documentation",
    "keywords": "Property GlobalSerializer GlobalSerializer Gets the GlobalSerializerOptions. Declaration public GlobalSerializerOptions GlobalSerializer { get; set; } Property Value Type Description GlobalSerializerOptions Remarks When defined in a configuration file, it is defined as an injected type, for instance: \"globalSerializer\": { \"typeName\": \"My.Serializer\", \"args\": { \"foo\": 42 }, \"overrideClrSerialization\": true } with the additional overrideClrSerialization property."
  },
  "5.2.2/api/Hazelcast.Serialization.SerializationOptions.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.SerializationOptions.html",
    "title": "Class SerializationOptions | Hazelcast .NET Documentation",
    "keywords": "Class SerializationOptions Contains the serialization options Inheritance object SerializationOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Syntax public sealed class SerializationOptions Remarks IIdentifiedDataSerializable, IPortable, custom serializers, and global serializer can be configured using this config. Constructors Name Description SerializationOptions() Initializes a new instance of the SerializationOptions class. Properties Name Description ClassDefinitions Gets the collection of IClassDefinition. Compact Gets the compact serialization options. DataSerializableFactories Gets the collection of FactoryOptions<T> of IDataSerializableFactory. EnableClrSerialization Whether to enable CLR serialization via BinaryFormatter. Endianness Gets or sets the Endianness. This value should match the server configuration. GlobalSerializer Gets the GlobalSerializerOptions. PortableFactories Gets the collection of FactoryOptions<T> of IPortableFactory. PortableVersion Gets or sets the portable version. Serializers Gets the collection of SerializerOptions. ValidateClassDefinitions Whether to check for class definition errors at start, and throw an Serialization Exception with error definition. Methods Name Description AddDataSerializableFactory(int, IDataSerializableFactory) Adds an IDataSerializableFactory. AddDataSerializableFactoryClass(int, string) Adds an IDataSerializableFactory. AddDataSerializableFactoryClass(int, Type) Adds an IDataSerializableFactory. AddPortableFactory(int, IPortableFactory) Adds an IPortableFactory. AddPortableFactory(int, string) Adds an IPortableFactory. AddPortableFactory(int, Type) Adds an IPortableFactory."
  },
  "5.2.2/api/Hazelcast.Serialization.SerializationOptions.PortableFactories.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.SerializationOptions.PortableFactories.html",
    "title": "Property PortableFactories | Hazelcast .NET Documentation",
    "keywords": "Property PortableFactories PortableFactories Gets the collection of FactoryOptions<T> of IPortableFactory. Declaration public ICollection<FactoryOptions<IPortableFactory>> PortableFactories { get; } Property Value Type Description ICollection<FactoryOptions<IPortableFactory>>"
  },
  "5.2.2/api/Hazelcast.Serialization.SerializationOptions.PortableVersion.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.SerializationOptions.PortableVersion.html",
    "title": "Property PortableVersion | Hazelcast .NET Documentation",
    "keywords": "Property PortableVersion PortableVersion Gets or sets the portable version. Declaration public int PortableVersion { get; set; } Property Value Type Description int"
  },
  "5.2.2/api/Hazelcast.Serialization.SerializationOptions.Serializers.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.SerializationOptions.Serializers.html",
    "title": "Property Serializers | Hazelcast .NET Documentation",
    "keywords": "Property Serializers Serializers Gets the collection of SerializerOptions. Declaration public ICollection<SerializerOptions> Serializers { get; } Property Value Type Description ICollection<SerializerOptions> Remarks"
  },
  "5.2.2/api/Hazelcast.Serialization.SerializationOptions.ValidateClassDefinitions.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.SerializationOptions.ValidateClassDefinitions.html",
    "title": "Property ValidateClassDefinitions | Hazelcast .NET Documentation",
    "keywords": "Property ValidateClassDefinitions ValidateClassDefinitions Whether to check for class definition errors at start, and throw an Serialization Exception with error definition. Declaration public bool ValidateClassDefinitions { get; set; } Property Value Type Description bool"
  },
  "5.2.2/api/Hazelcast.Serialization.SerializerOptions.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.SerializerOptions.-ctor.html",
    "title": "Constructor SerializerOptions | Hazelcast .NET Documentation",
    "keywords": "Constructor SerializerOptions SerializerOptions() Initializes a new instance of the SerializationOptions class. Declaration public SerializerOptions() SerializerOptions(SerializerOptions, bool) Initializes a new instance of the SerializationOptions class. Declaration protected SerializerOptions(SerializerOptions other, bool shallow) Parameters Type Name Description SerializerOptions other bool shallow"
  },
  "5.2.2/api/Hazelcast.Serialization.SerializerOptions.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.SerializerOptions.html",
    "title": "Class SerializerOptions | Hazelcast .NET Documentation",
    "keywords": "Class SerializerOptions Configures a serializer for a type. Inheritance object SingletonServiceFactory<ISerializer> SerializerOptions Implements IDisposable Inherited Members SingletonServiceFactory<ISerializer>.Creator SingletonServiceFactory<ISerializer>.IsConfigured SingletonServiceFactory<ISerializer>.ServiceProvider SingletonServiceFactory<ISerializer>.OwnsService SingletonServiceFactory<ISerializer>.Service SingletonServiceFactory<ISerializer>.Dispose() SingletonServiceFactory<ISerializer>.Dispose(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Syntax public class SerializerOptions : SingletonServiceFactory<ISerializer>, IDisposable Constructors Name Description SerializerOptions() Initializes a new instance of the SerializationOptions class. SerializerOptions(SerializerOptions, bool) Initializes a new instance of the SerializationOptions class. Properties Name Description SerializedType Gets or sets the type being serialized."
  },
  "5.2.2/api/Hazelcast.Serialization.SerializerOptions.SerializedType.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.SerializerOptions.SerializedType.html",
    "title": "Property SerializedType | Hazelcast .NET Documentation",
    "keywords": "Property SerializedType SerializedType Gets or sets the type being serialized. Declaration public Type SerializedType { get; set; } Property Value Type Description Type"
  },
  "5.2.2/api/Hazelcast.Serialization.UnknownCompactSchemaException.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.UnknownCompactSchemaException.-ctor.html",
    "title": "Constructor UnknownCompactSchemaException | Hazelcast .NET Documentation",
    "keywords": "Constructor UnknownCompactSchemaException UnknownCompactSchemaException(long) Initializes a new instance of the UnknownCompactSchemaException class. Declaration public UnknownCompactSchemaException(long schemaId) Parameters Type Name Description long schemaId The identifier of the unknown schema."
  },
  "5.2.2/api/Hazelcast.Serialization.UnknownCompactSchemaException.GetObjectData.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.UnknownCompactSchemaException.GetObjectData.html",
    "title": "Method GetObjectData | Hazelcast .NET Documentation",
    "keywords": "Method GetObjectData GetObjectData(SerializationInfo, StreamingContext) Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context Overrides Exception.GetObjectData(SerializationInfo, StreamingContext)"
  },
  "5.2.2/api/Hazelcast.Serialization.UnknownCompactSchemaException.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.UnknownCompactSchemaException.html",
    "title": "Class UnknownCompactSchemaException | Hazelcast .NET Documentation",
    "keywords": "Class UnknownCompactSchemaException The exception that is thrown when a compact serialization schema could not be found for a specified schema identifier, even after trying to fetch it from the cluster. Inheritance object Exception HazelcastException SerializationException UnknownCompactSchemaException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Syntax [Serializable] public sealed class UnknownCompactSchemaException : SerializationException, ISerializable Constructors Name Description UnknownCompactSchemaException(long) Initializes a new instance of the UnknownCompactSchemaException class. Properties Name Description SchemaId Gets the identifier of the unknown schema. Methods Name Description GetObjectData(SerializationInfo, StreamingContext)"
  },
  "5.2.2/api/Hazelcast.Serialization.UnknownCompactSchemaException.SchemaId.html": {
    "href": "5.2.2/api/Hazelcast.Serialization.UnknownCompactSchemaException.SchemaId.html",
    "title": "Property SchemaId | Hazelcast .NET Documentation",
    "keywords": "Property SchemaId SchemaId Gets the identifier of the unknown schema. Declaration public long SchemaId { get; } Property Value Type Description long"
  },
  "5.2.2/api/Hazelcast.Sql.HazelcastSqlException.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Sql.HazelcastSqlException.-ctor.html",
    "title": "Constructor HazelcastSqlException | Hazelcast .NET Documentation",
    "keywords": "Constructor HazelcastSqlException HazelcastSqlException(SerializationInfo, StreamingContext) Initializes a new instance of the HazelcastSqlException class with serialized data. Declaration protected HazelcastSqlException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The SerializationInfo that holds the serialized object data about the exception being thrown. StreamingContext context The StreamingContext that contains contextual information about the source or destination."
  },
  "5.2.2/api/Hazelcast.Sql.HazelcastSqlException.ClientId.html": {
    "href": "5.2.2/api/Hazelcast.Sql.HazelcastSqlException.ClientId.html",
    "title": "Property ClientId | Hazelcast .NET Documentation",
    "keywords": "Property ClientId ClientId Get the identifier of the IHazelcastClient. Declaration public Guid ClientId { get; } Property Value Type Description Guid"
  },
  "5.2.2/api/Hazelcast.Sql.HazelcastSqlException.GetObjectData.html": {
    "href": "5.2.2/api/Hazelcast.Sql.HazelcastSqlException.GetObjectData.html",
    "title": "Method GetObjectData | Hazelcast .NET Documentation",
    "keywords": "Method GetObjectData GetObjectData(SerializationInfo, StreamingContext) Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context Overrides Exception.GetObjectData(SerializationInfo, StreamingContext)"
  },
  "5.2.2/api/Hazelcast.Sql.HazelcastSqlException.html": {
    "href": "5.2.2/api/Hazelcast.Sql.HazelcastSqlException.html",
    "title": "Class HazelcastSqlException | Hazelcast .NET Documentation",
    "keywords": "Class HazelcastSqlException Represents the exception that is thrown by the SQL service in case of an error. Inheritance object Exception HazelcastException HazelcastSqlException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Hazelcast.Sql Assembly: Hazelcast.Net.dll Syntax [Serializable] public class HazelcastSqlException : HazelcastException, ISerializable Constructors Name Description HazelcastSqlException(SerializationInfo, StreamingContext) Initializes a new instance of the HazelcastSqlException class with serialized data. Properties Name Description ClientId Get the identifier of the IHazelcastClient. MemberId Gets the identifier of the member that reported the exception, if any, or Guid.Empty. Suggestion Suggests a solution for the exception if any, or String.Empty Methods Name Description GetObjectData(SerializationInfo, StreamingContext)"
  },
  "5.2.2/api/Hazelcast.Sql.HazelcastSqlException.MemberId.html": {
    "href": "5.2.2/api/Hazelcast.Sql.HazelcastSqlException.MemberId.html",
    "title": "Property MemberId | Hazelcast .NET Documentation",
    "keywords": "Property MemberId MemberId Gets the identifier of the member that reported the exception, if any, or Guid.Empty. Declaration public Guid MemberId { get; } Property Value Type Description Guid Remarks If the exception was thrown by the client and not reported by a member, then the value is Guid.Empty."
  },
  "5.2.2/api/Hazelcast.Sql.HazelcastSqlException.Suggestion.html": {
    "href": "5.2.2/api/Hazelcast.Sql.HazelcastSqlException.Suggestion.html",
    "title": "Property Suggestion | Hazelcast .NET Documentation",
    "keywords": "Property Suggestion Suggestion Suggests a solution for the exception if any, or String.Empty Declaration public string Suggestion { get; } Property Value Type Description string"
  },
  "5.2.2/api/Hazelcast.Sql.html": {
    "href": "5.2.2/api/Hazelcast.Sql.html",
    "title": "Namespace Hazelcast.Sql | Hazelcast .NET Documentation",
    "keywords": "Namespace Hazelcast.Sql Classes HazelcastSqlException Represents the exception that is thrown by the SQL service in case of an error. SqlColumnMetadata SQL column metadata. SqlRow Represents a row in an ISqlQueryResult. SqlRowMetadata Represents columns metadata for a SqlRow. SqlServiceExtensions SqlStatementOptions Interfaces ISqlQueryResult Represents the result of a SQL query (SELECT ...). ISqlService Represents the Hazelcast SQL service. Enums SqlColumnType SQL column type."
  },
  "5.2.2/api/Hazelcast.Sql.ISqlQueryResult.html": {
    "href": "5.2.2/api/Hazelcast.Sql.ISqlQueryResult.html",
    "title": "Interface ISqlQueryResult | Hazelcast .NET Documentation",
    "keywords": "Interface ISqlQueryResult Represents the result of a SQL query (SELECT ...). Inherited Members IAsyncEnumerable<SqlRow>.GetAsyncEnumerator(CancellationToken) IAsyncDisposable.DisposeAsync() Namespace: Hazelcast.Sql Assembly: Hazelcast.Net.dll Syntax public interface ISqlQueryResult : IAsyncEnumerable<SqlRow>, IAsyncDisposable Remarks The result of a SQL query is a one-off IAsyncEnumerable<T> of SqlRows. It can be enumerated only once. Trying to iterate rows multiple times will throw InvalidOperationException. This class implements IAsyncDisposable and instances should be disposed when not needed in order to free server-side resources. Failing to dispose instances may impact performances on the server. Recommended way is to wrap execution in to an await using statement. This class is stateful and not thread-safe, executing its method in parallel may lead to unpredictable results."
  },
  "5.2.2/api/Hazelcast.Sql.ISqlService.ExecuteCommandAsync.html": {
    "href": "5.2.2/api/Hazelcast.Sql.ISqlService.ExecuteCommandAsync.html",
    "title": "Method ExecuteCommandAsync | Hazelcast .NET Documentation",
    "keywords": "Method ExecuteCommandAsync ExecuteCommandAsync(string, object[], SqlStatementOptions, CancellationToken) Executes a SQL command. Declaration Task<long> ExecuteCommandAsync(string sql, object[] parameters = null, SqlStatementOptions options = null, CancellationToken cancellationToken = default) Parameters Type Name Description string sql The SQL command text to execute. object[] parameters Parameters for the SQL command. SqlStatementOptions options Options for the SQL command (defaults to Default). CancellationToken cancellationToken A cancellation token. Returns Type Description Task<long> The number of rows affected byt the command. Remarks The sql query text can contain parameter placeholders, specified via a '?' character. Each occurrence of the '?' character is replaced by the next parameter from the parameters ordered list. ExecuteCommandAsync(string, SqlStatementOptions, CancellationToken, params object[]) Executes a SQL command. Declaration Task<long> ExecuteCommandAsync(string sql, SqlStatementOptions options = null, CancellationToken cancellationToken = default, params object[] parameters) Parameters Type Name Description string sql The SQL command text to execute. SqlStatementOptions options Options for the SQL command (defaults to Default). CancellationToken cancellationToken A cancellation token. object[] parameters Parameters for the SQL command. Returns Type Description Task<long> The number of rows affected byt the command. Remarks The sql query text can contain parameter placeholders, specified via a '?' character. Each occurrence of the '?' character is replaced by the next parameter from the parameters ordered list."
  },
  "5.2.2/api/Hazelcast.Sql.ISqlService.ExecuteQueryAsync.html": {
    "href": "5.2.2/api/Hazelcast.Sql.ISqlService.ExecuteQueryAsync.html",
    "title": "Method ExecuteQueryAsync | Hazelcast .NET Documentation",
    "keywords": "Method ExecuteQueryAsync ExecuteQueryAsync(string, object[], SqlStatementOptions, CancellationToken) Executes a SQL query. Declaration Task<ISqlQueryResult> ExecuteQueryAsync(string sql, object[] parameters = null, SqlStatementOptions options = null, CancellationToken cancellationToken = default) Parameters Type Name Description string sql The SQL query text to execute. object[] parameters Parameters for the SQL query. SqlStatementOptions options Options for the SQL query (defaults to Default). CancellationToken cancellationToken A cancellation token. Returns Type Description Task<ISqlQueryResult> An ISqlQueryResult instance that represents the result of the query. Remarks The sql query text can contain parameter placeholders, specified via a '?' character. Each occurrence of the '?' character is replaced by the next parameter from the parameters ordered list. ExecuteQueryAsync(string, SqlStatementOptions, CancellationToken, params object[]) Executes a SQL query. Declaration Task<ISqlQueryResult> ExecuteQueryAsync(string sql, SqlStatementOptions options = null, CancellationToken cancellationToken = default, params object[] parameters) Parameters Type Name Description string sql The SQL query text to execute. SqlStatementOptions options Options for the SQL query (defaults to Default). CancellationToken cancellationToken A cancellation token. object[] parameters Parameters for the SQL query. Returns Type Description Task<ISqlQueryResult> An ISqlQueryResult instance that represents the result of the query. Remarks The sql query text can contain parameter placeholders, specified via a '?' character. Each occurrence of the '?' character is replaced by the next parameter from the parameters ordered list."
  },
  "5.2.2/api/Hazelcast.Sql.ISqlService.html": {
    "href": "5.2.2/api/Hazelcast.Sql.ISqlService.html",
    "title": "Interface ISqlService | Hazelcast .NET Documentation",
    "keywords": "Interface ISqlService Represents the Hazelcast SQL service. Namespace: Hazelcast.Sql Assembly: Hazelcast.Net.dll Syntax public interface ISqlService Methods Name Description ExecuteCommandAsync(string, SqlStatementOptions, CancellationToken, params object[]) Executes a SQL command. ExecuteCommandAsync(string, object[], SqlStatementOptions, CancellationToken) Executes a SQL command. ExecuteQueryAsync(string, SqlStatementOptions, CancellationToken, params object[]) Executes a SQL query. ExecuteQueryAsync(string, object[], SqlStatementOptions, CancellationToken) Executes a SQL query. Extension Methods SqlServiceExtensions.ExecuteCommandAsync(ISqlService, string, SqlStatementOptions, CancellationToken) SqlServiceExtensions.ExecuteCommandAsync(ISqlService, string, params object[]) SqlServiceExtensions.ExecuteQueryAsync(ISqlService, string, SqlStatementOptions, CancellationToken) SqlServiceExtensions.ExecuteQueryAsync(ISqlService, string, params object[]) SqlServiceExtensions.ExecuteQueryAsync(ISqlService, string, CancellationToken)"
  },
  "5.2.2/api/Hazelcast.Sql.SqlColumnMetadata.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Sql.SqlColumnMetadata.-ctor.html",
    "title": "Constructor SqlColumnMetadata | Hazelcast .NET Documentation",
    "keywords": "Constructor SqlColumnMetadata SqlColumnMetadata(string, SqlColumnType, bool) Declaration public SqlColumnMetadata(string name, SqlColumnType type, bool isNullable) Parameters Type Name Description string name SqlColumnType type bool isNullable"
  },
  "5.2.2/api/Hazelcast.Sql.SqlColumnMetadata.html": {
    "href": "5.2.2/api/Hazelcast.Sql.SqlColumnMetadata.html",
    "title": "Class SqlColumnMetadata | Hazelcast .NET Documentation",
    "keywords": "Class SqlColumnMetadata SQL column metadata. Inheritance object SqlColumnMetadata Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Hazelcast.Sql Assembly: Hazelcast.Net.dll Syntax public class SqlColumnMetadata Constructors Name Description SqlColumnMetadata(string, SqlColumnType, bool) Properties Name Description IsNullable Column nullability. If true, the column values can be null. Name Column name. Type Column type. Methods Name Description ToString()"
  },
  "5.2.2/api/Hazelcast.Sql.SqlColumnMetadata.IsNullable.html": {
    "href": "5.2.2/api/Hazelcast.Sql.SqlColumnMetadata.IsNullable.html",
    "title": "Property IsNullable | Hazelcast .NET Documentation",
    "keywords": "Property IsNullable IsNullable Column nullability. If true, the column values can be null. Declaration public bool IsNullable { get; } Property Value Type Description bool"
  },
  "5.2.2/api/Hazelcast.Sql.SqlColumnMetadata.Name.html": {
    "href": "5.2.2/api/Hazelcast.Sql.SqlColumnMetadata.Name.html",
    "title": "Property Name | Hazelcast .NET Documentation",
    "keywords": "Property Name Name Column name. Declaration public string Name { get; } Property Value Type Description string"
  },
  "5.2.2/api/Hazelcast.Sql.SqlColumnMetadata.ToString.html": {
    "href": "5.2.2/api/Hazelcast.Sql.SqlColumnMetadata.ToString.html",
    "title": "Method ToString | Hazelcast .NET Documentation",
    "keywords": "Method ToString ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString()"
  },
  "5.2.2/api/Hazelcast.Sql.SqlColumnMetadata.Type.html": {
    "href": "5.2.2/api/Hazelcast.Sql.SqlColumnMetadata.Type.html",
    "title": "Property Type | Hazelcast .NET Documentation",
    "keywords": "Property Type Type Column type. Declaration public SqlColumnType Type { get; } Property Value Type Description SqlColumnType"
  },
  "5.2.2/api/Hazelcast.Sql.SqlColumnType.html": {
    "href": "5.2.2/api/Hazelcast.Sql.SqlColumnType.html",
    "title": "Enum SqlColumnType | Hazelcast .NET Documentation",
    "keywords": "Enum SqlColumnType SQL column type. Namespace: Hazelcast.Sql Assembly: Hazelcast.Net.dll Syntax public enum SqlColumnType Fields Name Description BigInt BIGINT type, represented by java.lang.Long in Java and by long in .NET. Boolean BOOLEAN type, represented by java.lang.Boolean in Java and by bool in .NET. Date DATE type, represented by java.lang.LocalDate in Java and by HLocalDate in .NET. Decimal DECIMAL type, represented by java.lang.BigDecimal in Java and by HBigDecimal in .NET. Double DOUBLE type, represented by java.lang.Double in Java and by double in .NET. Integer INTEGER type, represented by java.lang.Integer in Java and by int in .NET. Json Json type, represented by HazelcastJsonValue Null The type of the generic SQL NULL literal. The only valid value of NULL type is null. Object OBJECT type, could be represented by any Java and .NET class. Real REAL type, represented by java.lang.Float in Java and by float in .NET. SmallInt SMALLINT type, represented by java.lang.Short in Java and by short in .NET. Time TIME type, represented by java.lang.LocalTime in Java and by HLocalTime in .NET. Timestamp TIMESTAMP type, represented by java.lang.LocalDateTime in Java and by HLocalDateTime in .NET. TimestampWithTimeZone TIMESTAMP_WITH_TIME_ZONE type, represented by java.lang.OffsetDateTime in Java and by HOffsetDateTime in .NET. TinyInt TINYINT type, represented by java.lang.Byte in Java and by byte in .NET. Varchar VARCHAR type, represented by java.lang.String in Java and by string in .NET."
  },
  "5.2.2/api/Hazelcast.Sql.SqlRow.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.Sql.SqlRow.-ctor.html",
    "title": "Constructor SqlRow | Hazelcast .NET Documentation",
    "keywords": "Constructor SqlRow SqlRow(IList<object>, SqlRowMetadata) Initializes a new instance of the SqlRow class. Declaration public SqlRow(IList<object> values, SqlRowMetadata metadata) Parameters Type Name Description IList<object> values SqlRowMetadata metadata"
  },
  "5.2.2/api/Hazelcast.Sql.SqlRow.GetColumn.html": {
    "href": "5.2.2/api/Hazelcast.Sql.SqlRow.GetColumn.html",
    "title": "Method GetColumn | Hazelcast .NET Documentation",
    "keywords": "Method GetColumn GetColumn<T>(int) Gets the value of the column by identified by index Declaration public T GetColumn<T>(int index) Parameters Type Name Description int index The index. Returns Type Description T The value of the column. Type Parameters Name Description T The type of the column value. Remarks For performance purposes and to reduce allocations, the column value is deserialized but NOT cached. Avoid getting the value of a column multiple times. Cache it in a local variable instead, if needed. GetColumn<T>(string) Gets the value of a column identified by its name. Declaration public T GetColumn<T>(string name) Parameters Type Name Description string name The name of the column. Returns Type Description T The value of the column with the specified name. Type Parameters Name Description T The expected type of the value."
  },
  "5.2.2/api/Hazelcast.Sql.SqlRow.GetKey.html": {
    "href": "5.2.2/api/Hazelcast.Sql.SqlRow.GetKey.html",
    "title": "Method GetKey | Hazelcast .NET Documentation",
    "keywords": "Method GetKey GetKey<T>() Gets the key of the row. Declaration public T GetKey<T>() Returns Type Description T The key of the row. Type Parameters Name Description T The expected type of the key."
  },
  "5.2.2/api/Hazelcast.Sql.SqlRow.GetValue.html": {
    "href": "5.2.2/api/Hazelcast.Sql.SqlRow.GetValue.html",
    "title": "Method GetValue | Hazelcast .NET Documentation",
    "keywords": "Method GetValue GetValue<T>() Gets the value of the row. Declaration public T GetValue<T>() Returns Type Description T The value of the row. Type Parameters Name Description T The expected type of the value."
  },
  "5.2.2/api/Hazelcast.Sql.SqlRow.html": {
    "href": "5.2.2/api/Hazelcast.Sql.SqlRow.html",
    "title": "Class SqlRow | Hazelcast .NET Documentation",
    "keywords": "Class SqlRow Represents a row in an ISqlQueryResult. Inheritance object SqlRow Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.Sql Assembly: Hazelcast.Net.dll Syntax public class SqlRow Constructors Name Description SqlRow(IList<object>, SqlRowMetadata) Initializes a new instance of the SqlRow class. Properties Name Description Metadata Gets the row metadata. Methods Name Description GetColumn<T>(int) Gets the value of the column by identified by index GetColumn<T>(string) Gets the value of a column identified by its name. GetKey<T>() Gets the key of the row. GetValue<T>() Gets the value of the row."
  },
  "5.2.2/api/Hazelcast.Sql.SqlRow.Metadata.html": {
    "href": "5.2.2/api/Hazelcast.Sql.SqlRow.Metadata.html",
    "title": "Property Metadata | Hazelcast .NET Documentation",
    "keywords": "Property Metadata Metadata Gets the row metadata. Declaration public SqlRowMetadata Metadata { get; } Property Value Type Description SqlRowMetadata"
  },
  "5.2.2/api/Hazelcast.Sql.SqlRowMetadata.Columns.html": {
    "href": "5.2.2/api/Hazelcast.Sql.SqlRowMetadata.Columns.html",
    "title": "Property Columns | Hazelcast .NET Documentation",
    "keywords": "Property Columns Columns Gets all columns metadata. Declaration public IEnumerable<SqlColumnMetadata> Columns { get; } Property Value Type Description IEnumerable<SqlColumnMetadata>"
  },
  "5.2.2/api/Hazelcast.Sql.SqlRowMetadata.GetColumnIndexByName.html": {
    "href": "5.2.2/api/Hazelcast.Sql.SqlRowMetadata.GetColumnIndexByName.html",
    "title": "Method GetColumnIndexByName | Hazelcast .NET Documentation",
    "keywords": "Method GetColumnIndexByName GetColumnIndexByName(string) Gets the index of a column identified by its name. Declaration public int GetColumnIndexByName(string name) Parameters Type Name Description string name The name of the column. Returns Type Description int The index of the column matching the specified name, or -1 if no column exists with that name."
  },
  "5.2.2/api/Hazelcast.Sql.SqlRowMetadata.html": {
    "href": "5.2.2/api/Hazelcast.Sql.SqlRowMetadata.html",
    "title": "Class SqlRowMetadata | Hazelcast .NET Documentation",
    "keywords": "Class SqlRowMetadata Represents columns metadata for a SqlRow. Inheritance object SqlRowMetadata Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.Sql Assembly: Hazelcast.Net.dll Syntax public class SqlRowMetadata Properties Name Description Columns Gets all columns metadata. this[int] Gets metadata for the column at the specified index. Methods Name Description GetColumnIndexByName(string) Gets the index of a column identified by its name."
  },
  "5.2.2/api/Hazelcast.Sql.SqlRowMetadata.Item.html": {
    "href": "5.2.2/api/Hazelcast.Sql.SqlRowMetadata.Item.html",
    "title": "Property this | Hazelcast .NET Documentation",
    "keywords": "Property this this[int] Gets metadata for the column at the specified index. Declaration public SqlColumnMetadata this[int index] { get; } Parameters Type Name Description int index The index. Property Value Type Description SqlColumnMetadata Metadata for the column at the specified index."
  },
  "5.2.2/api/Hazelcast.Sql.SqlServiceExtensions.ExecuteCommandAsync.html": {
    "href": "5.2.2/api/Hazelcast.Sql.SqlServiceExtensions.ExecuteCommandAsync.html",
    "title": "Method ExecuteCommandAsync | Hazelcast .NET Documentation",
    "keywords": "Method ExecuteCommandAsync ExecuteCommandAsync(ISqlService, string, params object[]) Executes an SQL command. Declaration public static Task<long> ExecuteCommandAsync(this ISqlService service, string sql, params object[] parameters) Parameters Type Name Description ISqlService service The ISqlService which executes the command. string sql The SQL command text to execute. object[] parameters Parameters for the SQL command. Returns Type Description Task<long> The number of rows affected byt the command. ExecuteCommandAsync(ISqlService, string, SqlStatementOptions, CancellationToken) Executes an SQL command. Declaration public static Task<long> ExecuteCommandAsync(this ISqlService service, string sql, SqlStatementOptions options, CancellationToken cancellationToken = default) Parameters Type Name Description ISqlService service The ISqlService which executes the command. string sql The SQL command text to execute. SqlStatementOptions options Options for the SQL command. CancellationToken cancellationToken A cancellation token. Returns Type Description Task<long> The number of rows affected byt the command."
  },
  "5.2.2/api/Hazelcast.Sql.SqlServiceExtensions.ExecuteQueryAsync.html": {
    "href": "5.2.2/api/Hazelcast.Sql.SqlServiceExtensions.ExecuteQueryAsync.html",
    "title": "Method ExecuteQueryAsync | Hazelcast .NET Documentation",
    "keywords": "Method ExecuteQueryAsync ExecuteQueryAsync(ISqlService, string, params object[]) Executes a SQL query. Declaration public static Task<ISqlQueryResult> ExecuteQueryAsync(this ISqlService service, string sql, params object[] parameters) Parameters Type Name Description ISqlService service The ISqlService which executes the query. string sql The SQL query text to execute. object[] parameters Parameters for the SQL query. Returns Type Description Task<ISqlQueryResult> An ISqlQueryResult instance that represents the result of the query. ExecuteQueryAsync(ISqlService, string, CancellationToken) Executes a SQL query. Declaration public static Task<ISqlQueryResult> ExecuteQueryAsync(this ISqlService service, string sql, CancellationToken cancellationToken) Parameters Type Name Description ISqlService service The ISqlService which executes the query. string sql The SQL query text to execute. CancellationToken cancellationToken A cancellation token. Returns Type Description Task<ISqlQueryResult> An ISqlQueryResult instance that represents the result of the query. ExecuteQueryAsync(ISqlService, string, SqlStatementOptions, CancellationToken) Executes a SQL query. Declaration public static Task<ISqlQueryResult> ExecuteQueryAsync(this ISqlService service, string sql, SqlStatementOptions options, CancellationToken cancellationToken = default) Parameters Type Name Description ISqlService service The ISqlService which executes the query. string sql The SQL query text to execute. SqlStatementOptions options Options for the SQL query. CancellationToken cancellationToken A cancellation token. Returns Type Description Task<ISqlQueryResult> An ISqlQueryResult instance that represents the result of the query."
  },
  "5.2.2/api/Hazelcast.Sql.SqlServiceExtensions.html": {
    "href": "5.2.2/api/Hazelcast.Sql.SqlServiceExtensions.html",
    "title": "Class SqlServiceExtensions | Hazelcast .NET Documentation",
    "keywords": "Class SqlServiceExtensions Inheritance object SqlServiceExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.Sql Assembly: Hazelcast.Net.dll Syntax public static class SqlServiceExtensions Methods Name Description ExecuteCommandAsync(ISqlService, string, SqlStatementOptions, CancellationToken) Executes an SQL command. ExecuteCommandAsync(ISqlService, string, params object[]) Executes an SQL command. ExecuteQueryAsync(ISqlService, string, SqlStatementOptions, CancellationToken) Executes a SQL query. ExecuteQueryAsync(ISqlService, string, params object[]) Executes a SQL query. ExecuteQueryAsync(ISqlService, string, CancellationToken) Executes a SQL query."
  },
  "5.2.2/api/Hazelcast.Sql.SqlStatementOptions.CursorBufferSize.html": {
    "href": "5.2.2/api/Hazelcast.Sql.SqlStatementOptions.CursorBufferSize.html",
    "title": "Property CursorBufferSize | Hazelcast .NET Documentation",
    "keywords": "Property CursorBufferSize CursorBufferSize The cursor buffer size (measured in the number of rows). Only positive values are allowed. Defaults to 4096. Declaration public int CursorBufferSize { get; set; } Property Value Type Description int Remarks When a statement is submitted for execution, a SqlQueryResult is returned as a result. When rows are ready to be consumed, they are put into an internal buffer of the cursor. This parameter defines the maximum number of rows in that buffer. When the threshold is reached, the backpressure mechanism will slow down the execution, possibly to a complete halt, to prevent out-of-memory. The default value is expected to work well for most workloads. A bigger buffer size may give you a slight performance boost for queries with large result sets at the cost of increased memory consumption."
  },
  "5.2.2/api/Hazelcast.Sql.SqlStatementOptions.Default.html": {
    "href": "5.2.2/api/Hazelcast.Sql.SqlStatementOptions.Default.html",
    "title": "Field Default | Hazelcast .NET Documentation",
    "keywords": "Field Default Default SqlStatementOptions. Equivalent to new SqlStatementOptions(). Namespace: Hazelcast.Sql Assembly: Hazelcast.Net.dll Syntax public static readonly SqlStatementOptions Default Returns Type Description SqlStatementOptions"
  },
  "5.2.2/api/Hazelcast.Sql.SqlStatementOptions.html": {
    "href": "5.2.2/api/Hazelcast.Sql.SqlStatementOptions.html",
    "title": "Class SqlStatementOptions | Hazelcast .NET Documentation",
    "keywords": "Class SqlStatementOptions Inheritance object SqlStatementOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.Sql Assembly: Hazelcast.Net.dll Syntax public class SqlStatementOptions Fields Name Description Default Default SqlStatementOptions. Equivalent to new SqlStatementOptions(). Properties Name Description CursorBufferSize The cursor buffer size (measured in the number of rows). Only positive values are allowed. Defaults to 4096. Schema The schema name. The default value is null meaning only the default search path is used. Timeout Statement execution timeout. If the timeout is reached for a running statement, it will be cancelled forcefully. Defaults to Zero. Zero means that the timeout in server config will be used. InfiniteTimeSpan means no timeout."
  },
  "5.2.2/api/Hazelcast.Sql.SqlStatementOptions.Schema.html": {
    "href": "5.2.2/api/Hazelcast.Sql.SqlStatementOptions.Schema.html",
    "title": "Property Schema | Hazelcast .NET Documentation",
    "keywords": "Property Schema Schema The schema name. The default value is null meaning only the default search path is used. Declaration public string Schema { get; set; } Property Value Type Description string Remarks The engine will try to resolve the non-qualified object identifiers from the statement in the given schema. If not found, the default search path will be used, which looks for objects in the predefined schemas 'partitioned' and 'public'. The schema name is case sensitive. For example, 'foo' and 'Foo' are different schemas"
  },
  "5.2.2/api/Hazelcast.Sql.SqlStatementOptions.Timeout.html": {
    "href": "5.2.2/api/Hazelcast.Sql.SqlStatementOptions.Timeout.html",
    "title": "Property Timeout | Hazelcast .NET Documentation",
    "keywords": "Property Timeout Timeout Statement execution timeout. If the timeout is reached for a running statement, it will be cancelled forcefully. Defaults to Zero. Zero means that the timeout in server config will be used. InfiniteTimeSpan means no timeout. Declaration public TimeSpan Timeout { get; set; } Property Value Type Description TimeSpan"
  },
  "5.2.2/api/Hazelcast.StateChangedEventArgs.-ctor.html": {
    "href": "5.2.2/api/Hazelcast.StateChangedEventArgs.-ctor.html",
    "title": "Constructor StateChangedEventArgs | Hazelcast .NET Documentation",
    "keywords": "Constructor StateChangedEventArgs StateChangedEventArgs(ClientState) Initializes a new instance of the StateChangedEventArgs class. Declaration public StateChangedEventArgs(ClientState state) Parameters Type Name Description ClientState state"
  },
  "5.2.2/api/Hazelcast.StateChangedEventArgs.html": {
    "href": "5.2.2/api/Hazelcast.StateChangedEventArgs.html",
    "title": "Class StateChangedEventArgs | Hazelcast .NET Documentation",
    "keywords": "Class StateChangedEventArgs Represents event data for the state changed event. Inheritance object StateChangedEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast Assembly: Hazelcast.Net.dll Syntax public class StateChangedEventArgs Constructors Name Description StateChangedEventArgs(ClientState) Initializes a new instance of the StateChangedEventArgs class. Properties Name Description State Gets the new client state."
  },
  "5.2.2/api/Hazelcast.StateChangedEventArgs.State.html": {
    "href": "5.2.2/api/Hazelcast.StateChangedEventArgs.State.html",
    "title": "Property State | Hazelcast .NET Documentation",
    "keywords": "Property State State Gets the new client state. Declaration public ClientState State { get; } Property Value Type Description ClientState"
  },
  "5.2.2/api/Hazelcast.Transactions.html": {
    "href": "5.2.2/api/Hazelcast.Transactions.html",
    "title": "Namespace Hazelcast.Transactions | Hazelcast .NET Documentation",
    "keywords": "Namespace Hazelcast.Transactions Classes TransactionOptions Contains the configuration for a transaction Interfaces ITransactionContext Represents a transaction context. Enums TransactionOptions.TransactionType"
  },
  "5.2.2/api/Hazelcast.Transactions.ITransactionContext.CommitAsync.html": {
    "href": "5.2.2/api/Hazelcast.Transactions.ITransactionContext.CommitAsync.html",
    "title": "Method CommitAsync | Hazelcast .NET Documentation",
    "keywords": "Method CommitAsync CommitAsync() Commits the transaction. Declaration Task CommitAsync() Returns Type Description Task"
  },
  "5.2.2/api/Hazelcast.Transactions.ITransactionContext.Complete.html": {
    "href": "5.2.2/api/Hazelcast.Transactions.ITransactionContext.Complete.html",
    "title": "Method Complete | Hazelcast .NET Documentation",
    "keywords": "Method Complete Complete() Completes the transaction. Declaration void Complete() Remarks If the transaction has neither been committed nor rolled back when the ITransactionContext is disposed, it will be committed if it has been completed, else it will be rolled back."
  },
  "5.2.2/api/Hazelcast.Transactions.ITransactionContext.GetListAsync.html": {
    "href": "5.2.2/api/Hazelcast.Transactions.ITransactionContext.GetListAsync.html",
    "title": "Method GetListAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetListAsync GetListAsync<TItem>(string) Gets a IHTxList<TItem> transactional distributed object. Declaration Task<IHTxList<TItem>> GetListAsync<TItem>(string name) Parameters Type Name Description string name The unique name of the list. Returns Type Description Task<IHTxList<TItem>> The transactional list that was retrieved or created. Type Parameters Name Description TItem The type of the items."
  },
  "5.2.2/api/Hazelcast.Transactions.ITransactionContext.GetMapAsync.html": {
    "href": "5.2.2/api/Hazelcast.Transactions.ITransactionContext.GetMapAsync.html",
    "title": "Method GetMapAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetMapAsync GetMapAsync<TKey, TValue>(string) Gets a IHTxMap<TKey, TValue> transactional distributed object. Declaration Task<IHTxMap<TKey, TValue>> GetMapAsync<TKey, TValue>(string name) Parameters Type Name Description string name The unique name of the v. Returns Type Description Task<IHTxMap<TKey, TValue>> The transactional map that was retrieved or created. Type Parameters Name Description TKey The type of the keys. TValue The type of the values."
  },
  "5.2.2/api/Hazelcast.Transactions.ITransactionContext.GetMultiMapAsync.html": {
    "href": "5.2.2/api/Hazelcast.Transactions.ITransactionContext.GetMultiMapAsync.html",
    "title": "Method GetMultiMapAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetMultiMapAsync GetMultiMapAsync<TKey, TValue>(string) Gets a IHTxMultiMap<TKey, TValue> transactional distributed object. Declaration Task<IHTxMultiMap<TKey, TValue>> GetMultiMapAsync<TKey, TValue>(string name) Parameters Type Name Description string name The unique name of the v. Returns Type Description Task<IHTxMultiMap<TKey, TValue>> The transactional map that was retrieved or created. Type Parameters Name Description TKey The type of the keys. TValue The type of the values."
  },
  "5.2.2/api/Hazelcast.Transactions.ITransactionContext.GetQueueAsync.html": {
    "href": "5.2.2/api/Hazelcast.Transactions.ITransactionContext.GetQueueAsync.html",
    "title": "Method GetQueueAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetQueueAsync GetQueueAsync<TItem>(string) Gets a IHTxQueue<TItem> transactional distributed object. Declaration Task<IHTxQueue<TItem>> GetQueueAsync<TItem>(string name) Parameters Type Name Description string name The unique name of the v. Returns Type Description Task<IHTxQueue<TItem>> The transactional queue that was retrieved or created. Type Parameters Name Description TItem The type of the items."
  },
  "5.2.2/api/Hazelcast.Transactions.ITransactionContext.GetSetAsync.html": {
    "href": "5.2.2/api/Hazelcast.Transactions.ITransactionContext.GetSetAsync.html",
    "title": "Method GetSetAsync | Hazelcast .NET Documentation",
    "keywords": "Method GetSetAsync GetSetAsync<TItem>(string) Gets a IHTxSet<TItem> transactional distributed object. Declaration Task<IHTxSet<TItem>> GetSetAsync<TItem>(string name) Parameters Type Name Description string name The unique name of the set. Returns Type Description Task<IHTxSet<TItem>> The transactional set that was retrieved or created. Type Parameters Name Description TItem The type of the items."
  },
  "5.2.2/api/Hazelcast.Transactions.ITransactionContext.html": {
    "href": "5.2.2/api/Hazelcast.Transactions.ITransactionContext.html",
    "title": "Interface ITransactionContext | Hazelcast .NET Documentation",
    "keywords": "Interface ITransactionContext Represents a transaction context. Inherited Members IAsyncDisposable.DisposeAsync() Namespace: Hazelcast.Transactions Assembly: Hazelcast.Net.dll Syntax public interface ITransactionContext : IAsyncDisposable Properties Name Description TransactionId Gets the unique identifier of the transaction. Methods Name Description CommitAsync() Commits the transaction. Complete() Completes the transaction. GetListAsync<TItem>(string) Gets a IHTxList<TItem> transactional distributed object. GetMapAsync<TKey, TValue>(string) Gets a IHTxMap<TKey, TValue> transactional distributed object. GetMultiMapAsync<TKey, TValue>(string) Gets a IHTxMultiMap<TKey, TValue> transactional distributed object. GetQueueAsync<TItem>(string) Gets a IHTxQueue<TItem> transactional distributed object. GetSetAsync<TItem>(string) Gets a IHTxSet<TItem> transactional distributed object. RollbackAsync() Rolls the transaction back."
  },
  "5.2.2/api/Hazelcast.Transactions.ITransactionContext.RollbackAsync.html": {
    "href": "5.2.2/api/Hazelcast.Transactions.ITransactionContext.RollbackAsync.html",
    "title": "Method RollbackAsync | Hazelcast .NET Documentation",
    "keywords": "Method RollbackAsync RollbackAsync() Rolls the transaction back. Declaration Task RollbackAsync() Returns Type Description Task"
  },
  "5.2.2/api/Hazelcast.Transactions.ITransactionContext.TransactionId.html": {
    "href": "5.2.2/api/Hazelcast.Transactions.ITransactionContext.TransactionId.html",
    "title": "Property TransactionId | Hazelcast .NET Documentation",
    "keywords": "Property TransactionId TransactionId Gets the unique identifier of the transaction. Declaration Guid TransactionId { get; } Property Value Type Description Guid"
  },
  "5.2.2/api/Hazelcast.Transactions.TransactionOptions.Durability.html": {
    "href": "5.2.2/api/Hazelcast.Transactions.TransactionOptions.Durability.html",
    "title": "Property Durability | Hazelcast .NET Documentation",
    "keywords": "Property Durability Durability Gets or sets the transaction durability. Declaration public int Durability { get; set; } Property Value Type Description int"
  },
  "5.2.2/api/Hazelcast.Transactions.TransactionOptions.html": {
    "href": "5.2.2/api/Hazelcast.Transactions.TransactionOptions.html",
    "title": "Class TransactionOptions | Hazelcast .NET Documentation",
    "keywords": "Class TransactionOptions Contains the configuration for a transaction Inheritance object TransactionOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Hazelcast.Transactions Assembly: Hazelcast.Net.dll Syntax public sealed class TransactionOptions Properties Name Description Durability Gets or sets the transaction durability. Timeout Gets or sets the transaction timeout. Type Gets or sets the type of the transaction."
  },
  "5.2.2/api/Hazelcast.Transactions.TransactionOptions.Timeout.html": {
    "href": "5.2.2/api/Hazelcast.Transactions.TransactionOptions.Timeout.html",
    "title": "Property Timeout | Hazelcast .NET Documentation",
    "keywords": "Property Timeout Timeout Gets or sets the transaction timeout. Declaration public TimeSpan Timeout { get; set; } Property Value Type Description TimeSpan"
  },
  "5.2.2/api/Hazelcast.Transactions.TransactionOptions.TransactionType.html": {
    "href": "5.2.2/api/Hazelcast.Transactions.TransactionOptions.TransactionType.html",
    "title": "Enum TransactionOptions.TransactionType | Hazelcast .NET Documentation",
    "keywords": "Enum TransactionOptions.TransactionType Namespace: Hazelcast.Transactions Assembly: Hazelcast.Net.dll Syntax public enum TransactionOptions.TransactionType Fields Name Description OnePhase Commits the transaction in one single final phase. TwoPhase Commits the transaction in two distinct phases."
  },
  "5.2.2/api/Hazelcast.Transactions.TransactionOptions.Type.html": {
    "href": "5.2.2/api/Hazelcast.Transactions.TransactionOptions.Type.html",
    "title": "Property Type | Hazelcast .NET Documentation",
    "keywords": "Property Type Type Gets or sets the type of the transaction. Declaration public TransactionOptions.TransactionType Type { get; set; } Property Value Type Description TransactionOptions.TransactionType"
  },
  "5.2.2/api/index.html": {
    "href": "5.2.2/api/index.html",
    "title": "API Reference | Hazelcast .NET Documentation",
    "keywords": "API Reference This section contains the full public API reference documentation, generated from source-code-level comments, and completed with DocFX additional content. Use the navigation to the left to browse namespaces and members. For extra details, including all code comments, browse the source code itself."
  },
  "5.2.2/doc/about.html": {
    "href": "5.2.2/doc/about.html",
    "title": "About | Hazelcast .NET Documentation",
    "keywords": "About"
  },
  "5.2.2/doc/async-pitfalls.html": {
    "href": "5.2.2/doc/async-pitfalls.html",
    "title": "Asynchronous Pitfalls | Hazelcast .NET Documentation",
    "keywords": "Asynchronous Pitfalls This page gathers common pitfalls and issues when migrating synchronous code to an asynchronous programming model. It is not exhaustive, and we enrich it periodically. The .NET Framework ASP.NET Issue A common scenario goes like this: a team had a ASP.NET MVC application, running under .NET Framework 4.8, with a controller using the version 3 of the Hazelcast .NET client and containing method similar to: public ActionResult Index() { var value = GetValue(); return Content(value); } private string GetValue() { var client = HazelcastClient.NewHazelcastClient(\"path/to/config.xml\"); var map = client.GetMap<string, string>(\"map-name\"); var value = map.Get(\"key\"); return value; } In an attempt to migrate to a newer version of the Hazelcast .NET client, the GetValue method is rewritten as: private Task<string> GetValue() { var options = // ...get options... await using var client = await HazelcastClientFactory.StartNewClientAsync(options); await var map = await client.GetMapAsync<string, string>(\"map-name\"); var value = await map.GetAsync(\"key\"); return value; } And the Index method is adjusted as: public ActionResult Index() { var task = GetValue(); var value = task.Result; return Content(value); } And... the Index method hangs and never returns. Why It Fails On classic ASP.NET, controller methods run in a \"synchronization context\", something that is responsible for scheduling the asynchronous Tasks. In console applications, the synchronization context would schedule Tasks on any thread of the ThreadPool. In ASP.NET applications, the synchronization context is special: each request has its synchronization context, which is bound to one thread at the beginning of the request. The purpose of this was backward compatibility, as people used to rely on their entire request being processed by one single thread. The drawback is that the scheduler can run only one Task at a time, since it only has one thread. So, here is what happens when the controller's Index method runs: The Index method calls GetValue. GetValue starts connecting a client by invoking StartNewClientAsync. StartNewClientAsync returns an uncompleted Task, indicating that connection is in-progress. GetValue awaits that Task, the context is captured and will be used to continue the GetValue method, later. GetValue returns an uncompleted Task, indicating that it is in-progress The Index method synchronously block on that Task with the .Result call. This blocks the context (request) unique thread. Eventually, the Task for StartNewClientAsync will complete. The continuation for GetValue (the rest of the method) is now ready to run, and it waits for the synchronization context to schedule that work. However, the context is busy waiting (see above) and therefore cannot schedule anything, since it can only execute one thing at a time. Deadlock. This is a classical ASP.NET issue (for instance, you can see it reproduced in this Gist) and explained in details on this page or this page. One (Dangerous) Fix There is a way to tell a method to resume on the default ThreadPool-based synchronization context. Consider this line of code: await DoSomething(); It will resume execution on the current synchronization context. However, consider this line of code: await DoSomething().ConfigureAwait(false); Here, we are specifically instructing .NET to not resume on the current synchronization context but on the default Thead-Pool one. By adding ConfigureAwait(false) to every await statements in GetValue, we could hope to fix the issue (it does fix the issue in simple scenarios). But, the thing is, every single await in the whole chains of calls needs this. This means that every single await in the Hazelcast .NET Client needs it (they should have it, we have checks for this) and every single await in our dependencies (such as Microsoft's internal code) needs it too (we do not control this). It turns out that this solutin does not work for us. This means that somewhere in the chain of calls, there is at least one single ConfigureAwait(false) missing. We do check our own code regularly, and are pretty sure it is correct. But this shows that simply relying on this solution to fix the problem is a dangerous thing. The Right Way The \"right way\" to fix the issue is to go full-async. That is, turn the Index method to async, too: public async Task<ActionResult> Index() { var value = await GetValue().ConfigureAwait(false); return Content(value); } As long as your entire codebase is async, you are safe. Controller actions can be turned to async pretty easily. Likewise, console application's Main method can become asynchronous: public static async Task Main(string[] args) { ... } The Other Way In more complex situations, you may hit a point where you cannot propagate the asynchronous programming pattern upwards to the top of the chain. Let us say that the Index method has to remain synchronous, for some reasons. One solution consists in scheduling the asynchronous call on an entirely independent Task factory and scheduler, one that is not limited in the way the ASP.NET one is. You will find an example of such a solution below: static class AsyncHelper { private static readonly TaskFactory HelperTaskFactory = new TaskFactory(CancellationToken.None, TaskCreationOptions.None, TaskContinuationOptions.None, TaskScheduler.Default); public static void Run(Func<Task> func) => HelperTaskFactory.StartNew<Task>(func).Unwrap().GetAwaiter().GetResult(); public static TResult Run<TResult>(Func<Task<TResult>> func) => HelperTaskFactory.StartNew<Task<TResult>>(func).Unwrap<TResult>().GetAwaiter().GetResult(); } public AsyncResult Index() { var value = AsyncHelper.Run(GetValue); return Content(value); } Using this solution may have consequences that we are still investigating, but it unlocks a range of situations."
  },
  "5.2.2/doc/canceling.html": {
    "href": "5.2.2/doc/canceling.html",
    "title": "Canceling | Hazelcast .NET Documentation",
    "keywords": "Canceling Some of Hazelcast .NET client operations support cancellation via a CancellationToken. This section details what actually happens when that token is cancelled. Default Operations When a CancellationToken is passed to a method that triggers a server-side operation, the token is ultimately passed to the internal method which sends the request message to the server. At that point: If the token is cancelled before the request has been sent, the request is not sent If the token is cancelled while retrying to send a request, the retry is aborted Otherwise, the request message is sent as a whole non-cancellable operation, and the client then waits for a response message from the server. It the token is cancelled during this wait, the wait is aborted and the response message will be ignored when it is received. Warning Note however that, since the request message has been sent, the resulting server state is unspecified: the operation may have been executed and is not rolled back. Sql Operations This section details cancellation behaviors specific to SQL. Refer to the SQL documentation for more general information on SQL. Sql Queries Sql queries (see ISqlService ExecuteQueryAsync method) fetch the first page of rows, and return an enumerable ISqlQueryResult object representing an open server-side query. This query remains open and running on the server, in order to provide more pages of rows. The CancellationToken which is passed to ExecuteQueryAsync, if any, works just as with any other server operation as far as fetching the first page of rows is concerned (see above). In addition, it is also passed to the ISqlQueryResult. Note If the operation is cancelled before the ISqlQueryResult is returned, the SQL service tries its best to notify the server that the query should be closed. The ISqlQueryResult is IAsyncEnumerable<SqlRow>. This means that one can either: Invoke its GetAyncEnumerator(CancellationToken enumerationToken) method Enumerate it with async foreach, with .WithCancellation(CancellationToken enumerationToken) In both cases, the enumeration ends up being controlled by a CancellationToken which is either token (from ExecuteQueryAsync), enumerationToken, or a combination of both. If token or enumerationToken is canceled, the enumeration is canceled and throws an OperationCancelledException. It is important to understand that the ISqlQueryResult represents a server-side query which needs to be closed in order to release server resources. This is achieved by async-disposing the ISqlQueryResult (which is IAsyncEnumerable). If the result is enumerated with await foreach, the pattern guarantees that the enumerator will be disposed when exiting. This will, in turn, dispose the result. Should the enumeration be cancelled and abort with an exception, the result would therefore safely be disposed. With other patterns, it is important to ensure that, in the event of a cancellation, the result is always disposed. This can be achieved by wrapping the ISqlQueryResult in a using block: await using var result = await client.Sql.ExecuteQueryAsync(...); Sql Commands Sql commands (see ISqlService ExecuteCommandAsync method) do not have a special result type, as they only return the number of affected rows, and therefore the CancellationToken works just as with any other server operation. Warning Because Sql commands can have side-effect on the server, and cancellation may happen before or after the request message has been sent to the server, it is important to understand that cancellation concerns the client-side async method call only, and that the command may or may not execute on the server."
  },
  "5.2.2/doc/configuration.html": {
    "href": "5.2.2/doc/configuration.html",
    "title": "Client Configuration | Hazelcast .NET Documentation",
    "keywords": "Client Configuration Configuration follows the Microsoft.Extensions.Configuration patterns. The Hazelcast client configuration is represented by the HazelcastOptions class. Configuration can be provided through various sources which include configuration files, environment variables or command-line arguments. Options that can be configured are fully documented on the options page."
  },
  "5.2.2/doc/configuration/options.html": {
    "href": "5.2.2/doc/configuration/options.html",
    "title": "Configuration Options | Hazelcast .NET Documentation",
    "keywords": "Configuration Options This page lists the complete set of options available to configure the Hazelcast .NET client. For more details regarding configuration in general, including configuration sources, refer to the Configuration page. See HazelcastOptions for full documentation of the class. Property Summary ClusterName Gets or sets the name of the cluster. This must match the name of the cluster that the client is going to connect to. ClientName Gets or sets the name of the client. This is optional. If no client name is specified, a name will be generated. Labels Gets the set of client labels. LoadBalancer Gets the SingletonServiceFactory<TService> for the ILoadBalancer. When set in the configuration file, it is defined as an injected type, for instance: \"loadBalancer\": { \"typeName\": \"My.LoadBalancer\", \"args\": { \"foo\": 42 } } where typeName is the name of the type, and args is an optional dictionary of arguments for the type constructor. In addition to custom type names, typeName can be any of the predefined Random, RoundRobin or Static values. The default load balancer is the RoundRobinLoadBalancer. LoggerFactory Gets the SingletonServiceFactory<TService> for ILoggerFactory. The only option available for logging is the ILoggerFactory creator, which can only be set programmatically. All other logging options (level, etc.) are configured via the default Microsoft configuration system. See https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging for details and documentation. PatternMatcher Gets or sets the configuration pattern matcher. This can only be set programmatically. NearCaches Gets the dictionary which contains the NearCacheOptions for each near cache. FlakeIdGenerators Gets the dictionary which contains the FlakeIdGeneratorOptions for each Flake Id Generator. Subscribers Gets the list of subscribers. Subscribers can be added to the configuration programmatically via the AddSubscriber(IHazelcastClientEventSubscriber) method or any of its overloads. A subscriber is a class that implements IHazelcastClientEventSubscriber and subscribes the client to events as soon as the client is connected. In a configuration file, they are defined as an array of injected types, for instance: \"subscribers\": [ { \"typeName\": \"My.Subscriber, My.Dll\" }, { \"typeName\": \"My.OtherSubscriber, My.dll\", \"args\": { \"foo\": 33 } } ] where typeName is the name of the type, and args is an optional dictionary of arguments for the type constructor. Authentication Access AuthenticationOptions via options.Authentication. Property Summary CredentialsFactory Gets the SingletonServiceFactory<TService> for the ICredentialsFactory. When set in the configuration file, it is defined as an injected type, for instance: \"credentialsFactory\": { \"typeName\": \"My.CredentialsFactory\", \"args\": { \"foo\": 42 } } where typeName is the name of the type, and args is an optional dictionary of arguments for the type constructor. In addition, shortcuts exists for common credentials factory. The whole credentialsFactory block can be omitted and replace by one of the following: Username and password: \"username-password\": { \"username\": \"someone\", \"password\": \"secret\" } Kerberos: \"kerberos\": { \"spn\": \"service-provider-name\" } Token: \"token\": { \"data\": \"some-secret-token\", \"encoding\": \"none\" } Supported encodings are: none and base64. Heartbeat Access HeartbeatOptions via options.Heartbeat. Property Summary PeriodMilliseconds Gets or sets the heartbeat period. Heartbeat will run periodically, and send a ping request to connections that have not been written to over the previous period. TimeoutMilliseconds Gets or sets the timeout (how long to wait before declaring a connection down). Heartbeat will consider that connections that have not received data for the timeout duration, although they should have been pinged, are down. The timeout should be longer than the period. Messaging Access MessagingOptions via options.Messaging. Property Summary MinRetryDelayMilliseconds Gets or sets the min retry delay. RetryUnsafeOperations Whether to retry all operations including unsafe operations. Operations can fail due to various reasons. Read-only operations are retried by default. If you want to enable retry for all operations, set this property to true. However, note that a failed operation leaves the cluster in an undecided state. The cluster may have received the request and executed the operation, but failed to respond to the client. For idempotent operations this is harmless, but for non idempotent ones retrying can cause undesirable effects. Also note that the redo can perform on any member. For these reasons, this is false by default. RetryTimeoutSeconds Gets or sets the invocation timeout. The RetryTimeoutSeconds is a soft timeout that prevents retrying an invocation for too long in case it fails. It does not controls the duration of a single try, and does not abort it. And invocation single try can run for as long as the connection that supports it remains open. RetryOnClientReconnecting Whether to retry an invocation that has failed to start because the client was offline but still active and reconnecting. This is true by default, i.e. if the client got disconnected and is reconnecting, invocations will be retried until they reach their timeout, or the client reconnects. Set this to false if you want invocations to fail immediately in case the client gets disconnected, even if it is trying to reconnect. Note that this only applies to invocation that failed to start, and therefore this is safe for all invocations. See RetryUnsafeOperations for what happens once the invocation has started. Networking Access NetworkingOptions via options.Networking. Property Summary Addresses Gets or sets the list of initial addresses. The client uses this list to find a running member and connect to it. This initial member will then send the list of other members to the client. Each address must be a valid IPv4 or IPv6 address. ShuffleAddresses Whether to shuffle addresses when attempting to connect to the cluster. SmartRouting Whether smart routing is enabled. If true (default), client will route the key based operations to owner of the key at the best effort. Note that it however does not guarantee that the operation will always be executed on the owner, as the member table is only updated every 10 seconds. RedoOperations Whether to retry operations. While sending the requests to related members, operations can fail due to various reasons. Read-only operations are retried by default. If you want to enable retry for the other operations, set this property to true. Note that it is not clear whether the operation is performed or not. For idempotent operations this is harmless, but for non idempotent ones retrying can cause undesirable effects. Also note that the redo can perform on any member. ReconnectMode Gets or sets the ReconnectMode in case the client is disconnected. Reconnect Whether to attempt to automatically reconnect a client that has been disconnected. This is true by default, i.e. a client that has been disconnected but is still active will try to reconnect to the cluster. Set this to false if you want it to shut down and never reconnect. UsePublicAddresses Whether to use the public addresses of members. When connecting to clusters where members have different public and internal addresses, this option can be used to indicate whether to use, or not use, the public addresses. When null (by default), the client will try to determine which address to use automatically. ConnectionTimeoutMilliseconds Gets or sets the connection timeout. This timeout is used in various places. It is the connection timeout for each individual socket. It is also the timeout for cloud discovery. Ssl Access SslOptions via options.Networking.Ssl. Property Summary Enabled Whether to enable SSL. ValidateCertificateChain Whether to validate the certificate chain. ValidateCertificateName Whether to validate the certificate name. CheckCertificateRevocation Whether to check for certificate revocation. CertificateName Gets or sets the name of the certificate. CertificatePath Gets or sets the full path to the certificate file. CertificatePassword Gets or sets the password for the certificate file. Protocol Gets or sets the SSL protocol. The protocol must be a member of the SslProtocols enum, and currently only Tls, Tls11 and Tls12 are supported, though only the latest is recommended. Cloud Access CloudOptions via options.Networking.Cloud. Property Summary Enabled Whether Hazelcast Cloud is enabled. This property is read-only and is set automatically when DiscoveryToken is not null nor empty. DiscoveryToken Gets or sets the discovery token of the cluster. Url Gets or sets the cloud url base. Socket Access SocketOptions via options.Networking.Socket. Property Summary BufferSizeKiB The send and receive buffers size. The buffer size is expressed in Kibibytes, ie units of 1024 bytes. This sets the size of both the send and receive buffers. KeepAlive Whether to keep the socket alive. LingerSeconds The number of seconds to remain connected after the socket Close() method is called, or zero to disconnect immediately. TcpNoDelay Whether the socket is using the Nagle algorithm. ConnectionRetry Access ConnectionRetryOptions via options.Networking.ConnectionRetry. Property Summary InitialBackoffMilliseconds Gets or sets the initial back-off time in milliseconds. MaxBackoffMilliseconds Gets or sets the maximum back-off time in milliseconds. Multiplier Gets or sets the multiplier. ClusterConnectionTimeoutMilliseconds Gets or sets the timeout in milliseconds. Jitter Gets or sets the jitter. Events Access EventsOptions via options.Events. Property Summary SubscriptionCollectDelay Gets or sets the delay before collecting subscriptions starts. SubscriptionCollectPeriod Gets or sets the period of the subscription collection. SubscriptionCollectTimeout Gets or sets the subscription collection timeout, after which a subscription is considered dead and removed. Preview Access PreviewOptions via options.Preview. Preview options are unsupported options that are provided to enable behaviors of the client that remain experimental and/or may break backward compatibility. Property Summary EnableNewReconnectOptions (unsupported) Whether to enable the new reconnect options. The ReconnectMode option specifies a synchronous and an asynchronous mode, but they are both implemented in the same way. These modes actually don't make a lot of sense. And, reconnection is disabled by default. When the new reconnect options are enabled, this option is ignored, and replaced by the Reconnect option, which is a boolean and indicates whether to reconnect or not. It is true by default. Invocations that fail because the client is reconnecting will be retried (all of them, reads and writes) until the client is reconnected, or the invocation times out. EnableNewRetryOptions (unsupported) Whether to enable the new retry options. Retrying failed invocations was originally controlled by the RedoOperations option. This option belongs more to messaging, where we may want to enable finer-grain control of retries. When the new retry options are enabled, this option is ignored and replaced by the RetryUnsafeOperations option: all safe (read) operations are retried by default, and this option controls whether to retry unsafe (write) operations. It is false by default.In addition, a new option is introduced, RetryOnClientReconnecting which controls retries when the operation cannot even start because the client is reconnecting. It is true by default. Metrics Access MetricsOptions via options.Metrics. Property Summary Enabled Whether client statistics are enabled. PeriodSeconds Gets or sets the period at which client metrics are sent to the cluster. Serialization Access SerializationOptions via options.Serialization. IIdentifiedDataSerializable, IPortable, custom serializers, and global serializer can be configured using this config. Property Summary EnableClrSerialization Whether to enable CLR serialization via BinaryFormatter. BinaryFormatter is now considered insecure, and CLR serialization is disabled by default. In order to enable CLR serialization, set this value to true. Note that if a global serializer is configured via GlobalSerializer, then this option must be true, and OverrideClrSerialization must be false, for CLR serialization to be enabled. Endianness Gets or sets the Endianness. This value should match the server configuration. ValidateClassDefinitions Whether to check for class definition errors at start, and throw an Serialization Exception with error definition. PortableVersion Gets or sets the portable version. ClassDefinitions Gets the collection of IClassDefinition. This can only be done programmatically. PortableFactories Gets the collection of FactoryOptions<T> of IPortableFactory. DataSerializableFactories Gets the collection of FactoryOptions<T> of IDataSerializableFactory. Serializers Gets the collection of SerializerOptions. Compact Access CompactOptions via options.Serialization.Compact. Property Summary SchemaReplicationRetries Gets or sets the maximum number of retries for schema publication. When a schema is published to the cluster, the client ensures that it is replicated to all known members, thus protecting against split-brain situations where only some members would receive the schema. Should some members not receive the schema, publication is retried. The default value is 100. SchemaReplicationDelay Gets or sets the amount of time to wait between each schema publication retries. See SchemaReplicationRetries. The default value is 1 second. GlobalSerializer Access GlobalSerializerOptions via options.Serialization.GlobalSerializer. Property Summary OverrideClrSerialization Whether to fully override (and ignore) the native CLR serialization. NearCache Access CommonNearCacheOptions via options.NearCache. Property Summary ReconciliationIntervalSeconds Gets or sets the reconciliation interval. MinReconciliationIntervalSeconds Gets or sets the minimum reconciliation interval. MaxToleratedMissCount Gets or sets the maximum tolerated miss count."
  },
  "5.2.2/doc/configuration/sources.html": {
    "href": "5.2.2/doc/configuration/sources.html",
    "title": "Configuration Sources | Hazelcast .NET Documentation",
    "keywords": "Configuration Sources Configuration follows the Microsoft.Extensions.Configuration patterns. The Hazelcast client configuration is represented by the HazelcastOptions class. When simply instantiated, this class contains the default options (i.e. it does not even read the options file): var options = new HazelcastOptions(); For failover client, please see the failover documentation. For anything more realistic though, different approaches are available, as detailed below. This page does not document the options themselves. Options that can be configured are fully documented on the Options page. Simple Environment In a simple, non-hosted environment without dependency injection, options need to be built using the HazelcastOptionsBuilder: public class Program { public static void Main(string[] args) { var options = new HazelcastOptionsBuilder.With(args).Build(); } } This will determine the application environment (<env>) from the DOTNET_ENVIRONMENT and ASPNETCORE_ENVIRONMENT variables (or, if not specified, default to Production), and then gather configuration keys from the following ordered sources: Optional default in-memory key/values appsettings.json file appsettings.<env>.json file Environment variables (using double-underscore separator, e.g. hazelcast__clientName) Command line arguments (using colon separator, e.g. hazelcast:clientName) hazelcast.json file hazelcast.<env>.json file Hazelcast-specific environment variables (using dot separator, e.g. hazelcast.clientName) Hazelcast-specific command line arguments (using dot separator, e.g. hazelcast.clientName) Optional in-memory key/values The Hazelcast-specific sources for environment variables and command line arguments only exist to support the non-standard dot separator, and complement the original sources. The HazelcastOptionsBuilder provides ways to override the name and location of the hazelcast.json and hazelcast.<env>.json files, the <env> environment name, and accepts optional in-memory key/values. Every Hazelcast option can therefore be specified via the traditional .NET Core methods. For instance, specifying one cluster server address can be done via the following Json fragment in any of the Json files: { \"hazelcast\": { \"networking\": { \"addresses\": [ \"server:port\" ] } } } It can alternatively be specified by setting an environment variable (note that the dotted format may not be supported on every platform): hazelcast__networking__addresses__0=server:port ## supported on all platforms hazelcast:networking:addresses:0=server:port ## not supported on all platforms hazelcast.networking.addresses.0=server:port It can alternatively be specified with command line arguments: $ myApp hazelcast:networking:addresses:0=server:port $ myApp hazelcast.networking.addresses.0=server:port All the .NET Core supported formats are supported (i.e. /arg value, /arg=value, --arg value, etc.). See the documentation for details. The HazelcastOptionsBuilder supports direct, in-memory key/values (with keys using either the dot or colon separator). There are two types of direct key/values. Default key/values are applied before everything else, and therefore can be overriden by, for instance, the command line, whereas normal key/values are applied after everything else, thus overriding other sources. var options = new HazelcastOptionsBuilder .WithDefault(\"hazelcast.networking.something\", \"true\") .With(\"hazelcast.networking.addresses.0\", \"server:port\") .Build(); The HazelcastOptionsBuilder also supports providing actions that can modify the options via code. These actions will run before, and after, everything that has been described until now: var options = new HazelcastOptionsBuilder .WithDefault(o => o.Networking.Addresses.Clear()) .With(o => o.Networking.Addresses.Add(\"127.0.0.1\")) .Build(); Container Environment In a container environment, one can rely on dependency injection to manage configuration. An IConfiguration must be created, in order to add Hazelcast to the services: var configuration = new ConfigurationBuilder() // add default configuration (appsettings.json, etc) .AddDefaults(args) // add Hazelcast-specific configuration .AddHazelcast(args) .Build(); // create the service collection var services = new ServiceCollection(); // add Hazelcast-specific services services.AddHazelcast(configuration); Configuration keys will be gathered from the same sources and in the same order as before, and options will be registered in the service container, and available via dependency injection: public class MyService { private readonly HazelcastOptions _options; public MyService(IOptions<HazelcastOptions> ioptions) { _options = ioptions.Value; } public async Task DoSomethingAsync() { await using var client = HazelcastClientFactory.StartNewClientAsync(_options); // ... } } Also, the traditional Microsoft Dependency Injection patterns are supported: services.Configure<HazelcastOptions>(options => { options.Networking.Addresses.Add(\"server:port\"); }); Note: The required extension methods are not part of the Hazelcast.Net NuGet packages, but are provided as part of the Hazelcast.Net.DependencyInjection project (on NuGet). Hosted Environment In a .NET Core hosted environment (see .NET Generic Host), the host supplies the IConfiguration instance, and manages dependency injection. All that is needed is to tell the host how to handle the Hazelcast-specific configuration (e.g. hazelcast.json), and to add Hazelcast to services. For example: Host.CreateDefaultBuilder(args) .ConfigureHazelcast(args) // configure Hazelcast services .ConfigureServices((hostingContext, services) => { services.AddHazelcast(hostingContext.Configuration); // register Hazelcast services }); Just as with the previous container environment, configuration keys will be gathered from the same sources and in the same order as before, and options will be registered in the service container, and available via dependency injection. In a typical WebAPI application, this means that the Program class would probably contain code similar to: public static IHostBuilder CreateHostBuilder(string[] args) => Host.CreateDefaultBuilder(args) .ConfigureHazelcast(args) // configure Hazelcast services .ConfigureWebHostDefaults(webBuilder => { webBuilder.UseStartup<Startup>(); }); And the Startup class would probably contain code similar to: // This method gets called by the runtime. Use this method to add services to the container. public void ConfigureServices(IServiceCollection services) { services.AddControllers(); services.AddHazelcast(Configuration); // register Hazelcast services // ... add more services ... } Note: The required extension methods are not part of the Hazelcast.Net NuGet packages, but are provided as part of the Hazelcast.Net.DependencyInjection project (on NuGet)."
  },
  "5.2.2/doc/contrib.html": {
    "href": "5.2.2/doc/contrib.html",
    "title": "Contributing | Hazelcast .NET Documentation",
    "keywords": "Contributing The Hazelcast .NET solution is Open Source, released under the Apache License 2.0, and welcomes contributions. The project lives on GitHub. This section details how to obtain the source code and build the solution, in order to experiment with the code... and contribute! You can engage with the Hazelcast team, and the community at large, via several channels: Post questions on our GitHub repository Join our Slack community and head for the #dotnet-client channel If you are looking for contribution ideas, you can loop for our list of \"good first issues\". But contribution is not only about code: raising issues or asking questions is as most as important... and even more important: documentation is also Open Source. The documentation you are currently reading is served by GitHub Pages and lives in the gh-pages branch of the source repository. We also gladly accept PRs for the documentation!"
  },
  "5.2.2/doc/contrib/building.html": {
    "href": "5.2.2/doc/contrib/building.html",
    "title": "Building | Hazelcast .NET Documentation",
    "keywords": "Building Requirements For day to day development, the solution builds in Visual Studio or Rider. However, it is possible to build it entirely via our custom PowerShell script. The minimal requirements are: PowerShell 6.2+ .NET 2.1, 3.1 and 5.0 SDKs Java runtime, if you want to run tests Visual Studio 2019, or at least the Visual Studio Build Tools 2019, can be downloaded from the Visual Studio site. .NET can be downloaded from the Download .NET page. You can verify whether .NET Core is installed, and which versions are supported, by running dotnet --info in a command window. PowerShell can be installed on Windows through the Windows Store; the PowerShell documentation describes other means of installation for Windows and the various flavours of Linux. The OpenJDK provides open Java JDKs for Windows and Linux. Building On Windows For a complete build, start a Powershell console and build using the hz.ps1 script: PS> ./hs.ps1 build See the build script section below for details and arguments. Building On Linux For a complete build, from a shell console, use the hz.sh script: $ ./hz.sh build See the build script section below for details and arguments. Note that hs.sh is just a proxy to hz.ps1: the actual build actions are always performed by hz.ps1, which is common to Windows and Linux. It is not possible to build the .NET Framework version of the Hazelcast .NET client on Linux, as the .NET Framework is not supported on Linux. All other targets build on Linux. At the moment it is not possible to build the documentation on Linux, as DocFX does not run on .NET Core yet (see this issue for details). The upcoming v3 of DocFX will run on .NET Core. Build Script The hz.[hs|ps1] script accepts options, commands, and command arguments. PS> ./hz.[sh|ps1] [<options>] [<commands>] [<commargs>] [--- <rawargs>] To list all options and command, run ./hz.[sh|ps1] help. Examples of valid usages: ./hz.ps1 build # builds the code ./hz.ps1 build,test # builds the code and run the tests ./hz.ps1 -cover test # runs the tests with test coverage ./hz.ps1 test -cover # same ./hz.ps1 set-version -version 1.2.3 # updates the version ./hz.ps1 run-remote-controller # runs a remote controller for tests ./hz.ps1 run-server -server 4.2 # runs version 4.2 of the server ./hz.ps1 run-example ~Soak1 --- --hazelcast. # runs an example SDK Selection The global.json file at the root of the project contains: { \"sdk\": { \"allowPrerelease\": false } } This ensures that any use of the dotnet command actuallys use the lastest stable release installed on the machine, and avoids any pre-release versions, as these may break the build. Should you want to experiment with pre-releases of the .NET SDK, change false to true (but do not commit the change!). For more details, see the Select the .NET Core version to use and global.json overview articles from Microsoft."
  },
  "5.2.2/doc/contrib/contrib-faq.html": {
    "href": "5.2.2/doc/contrib/contrib-faq.html",
    "title": "FAQ | Hazelcast .NET Documentation",
    "keywords": "FAQ Could we drop the Async suffix from all asynchronous methods? No. See this post on StackOverflow, or this issue on GitHub. Or this tweet by Nick Craver. We use the Async suffix whenever a function returns an async behavior (e.g. Task or ValueTask) like .NET itself does. The reason for this being that it removes ambiguity and helps stop subtle bugs. For example, say a PR changes this: public string MyFunc() { ... } To this: public Task<string>MyFunc() { ... } If, elsewhere, someone uses the function: var result = MyFunc(); Console.WriteLine(result); ... that will still work. But instead of writing a string, it will write a Task. And it is hard to see it. Contrast that with changing to: public Task<string>MyFuncAsync() { ... } Now, the name change forced a name change at the call site, so the impact will show in a code review. It is a safer, unambiguous version of the change. Can we provide synchronous version of the asynchronous methods? No. Async-to-Sync such as client.StartAsync().Wait() can cause issues such as blocking, dead-locking, starving the ThreadPool etc. This is tricky, and there is no way we can provide a stable implementation of synchronous methods. We'd rather have them happen in user code."
  },
  "5.2.2/doc/contrib/github-actions.html": {
    "href": "5.2.2/doc/contrib/github-actions.html",
    "title": "GitHub Actions | Hazelcast .NET Documentation",
    "keywords": "GitHub Actions The Hazelcast .NET Client relies on GitHub Actions for CI. Workflows live in YAML files in .github/workflows and are described below. Build Branch This workflow is defined in build-branch.yml and triggers on every push to a branch (except release/* branches). It runs one single job with the following steps: Install some utilities (e.g. PowerShell...) latest versions, for Linux (bash script) Install .NET (actions/setup-dotnet) Install JDK (actions/setup-java) Checkout our code (actions/checkout) Build and test (hz.ps1) Report the test results to the workflow log (dorny/test-reporter) Report the test coverage to the workflow log (dotcover-report) Upload the test coverage reports as an artifact, (actions/upload-artifact) Publish the test coverage report to Codecov.io (codecov/codecov-action) Build PR This workflow is defined in build-pr.yml and triggers on every push to a PR. It runs one single job with the following steps: Install some utilities (e.g. PowerShell...) latest versions, for Linux (bash script) Install .NET (actions/setup-dotnet) Install JDK (actions/setup-java) Checkout our code (actions/checkout) Build and test (hz.ps1) Upload the test results as an artifact (actions/upload-artifact) Upload the test coverage reports as an artifact (actions/upload-artifact) Note that this workflow does not report nor publish anything, as it executes against a user's PR and thus has no permission to write to our repository. Therefore, a second workflow, defined in report-pr.yml, triggers after every run of build-pr.yml, and runs one single job with the following steps: Prepare the environment (bash script) Download the test results and coverage reports artifacts (actions/github-script + custom script) Unzip the downloaded artifacts, (bash script) Report the test results to the workflow log (dorny/test-reporter) Report the test coverage to the workflow log (dotcover-report) Publish the test coverage report to Codecov.io (codecov/codecov-action) In addition, this worklow is registered as a required status check for all protected branches (master, 4.0.z...). These branches require that both the Build PR for Linux and Windows checks have passed before merging any PR. Build Release This workflow is defined in build-release.yml and triggers on every push to a release/* branch, and every push of a v* tag. It runs a combination of four jobs: Analyze The Analyze job runs the following steps: Checkout our code (actions/checkout) Analyze the situation (bash script) and determine whether it has been triggered by a branch or a tag, and a few other things Build The Build job runs if the Analyze job has validated the situation. It runs the following steps: Install some utilities (e.g. PowerShell...) latest versions, for Linux (bash script) Install .NET (actions/setup-dotnet) Install JDK (actions/setup-java) Checkout our code (actions/checkout) Verify that the branch or tag version matches the code version (hz.ps1) Obtains the assemblies signature key from GitHub Secrets (bash script) Build signed assemblies and test (hz.ps1) Report the test results to the workflow log (dorny/test-reporter) Report the test coverage to the workflow log (dotcover-report) Upload the test coverage reports as an artifact (actions/upload-artifact) Publish the test coverage report to Codecov.io (codecov/codecov-action) Pack the NuGet packages (hz.ps1) Upload the NuGet packages as an artifact (actions/upload-artifact) Publish the examples (hz.ps1) Uploads the examples as an artifact (actions/upload-artifact) Creates a documentation patch (hz.ps1 + git commands) Uploads the documentation patch as an artifact (actions/upload-artifact) Publish The Publish job runs if the Build job was successful, and is in fact two jobs, that run different steps, depending on whether the workflow handles a branch build (preparing for a release) or a tag build (releasing). These steps are detailed below: actions in bold impact publicly visible resources such as NuGet or the documentation. For branch builds, the job runs the following steps: Download the test coverage reports and doc patch artifacts (actions/github-script + custom script) Checkout the documentation (i.e. the gh-pages branch), apply the patch, and push documentation back to GitHub (actions/checkout + bash script) Publish the test coverage report to Codecov.io (codecov/codecov-action) As this is a branch build and not an official release, only the \"dev\" part of the documentation is updated. For tag builds, the job runs the following steps: Checkout our code (actions/checkout) Checkout devops extensions for the hz.ps1 script from the DevOps private repository, into the build/devops directory (actions/checkout) Download the NuGet packages and doc patch artifacts (actions/github-script + custom script) Upload the NuGet packages to NuGet (hz.ps1 script devops extensions, and API key provided by GitHub Secrets) Checkout the documentation (i.e. the gh-pages branch), apply the patch, and push documentation back to GitHub (actions/checkout + bash script) Delete the release branch (bash script) Notes In order to ensure that the actions only run on our repository, and not on forks, each worfklow's job contains if: github.repository == 'hazelcast/hazelcast-csharp-client' For building and testing, our workflows use a strategy to ensure we test both on Linux and Windows: strategy: matrix: os: [ ubuntu-latest, windows-latest ] Actions dotcover-report The dotcover-report custom action lives in the .github/actions/dotcover-report directory. It is implemented as a Node script, and accepts the following inputs: token is the GitHub token name is the name of the action, re-used when creating the check run path is the path to the coverage reports version is the client version The action scans the path for JSON coverage reports (one per target, e.g. net462, netcoreapp3.1...) and retrieves the global coverage percentage for each target. It then attaches a new check run to the commit SHA, containing these percentages, so that they become visible directly in GitHub. The .github/actions.txt file contains more details about that action."
  },
  "5.2.2/doc/contrib/sources.html": {
    "href": "5.2.2/doc/contrib/sources.html",
    "title": "Sources | Hazelcast .NET Documentation",
    "keywords": "Sources The source code for Hazelcast .NET is published on GitHub at Hazelcast .NET. Clone the repository to get the development branch: git clone --recurse-submodules https://github.com/hazelcast/hazelcast-csharp-client.git Note that the repository relies on Git submodules, and therefore the --recurse-submodules is required. Branches Development of new features takes place in the master branch. Maintenance of released versions take place in X.Y.z branches, e.g. version 4.1 is maintained in the 4.1.z branch. Tools The code uses C# version 8.0 (as per the src/Directory.Build.props file) though we plan to migrate to 9.0. The Hazelcast.Net package targets netstandard 2.0 and 2.1, and is supported on .NET Framework 4.6.2 and later, .NET Core 2.1 (LTS), .NET Core 3.1 (LTS). The solution can be opened with Microsoft Visual Studio 2019 or JetBrains Rider, but can also be fully built via our custom PowerShell script (see the Building page). The main Hazelcast.Net project (which builds the library) is covered by Microsoft's Roslyn analyzers (installed via the Microsoft.CodeAnalysis.FxCopAnalyzers NuGet package) which can detect and warn about many code issues. The whole solution is also regularly analyzed with the NDepend tool, which detects all sorts of anti-patterns (circular dependencies, naming inconsistencies...). Tests rely on the NUnit solution. Test coverage is provided by JetBrains dotCover and results are published on Codecov. Benchmarks are powered by BenchmarkDotNet, documentation is built with Microsoft's DocFX tool. The client uses the Hazelcast Open Binary Client Protocol. The protocol repository is included in the client repository as a Git submodule in order to keep track of which exact version of the protocol was used to build the codec files in the client."
  },
  "5.2.2/doc/cpsubsystem.html": {
    "href": "5.2.2/doc/cpsubsystem.html",
    "title": "CP SubSystem | Hazelcast .NET Documentation",
    "keywords": "CP SubSystem Warning The CP SubSystem operates in the unsafe mode by default without the strong consistency guarantee. See the CP Subsystem Unsafe Mode section for more information. You should set a positive number to the CP member count configuration to enable CP Subsystem and use it with the strong consistency guarantee. See the CP Subsystem Configuration section for details. Note See the original Java client CP SubSystem documentation for more details. The CP SubSystem is a component of a Hazelcast cluster that builds a strongly consistent layer for a set of distributed data structures. Its APIs can be used for implementing distributed coordination use cases, such as leader election, distributed locking, synchronization, and metadata management. It is accessed via the IHazelcastClient.CPSubSystem property. Its data structures are CP with respect to the CAP principle, i.e., they always maintain linearizability and prefer consistency over availability during network partitions. Besides network partitions, the CP SubSystem withstands server and client failures. Currently, the C# client CP SubSystem implements the following services: AtomicLong AtomicRef FencedLock"
  },
  "5.2.2/doc/data-affinity.html": {
    "href": "5.2.2/doc/data-affinity.html",
    "title": "Data Affinity | Hazelcast .NET Documentation",
    "keywords": "Data Affinity Data affinity ensures that related map entries exist on the same cluster member. If related data is on the same member, operations can be executed without the cost of extra network calls and extra wire data. Hazelcast has a standard way of routing all operations on an entry to the member which owns and manages the entry, based upon the key of the entry. For instance, getting the value of the entry, setting this value, locking the entry, etc. are operations that are all performed by the same member. This is achieved through partitioning, which consists in assigning a partition identifier to each map entry. The cluster is configured to support a configurable number of partitions (see Partition Group Configuration in the Reference Manual for details), which are distributed randomly and equally among members. When the client establishes its first connection to the cluster, it receives data from the server, including: the total number of partitions a table mapping partition identifiers to member identifiers. Partitioning The partition identifier is determined via the following logic: From the map entry key, a partition key is determined: by default, it is the map entry key itself, but it is possible to use an IPartitioningStrategy implementation to specify a different object to use The partition key is hashed to an Int32 value, using an optimized algorithm This hash is modded with the total number of partitions to obtain the partition identifier The IPartitioningStrategy interface provides one unique method, GetPartitionKey(object), which returns the partition key. In this case: If the returned partition key is null, the map entry key is used as the partition key If the returned partition key implements IData, the hash is directly obtained from the IData.PartitionHash property Otherwise, the partition key is hashed as explained above Strategies Partitioning strategies are explained in details in the Reference Manual. Note As of version 4.1 the following strategies are internal classes, and it is not possible to configure the global strategy. This will be added in further releases. The Hazelcast .NET client proposes different built-in strategies: Hazelcast.Partitioning.Strategies.PartitionAwarePartitioningStrategy only for objects implementing IPartitionAware (else returns null), returns the result of the GetPartitionKey() method Hazelcast.Partitioning.Strategies.StringPartitioningStrategy only for string keys (else returns null), trims chars before the first @ char, so \"abc\" becomes \"abc\" and \"abc@def\" becomes \"def\", and returns the resulting string The global strategy can be configured via the hazelcast.partitioning.globalStrategy configuration option. The default global strategy is the PartitionAwarePartitioningStrategy. At server level, it is possible to configure the local strategy used for each map. However, this is not supported by clients. On the other hand, you can implement a custom strategy which applies different logics depending on the type of the object."
  },
  "5.2.2/doc/distributed-objects.html": {
    "href": "5.2.2/doc/distributed-objects.html",
    "title": "Distributed Objects | Hazelcast .NET Documentation",
    "keywords": "Distributed Objects Distributed objects are managed by an Hazelcast cluster, and accessed via the Hazelcast .NET client. Currently, the client supports the following distributed objects: HMap - a distributed key/value store corresponding to a cluster-side Map HMultiMap - a distributed key/value store corresponding to a cluster-side MultiMap HReplicatedMap - a distributed key/value store corresponding to a cluster-side ReplicatedMap HList - a distributed list store corresponding to a cluster-side List HQueue - a distributed queue store corresponding to a cluster-side Queue HRingBuffer - a distributed ring-buffer corresponding to a cluster-side Map HSet - a distributed set store corresponding to a cluster-side Set HTopic - a distributed message-publishing store corresponding to a cluster-side Topic Distributed objects are obtained from the Hazelcast .NET Client and are fully identified by their unique name. If an object of the specified type and with the specified name already exists on the cluster, it is returned, otherwise it is created on the cluster. For instance: var map = await client.GetMapAsync<string, string>(\"my-map\"); Distributed objects should be disposed when not used, in order to release their resources. Note that this only releases client-side resources, but the actual data remain available on the cluster for further usage. In order to wipe a distributed object entirely from the cluster, the object needs to be destroyed: await map.DestroyAsync(); Transactions In a transaction context, transactional versions of some distributed objects can be retrieved: HTxList - a transactional version of an HList object HTxMap - a transactional version of an HMap object HTxMultiMap - a transactional version of an HMultiMap object HTxQueue - a transactional version of an HQueue object HTxSet - a transactional version of an HSet object For instance: using (var tx = await client.BeginTransactionAsync()) { using (var txmap = await tx.GetMapAsync<string, string>(\"my-map\")) { // ... } tx.Complete(); } Transactional objects expose a subset of the methods of the original object, which are performed in a transactional way and are either commited (if the transaction is completed) or rolled back. Refer to the Transactions page for more details. Object Names and Types The name of a distributed object is unique accross its type: there can only be one HMap object named \"my_map\", but there can also be an HList object named \"my-map\". \"Type\", here, means the generic definition of the type, e.g. HMap<,> or HList<> and not the complete type (e.g. HList<string>). This means that there is, in reality, one unique HMap<,> object named \"my-map\", and that client.GetMapAsync<string, string>(\"my-map\") would refer to the exact same object as client.GetMap<int, int>(\"my-map\"). The consequences of refering to an object with different types are not specified: it may work if types can be implicitly casted, and will not work if they cannot. This is not recommended."
  },
  "5.2.2/doc/distributed-objects/atomiclong.html": {
    "href": "5.2.2/doc/distributed-objects/atomiclong.html",
    "title": "AtomicLong | Hazelcast .NET Documentation",
    "keywords": "AtomicLong Note IAtomicLong is a member of CP Subsystem API. For detailed information, see the CP SubSystem documentation. Hazelcast IAtomicLong is the distributed implementation of java.util.concurrent.atomic.AtomicLong and offers most of its operations such as Get, Set, GetAndSet, CompareAndSet and IncrementAndGet. You can also think of it as implementing most of @System.Interlocked methods for long (System.Int64) distributed values. Since IAtomicLong is a distributed implementation, these operations involve remote calls and thus their performances differ from local, in-memory, atomic longs. The following example code creates an instance, increments it by a million and prints the count. await using var client = await HazelcastClientFactory.StartNewClientAsync(); await using var counter = await client.CPSubSystem.GetAtomicLongAsync(\"counter-unique-name\"); for (int i = 0; i < 1000 * 1000; i++ ) { if (i % 500000 == 0) Console.WriteLine($\"At: {i}\"); await counter.IncrementAndGetAsync(); } Console.WriteLine($\"Count is {await counter.GetAsync()}\"); When you start other instances with the code above, you will see the count as member count times a million. Note that sending functions to, and executing functions on, AtomicLong as documented for the Java client (see this page) are not supported by the C# client."
  },
  "5.2.2/doc/distributed-objects/atomicref.html": {
    "href": "5.2.2/doc/distributed-objects/atomicref.html",
    "title": "AtomicReference | Hazelcast .NET Documentation",
    "keywords": "AtomicReference Note IAtomicReference is a member of CP Subsystem API. For detailed information, see the CP SubSystem documentation. Hazelcast @Hazelcast.CP.IAtomicReference is the distributed implementation of java.util.concurrent.atomic.AtomicReference and offers most of its operations such as Get, Set, GetAndSet and CompareAndSet. You can also think of GetAndSet, CompareAndSet as @System.Interlocked Exchange and CompareExchange methods for distributed values. Since @Hazelcast.CP.IAtomicReference is a distributed implementation, these operations involve remote calls and thus their performances differ from local, in-memory, references. The following example code adds a dot the end of any string added to the shared reference: var cancellationSource = new CancellationTokenSource(); var cancellationToken = cancellationSource.Token; await using var client = await HazelcastClientFactory.StartNewClientAsync(options); await using var sentence = await client.CPSubsystem.GetAtomicReferenceAsync<string>(\"sentence-unique-key\"); while (!cancellationToken.IsCancellationRequested) { var value = await sentence.GetAsync(); if (value != null && !value.EndsWith(\".\")) { var newValue = value + \".\"; if (!await sentence.CompareAndSetAsync(value, newValue)) continue; } await Task.Delay(100, cancellationToken); } await sentence.DestroyAsync(); Note that sending functions to, and executing functions on, AtomicReference as documented for the Java client (see this page) are not supported by the C# client."
  },
  "5.2.2/doc/distributed-objects/fencedlock.html": {
    "href": "5.2.2/doc/distributed-objects/fencedlock.html",
    "title": "FencedLock | Hazelcast .NET Documentation",
    "keywords": "FencedLock Note IFencedLock is a member of CP Subsystem API. For detailed information, see the CP SubSystem documentation. The original Java FencedLock documentation and CP SubSystem FencedLock documentation may help get a better understanding of the .NET IFencedLock implementation. Hazelcast IFencedLock is a linearizable and distributed implementation of java.util.concurrent.locks.Lock, meaning that if you lock using a FencedLock, the critical section that it guards is guaranteed to be executed by only one thread in the entire cluster. Even though locks are great for synchronization, they can lead to problems if not used properly. Also note that Hazelcast Lock does not support fairness. Since IFencedLock is a distributed implementation, these operations involve remote calls and thus their performances differ from local, in-memory, references. IFencedLock is CP with respect to the CAP principle. It works on top of the Raft consensus algorithm. It offers linearizability during crash-stop failures and network partitions. If a network partition occurs, it remains available on at most one side of the partition. By default, IFencedLock is reentrant. Once a caller acquires the lock, it can acquire the lock reentrantly as many times as it wants in a linearizable manner. You can configure the reentrancy behavior via the cluster configuration. For instance, reentrancy can be disabled and FencedLock can work as a non-reentrant mutex. You can also set a custom reentrancy limit. When the reentrancy limit is already reached, IFencedLock does not block a lock call. Instead, it fails with an exception or a specified return value. Distributed locks are unfortunately not equivalent to single-node mutexes because of the complexities in distributed systems, such as uncertain communication patterns, and independent and partial failures. In an asynchronous network, no lock service can guarantee mutual exclusion, because there is no way to distinguish between a slow and a crashed process. This can be mitigated with fences (see CP SubSystem FencedLock documentation for details): lock holders are ordered by a monotonic fencing token, which increments each time the lock is assigned to a new owner. This fencing token can be passed to external services or resources to ensure sequential execution of the side effects performed by lock holders. Lock Context The original Java FencedLock is thread-based, much like the .NET lock statement is. In the distributed world, this means that the context of a lock ownership is a unique thread, for a unique client connection. In other words, the concept of thread is extended to the entire distributed system, and the lock context is this thread. This however does not work well with .NET asynchronous programming model, just as the lock statement does not either. Indeed, the following code is illegal (and would not compile) because the asynchronous await could cause the execution flow to continue on any thread. lock (mutex) // locks acquired by the current thread { // this is still the current thread await DoSomething(); // this can be any thread! } In C# programming, developers know that they cannot mix the lock statement with asynchronous programming, and typically use an explicit structure such as a semaphore, which becomes the lock context: await semaphore.WaitAsync(); try { await DoSomething(); } finally { semaphore.Release(); } Hazelcast FencedLock provides, and requires, an explicit lock context object. Every FencedLock operation executes within that context, which needs to be passed around in code. The code then becomes: var lockContext = new LockContext(); await fencedLock.LockAsync(lockContext); try { await DoSomething(); } finally { await fencedLock.UnlockAsync(lockContext); } Example The following simple example creates and uses a IFencedLock: var cancellationSource = new CancellationTokenSource(); var cancellationToken = cancellationSource.Token; await using var client = await HazelcastClientFactory.StartNewClientAsync(options); await using var fencedLock = await client.CPSubsystem.GetLockAsync(\"lock-name\"); var lockContext = new LockContext(); await fencedLock.LockAsync(lockContext); // acquires the lock for lockContext (count = 1) await fencedLock.LockAsync(lockContext); // re-enters the lock for lockContext (count = 2) var otherContext = new LockContext(); var task = Task.Run(async () => { // acquires the lock for otherContext // blocks as long as the lock is owned by lockContext await fencedLock.LockAsync(otherContext); }); await fencedLock.UnlockAsync(lockContext); // exits the lock for lockContext (count = 1) await fencedLock.UnlockAsync(lockContext); // releases the lock for lockContext await task; // completes now that lockContext does not own the lock anymore await fencedLock.UnlockAsync(otherContext); // releases the lock for otherContext await fencedLock.DestroyAsync(); Notes Locks are fail-safe. If a member holds a lock and some other members go down, the cluster will keep your locks safe and available. Moreover, when a member leaves the cluster, all the locks acquired by that dead member will be removed so that those locks are immediately available for live members. Locks are not automatically removed. If a lock is not used anymore, Hazelcast does not automatically perform garbage collection in the lock. This can lead to an OutOfMemoryError. If you create locks on the fly, make sure they are destroyed. Locks are re-entrant. The same context can lock multiple times on the same lock. Note that for other contexts to be able to require this lock, the owner of the lock must call unlock as many times as the owner called lock. Refer to the original Java FencedLock documentation and CP SubSystem FencedLock documentation for a better understanding of FencedLock, fencing, etc."
  },
  "5.2.2/doc/distributed-objects/flakeidgenerator.html": {
    "href": "5.2.2/doc/distributed-objects/flakeidgenerator.html",
    "title": "FlakeIdGenerator | Hazelcast .NET Documentation",
    "keywords": "FlakeIdGenerator A FlakeIdGenerator is a cluster-wide unique identifier generator. The identifiers are long primitive values in the range from 0 to long.MaxValue and are k-ordered (i.e. roughly ordered). Refer to the FlakeIdGenerator section of the Hazelcast Reference Manual for more details. The identifiers contain a timestamp component, and a member identifier component which is assigned when the member joins the cluster. This allows identifiers to be ordered and unique without any coordination between members, thus making the generator safe even in split-brain scenario. Using FlakeIdGenerator A FlakeIdGenerator is obtained from the Hazelcast .NET Client. For instance: var generator = await client.GetFlakeIdGeneratorAsync(\"my-generator\"); var id1 = await generator.GetNewIdAsync(); var id2 = await generator.GetNewIdAsync(); await generator.DisposeAsync(); Configuring FlakeIdGenerator To avoid frequent round-trips to the members, a client usually prefetches a batch of identifiers. The size of each batch can be configured via the PrefetchCount option: allowed values are between 1 and 100,000 inclusive, and the default value is 100. In order to preserve rough ordering, a batch of identifiers is only valid for a given amount of time, which can be configured via the PrefetchValidityPeriod option. If you do not care about ordering, this option can be set to Timeout.InfiniteTimeSpan. The default value is 10 minutes. Each generator can be configured, based upon its name. For instance: options.FlakeIdGenerator[\"my-generator\"] = new FlakeIdGeneratorOptions { PrefetchCount = 40, PrefetchValidityPeriod = Timeout.InfiniteTimeSpan } If no configuration exists for a specified generator name, then the default configuration is used. The default configuration for all generators can be modified via the special * wildcard name: options.FlakeIdGenerator[\"*\"] = new FlakeIdGeneratorOptions { PrefetchCount = 40, PrefetchValidityPeriod = Timeout.InfiniteTimeSpan } The configuration for a specified name is determined via the IPatternMatcher configured via the PatternMatcher property, and therefore wildcards are supported. See also the general Configuration documentation."
  },
  "5.2.2/doc/distributed-objects/hlist.html": {
    "href": "5.2.2/doc/distributed-objects/hlist.html",
    "title": "HList | Hazelcast .NET Documentation",
    "keywords": "HList A HList list is a distributed list corresponding to a cluster-side List which can be considered as a distributed implementation of the well-known C# IList<T>. A HList is a specialized IHCollection. The list behavior can be configured on the server: see the general List documentation for complete details about lists. Defining Lists Maps are fully identified by their type and unique name, regardless of the types specified for list items. In other words, an HList<string> and an HList<int> named with the same name are backed by the same cluster structure. Obviously, refering to a list with types other than the expected types can have unspecified consequences (probably, serialization errors) and is not recommended. The items type can be just about any valid .NET type, provided that it can be (de)serialized by the Hazelcast .NET Client (see the Serialization documentation). It does not necessarily need to be (de)serializable by the cluster, as long as the cluster does not need to handle them as objects, and can treat them as plain binary blobs. As soon as the cluster needs to handle the objects themselves, the types must also be (de)serializable by the cluster. Creating & Destroying Lists A list is obtained from the Hazelcast .NET Client, and is created on-demand: if a list with the specified name already exists on the cluster, it is returned, otherwise it is created on the cluster. For instance: var list = await client.GetListAsync<string>(\"my-list\"); Lists should be disposed after usage, in order to release their resources. Note that this only releases client-side resources, but the actual data remain available on the cluster for further usage. In order to wipe the list and its data entirely from the cluster, it needs to be destroyed: await list.DestroyAsync(); Using Lists The HList structure is completely documented in the associated IHList<T> reference documentation. It provides methods to manipulate entries, such as: AddAsync(item) adds an item to the list GetAsync(index) retrieves the item in the specified position GetAllAsync() retrieve the items GetSizeAsync() gets the number of items, and IsEmptyAsync() determines whether the map is empty RemoveAsync(index) remove an item The HList structure exposes events (see events general documentation) at list level. A complete list of events is provided in the CollectionItemEventHandlers<T> documentation. The following example illustrates how to subscribe, and unsubscribe, to list events: var id = await list.SubscribeAsync(events => events .ItemAdded((sender, args) => { logger.LogInformation($\"Item {args.Item} was added.\") })); // ... await list.UnsubscribeAsync(id); Note that the handler methods passed to e.g. EntryRemoved or Cleared can be asynchronous, too."
  },
  "5.2.2/doc/distributed-objects/hmap.html": {
    "href": "5.2.2/doc/distributed-objects/hmap.html",
    "title": "HMap, HMultiMap, HReplicatedMap | Hazelcast .NET Documentation",
    "keywords": "HMap, HMultiMap, HReplicatedMap A HMap map is a distributed key/value store corresponding to a cluster-side Map which can be considered as a distributed implementation of the well-known C# IDictionary<K,V>, with data being partitioned over members of the cluster, thus providing horizontal scalability. It is one of the most important Hazelcast data structures. Additionally, Hazelcast provides the following map-related data structures: A HMultiMap map is a distributed key/value store corresponding to a cluster-side MultiMap: a specialized map that supports storing multiple values under a single key. A HReplicatedMap map is a distributed key/value store corresponding to a cluster-side ReplicatedMap: a specialized map where data is replicated to all members of the cluster, instead of being partitioned, thus providing faster read/write accesses at the cost of higher server memory consumption. The maps behavior can be configured on the server: see the general Map documentation for complete details about maps. Defining Maps Maps are fully identified by their type (HMap, HReplicatedMap or HMultiMap) and unique name, regardless of the types specified for keys and values. In other words, an HMap<string, string> and an HMap<int, int> named with the same name are backed by the same cluster structure. Obviously, refering to a map with types other than the expected types can have unspecified consequences (probably, serialization errors) and is not recommended. Key and value types can be just about any valid .NET type, provided that they can be (de)serialized by the Hazelcast .NET Client (see the Serialization documentation). They do not necessarily need to be (de)serializable by the cluster, as long as the cluster does not need to handle them as objects, and can treat them as plain binary blobs. As soon as the cluster needs to handle the objects themselves (for instance, if in-memory format is configured as OBJECT, or if entries are processed by entry processors), the types must also be (de)serializable by the cluster. Because keys may never be de-serialized on the cluster, the cluster always treat them as binary blobs, for comparison purposes. That is to say, two keys are considered identical by the cluster if their serialized representations are identical. Creating & Destroying Maps A map is obtained from the Hazelcast .NET Client, and is created on-demand: if a map with the specified name already exists on the cluster, it is returned, otherwise it is created on the cluster. For instance: var map = await client.GetMapAsync<string, string>(\"my-map\"); Maps should be disposed after usage, in order to release their resources. Note that this only releases client-side resources, but the actual data remain available on the cluster for further usage. In order to wipe the map and its data entirely from the cluster, it needs to be destroyed: await map.DestroyAsync(); Using Maps The HMap structure is completely documented in the associated IHMap<TKey, TValue> reference documentation. It provides methods to manipulate entries, such as: SetAsync(key, value) and PutAsync(key, value) add an entry to the map GetAsync(key) retrieves the value associated with a key GetKeysAsync(), GetValuesAsync() retrieve the keys and values ContainsKeyAsync(key), ContainsValueAsync(value) determines whether the map contains a key or a value GetSizeAsync() gets the number of entries, and IsEmptyAsync() determines whether the map is empty RemoveAsync(key) and DeleteAsync(key) remove an entry The HMap structure also supports locks at entry level via methods such as: LockAsync(key) locks the entry associated with the key UnlockAsync(key) unlocks an entry that was previously locked IsLockedAsync(key) determines whether an entry is locked Note Note that locks, due to the asynchronous aspect of the API, are not thread-based but context-based. Refer to the locking documentation for complete details. The HMap structure exposes events (see events general documentation) both at map level and at entry level. A complete list of events is provided in the MapEventHandlers<TKey, TValue> documentation. The following example illustrates how to subscribe, and unsubscribe, to map events: var id = await map.SubscribeAsync(events => events .EntryRemoved((sender, args) => { logger.LogInformation($\"Key={args.Key} / value={args.Value} removed.\") }) .Cleared((sender, args) => { logger.LogInformation(\"The map has been cleared.\"); })); // ... await map.UnsubscribeAsync(id); Note that the handler methods passed to e.g. EntryRemoved or Cleared can be asynchronous, too."
  },
  "5.2.2/doc/distributed-objects/hqueue.html": {
    "href": "5.2.2/doc/distributed-objects/hqueue.html",
    "title": "HQueue | Hazelcast .NET Documentation",
    "keywords": "HQueue A HQueue list is a distributed queue corresponding to a cluster-side List which can be considered as a distributed implementation of the well-known C# Queue<T>. A HQueue is a specialized IHCollection. The queue behavior can be configured on the server: see the general Queue documentation for complete details about queues. Defining Queues Queues are fully identified by their type and unique name, regardless of the types specified for queue items. In other words, an HQueue<string> and an HQueue<int> named with the same name are backed by the same cluster structure. Obviously, refering to a queue with types other than the expected types can have unspecified consequences (probably, serialization errors) and is not recommended. The items type can be just about any valid .NET type, provided that it can be (de)serialized by the Hazelcast .NET Client (see the Serialization documentation). It does not necessarily need to be (de)serializable by the cluster, as long as the cluster does not need to handle them as objects, and can treat them as plain binary blobs. As soon as the cluster needs to handle the objects themselves, the types must also be (de)serializable by the cluster. Creating & Destroying Queues A queue is obtained from the Hazelcast .NET Client, and is created on-demand: if a queue with the specified name already exists on the cluster, it is returned, otherwise it is created on the cluster. For instance: var queue = await client.GetQueueAsync<string>(\"my-queue\"); Queues should be disposed after usage, in order to release their resources. Note that this only releases client-side resources, but the actual data remain available on the cluster for further usage. In order to wipe the queue and its data entirely from the cluster, it needs to be destroyed: await queue.DestroyAsync(); Using Queue The HQueue structure is completely documented in the associated IHQueue<T> reference documentation. It provides methods to manipulate entries, such as: AddAsync(item) adds an item to the queue OfferAsync(item) tries to add an item to the queue, if possible GetElementAsync() retrieves (but does not remove) an item from the queue TakeAsync() removes and returns the head item from the queue GetSizeAsync() gets the number of items, and IsEmptyAsync() determines whether the queue is empty The HQueue structure exposes events (see events general documentation) at queue level. A complete list of events is provided in the CollectionItemEventHandlers<T> documentation. The following example illustrates how to subscribe, and unsubscribe, to queue events: var id = await queue.SubscribeAsync(events => events .ItemAdded((sender, args) => { logger.LogInformation($\"Item {args.Item} was added.\") })); // ... await queue.UnsubscribeAsync(id); Note that the handler methods passed to e.g. EntryRemoved or Cleared can be asynchronous, too."
  },
  "5.2.2/doc/distributed-objects/hringbuffer.html": {
    "href": "5.2.2/doc/distributed-objects/hringbuffer.html",
    "title": "HRingBuffer | Hazelcast .NET Documentation",
    "keywords": "HRingBuffer A HRingBuffer list is a distributed ring-buffer corresponding to a cluster-side List. Content in a ring-buffer is stored in a ring-like structure. A ringbuffer has a capacity so it won't grow beyond that capacity and endanger the stability of the system. If that capacity is exceeded, than the oldest item in the ringbuffer is overwritten. The ring-buffer behavior can be configured on the server: see the general Queue documentation for complete details about ring-buffers. Defining Ring-Buffers Ring-buffers are fully identified by their type and unique name, regardless of the types specified for bufferered items. In other words, an HRingBuffer<string> and an HRingBuffer<int> named with the same name are backed by the same cluster structure. Obviously, refering to a ring-buffer with types other than the expected types can have unspecified consequences (probably, serialization errors) and is not recommended. The items type can be just about any valid .NET type, provided that it can be (de)serialized by the Hazelcast .NET Client (see the Serialization documentation). It does not necessarily need to be (de)serializable by the cluster, as long as the cluster does not need to handle them as objects, and can treat them as plain binary blobs. As soon as the cluster needs to handle the objects themselves, the types must also be (de)serializable by the cluster. Creating & Destroying Ring-Buffers A ring-buffer is obtained from the Hazelcast .NET Client, and is created on-demand: if a ring-buffer with the specified name already exists on the cluster, it is returned, otherwise it is created on the cluster. For instance: var ringbuffer = await client.GetRingBufferAsync<string>(\"my-ring-buffer\"); Ring-buffers should be disposed after usage, in order to release their resources. Note that this only releases client-side resources, but the actual data remain available on the cluster for further usage. In order to wipe the ring-buffer and its data entirely from the cluster, it needs to be destroyed: await ringbuffer.DestroyAsync(); Using Ring-Buffers The HRingBuffer structure is completely documented in the associated IHRingBuffer<TItem> reference documentation. It provides methods to manipulate entries, such as: AddAsync(item) adds an item to the ring-buffer GetCapacityAsync() gets the total capacity of the ring-buffer GetRemainingCapacityAsync() gets the remaining capacity of the ring-buffer ReadOneAsync() reads one item from the ring-buffer"
  },
  "5.2.2/doc/distributed-objects/hset.html": {
    "href": "5.2.2/doc/distributed-objects/hset.html",
    "title": "HSet | Hazelcast .NET Documentation",
    "keywords": "HSet A HSet list is a distributed list corresponding to a cluster-side List which can be considered as a distributed implementation of the well-known C# IHashSet<T>. A HSet is a specialized IHCollection. The set behavior can be configured on the server: see the general List documentation for complete details about sets. Defining Sets Sets are fully identified by their type and unique name, regardless of the types specified for set items. In other words, an HSet<string> and an HSet<int> named with the same name are backed by the same cluster structure. Obviously, refering to a set with types other than the expected types can have unspecified consequences (probably, serialization errors) and is not recommended. The items type can be just about any valid .NET type, provided that it can be (de)serialized by the Hazelcast .NET Client (see the Serialization documentation). It does not necessarily need to be (de)serializable by the cluster, as long as the cluster does not need to handle them as objects, and can treat them as plain binary blobs. As soon as the cluster needs to handle the objects themselves, the types must also be (de)serializable by the cluster. Creating & Destroying Sets A set is obtained from the Hazelcast .NET Client, and is created on-demand: if a set with the specified name already exists on the cluster, it is returned, otherwise it is created on the cluster. For instance: var set = await client.GetSetAsync<string>(\"my-set\"); Sets should be disposed after usage, in order to release their resources. Note that this only releases client-side resources, but the actual data remain available on the cluster for further usage. In order to wipe the set and its data entirely from the cluster, it needs to be destroyed: await set.DestroyAsync(); Using Sets The HSet structure is completely documented in the associated IHSet<T> reference documentation. It provides methods to manipulate entries, such as: AddAsync(item) adds an item to the set GetAllAsync() retrieves the items ContainsAsync(item) determines whether the set contains an item GetSizeAsync() gets the number of items, and IsEmptyAsync() determines whether the map is empty RemoveAsync(item) remove an item The HSet structure exposes events (see events general documentation) at set level. A complete list of events is provided in the CollectionItemEventHandlers<T> documentation. The following example illustrates how to subscribe, and unsubscribe, to set events: var id = await set.SubscribeAsync(events => events .ItemAdded((sender, args) => { logger.LogInformation($\"Item {args.Item} was added.\") })); // ... await set.UnsubscribeAsync(id); Note that the handler methods passed to e.g. EntryRemoved or Cleared can be asynchronous, too."
  },
  "5.2.2/doc/distributed-objects/htopic.html": {
    "href": "5.2.2/doc/distributed-objects/htopic.html",
    "title": "HTopic | Hazelcast .NET Documentation",
    "keywords": "HTopic A HTopic topic is a distributed topic corresponding to a cluster-side List. The topic behavior can be configured on the server: see the general List documentation for complete details about topics. Defining Topics Topics are fully identified by their type and unique name, regardless of the types specified for topic messages. In other words, an HTopic<string> and an HTopic<int> named with the same name are backed by the same cluster structure. Obviously, refering to a topic with types other than the expected types can have unspecified consequences (probably, serialization errors) and is not recommended. The messages type can be just about any valid .NET type, provided that it can be (de)serialized by the Hazelcast .NET Client (see the Serialization documentation). It does not necessarily need to be (de)serializable by the cluster, as long as the cluster does not need to handle them as objects, and can treat them as plain binary blobs. As soon as the cluster needs to handle the objects themselves, the types must also be (de)serializable by the cluster. Creating & Destroying Topics A topic is obtained from the Hazelcast .NET Client, and is created on-demand: if a topic with the specified name already exists on the cluster, it is returned, otherwise it is created on the cluster. For instance: var optic = await client.GetTopicAsync<string>(\"my-topic\"); Topics should be disposed after usage, in order to release their resources. Note that this only releases client-side resources, but the actual data remain available on the cluster for further usage. In order to wipe the topic and its data entirely from the cluster, it needs to be destroyed: await topic.DestroyAsync(); Using Topics The HTopic structure is completely documented in the associated IHTopic<T> reference documentation. It provides a method to publish messages: PublishAsync(message) publishes a message The HTopic structure exposes events (see events general documentation) at topic level. A complete list of events is provided in the CollectionItemEventHandlers<T> documentation. The following example illustrates how to subscribe, and unsubscribe, to topic events: var id = await topic.SubscribeAsync(events => events .Message((sender, args) => { logger.LogInformation($\"Got message {args.Payload} at {args.PublishTime}.\") })); // ... await topic.UnsubscribeAsync(id); Note that the handler methods passed to e.g. Message can be asynchronous, too."
  },
  "5.2.2/doc/distributedComputing.html": {
    "href": "5.2.2/doc/distributedComputing.html",
    "title": "Distributed Computing | Hazelcast .NET Documentation",
    "keywords": "Distributed Computing This chapter explains how you can use Hazelcast IMDG's entry processor implementation in the .NET client. Using EntryProcessor Hazelcast supports entry processing. An entry processor is a function that executes your code on a map entry in an atomic way. An entry processor is a good option if you perform bulk processing on an IHMap. Usually you perform a loop of keys - executing IHMap.GetAsync(key), mutating the value and finally putting the entry back in the map using IHMap.PutAsync(key,value). If you perform this process from a client or from a member where the keys do not exist, you effectively perform two network hops for each update: the first to retrieve the data and the second to update the mutated value. If you are doing the process described above, you should consider using entry processors. An entry processor executes a read and updates upon the member where the data resides. This eliminates the costly network hops described above. NOTE: Entry processor is meant to process a single entry per call. Processing multiple entries and data structures in an entry processor is not supported as it may result in deadlocks on the server side. Hazelcast sends the entry processor to each cluster member and these members apply it to the map entries. Therefore, if you add more members, your processing completes faster. Processing Entries The Hazelcast.DistributedObjects.IHMap interface provides the following functions for entry processing: ExecuteAsync<T>(IEntryProcessor<T>, TKey) processes an entry mapped by a key. ExecuteAsync<T>(IEntryProcessor<T>, IEnumerable<TKey>) processes entries mapped by a list of keys. ExecuteAsync<T>(IEntryProcessor<T>, IPredicate) processes all entries in a map with a defined predicate. ExecuteAsync<T>(IEntryProcessor<T>) processes all entries in a map. In the .NET client, an IEntryProcessor should be IIdentifiedDataSerializable or IPortable because the server should be able to deserialize it to process. The following is an example for IEntryProcessor which is IIdentifiedDataSerializable. public class IdentifiedEntryProcessor : IEntryProcessor<string>, IIdentifiedDataSerializable { public const int FactoryIdConst = 5; // Id of corresponding IDataSerializableFactory public const int ClassIdConst = 1; // corresponds to Java's IdentifiedEntryProcessor.CLASS_ID public int FactoryId => FactoryIdConst; public int ClassId => ClassIdConst; private string _value; public IdentifiedEntryProcessor(string value) { _value = value; } public void ReadData(IObjectDataInput input) { _value = input.ReadString(); } public void WriteData(IObjectDataOutput output) { output.WriteString(_value); } } Now, you need to make sure that the Hazelcast member recognizes the entry processor. For this, you need to implement the Java equivalent of your entry processor and its factory, and create your own compiled class or JAR files. For adding your own compiled class or JAR files to the server's CLASSPATH, see Adding User Library to CLASSPATH. The following is the Java equivalent of the entry processor in .NET client given above: import com.hazelcast.map.AbstractEntryProcessor; import com.hazelcast.nio.ObjectDataInput; import com.hazelcast.nio.ObjectDataOutput; import com.hazelcast.nio.serialization.IdentifiedDataSerializable; import java.io.IOException; import java.util.Map; public class IdentifiedEntryProcessor extends AbstractEntryProcessor<String, String> implements IdentifiedDataSerializable { static final int CLASS_ID = 1; private String value; public IdentifiedEntryProcessor() { } @Override public int getFactoryId() { return IdentifiedFactory.FACTORY_ID; } @Override public int getId() { return CLASS_ID; } @Override public void writeData(ObjectDataOutput out) throws IOException { out.writeUTF(value); } @Override public void readData(ObjectDataInput in) throws IOException { value = in.readUTF(); } @Override public Object process(Map.Entry<String, String> entry) { entry.setValue(value); return value; } } You can implement the above processor’s factory as follows: import com.hazelcast.nio.serialization.DataSerializableFactory; import com.hazelcast.nio.serialization.IdentifiedDataSerializable; public class IdentifiedFactory implements DataSerializableFactory { public static final int FACTORY_ID = 5; @Override public IdentifiedDataSerializable create(int typeId) { if (typeId == IdentifiedEntryProcessor.CLASS_ID) { return new IdentifiedEntryProcessor(); } return null; } } Now you need to configure the hazelcast.xml to add your factory as shown below. <hazelcast> <serialization> <data-serializable-factories> <data-serializable-factory factory-id=\"5\"> IdentifiedFactory </data-serializable-factory> </data-serializable-factories> </serialization> </hazelcast> After the above implementations and configuration are done and you start the server where your library is added to its CLASSPATH, you can use the entry processor in the IHMap functions. See the following example. var map = await client.GetMapAsync<string, string>(\"processing-map\"); await map.ExecuteAsync(new IdentifiedEntryProcessor(\"processed\"), \"key\"); Console.WriteLine($\"Value for key is: {await map.GetAsync(\"key\")}\"); //Output: //Value for key is: processed"
  },
  "5.2.2/doc/distributedQuery.html": {
    "href": "5.2.2/doc/distributedQuery.html",
    "title": "Distributed Query | Hazelcast .NET Documentation",
    "keywords": "Distributed Query Hazelcast partitions your data and spreads it across cluster of members. You can iterate over the map entries and look for certain entries (specified by predicates) you are interested in. However, this is not very efficient because you will have to bring the entire entry set and iterate locally. Instead, Hazelcast allows you to run distributed queries on your distributed map. How Distributed Query Works The requested predicate is sent to each member in the cluster. Each member looks at its own local entries and filters them according to the predicate. At this stage, key-value pairs of the entries are deserialized and then passed to the predicate. The predicate requester merges all the results coming from each member into a single set. Distributed query is highly scalable. If you add new members to the cluster, the partition count for each member is reduced and thus the time spent by each member on iterating its entries is reduced. In addition, the pool of partition threads evaluates the entries concurrently in each member, and the network traffic is also reduced since only filtered data is sent to the requester. Predicates Class Operators There are many built-in IPredicate implementations for your query requirements available via Hazelcast.Query.Predicates static class. Some of them are explained below. True(), False(): Predicates returning true and hence including all the entries or false for filtering all out. EqualTo(), NotEqualTo(): Checks if attribute value is equal or not equal to a given value. InstanceOf(): Checks if attribute value has a certain type. Like(), ILike(): Checks if attribute value matches some case-sensitive (like) or case-insensitive (ilike) string pattern. % (percentage sign) is the placeholder for any number of characters, _ (underscore) is placeholder a single character. GreaterThan(), GreaterThanOrEqualTo(), LessThan(), LessThanOrEqualTo(): Checks if attribute value is in specified relation with a value. Between(): Checks if attribute value is in between two values (both are inclusive). In(): Checks if attribute value is an element of a certain list. Not(): Negates a provided predicate result. Match(): Checks if attribute value matches some regular expression. Sql(): Query using SQL syntax. Example using Predicates Please see the below example code for using Predicates. var users = await client.GetMapAsync<string, User>(\"users\"); // Add some users to the Distributed Map // Create a Predicate from a SQL-like Where clause var sqlQuery = Predicates.Sql(\"active AND age BETWEEN 18 AND 21\"); // Creating the same Predicate as above but with a builder var criteriaQuery = Predicates.And( Predicates.EqualTo(\"active\", true), Predicates.Between(\"age\", 18, 21) ); // Get result collections using the two different Predicates var result1 = await users.GetValuesAsync(sqlQuery); var result2 = await users.GetValuesAsync(criteriaQuery); Employee Map Query Examples Assume that you have an employee map containing the values of Employee, as coded below. public class Employee : IPortable { public string Name { get; set; } public int Age { get; set; } public bool Active { get; set; } public double Salary { get; set; } public int ClassId => 100; public int FactoryId => EmployeeSerializableFactory.FactoryId; public void ReadPortable(IPortableReader reader) { Name = reader.ReadString(\"name\"); Age = reader.ReadInt(\"age\"); Active = reader.ReadBoolean(\"active\"); Salary = reader.ReadDouble(\"salary\"); } public void WritePortable(IPortableWriter writer) { writer.WriteInt(\"age\", Age); writer.WriteString(\"name\", Name); writer.WriteBoolean(\"active\", Active); writer.WriteDouble(\"salary\", Salary); } } Note that Employee is implementing IPortable. As portable types are not deserialized on the server side for querying, you don't need to implement its Java equivalent on the server side. For the non-portable types, you need to implement its Java equivalent and its serializable factory on the server side for server to reconstitute the objects from binary formats. In this case before starting the server, you need to compile the Employee and related factory classes with server's CLASSPATH and add them to the user-lib directory in the extracted hazelcast-<version>.zip (or tar). See Adding User Library to CLASSPATH. NOTE: Querying with IPortable interface is faster as compared to IIdentifiedDataSerializable. Querying by Combining Predicates with AND, OR, NOT You can combine predicates by using the And, Or and Not operators, as shown in the below example. var criteriaQuery = Predicates.And( Predicates.EqualTo(\"active\", true), Predicates.LessThan(\"age\", 30) ); var result = await map.GetValuesAsync(criteriaQuery); In the above example code, predicate verifies whether the entry is active and its age value is less than 30. This method sends the predicate to all cluster members and merges the results coming from them. NOTE: Predicates can also be applied to keySet and entrySet of the Hazelcast IMDG's distributed map. Querying with SQL Sql() predicate takes the regular SQL Where clause. See the following example: var map = await client.GetMapAsync<string, Employee>(\"employee\"); var employees = await map.GetValuesAsync(Predicates.Sql(\"active AND age < 30\")); Supported SQL Syntax AND/OR: <expression> AND (<expression> OR <expression>)… active AND age > 30 active = false OR age = 45 OR name = 'Joe' active AND ( age > 20 OR salary < 60000 ) Equality: =, !=, <, ⇐, >, >= <expression> = value age <= 30 name = 'Joe' salary != 50000 BETWEEN: <attribute> [NOT] BETWEEN <value1> AND <value2> age BETWEEN 20 AND 33 (same as age >= 20 AND age ⇐ 33) age NOT BETWEEN 30 AND 40 (same as age < 30 OR age > 40) IN: <attribute> [NOT] IN (val1, val2,…) age IN ( 20, 30, 40 ) age NOT IN ( 60, 70 ) active AND ( salary >= 50000 OR ( age NOT BETWEEN 20 AND 30 ) ) age IN ( 20, 30, 40 ) AND salary BETWEEN ( 50000, 80000 ) LIKE/ILIKE: <attribute> [NOT] LIKE 'expression' The % (percentage sign) is the placeholder for multiple characters, an _ (underscore) is the placeholder for only one character. name LIKE 'Jo%' (true for 'Joe', 'Josh', 'Joseph' etc.) name LIKE 'Jo_' (true for 'Joe'; false for 'Josh') name NOT LIKE 'Jo_' (true for 'Josh'; false for 'Joe') name LIKE 'J_s%' (true for 'Josh', 'Joseph'; false 'John', 'Joe') name ILIKE 'Jo%' (true for 'Joe', 'joe', 'jOe','Josh','joSH', etc.) name ILIKE 'Jo_' (true for 'Joe' or 'jOE'; false for 'Josh') REGEX: <attribute> [NOT] REGEX 'expression' name REGEX 'abc-.*' (true for 'abc-123'; false for 'abx-123') Querying Examples with Predicates You can use the __key attribute to perform a predicated search for the entry keys. See the following example: var map = await client.GetMapAsync<string, Employee>(\"employees\"); await map.PutAsync(\"Alice\", new Employee { Name = \"Alice\", Age = 35 }); await map.PutAsync(\"Andy\", new Employee { Name = \"Andy\", Age = 37 }); await map.PutAsync(\"Bob\", new Employee { Name = \"Bob\", Age = 22 }); // ... var predicate = Predicates.Sql(\"__key like A%\"); var startingWithA = await map.GetValuesAsync(predicate); You can also use Predicates.Key helper method. Here is an example: //continued from previous example var predicate = Predicates.Key().IsLike(\"A%\"); var startingWithA = await map.GetValuesAsync(predicate); It is also possible to use a complex object as key and make query on key fields. var map = await client.GetMapAsync<Employee, int>(\"employees\"); await map.PutAsync(new Employee { Name = \"Alice\", Age = 35 }, 1); await map.PutAsync(new Employee { Name = \"Andy\", Age = 37 }, 2); await map.PutAsync(new Employee { Name = \"Bob\", Age = 22 }, 3); // ... var predicate = Predicates.Key(\"name\").IsLike(\"A%\"); //identical to sql predicate:\"__key#name LIKE A%\" var startingWithA = await map.GetValuesAsync(predicate); You can use the this attribute to perform a predicated search for entry values. See the following example: //continued from previous example var predicate=Predicates.IsGreaterThan(\"this\", 2); var result = employeeMap.Values(predicate); //result will include only Bob Querying with JSON Strings You can query JSON strings stored inside your Hazelcast clusters. To query the JSON string, you first need to create a Hazelcast.Core.HazelcastJsonValue from the JSON string using the HazelcastJsonValue(string jsonString) constructor. You can use HazelcastJsonValues both as keys and values in the distributed data structures. Then, it is possible to query these objects using the Hazelcast query methods explained in this section. var person1 = new HazelcastJsonValue(\"{ \\\"age\\\": 35 }\"); var person2 = new HazelcastJsonValue(\"{ \\\"age\\\": 24 }\"); var person3 = new HazelcastJsonValue(\"{ \\\"age\\\": 17 }\"); var idPersonMap = await client.GetMapAsync<int, HazelcastJsonValue>(\"jsonValues\"); await idPersonMap.PutAsync(1, person1); await idPersonMap.PutAsync(2, person2); await idPersonMap.PutAsync(3, person3); var peopleUnder21 = await idPersonMap.GetValuesAsync(Predicates.LessThan(\"age\", 21)); When running the queries, Hazelcast treats values extracted from the JSON documents as Java types so they can be compared with the query attribute. JSON specification defines five primitive types to be used in the JSON documents: number,string, true, false and null. The string, true/false and null types are treated as String, boolean and null, respectively. We treat the extracted number values as longs if they can be represented by a long. Otherwise, numbers are treated as doubles. It is possible to query nested attributes and arrays in the JSON documents. The query syntax is the same as querying other Hazelcast objects using the Predicates. /** * Sample JSON object * * { * \"departmentId\": 1, * \"room\": \"alpha\", * \"people\": [ * { * \"name\": \"Peter\", * \"age\": 26, * \"salary\": 50000 * }, * { * \"name\": \"Jonah\", * \"age\": 50, * \"salary\": 140000 * } * ] * } * * * The following query finds all the departments that have a person named \"Peter\" working in them. */ var departmentsWithPeter = await departments.GetValuesAsync(Predicates.EqualTo(\"people[any].name\", \"Peter\")); HazelcastJsonValue is a lightweight wrapper around your JSON strings. It is used merely as a way to indicate that the contained string should be treated as a valid JSON value. Hazelcast does not check the validity of JSON strings put into to the maps. Putting an invalid JSON string into a map is permissible. However, in that case whether such an entry is going to be returned or not from a query is not defined. Filtering with Paging Predicates The .NET client provides paging for defined predicates. With its Predicates.Page() method, you can get a list of keys, values or entries page by page by filtering them with predicates and giving the size of the pages. Also, you can sort the entries by specifying comparators. var map = await client.GetMapAsync<int, Student>(\"students\"); var greaterEqual = Predicates.GreaterThanOrEqualTo(\"age\", 18); var pagingPredicate = Predicates.Page(pageSize: 5, predicate: greaterEqual); // Retrieve the first page var values = await map.GetValuesAsync(pagingPredicate); //... // Set up next page pagingPredicate.NextPage(); // Retrieve next page values = await map.GetValuesAsync(pagingPredicate); If you want to sort the result before paging, you need to specify a comparator object that implements the System.Collections.Generic.IComparer<KeyValuePair<object, object>> interface. Also, this comparator class should implement' one of IIdentifiedDataSerializable or IPortable. After implementing this class in .NET, you need to implement the Java equivalent of it and its factory. The Java equivalent of the comparator should implement java.util.Comparator. Note that the Compare function of Comparator on the Java side is the equivalent of the Compare function of IComparer on the .NET side. When you implement the Comparator and its factory, you can add them to the CLASSPATH of the server side. See Adding User Library to CLASSPATH. Also, you can access a specific page more easily with the help of the Page property of returned IPagingPredicate. This way, if you make a query for the 100th page, for example, it will get this page results immediately instead of reaching 100 pages one by one using the NextPage function. Fast-Aggregations Fast-Aggregations feature provides some aggregate functions, such as sum, average, max, and min, on top of Hazelcast IHMap entries. Their performance is perfect since they run in parallel for each partition and are highly optimized for speed and low memory consumption. The Hazelcast.Aggregation.Aggregators static class provides a wide variety of built-in aggregators. Some of them are presented below: Count() BigIntegerSum() DoubleSum(), DoubleAvg() IntegerSum(), IntegerAvg() LongSum(), LongAvg() NumberAvg() FixedPointSum(), FloatingPointSum() Min(), Max() You can use these aggregators with the IHMap.AggregateAsync(IAggregator<T>) and IHMap.AggregateAsync(IAggregator<T>, IPredicate) methods."
  },
  "5.2.2/doc/download-install.html": {
    "href": "5.2.2/doc/download-install.html",
    "title": "Download and Install | Hazelcast .NET Documentation",
    "keywords": "Download and Install Hazelcast is composed of two parts: the server, and the client. The client requires a working Hazelcast cluster, composed of one or more servers, in order to run. This cluster handles storage and manipulation of the user data. The client is a library which connects to the cluster, and gives access to such data. Hazelcast Client Requirements The Hazelcast .NET client is distributed as a NuGet package which targets .NET Standard versions 2.0 and 2.1, and specific .NET version starting with 5.0. It can therefore be used in any application targetting .NET versions that support these .NET Standard versions: .NET Framework 4.6.2 and above, on Windows .NET Core, on Windows, Linux and MacOS See the versions page for details on which exact version are supported by the client. Distribution The .NET client is distributed via NuGet as a package named Hazelcast.Net. It can be installed like any other NuGet package, either via the Visual Studio GUI, or via the package manager: PM> Install-Package Hazelcast.Net Or via the .NET CLI: > dotnet add package Hazelcast.Net Or manually added to the project as a package reference: <PackageReference Include=\"Hazelcast.Net\" Version=\"4.0.0\" /> Binding Redirects When including the Hazelcast.Net package in a .NET Framework project, be aware that some binding redirects may be required. Although we try hard to align all our dependencies, some inconsistencies even within Microsoft's own packages mean that it is not possible to avoid redirects entirely. You can enable <AutoGenerateBindingRedirects> in your project file, and Visual Studio should populate your application config files with the appropriate binding redirects. Alternatively, those redirects should be sufficient at the moment: <assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\"> <dependentAssembly> <assemblyIdentity name=\"System.Buffers\" publicKeyToken=\"cc7b13ffcd2ddd51\" culture=\"neutral\" /> <bindingRedirect oldVersion=\"0.0.0.0-4.0.3.0\" newVersion=\"4.0.3.0\" /> </dependentAssembly> </assemblyBinding> <assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\"> <dependentAssembly> <assemblyIdentity name=\"System.Runtime.CompilerServices.Unsafe\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" /> <bindingRedirect oldVersion=\"0.0.0.0-5.0.0.0\" newVersion=\"5.0.0.0\" /> </dependentAssembly> </assemblyBinding> Hazelcast Server Browse to Hazelcast In-Memory Computing to find out all about the Hazelcast server. Hazelcast IMDG cluster consists of one or more cluster members. These members generally run on multiple virtual or physical machines and are connected to each other via network. Any data put on the cluster is partitioned to multiple members transparent to the user. It is therefore very easy to scale the system by adding new members as the data grows. Hazelcast IMDG cluster also offers resilience. Should any hardware or software problem causes a crash to any member, the data on that member is recovered from backups and the cluster continues to operate without any downtime. Hazelcast clients are an easy way to connect to a Hazelcast IMDG cluster and perform tasks on distributed data structures that live on the cluster. There are many different ways to run a Hazelcast cluster or member. The Installing and Upgrading section of the Reference Manual details options to install and run a cluster, while the Deploying in Cloud section details options to run a cluster in the cloud. If you want to start one member to experiment with the Hazelcast .NET client, two simple ways are possible. Note Running the Hazelcast server requires a Java Runtime Environment. The Supported JVMs page of the reference details which JVMs are supported. For a quick start, OpenJDK provided by Adoptium (either version 8, 11 or 16) are OK. Standalone JARs You can download the standalone JARs from the download page. After extracting the downloaded archive, you should find a start script (start.sh or start.bat depending on your platform) in the bin directory, which you can use to start a member. Powershell Script The Hazelcast .NET client repository on GitHub provides a Powershell script which can be used to download and run a test member. For instance, this downloads and starts a member version 4.2: PS> ./hz.ps1 run-server -server 4.2 If the version is not specified (i.e. ./hz.ps1 run-server), the latest version supported by the client is used."
  },
  "5.2.2/doc/events.html": {
    "href": "5.2.2/doc/events.html",
    "title": "Events | Hazelcast .NET Documentation",
    "keywords": "Events Events in the Hazelcast .NET Client rely on a handler-based model close to the C# event model, though with a different syntax for adding and removing handlers, due to the asynchronous nature of these operations. Indeed, the following code has limitations: thing.Updated += OnThingUpdated; thing.Deleted += OnThingDeleted; Here, The operations are distinct, whereas Hazelcast subscriptions can handle multiple events at once The subscription is synchronous, whereas Hazelcast needs to notify the members of the subscription The handlers (e.g. OnThingUpdated) are synchronous Hazelcast Events To overcome these limitations, the Hazelcast .NET Client uses the following syntax: var id = await thing.SubscribeAsync(events => events .Updated(OnThingUpdated) .Deleted(OnThingDeleted)); Here, the handlers can be synchronous, for instance: private void OnThingUpdated(Thing sender, ThingUpdatedEventArgs args) { ... } But they can also be asynchronous, for instance: private async ValueTask OnThingUpdated(Thing sender, ThingUpdatedEventArgs args) { await ... } In the example, the two events are subscribed at once and that subscription is represented by the returned id, which is a Guid. The two events can only be unsubscribed at once too, by passing this id back to the UnsubscribeAsync method: await thing.UnsubscribeAsync(id); Subscribing involves exchanging messages with the server, and takes time. Where traditional C# happily does: thing.Updated += DoThis; thing.Updated += AlsoDoThis; It would be much more efficient to group the two handlers: var id = await thing.SubscribeAsync(events => events .Updated((sender, args) => { DoThis(sender, args); AlsoDoThis(sender, args); })); This is also the only way to guarantee the order of execution of the two handlers, as the order in which events trigger is not specified, and should not be relied upon. Client Events The IHazelcastClient exposes the following events: StateChanged triggers when the client state changes PartitionLost triggers when a partition is lost PartitionsUpdated triggers when the partitions table is updated MembersUpdated triggers when the members list is updated ObjectCreated triggers when a distributed object is created ObjectDestroyed triggers when a distributed object is destroyed The IHazelcastClient directly supports subscribing to events. For instance: var id = await client.SubscribeAsync(events => events .StateChanged((sender, args) => { System.Console.WriteLine($\"New client state: {args.State}\"); })); StateChanged The StateChanged event triggers whenever the state of the client changes. Handles receive an instance of the StateChangedEventArgs class, which exposes the following property: State: the new ClientState An IHazelcastClient instance goes through the following ClientState states: Starting: the client is starting and has not started to connect to members yet (transition state) Started: the client has started, and is now trying to connect to a first member (transition state) Connected: the client is connected to at least one member (operational state) Disconnected: the client has disconnected, due to its last member leaving the cluster, or a network error. Depending on its configuration it will either try to connect again (and transition back to Connected if successful) or fail and transition to Shutdown (transition state) ClusterChanged: the client switched the cluster, and connected. Connected state will be still reached after ClusterChanged. It occurs only if failover happened. ShuttingDown: the client has been disposed, i.e. properly requested to shut down, and is shutting down (transition state) Shutdown: the client has shut down (final state) PartitionLost The PartitionLost event triggers whenever the server notifies the client that a partition has been lost, usually because a member carrying that partition has left the cluster. Handlers receive an instance of the PartitionLostEventArgs class, which exposes the following properties: PartitionId: the identifier of the lost partition LostBackupCount: how many backups were lost IsAllReplicasInPartitionLost: whether all replicas were lost Member: the member that was lost PartitionsUpdated The PartitionsUpdated event triggers whenever the server notifies the client of a new partitions list. This happens when the partitions list changes, but also periodically when the server wants to ensure that clients are aware of partitions. Handlers do not receive any event arguments. MembersUpdated The MembersUpdated event triggers whenever the server notifies the client of a new members list. This happens when members are added or removed from the cluster, but also periodically when the server wants to ensure that clients know about members. Handlers receive an instance of the MembersUpdatedEventArgs class, which exposes the following properties: AddedMembers: a collection of MemberInfo representing the members that were added to the cluster RemovedMembers: a collection of MemberInfo representing the members that were removed from the cluster Members: a collection of MemberInfo representing all members in the cluster ObjectCreated The ObjectCreated event triggers whenever the server notifies the client that a new distributed object has been created (for instance, when the server creates a new map named my-map). Handlers receive an instance of the DistributedObjectCreatedEventArgs class, which exposes the following properties: ServiceName: the internal Hazelcast service name (for instance, for maps, hz:impl:mapService) Name: the name of the created object (for instance, my-map) SourceMemberId: the identifier of the member which triggered the event ObjectDestroyed The ObjectDestroyed event triggers whenever the server notifies the client that a distributed object has been destroyed (for instance, when the client requests that the server destroys a map named my-map). Handlers receive an instance of the DistributedObjectDestroyedEventArgs class, which exposes the following properties: ServiceName: the internal Hazelcast service name (for instance, for maps, hz:impl:mapService) Name: the name of the destroyed object (for instance, my-map) SourceMemberId: the identifier of the member which triggered the event Distributed Objects Events Each type of distributed object exposes events specific to the type. For instance, IHList<T> exposes the ItemAdded event: var list = await client.GetListAsync(\"my-list\"); var id = await list.SubscribeAsync(events => events .ItemAdded(async (sender, args) => { await DoSomethingWithItem(args.Item); await DoSomethingElseWithItem(args.Item); })) Refer to each distributed object's documentation for details on events."
  },
  "5.2.2/doc/examples.html": {
    "href": "5.2.2/doc/examples.html",
    "title": "Examples | Hazelcast .NET Documentation",
    "keywords": "Examples The Hazelcast.Net.Examples project (only provided in source form) provides a range of examples that demonstrate how to use the Hazelcast.Net client. Building the complete Hazelcast.Net solution builds the example project. Running Examples Examples can then be executed through the hz.[sh|ps1] script: PS> ./hz.ps1 run-example Client.SimpleExample By default, this runs the netcoreapp3.1 Release version of the example. The hz.[sh|ps1] script provides options (see the Building page for details) that can be used to change these. For instance, the following command runs the net462 Debug version of the example: PS> ./hz.ps1 run-example -c Debug -f net462 Client.SimpleExample The example name (here, Client.SimpleExample) is the short name of the class: if the full class name is Hazelcast.Examples.Namespace.SomeExample then the short name is Namespace.SomeExample. The Example suffix can be ommited, so Client.Simple would work too. And, it is possible to use a tilde character to run examples with name matching the argument. For instance ~Client would run all examples with a short name containing Client. Additional arguments are passed to the example as command-line arguments, and therefore can be used to configure Hazelcast. For instance, if the server runs on 192.168.42.42:5757, the example above can be launched with: PS> ./hz.ps1 run-example Client.SimpleExample --- --hazelcast.networking.addresses.0=192.168.42.42:5757 Note: the --- separator tells the hz.[sh|ps] script that the trailing arguments are not arguments for the script, but for the example. Reusing Examples Each example is proposed as a standalone class that implements a static Main method. Therefore, each example can be copied and executed directly in a new project. Note that the HazelcastOptionsBuilderExtensions may also need to be copied."
  },
  "5.2.2/doc/extensions.html": {
    "href": "5.2.2/doc/extensions.html",
    "title": "Extensions | Hazelcast .NET Documentation",
    "keywords": "Extensions In addition to the core Hazelcast .NET Client package, the following extensions are provided as separate NuGet packages: Hazelcast.Net.DependencyInjection provides utilities for simplifying the usage of the Hazelcast .NET Client in applications which rely on dependency injection, following the standard Microsoft best practices for managing options, etc. Hazelcast.Net.Caching provides an IDistributedCache implementation based upon the Hazelcast .NET Client."
  },
  "5.2.2/doc/extensions/caching.html": {
    "href": "5.2.2/doc/extensions/caching.html",
    "title": "Caching | Hazelcast .NET Documentation",
    "keywords": "Caching The Hazelcast.Net.Caching NuGet package provides an IDistributedCache implementation based upon the Hazelcast .NET Client. In its most basic usage, the IDistributedCache implementation can be instantiated explicitly with classical Hazelcast options, plus some HazelcastCacheOptions which specify the cache unique identifier. The cache is implemented as a Hazelcast map, and the unique identifier corresponds to the name of the map. The cache can be simply instantiated as: var hazelcastOptions = new HazelcastOptionsBuilder()....Build(); var cacheOptions = new HazelcastCacheOptions { CacheUniqueIdentifier = \"some-cache\" }; IDistributedCache cache = new HazelcastCache(hazelcastOptions, cacheOptions); Note that the cache implementation also supports running on top of a failover client: var hazelcastOptions = new HazelcastFailoverOptionsBuilder()....Build(); var cacheOptions = new HazelcastCacheOptions { CacheUniqueIdentifier = \"some-cache\" }; IDistributedCache cache = new HazelcastCache(hazelcastOptions, cacheOptions); Warning Note that the failover client is only supported by Enterprise clusters. Dependency Injection Support In addition, the NuGet package provides utilities for using the cache in a dependency-injection environment. Provided that Hazelcast options and cache options have been registered in a service container, then the IDistributedCache implementation can be registered with one single line of code: services.AddHazelcastOptions(...); services.Configure<HazelcastCacheOptions>(options => options.CacheUniqueIdentifier = \"some-cache\"); services.AddHazelcastCache(withFailover: false); // register cache Or the failover counterpart: services.AddHazelcastFailoverOptions(...); services.Configure<HazelcastCacheOptions>(options => options.CacheUniqueIdentifier = \"some-cache\"); services.AddHazelcastCache(withFailover: true); // register cache With these declarations, the Hazelcast cache implementation would be injected into any service requiring an IDistributedCache. Cache Functionality Hazelcast's implementation of IDistributedCache supports all functionality of the interface. Note however that, due to the inherently asynchronous nature of the Hazelcast client, all synchronous cache operations have to be implemented over asynchronous operations using the task.GetAwaiter().GetResult() pattern. This pattern can cause potential threading problems, and should be avoided as much as possible. Always use the asynchronous API wherever possible. ASP.NET Core Session State Provider IDistributedCache implementation can be used to store session state in Hazelcast. After registering Hazelcast IDistributedCache implementation to DI (as described above) you can enabled session state management in your ASP.NET Core project. var builder = WebApplication.CreateBuilder(args); builder.Services.AddHazelcastCache(); var app = builder.Build(); app.UseSession(); // Session state will be stored in distributed cache provided by AddHazelcastCache() Warning When the ISession object is supported by the Hazelcast client, its synchronous operations should be avoided, as the Hazelcast client is fully asynchronous and therefore calls to task.GetAwaiter().GetResult() may be involved and, potentially, cause threading issues. Prefer the asynchronous operations, such as those provided in the SessionExtensions class."
  },
  "5.2.2/doc/extensions/dependency-injection.html": {
    "href": "5.2.2/doc/extensions/dependency-injection.html",
    "title": "Dependency Injection | Hazelcast .NET Documentation",
    "keywords": "Dependency Injection The Hazelcast.Net.DependencyInjection NuGet package provides utilities for simplifying the usage of the Hazelcast .NET Client in applications which rely on dependency injection, following the standard Microsoft best practices for managing options, etc. Registering Options Registering the Hazelcast options into the service container is achieved via the AddHazelcastOptions method. This method accepts one parameter, which is an Action<HazelcastOptionsBuilder> delegate. It can be used to configure the options just as one would do with any HazelcastOptionsBuilder. For instance: services.AddHazelcastOptions(builder => builder .With(options => { options.Networking.Addresses.Add(\"localhost:5701\"); options.Networking.ReconnectMode = ReconnectMode.ReconnectAsync; })); An equivalent AddHazelcastFailoverOptions method exists to register failover options, via an Action<HazelcastFailoverOptionsBuilder> delegate. Options are then injected as IOptions<HazelcastOptions>. Injecting the Hazelcast Client Due to the fact that an IHazelcastClient instance must be connected to a cluster through an asynchronous operation, it is not possible to register and directly inject such an instance. Instead, the best practice for the Hazelcast .NET Client consists in injecting options, and using the HazelcastClientFactory to create a client wherever needed. public class MyClass { private readonly HazelcastOptions _options; public MyClass(IOptions<HazelcastOptions> options) { _options = options.Value; } public async Task UseClientAsync() { await using var client = await HazelcastClientFactory.StartNewClientAsync(_options); // ... use the client ... } } Alternatively, it is possible to register a client provider through the following pattern: public class HazelcastClientProvider : IAsyncDisposable { private readonly HazelcastOptions _options; private IHazelcastClient _client; public HazelcastClientProvider(IOptions<HazelcastOptions> options) { _options = options.Value; } public async Task<IHazelcastClient> GetClientAsync() { return _client ??= await HazelcastClientFactory.StartNewClientAsync(_options); } public async ValueTask DisposeAsync() { if (_client != null) await _client.DisposeAsync(); } } public class MyClass { private readonly HazelcastClientProvider _clientProvider; public MyClass(HazelcastClientProvider clientProvider) { _clientProvider = clientProvider; } public async Task UseClientAsync() { var client = await _clientProvider.GetClientAsync(); // ... use the client ... } } Remember that the client is disconnected from the cluster when it is disposed. Disposing too soon, or forgetting to dispose the client, may lead to errors or connection leaks."
  },
  "5.2.2/doc/extensions/linq.html": {
    "href": "5.2.2/doc/extensions/linq.html",
    "title": "LINQ Provider | Hazelcast .NET Documentation",
    "keywords": "LINQ Provider Warning LINQ support is currently in BETA version. There may be breaking changes on further releases. Hazelcast .Net Client provides a LINQ provider over IHMap. Provider is currently in BETA version. You can use programmatic LINQ functions instead string SQL statements to query over your distributed map. To benefit from LINQ support, Hazelcast.Net.Linq.Async package should be added your dependency. The package is an extension of Hazelcast.Net. It depends on it. The provider uses Hazelcast .Net Client underneath. Both packages are in NuGet. Supported LINQ Operations Where Select Remarks Linq provider translates your expression to SQL statements, and send it to server via SQL Service of the Client. It requires the same steps as SQL. The map should be mapped on the server side, and your property names should match with configured column names on mapping. For primitive types __key and this keywords will be used. For complex types, property name will be used as it is. Also, note that properties should be publicly-settable. Otherwise, the result object cannot be reconstructed. To reach the provider, AsAsyncQueryable() should be invoked. You can async enumerate over the query object. ToXXXAsync() extensions are not supported at the moment. More details about mapping. Example var map2 = await client.GetMapAsync<int, string>(\"simpleMap\"); var query = map2.AsAsyncQueryable() // Access to LINQ provider of the map. .Where(p => p.Key > 10); // Query entries by key is bigger than 10. await foreach (var entry in query) Console.WriteLine($\"Key: {entry.Key}, Value: {entry.Value}\"); // The SQL statement that will be produced for the query above. // SELECT m0.__key, m0.this FROM simpleMap m0 WHERE (m0.__key > ?)\" Here, AsAsyncQueryable() extension method comes with Hazelcast.Net.Linq.Async, and it returns the LINQ provider. You can add your queries over query object. You can execute and consume the query result with await foreach. In this context, we did not project over the original type. So, the entry will be HKeyValuePair struct. You can reach key and value of the entry. Execution and data fetching will be invoked when enumeration is started. The provider generate the query and execute it with client's configuration. Note: In future, we are planning to have options that can configure LINQ provider, such as cursor size of a SQL query or naming convention of properties. Please, visit for other examples to Hazelcast.Net.Examples on GitHub."
  },
  "5.2.2/doc/failover.html": {
    "href": "5.2.2/doc/failover.html",
    "title": "Failover (Blue/Green) | Hazelcast .NET Documentation",
    "keywords": "Failover (Blue/Green) Failover is a cluster backup feature. In case of connected cluster is not reachable anymore, client will use the reconnection strategy and try to reconnect to current one. If connection still cannot be established, client will try to connect next configured cluster. After failover is occurred successfully, client state will be changed from Disconnected to ClusterChanged then Connected. Also, client can be black listed from cluster, that will force client to failover to next configured cluster. Initialization of a failover client. var options = new HazelcastFailoverOptionsBuilder() .With(fo => { fo.TryCount = 2;//<1> fo.Clients.Add(new HazelcastOptionsBuilder().With(opt => {//<2> opt.ClusterName = \"blue\"; opt.Networking.Addresses.Add(\"CLUSTER_ADDRESS\"); opt.Networking.SmartRouting = true; }).Build()); fo.Clients.Add(new HazelcastOptionsBuilder().With(opt => {//<3> opt.ClusterName = \"green\"; opt.Networking.Addresses.Add(\"CLUSTER_ADDRESS\"); }).Build()); }) .With(args) .Build(); await using var client = await HazelcastClientFactory.StartNewFailoverClientAsync(options); //<4> (1) Sets max try count. Try count is maximum number of going over clusters. Let's assume both clusters are down, and we just initialize the client. Client will do; First try to blue, than it will fail. Try green, than it will fail. Try blue, than it will fail. Try green, than it will shutdown since try count is exhausted. Note: At each step, reconnection strategy will be used. Client won't change the cluster without retry the current one. Failover will be occurred as a last option. (2) Client configuration for the first cluster to be connected. Note that first HazelcastOptionsBuilder is able to configure to everything on the client, such as HeartBeat, LoadBalancer etc. This part is still HazelcastOptions. See details for client options Options. (3) Alternative cluster options. Alternative options are only for connection and authentication. Alternative client options cannot override other fields. General configuration should be done in first client options which is step 1. For example, here 3, we cannot change the SmartRouting for each cluster. Also, for server side, provided cluster must have same partition count. Client cannot failover to a cluster with different partition count. (4) Initialize the client with failover feature. Failover client uses different options builder and different factory method. Alternatively, options can be also done in appsettings.json. { \"hazelcast-failover\": { // \"hazelcast-failover\" is a different section. Please don't confuse with \"hazelcast\" section. You should either use \"hazelcast-failover\" or \"hazelcast\". \"tryCount\": 2, \"clients\":[ { // name of the cluster \"clusterName\": \"blue\", // networking options \"networking\": { // cluster addresses \"addresses\": [ \"CLUSTER_ADDRESS\" ] } }, ///Alternative cluster options, only for connection and authentication options. { // name of the cluster \"clusterName\": \"green\", // networking options \"networking\": { // alternative cluster, in this case it's cloud with ssl. \"cloud\": { \"enabled\": true, \"discoveryToken\": \"token\" }, \"ssl\": { \"enabled\": true, \"validateCertificateChain\": false, \"validateCertificateName\": true, \"checkCertificateRevocation\": true, \"certificateName\": \"cert\", \"certificatePath\": \"path\", \"certificatePassword\": \"password\", \"protocol\": \"tls11\" }, } } ] } } For details reading from alternative resources see details As it is seen, HazelcastFailoverOptions is a list of HazelcastOptions basically. You can find more details about HazelcastOptions here. More about Blue/Green feature see details."
  },
  "5.2.2/doc/getting-started.html": {
    "href": "5.2.2/doc/getting-started.html",
    "title": "Getting Started | Hazelcast .NET Documentation",
    "keywords": "Getting Started Quick Start Walkthrough Prepare a .NET console project: mkdir quickstart cd quickstart dotnet new console dotnet add package Hazelcast.Net dotnet add package Microsoft.Extensions.Logging.Console Edit the Program.cs file as you wish. The code below is a minimal example, that configures logging to the console, and connects a client to a server running on localhost. public static async Task Main() { // create options var options = new HazelcastOptionsBuilder() .WithDefault(\"Logging:LogLevel:Default\", LogLevel.None) .WithDefault(\"Logging:LogLevel:Hazelcast\", LogLevel.Information) .WithLoggerFactory(configuration => LoggerFactory.Create(builder => builder .AddConfiguration(configuration.GetSection(\"logging\")) .AddSimpleConsole(consoleOptions => { consoleOptions.SingleLine = true; consoleOptions.TimestampFormat = \"hh:mm:ss.fff \"; }))) .Build(); // create and connect a Hazelcast client to a server running on localhost await using var client = await HazelcastClientFactory.StartNewClientAsync(options); // the client is disposed and thus disconnected on exit } Run the code with: dotnet build dotnet run You should see the log output in the console. Running Preview Should you want to use a preview version of the Hazelcast .NET Client, built from source at path/to/Hazelcast.Net, drop a nuget.config file in the quickstart directory containing the following: <?xml version=\"1.0\" encoding=\"utf-8\"?> <configuration> <packageSources> <add key=\"hz\" value=\"path/to/Hazelcast.Net/temp/output\" /> </packageSources> </configuration> Then, force the installation of the preview version with: dotnet add package Hazelcast.Net --version 5.3.0-preview.0 You can now run the test program again. Download and Install Using the published Hazelcast.Net package from NuGet is the prefered way to download and install the client. Refer to the Download and Install page to learn more about how to download the Hazelcast .NET Client and Server, and how to install it. In addition, this page contains more details about required binding redirects when installing in a .NET Framework project. Using the client The Hazelcast client is the entry point to all interactions with an Hazelcast cluster. A client is created by the static HazelcastClientFactory. After it has been used, it needs to be disposed in order to properly close all connections to servers, and release resources. For example: var client = await HazelcastClientFactory.StartNewClientAsync(); // ... use the client ... await client.DisposeAsync(); A client is a heavy enough, multi-threaded object. Although a factory can create several, independent clients, it is recommended to store and reuse the client instance, as much as possible. Here, the client is configured by default, which means by configuration files and environment variables. For more control, the client can be initialized with an HazelcastOptions instance, which represents the complete set of options of the Hazelcast client. In fact, the above example is equivalent to: var options = new HazelcastOptionsBuilder().Build(); var client = await HazelcastClientFactory.StartNewClientAsync(options); // ... Refer to the Configuration page for details on the various ways to build an HazelcastOptions instance, including handling command-line parameters, as well as a list of all the configurable elements. Distributed Objects The client can be used to obtain distributed objects that are managed by the cluster. For instance, the cluster can manage IHMap<TKey, TValue> objects, which are an asynchronous equivalent of .NET IDictionary<TKey, TValue>. Each object is identified by a unique name, which is used to retrieve the object. Finally, distributed objects need to be disposed after usage, to ensure they release their resources. For example: var map = await client.GetMapAsync<string, string>(\"map-name\"); await map.SetAsync(\"key\", \"value\"); var value = await map.GetAsync(\"key\"); await map.DisposeAsync(); The GetMapAsync method returns the existing object with the specified name, or creates a new object with that name on the cluster. That object will continue to live on the cluster after the IHMap<TKey, TValue> has been disposed. In order to remove the object from the cluster, one must destroy the object. For example: var map = await client.GetMapAsync<string, string>(\"dict-name\"); await map.DestroyAsync(); or var map = await client.GetMapAsync<string, string>(\"dict-name\"); await client.DestroyAsync(map); Examples Complete, working examples are provided in source form in the Hazelcast.Net.Examples project, with instruction in the Examples page. Logging The Hazelcast .NET client uses the logging abstractions proposed by the Microsoft.Extensions.Logging namespace. By default, the client supports the abstractions, but does not come with any actual implementation. This means that, by default, the client will not output any log information. To actually log, an implementation must be added to the project. See the Logging documentation for details. Events The client exposes client-level events. For example: var subscriptionId = await client.SubscribeAsync(events => events .StateChanged((sender, args) => { Console.WriteLine($\"Client state changed to: {args.State}.\") }) ); // ... handle events ... var success = await client.UnsubscribeAsync(subscriptionId); The (sender, args) pattern is used to remain consistent with C# events. Here, sender is the object that triggered the event, i.e. client, and args contains the event data. Note: pure C# events (client.StateChanged += ...) cannot be used here, as subscribing, un-subscribing and handling events all need to support being asynchronous. Each distributed object also exposes events in the same way. For example: var subscriptionId = await dict.SubscribeAsync(events => events .EntryAdded((sender, args) => { // ... }) .EntryRemoved((sender, args) => { // ... }) ); // ... handle events ... var success = await dict.UnsubscribeAsync(subscriptionId); Refer to the Events page for details. Transactions The client is responsible for creating transactions. Transactions by default follow the Microsoft's transaction pattern: they must be disposed, and commit or roll back depending on whether they have been completed. For example: await using (var transaction = await client.BeginTransactionAsync()) { var map = await transaction.GetMapAsync<string, string>(\"my-map\"); await map.PutAsync(\"key\", \"value\"); transaction.Complete(); } Refer to the Transactions page for details."
  },
  "5.2.2/doc/index.html": {
    "href": "5.2.2/doc/index.html",
    "title": "Documentation | Hazelcast .NET Documentation",
    "keywords": "Documentation This section contains the complete documentation for the Hazelcast .NET solution, with examples, guides and FAQ. Hazelcast .NET only provides a client-side implementation, and needs to connect to a fully configured Hazelcast cluster. Refer to the Reference Manual for a complete documentation of the server side of Hazelcast. The Hazelcast .NET solution is Open Source, released under the Apache License 2.0, and welcomes contributions. This section also documents how to obtain the source code, build the solution, interact with the community, and contribute. It also documents the internals of the solution, which can be useful for contributors. If you are considering migrating from v3 of the Hazelcast .NET client, you may want to read the Migrating from v3 page. If this is your first visit, you may want to start with the Getting Started page."
  },
  "5.2.2/doc/locking.html": {
    "href": "5.2.2/doc/locking.html",
    "title": "Locking | Hazelcast .NET Documentation",
    "keywords": "Locking On the server (member) side, Hazelcast uses a unique number to identify the owner of locks, and historically that number has always been the thread unique identifier. As a consequence, the locking model in previous versions of the Hazelcast client closely match the thread-based model that .NET provides with, for instance, the lock statement. Due to the systematic usage of asynchronous patterns, the code for one operation can be executed by many different threads (basically, each time an operation is put on hold by an await statement, it can resume its execution on any other thread). Therefore, using the actual thread identifier as a \"lock owner\" identifier is not possible anymore. The Hazelcast .NET client introduces different ways to manage the context of a lock in an asynchronous pattern. Implicit Context For things such as maps, that would implicitly rely on the thread identifier to identify their lock context, the Hazelcast .NET client implicitly manages a \"lock context\". This allows the API to remain similar enough to the version 3 API. The lock context is represented by an AsyncContext instance. This is a class which relies upon the .NET built-in AsyncLocal<T> type to maintain values that flow with the asynchronous operation, i.e. are transferred to the new thread when an operation resumes after awaiting. Therefore, when an operation acquires a lock, it owns the lock until it releases it, no matter what thread executes the operation. The AsyncContext uses a sequential number to ensure the uniqueness of the identifier. In order to execute work in a new context (which would correspond to executing work on a different thread for previous versions), one has to use a new context: // executes in the same, current context await DoSomethingAsync(...); using (AsyncContext.New()) { // executes in a new context await DoSomethingAsync(...); } Due to the way AsyncLocal<T> variables work, any task started from within the using block executes in the new context, even if it continues to execute after the using block has exited: Task task; using (AsyncContext.New()) { // starts in a new context var task = DoSomethingAsync(...); } // the entire task executes in the new context await task; Essentially, when the using block is exited, the previous AsyncContext is restored, but the new one that was created remains attached to the tasks that were started. Explicit Context On the other hand, fenced locks, which are part of the CP subsystem, rely on an explicit object to represent the lock context. Every fenced lock operation requires a context, and operate on that context. Therefore, acquiring a lock is performed as: var context = new LockContext(); var lock = await client.CPSubSystem.GetLockAsync(lockName); await lock.LockAsync(context); // ... await lock.UnlockAsync(context); The lock context is re-entrant: it is possible to lock several times for the same context as long as the lock is unlocked the same number of times. On the other hand, trying to lock for any other context object would block. It is up to the application code to manage the lock context appropriately."
  },
  "5.2.2/doc/logging.html": {
    "href": "5.2.2/doc/logging.html",
    "title": "Logging | Hazelcast .NET Documentation",
    "keywords": "Logging The Hazelcast .NET client uses the logging abstractions proposed by the Microsoft.Extensions.Logging namespace. By default, the client supports the abstractions, but does not come with any actual implementation. This means that, by default, the client will not output any log information. To actually log, an implementation must be added to the project. Microsoft provides a range of providers to log to various destinations. In addition, a variety of third-party products such as Serilog support complex logging patterns and more destinations (to the filesystem, the Cloud, etc). Quick start: logging to console To enable logging to console, add a NuGet reference to the Microsoft.Extensions.Logging.Console NuGet package, and then configure the Hazelcast client to use that implementation: var hazelcastOptions = new HazelcastOptionsBuilder() .With(args) .WithConsoleLogger(LogLevel.Information) .Build(); Where the WithConsoleLogger is: public static HazelcastOptionsBuilder WithConsoleLogger(this HazelcastOptionsBuilder builder, LogLevel hazelcastLogLevel = LogLevel.None) { return builder .With(\"Logging:LogLevel:Default\", \"None\") .With(\"Logging:LogLevel:System\", \"Information\") .With(\"Logging:LogLevel:Microsoft\", \"Information\") .With(\"Logging:LogLevel:Hazelcast\", hazelcastLogLevel.ToString()) .With((configuration, options) => { // configure logging factory and add the console provider options.LoggerFactory.Creator = () => LoggerFactory.Create(loggingBuilder => loggingBuilder .AddConfiguration(configuration.GetSection(\"logging\")) .AddConsole()); }); } Note that the in-memory option set with .With(\"Logging:LogLevel:Hazelcast\", hazelcastLogLevel.ToString()) statement takes precedence over everything else (command-line, environment variables...) and you may want to comment it out when experimenting with the code. You can find this example as LoggingExample.cs in our examples project. If you build and run this example, it will produce the following output: info: Hazelcast.Examples.LoggingExample.A[0] This is an INFO message from Hazelcast.Examples.LoggingExamples.A warn: Hazelcast.Examples.LoggingExample.A[0] This is a WARNING message from Hazelcast.Examples.LoggingExamples.A warn: Hazelcast.Examples.LoggingExample.B[0] This is a WARNING message from Hazelcast.Examples.LoggingExamples.B You can experiment changing the log levels in code, or via the command line, or via environment variables: PS> ./hz.ps1 run-example Logging --- --Logging:LogLevel:Hazelcast=Debug Also note that options set with With(\"Logging:LogLevel:Hazelcast\", \"Debug\") method calls take precedence over command line options. Other implementations Using a different implementation consists in Adding a NuGet reference to a different NuGet package, such as Microsoft.Extensions.Logging.AzureAppServices in order to log to Azure App Services, or a Serilog package to log to a file Replacing the AddConsole() call above with the appropriate method, as defined by the implementation Configuration The example above defines log levels: None by default Information for loggers named System.* or Microsoft.* Information for loggers named Hazelcast.* The various existing LogLevel values allows for fine-tuning of what should, or should not, be logged. We recommend running Hazelcast with the Information log level by default, though running with the Debug log level may help troubleshooting issues (but should not be used in production environment). Logging is configured as per Microsoft.Extensions.Logging conventions. In a configuration file, one would need a logging section distinct from the hazelcast section: { \"hazelcast\": { ... }, \"logging\": { \"logLevel\": { \"Default\": \"Debug\", \"System\": \"Information\", \"Microsoft\": \"Information\", \"Hazelcast.Examples.MyApp\", \"Information\" } } } Refer to Microsoft's documentation for more details. Logging can also be configured programmatically with statements such as .With(\"Logging:LogLevel:Hazelcast\", LogLevel.Debug.ToString()) as per the example above. Re-using the logging system The logging system is available for the user to log in their application, too. At the moment, the best way to access the logging system is: var loggerFactory = hazelcastOptions.LoggerFactory.Service; var logger = loggerFactory.CreateLogger<MyClass>(); logger.LogInformation(\"hello!\"): NOTE: in the future, the logging system will be more directly exposed by the client, e.g. hazelcastClient.LoggerFactory.CreateLogger<MyClass>(). Dependency injection applications In a typical application relying on dependency injection, the logger factory and loggers are registered in a container and injected in code. The ContainerExample and HostedExample are good starting points to understand how to wire Hazelcast in such applications."
  },
  "5.2.2/doc/messaging.html": {
    "href": "5.2.2/doc/messaging.html",
    "title": "Client Messaging | Hazelcast .NET Documentation",
    "keywords": "Client Messaging Client messaging controls the operations between the client and each member. Messaging is configured via the Messaging configuration options, and is also impacted by Operation Failure While sending the requests to related members, operations can fail due to various reasons. Read-only operations are retried by default. If you want to enable retry for the other operations, you can enable \"redo operations\" via the hazelcast.networking.redoOperations configuration option. When an operation is not retried, it fails immediately with an exception. Warning An operation that fails may have been performed. For instance, the client can send a queue insert operation request to the cluster, and then lose the connection. The operation will report an error, but the client cannot determine whether the cluster has received the request and processed it or not. Re-running the operation could lead to a duplicate insert. Operations are retried for as much as hazelcast.messaging.retryTimeoutSeconds seconds before failing. They are initially retried without any delay (i.e. as fast as possible), for as much as hazelcast.messaging.maxFastInvocationCount attempts. Then, a delay is introduced between each attempt. This delay is at least hazelcast.messaging.minRetryDelayMilliseconds and increases after each failure: currently it is multiplied by 2 on each failure, and cannot exceed the timeout delay. Special cases can be configured via dedicated configuration options: When an operation fails because the underlying socket connection drops, and the operation should be retried according to the rules above, and hazelcast.messaging.retryOnConnectionLost is true, it is retried. It is possible to prevent retries only in this situation by setting the configuration option to false. When an operation fails because the the client is not connected anymore, but remains active and is trying to reconnect, and the operation should be retried according to the rules above, and hazelcast.messaging.retryOnClientReconnecting is true, it is retried. It is possible to prevent retries only in this situation by setting the configuration option to false."
  },
  "5.2.2/doc/migratingFrom3.html": {
    "href": "5.2.2/doc/migratingFrom3.html",
    "title": "Migrating from v3 | Hazelcast .NET Documentation",
    "keywords": "Migrating from v3 Starting with version 4, the Hazelcast .NET client has been massively refactored in order to benefit from the asynchronous features of the .NET platform and the C# language. For instance, the low-level networking stack now relies on Microsoft's high-performance System.IO.Pipelines which also powers the Kestrel web server. It is constantly improved, and is the foundation of all high-performance networking in modern .NET. Unfortunately, the move from synchronous to asynchronous coding patterns impacts the client API in large ways. Although the Hazelcast concepts have not changed, they are exposed in a quite different API. This document proposes to introduce you to the new API and serve as a companion on your migration path from version 3 to more recent versions (as of this writing, version 5). Warning Migrating existing code to an asynchronous programming model is not a trivial operation and requires some understanding of how asynchronous code functions in .NET, especially when running one .NET Framework platform. To help your transition, we gather a list of asynchronous pitfalls and pointers to documentations. Configuring a client instance Up to version 3, the Hazelcast .NET client provided two ways of configuration. You could load a declarative configuration from an XML file: var client = HazelcastClient.NewHazelcastClient(\"path/to/config.xml\"); Alternatively, you could create a ClientConfig object and programmatically configure the client: var config = new ClientConfig(); config.GetNetworkConfig().AddAddress(\"127.0.0.1:5701); var client = HazelcastClient.NewHazelcastClient(config); Starting with version 4, the Hazelcast .NET client relies on the configuration abstractions proposed by the Microsoft.Extensions.Configuration namespace. These abstractions provide built-in support for command-line arguments, environment variables, configuration files or in-memory configuration. They allow us to merge these various sources (see the configuration sources page for a complete reference). The v3 configuration XML file is replaced with a very similar JSON file, and this file is only one of the configuration sources. The ClientConfig object is replaced by a HazelcastOptions object, which is built by the HazelcastOptionsBuilder object. And, creating a new client instance always require options. Thus, the declarative and programmatic ways are merged into one: var options = new HazelcastOptionsBuilder().Build(); var client = await HazelcastClientFactory.StartNewClientAsync(options); The HazelcastOptionsBuilder merges the various sources, including the default .NET appsettings.json file or the specific hazelcast.json file. It also provide ways to register command-line arguments, or programmatically alter the options. For instance, the following code passes the command-line args to the HazelcastOptionsBuilder, and provides a configuration delegate to add addresses to the networking configuration. The final, resulting HazelcastOptions will be the result of the merge of all the sources. This allows you to, for instance, use a default JSON file but override some values via an environment variable. var hazelcastOptions = new HazelcastOptionsBuilder .WithArgs(args) .With(options => options.Networking.Addresses.Add(\"127.0.0.1:5701\")) .Build(); var client = await HazelcastClientFactory.StartNewClientAsync(hazelcastOptions); The cluster name could be provided via the JSON file: { \"hazelcast\": { \"clusterName\": \"dev\" } } Or, via a command-line option: program --hazelcast:clusterName=dev Or, via an environment variable: set hazelcast__clusterName=dev The configuration sections has more details about configuration. Starting a client instance Once options have been gathered, one can start a client instance. In version 3 one would do: var client = HazelcastClient.NewHazelcastClient(config); The new syntax is quite similar: var client = await HazelcastClientFactory.StartNewClientAsync(hazelcastOptions); However, there is a big difference, introduced by the await keyword: the StartNewClientAsync is asynchronous. It does not return an IHazelcastClient instance, but a Task<IHazelcastClient> which represents the asynchronous creation of the client and its connection to the cluster, and will complete once the client is connected. The major benefit is that the current thread will not be blocked by the client network I/Os. The drawback, when migrating from v3, is that asynchronous code is viral. If you used to create a client in a normal method: public void DoSomething() { var config = ...; var client = HazelcastClient.NewHazelcastClient(config); // use the client } You cannot simply replace your code with the new syntax, as the compiler will simply reject code such as: public void DoSomething() { var options = ...; var client = await HazelcastClientFactory.StartNewClientAsync(hazelcastOptions); // use the client } Your own method has been infected by asynchronous code, and now needs to become asynchronous too: public async Task DoSomething() { var options = ...; var client = await HazelcastClientFactory.StartNewClientAsync(hazelcastOptions); // use the client } And, of course, this will bubble up to every place in your application. If you are not familiar with asynchronous programming in .NET, you may want to read these pages from Microsoft. The (a)synchronous impedance mismatch If you Google around, you will find patterns that try to solve the (a)synchronous impedance mismatch. In other words, to let you break the asynchronous chain at some point, so that you can use the new asynchronous client in a code base that is mostly synchronous. You will probably end up with code such as: public void DoSomething() { var options = ...; var client = HazelcastClientFactory.StartNewClientAsync(hazelcastOptions).GetAwaiter().GetResult(); // use the client } While this code can work, it keeps the current thread busy and can lead to deadlocks. We recommend you avoid using such patterns unless you fully understand the implications and the underlying mechanisms of .NET asynchronous code. Using a client instance Once a client instance has been obtained, using it is not much different from version 3, except that everything is asynchronous. For instance, this code taken from the version 3 documentation would add a new value to a map and then read the value back: var map = client.GetMap<string, string>(\"my-distributed-map\"); map.Put(\"key\", \"value\"); var value = map.Get(\"key\"); The new API counterpart is: var map = await client.GetMapAsync<string, string>(\"my-distributed-map\"); await map.PutAsync(\"key\", \"value\"); var value = await map.GetAsync(\"key\"); As you can see, using the client is generally quite similar to version 3, apart from the asynchronous difference. The following sections describes the aspects that have changed and require more attention. Concepts Logging In previous versions, the Hazelcast .NET client relied on a custom built-in logging solution. The Hazelcast .NET client now uses the logging abstractions proposed by the Microsoft.Extensions.Logging namespace. These abstractions come with a range of providers to log to the console, and other various destinations. In addition, a variety of third-party products (such as Serilog) support complex logging patterns and more destinations (to the filesystem, the Cloud, etc). This also means that the same logging mechanism can be used by the various libraries used in users' applications. Note that, by default, the Hazelcast .NET client does not provide an actual logging provider. This mean that, by default, you will not see any log output, neither to the console nor to any file. To actually see the log, which can contain some precious troubleshooting information, your application will need to register the logging provider of your choice, via the configuration options. The logging page provides instructions on how to register Microsoft's own console logging provider, which will allows you to see the Hazelcast .NET client's log in the output console. It also provides pointers to advanced providers that can write to files or Azure App Services. Locking Previous versions of the Hazelcast .NET Client attached locks to threads, in a way similar to the thread-based model that .NET provides with, for instance, the lock statement. Due to the systematic usage of asynchronous patterns, this is not applicable anymore. For locks that were available in version 3, i.e. map locks, the Hazelcast .NET client introduces an AsyncContext class, which represents the lock ownership, and flows with async operations. i.e. are transferred to the new thread when an operation resumes after awaiting. Therefore, when an operation acquires a lock, it owns the lock until it releases it, no matter what thread executes the operation. The AsyncContext uses a sequential number to ensure the uniqueness of the identifier. Starting a new task does not necessarily begin a new context. Contexts are created explicitly, with a using (AsyncContext.New()) pattern. The whole block executes with a new context, which flows to any task started within the block. For instance: // executes in the same, current context await DoSomethingAsync(...); using (AsyncContext.New()) { // executes in a new context await DoSomethingAsync(...); } On the other hand, fenced locks, which are part of the CP subsystem and were introduced with version 4, use a different and explicit pattern. They are documented on the Locking page which has more details on locking patterns. Events In previous versions, the Hazelcast .NET Client use listeners to handle events. The following code, from the version 3 documentation, shows how to register a listener that would receive notifications whenever an entry is added to a map: public class MyEntryAddedListener<K, V> : EntryAddedListener<K, V> { public void EntryAdded(EntryEvent<K, V> entryEvent) { Console.WriteLine(entryEvent); } } map.AddEntryListener(new MyEntryAddedListener<string, string>()); Current versions move to a handler-based model closer to the C# event model, though with a different syntax for adding and removing handlers, due to the asynchronous nature of these operations. The above code thus becomes: private void OnEntryAdded(IHMap<string, string> map, MapEntryAddedEventArgs<string, string> args) { // do things... } await map.SubscribeAsync(events => events.EntryAdded(OnEntryAdded)); Refer to the Events page for details."
  },
  "5.2.2/doc/monitoring.html": {
    "href": "5.2.2/doc/monitoring.html",
    "title": "Monitoring | Hazelcast .NET Documentation",
    "keywords": "Monitoring The Hazelcast .NET client can collect and send metrics to the cluster. These metrics can then be analyzed using the Hazelcast Management Center. It is, for instance, possible to monitor the clients that are connected to the cluster. Metrics, and the Management Center, are fully documented here. The Hazelcast .NET client sends the following pieces of information: Client name, type and address Client connection timestamp Memory stats (commited size, max size, total size...) CPU stats (CPU time, CPUs count...) Metrics are configured via the Metrics configuration options: metrics can be enabled via the hazelcast.metrics.enabled configuration option. When enabled, metrics are sent to the cluster every hazelcast.metrics.periodSeconds seconds."
  },
  "5.2.2/doc/network.html": {
    "href": "5.2.2/doc/network.html",
    "title": "Client Network | Hazelcast .NET Documentation",
    "keywords": "Client Network The Hazelcast .NET client network is composed of all the connections between the client and the members of the cluster. It is configured via the Networking configuration options. Member Addresses The address list contains the initial list of cluster member addresses which the client will try to connect to. The client uses this list to find an alive member. Although it may be enough to give only one address of a member in the cluster (since all members communicate with each other), it is recommended that you give the addresses for all the members. You can specify multiple addresses, with or without the port information. If the port part of an address is omitted, then 5701, 5702 and 5703 will be tried in a random order for that address. By default, if the list is empty, the client will try to connect to localhost. By default, the provided list is shuffled and tried in a random order. You can disable this behaviour by setting the configuration option hazelcast.networking.shuffleAddresses to false. In this case the address list will be tried in the specified order. Operation Mode The client has two operation modes because of the distributed nature of the data and cluster: smart and unisocket. Smart routing is enabled by default, and is controlled by the hazelcast.networking.smartRouting configuration option, but you may want to enable unisocket mode. Smart Routing In the smart mode, the clients connect to each cluster member. Since each data partition uses the well known and consistent hashing algorithm, each client can send an operation to the relevant cluster member, which increases the overall throughput and efficiency. Smart mode is the default mode. Unisocket Client For some cases, the clients can be required to connect to a single member instead of each member in the cluster. Firewalls, security or some custom networking issues can be the reason for these cases. In the unisocket client mode, the client will only connect to one of the configured addresses. This single member will behave as a gateway to the other members. For any operation requested from the client, it will redirect the request to the relevant member and return the response back to the client returned from this member. Reconnect Mode The client can, at times, become disconnected from the cluster, for instance in case of a brief network issue. By default, the client will then try to reconnect to the cluster automatically. It is possible to prevent this behavior and switching the client to a non-recoverable error state (i.e. the client must be destroyed and a new client must be recreated) through the hazelcast.networking.reconnect configuration option. Connection Timeout The connection timeout is controlled by the hazelcast.networking.connectionTimeoutMilliseconds configuration option. It is the timeout value in milliseconds for a member to accept the client connection requests. More precisely, it is the client socket connection timeout for connecting to a member. If the member does not respond within the timeout, the client will retry to connect as many as ClientNetworkConfig.GetConnectionAttemptPeriod() times. This timeout is also used to control other socket connections such as Cloud Discovery. The default value is 5000 milliseconds. Connection Attempt Limit and Period Note This do not apply to version 4 and above of the client. It is kept here for reference only until we document how to achieve the same result in version 4 and above. If a member does not accept a connection within the specified timeout, the client will retry a specified amount of times waiting for some amount of time between each tries. Default value for attempts is 2, and for delay is 3000ms. TLS/SSL You can use TLS/SSL to secure the connection between the clients and members. Please refer to the TLS/SSL section for details. Hazelcast Cloud Discovery Hazelcast Cloud Discovery enables clients to discover the cluster IP addresses through the Hazelcast Orchestrator. It is enabled by assigning a discovery token to the hazelcast.networking.cloud.discoveryToken configuration option. To be able to connect to the provided IP addresses, you will need to use secure TLS/SSL connection between the client and members. Therefore, you should set an SSL configuration as described in the the TLS/SSL section. Failover (Blue/Green Deployment) .NET Client allows you to set failover cluster(s). In order to use the backup cluster, it should be configured under hazelcast-failover in your appsettings.json or via HazelcastFailoverOptionsBuilder, and client should be initialized with failover factory methods under HazelcastClientFactory. The client will use first client configuration as default for all options. Alternative clients can only change network and authentication options. In case of connection failure, first, client will retry to connect to current cluster. If the connection fails, client will try to connect to next cluster. Another case is that client is blacklisted from cluster, client will do failover without retrying. Client will try alternative clusters until TryCount is exhausted. The cluster list that is composed from clients, the list is visited as in a circle way, such as clients[0] -> clients[1] -> clients[0] -> ... When one of the clusters is connected, TryCount will be reset. After connection is established, client state will be ClusterChanged and then Connected. Note: SmartRouting option cannot be different between given client configurations. Client will use the clients[0].Networking.SmartRouting option for all clusters, and it cannot be overwritten by alternative client configurations. Note: Please be aware of that failover can occur during very first connection to the cluster. Whenever client cannot connect on Started state, failover can also happen. More about failover"
  },
  "5.2.2/doc/security.html": {
    "href": "5.2.2/doc/security.html",
    "title": "Security | Hazelcast .NET Documentation",
    "keywords": "Security The Hazelcast .NET client provides various features to guarantee the security of the connections between clients and members. Note that some of these features may require Hazelcast IMDG Enterprise edition."
  },
  "5.2.2/doc/security/kerberos.html": {
    "href": "5.2.2/doc/security/kerberos.html",
    "title": "Kerberos | Hazelcast .NET Documentation",
    "keywords": "Kerberos The Hazelcast .NET client supports Kerberos as an authentication mechanism, on the Windows platform. Kerberos is not supported by the Hazelcast .NET Client on other platforms at the moment. The Hazelcast .NET Client must connect to a server that supports Kerberos authentication: Kerberos is supported by Hazelcast servers starting with version 4.1, as an Enterprise feature. Kerberos authentication allows Windows clients to transparently authenticate, with permissions being managed through server-level integration to LDAP-based authorization. Client Configuration Kerberos support for the Hazelcast .NET Client is provided in a separate Hazelcast.Net.Win32 NuGet package, which needs to be installed alongside the main Hazelcast.Net package. Kerberos authentication can be activated via the configuration file, or via code. In both cases, you will need to know the Service Principal Name (a.k.a. spn - \"hz/cluster1234\" in the examples below) corresponding to the Hazelcast cluster. Configuration file: \"hazelcast\": { \"authentication\": { \"kerberos\": { \"spn\": \"hz/cluster1234\" } } } Code: HazelcastOptions options; options.Authentication.ConfigureKerberosCredentials(\"hz/cluster1234\"); In both cases, the Hazelcast .NET Client transparently negociates authentication with the server. Server Configuration Server security configuration (starting with 4.1) is documented in the Security section of the main Hazelcast documentation, and Kerberos authentication is documented in the Security Reams sub-section. The Kerberos support in Hazelcast has 2 configuration parts: identity and authentication. The identity part is responsible for retrieving the service ticket from Kerberos KDC (Key Distribution Center). The authentication part verifies the service tickets. The following XML fragment can be used as an example of a working server configuration. However, it is recommended to read the completed documentation in order to fully understand the security aspects of Kerberos. <realm name=\"kerberosRealm\"> <authentication> <kerberos> <security-realm>krb5Acceptor</security-realm> <!-- relax flags check because .NET tokens have too many things --> <relax-flags-check>true</relax-flags-check> <!-- permissions via LDAP --> <ldap> <!-- LDAP server --> <url>ldap://server19.hz.local/</url> <!-- LDAP auth --> <system-user-dn>CN=Administrateur,CN=Users,DC=hz,DC=local</system-user-dn> <system-user-password>******</system-user-password> <!-- no need to auth the user, it's been done already by Kerberos --> <skip-authentication>true</skip-authentication> <!-- find the user in AD (ensure UPN is set in AD!) --> <user-context>CN=Users,DC=hz,DC=local</user-context> <user-search-scope>subtree</user-search-scope> <user-filter>(userPrincipalName={login})</user-filter> <!-- map one attribute to a role --> <!-- <role-mapping-mode>attribute</role-mapping-mode> <role-mapping-attribute>cn</role-mapping-attribute> --> <!-- map roles via groups --> <role-mapping-mode>reverse</role-mapping-mode> <role-context>CN=Users,DC=hz,DC=local</role-context> <role-search-scope>subtree</role-search-scope> <role-filter>(member={memberDN})</role-filter> <role-recursion-max-depth>4</role-recursion-max-depth> <role-name-attribute>cn</role-name-attribute> </ldap> </kerberos> </authentication> </realm> <realm name=\"krb5Acceptor\"> <authentication> <jaas> <login-module class-name=\"com.sun.security.auth.module.Krb5LoginModule\" usage=\"REQUIRED\"> <properties> <property name=\"isInitiator\">false</property> <property name=\"useTicketCache\">false</property> <property name=\"doNotPrompt\">true</property> <property name=\"useKeyTab\">true</property> <property name=\"storeKey\">true</property> <!-- the service principal --> <property name=\"principal\">hz/cluster1234@HZ.LOCAL</property> <!-- on Windows, be sure to use the proper Windows paths with backslashes, not slashes! --> <property name=\"keyTab\">path\\to\\hzcluster1234.keytab</property> </properties> </login-module> </jaas> </authentication> </realm>"
  },
  "5.2.2/doc/security/tlsssl.html": {
    "href": "5.2.2/doc/security/tlsssl.html",
    "title": "TLS/SSL | Hazelcast .NET Documentation",
    "keywords": "TLS/SSL This page describes the TLS/SSL security features of Hazelcast .NET client, for connections between members and between clients and members, and mutual authentication. These security features require Hazelcast IMDG Enterprise edition. One of the offers of Hazelcast is the TLS/SSL protocol which you can use to establish an encrypted communication across your cluster with key stores and trust stores. A Java keyStore is a file that includes a private key and a public certificate. A Java trustStore is a file that includes a list of certificates trusted by your application which is named as \"certificate authority\". You should set keyStore and trustStore before starting the members. See the next section on setting keyStore and trustStore on the server side. TLS/SSL for Hazelcast Members Hazelcast allows you to encrypt socket level communication between Hazelcast members and between Hazelcast clients and members, for end to end encryption. To use it, see the TLS/SSL for Hazelcast Members section. TLS/SSL for Hazelcast .NET Clients TLS/SSL for the Hazelcast .NET client can be configured using the SslOptions class. Let's first give an example of a sample configuration and then go over the configuration options one by one: var hazelcastOptions = new HazelcastOptionsBuilder().Build(); var sslOptions = hazelcastOptions.Networking.Ssl; sslOptions.Enabled = true; sslOptions.ValidateCertificateChain = true; sslOptions.ValidateCertificateName = false; sslOptions.CheckCertificateRevocation = false; sslOptions.CertificateName = \"CN or SAN of server certificate\"; sslOptions.CertificatePath = \"client pfx file path\"; sslOptions.CertificatePassword = \"client pfx password\"; sslOptions.SslProtocol = SslProtocols.Tls12; Of course these can also be configured via command-line options or environment variables, or via the Hazelcast configuration file. See the configuration page for details. Enabling TLS/SSL TLS/SSL for the Hazelcast .NET client can be enabled/disabled using the Enabled option. When this option is set to true, TLS/SSL will be configured with respect to the other SslOptions options. Setting this option to false will result in discarding other SslOptions properties. Default value is false (disabled). Certificate Chain validation Remote SSL certificate chain validation can be enabled/disabled using the SslOptions.ValidateCertificateChain option. It is enabled by default. If you need to bypass certificate validation for some reason, you can disable it by setting the value to false. Validation is done by .NET and delegated to OS, and you need to make sure your server certificate is trusted by your OS. Please refer to this blog for information on how to configure your OS to trust your server certificates. Certificate Name Validation Server certificate CN or SAN field can be validated against a value you set into configuration. This option is disabled by default. You can enable it by setting SslOptions.ValidateCertificateName to true and providing a name with SslOptions.CertificateName. TLS/SSL Protocol You can configure the TLS/SSL protocol using the SslOptions.Protocol option. Valid options are values of the System.Security.Authentication.SslProtocols enum. Depending on your .NET version, below values are valid: None : Allows the operating system to choose the best protocol to use. Ssl2 : SSL 2.0 Protocol. RFC 6176 prohibits the usage of SSL 2.0. Ssl3 : SSL 3.0 Protocol. RFC 7568 prohibits the usage of SSL 3.0. Tls : TLS 1.0 Protocol described in RFC 2246. deprecated. Tls11 : TLS 1.1 Protocol described in RFC 4346. deprecated. Tls12 : TLS 1.2 Protocol described in RFC 5246. recommended. Mutual Authentication As explained above, Hazelcast members have key stores used to identify themselves (to other members) and Hazelcast clients have trust stores used to define which members they can trust. Using mutual authentication, the clients also have their key stores and members have their trust stores so that the members can know which clients they can trust. To enable mutual authentication, firstly, you need to set the following property on the server side in the hazelcast.xml file: <network> <ssl enabled=\"true\"> <properties> <property name=\"javax.net.ssl.mutualAuthentication\">REQUIRED</property> </properties> </ssl> </network> You can see the details of setting mutual authentication on the server side in the Mutual Authentication section of the Hazelcast IMDG Reference Manual. On the client side, you have to provide the client certificate and its password if there is one. Here is how you do it: sslOptions.CertificatePath = \"client pfx file path\"; sslOptions.CertificatePassword = \"client pfx password\"; The provided certificate file should be a PFX file that has private and public keys. The file path should be set with SslOptions.CertificatePath. If you choose to set a password to it, you need to provide it to the configuration using the SslOptions.CertificatePassword option."
  },
  "5.2.2/doc/serialization.html": {
    "href": "5.2.2/doc/serialization.html",
    "title": "Serialization | Hazelcast .NET Documentation",
    "keywords": "Serialization For data to be sent over a network between cluster members and/or clients, it needs to be serialized into raw bytes. Hazelcast has many serialization options to choose from, depending on what you plan on doing with your data. You can store any primitive types in a Hazelcast data structure and Hazelcast will serialize them for you, using built-in serializers. But, to store custom classes or objects, you need to tell a cluster how to serialize and deserialize them when they are sent over the network. Hazelcast supports the following serialization options: IdentifiedDataSerializable serialization is supported by all clients. It is an Hazelcast-specific method that require that a specific interface be implemented. Portable serialization is supported by all clients. It is an Hazelcast-specific method that require that a specific interface be implemented. Versionning and partial deserialization are supported. Class definitions are also sent with data, but store only once per class. Custom serialization is supported by all clients. It does not require classes to implement a specific interface and is the most flexible method. However, it requires more work to implement. Compact serialization (introduced in version 5.2) is a schema-based Hazelcast-specific method that can handle plain POCOs (no need to implement a specific interface), supports schema evolution and partial deserialization. It is supported by all clients. Class definitions (schemas) are not part of the data but distribued between clients and clusters. HazelcastJsonValue serialization is supported by all clients. It is an Hazelcas-specific method that requires no member-side coding, but requires extra metadata to be stored on members. Serialization Priority When Hazelcast .NET client serializes an object: If the object is null, use the internal null serializer, else If a compact serializer has been register for the type of the object, use Compact serialization, else If the object implements the Hazelcast.Serialization.IIdentifiedDataSerializable interface, use IdentifiedDataSerializable, else If the object implements the Hazelcast.Serialization.IPortable interface, use Portable serialization. If the object type is one of the default built-in types (see below), use the corresponding serializer, else Look for a Custom serializer, i.e., an implementation of IByteArraySerializer<T> or IStreamSerializer<T>. Custom serializer is searched using the input object’s class and its parent class up to Object. If parent class search fails, all interfaces implemented by the class are also checked (note that the order in which these interfaces are checked is not specified). If the object is Serializable ( Type.IsSerializable ) and a Global Serializer is not registered with CLR serialization Override feature, serialize via .NET BinaryFormatter (see note below) If a Global serializer (see below) has been registered, use it, else Use Compact serialization reflection-based mode. Note that, at the moment, there is no built-in automatic support for IEnumerable<T> or T[] beyond the default types documented above. .NET Binary Formatter Serialization For backward-compatibility reasons, .NET BinaryFormatter serialization is enabled by default. However, it is now considered obsolete by Microsoft that issued the following warning: Warning The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure. (source) We therefore recommend that BinaryFormatter serialization be entirely disabled. For that purpose, set SerializationOptions.EnableClrSerialization to false. Default Types Hazelcast serializes all your objects before sending them to the server. The built-in primitive types are serialized natively and you cannot override this behavior. The following table is the conversion of types for Java server side. .NET Java bool Boolean byte Byte char Character short Short int Integer long Long float Float double Double string String and .NET Java DateTime java.util.Date System.Numeric.BigInteger java.math.BigInteger Guid java.util.UUID Arrays of the above types can be serialized as bool[], byte[], short[], int[], long[], float[], double[], char[] and string[]. Global Serialization The global serializer is identical to custom serializers from the implementation perspective. It is registered as a fallback serializer to handle all other objects if a serializer cannot be located for them. By default, the global serializer does not handle .NET Serializable instances. However, you can configure it to be responsible for those instances. When the Global Serialization OverrideClrSerialization is set to true (it is false by default), .NET Serialization serialization is de-activated. A custom serializer should be registered for a specific class type. The global serializer will handle all class types if all the steps in searching for a serializer, as described previously, fail. Use cases Third party serialization frameworks can be integrated using the global serializer. For your custom objects, you can implement a single serializer to handle all of them. A sample global serializer that integrates with a third party serializer is shown below. public class GlobalSerializer : IStreamSerializer<object> { public const int TypeId = 20; public void Write(IObjectDataOutput output, object obj) { output.write(MyFavoriteSerializer.Serialize(obj)) } public object Read(IObjectDataInput input) { return MyFavoriteSerializer.Deserialize(input); } int ISerializer.TypeId => TypeId; } You should register the global serializer in the configuration. Programmatic Configuration: var hazelcastOptions = new HazelcastOptionsBuilder().Build(); hazelcastOptions.Serialization.GlobalSerializer.Creator = () => new GlobalSerializer(); Declarative Configuration: { \"hazelcast\": { \"serialization\": { \"globalSerializer\": { \"serializedTypeName\": \"CustomSerializableType\", \"overrideClrSerialization\": true } } } }"
  },
  "5.2.2/doc/serialization/compact.html": {
    "href": "5.2.2/doc/serialization/compact.html",
    "title": "Compact Serialization | Hazelcast .NET Documentation",
    "keywords": "Compact Serialization As an enhancement to existing serialization methods, Hazelcast offers compact serialization, with the following main features. Separates the schema from the data and stores it per type, not per object which results in less memory and bandwidth usage compared to other formats Does not require a class to implement an interface or change the source code of the class in any way Supports schema evolution which permits adding or removing fields, or changing the types of fields Can work with no configuration or any kind of factory/serializer registration for .NET classes and structs Platform and language independent Supports partial deserialization of fields, without deserializing the whole objects during queries or indexing Hazelcast achieves these features by having a well-known schema of objects and replicating them across the cluster which enables members and clients to fetch schemas they don’t have in their local registries. Each serialized object carries just a schema identifier and relies on the schema distribution service or configuration to match identifiers with the actual schema. Once the schemas are fetched, they are cached locally on the members and clients so that the next operations that use the schema do not incur extra costs. Schemas help Hazelcast to identify the locations of the fields on the serialized binary data. With this information, Hazelcast can deserialize individual fields of the data, without reading the whole binary. This results in a better query and indexing performance. Schemas can evolve freely by adding or removing fields. Even, the types of the fields can be changed. Multiple versions of the schema may live in the same cluster and both the old and new readers may read the compatible parts of the data. This feature is especially useful in rolling upgrade scenarios. The Compact serialization does not require any changes in the user classes as it doesn’t need a class to implement a particular interface. Serializers might be implemented and registered separately from the classes. It also supports zero-configuration use cases by automatically extracting schemas out of the classes and structs records using reflection, which is cached and reused later, with no extra cost. The underlying format of the compact serialized objects is platform and language independent. Native client supports will be added shortly after promoting this feature to stable status. Zero Configuration Compact serialization can be used without registering a serializer for a type. Hazelcast will then try to extract a schema out of the class, using reflection, by inspecting all public properties. If successful, it registers the reflection-based serializer associated with the extracted schema and uses it while serializing and deserializing instances of that class. If the automatic schema extraction fails, Hazelcast throws an exception. Currently, most primitive types (bool, int...) are supported, as well as enums, arrays of those types, and nested classes. More advanced classes (e.g. List<T>) are not supported yet. Intefaces are not supported. Compact Serializer Another way to use compact serialization is to implement the ICompactSerializer<T> interface for a type, and register it in the configuration. A basic serializer could look like: public class EmployeeSerializer : ICompactSerializer<Employee> { public string TypeName => \"employee\"; public Employee Read(ICompactReader reader) { return new Employee { Id = reader.ReadInt64(\"id\"), Name = reader.ReadString(\"name\") } } public void Write(ICompactWriter writer, Employee employee) { writer.WriteInt64(\"id\", employee.Id); writer.WriteString(\"name\", employee.Name); } } Then, that serializer must be registered in the configuration: options.Serialization.Compact.AddSerializer(new EmployeeSerializer()); Note Only programmatic configuration is supported by the .NET client at the moment. Schema Evolution Compact serialization permits schemas and classes to evolve by adding or removing fields, or by changing the types of fields. More than one version of a class may live in the same cluster and different clients or members might use different versions of the class. Hazelcast handles the versioning internally. So, you don’t have to change anything in the classes or serializers apart from the added, removed, or changed fields. Hazelcast achieves this by identifying each version of the class by a unique fingerprint. Any change in a class results in a different fingerprint. Hazelcast uses a 64-bit Rabin Fingerprint to assign identifiers to schemas, which has an extremely low collision rate. Different versions of the schema with different identifiers are replicated in the cluster and can be fetched by clients or members internally. That allows old readers to read fields of the classes they know when they try to read data serialized by a new writer. Similarly, new readers might read fields of the classes available in the data, when they try to read data serialized by an old writer. This means that for one type name, there can be several schemas. In addition, the ICompactReader interface exposes methods such as FieldKind GetFieldKind(string name) which returns the kind (i.e. the actual type) of the field. Generic Record Compact serialization introduces the IGenericRecord interface, which represents a container object that can be use in place of domain classes. The client always knows how to (de) serialize IGenericRecord instances and therefore does not require any configuration in order to handle them. A new record can be created as such: var rec = GenericRecordBuilder.Compact(\"type-name\") .SetBoolean(\"field-name-1\", true) .SetInt32(\"field-name-2\", 123) .SetString(\"field-name-3\", \"hello\") .Build(); // assuming map is IHMap<int, IGenericRecord> await map.PutAsync(1234, rec); A generic record can be used as such: // assuming map is IHMap<int, IGenericRecord> var rec = await map.GetAsync(1234); var field1 = rec.GetBoolean(\"field-name-1\") var field2 = rec.GetInt32(\"field-name-2\") var field3 = rec.GetString(\"field-name-3\") Refer to the general documentation for more details on how to access domain objects without domain classes."
  },
  "5.2.2/doc/serialization/custom.html": {
    "href": "5.2.2/doc/serialization/custom.html",
    "title": "Custom Serialization | Hazelcast .NET Documentation",
    "keywords": "Custom Serialization Hazelcast lets you plug a custom serializer to be used for serialization of objects. Let's say you have a class CustomSerializableType and you would like to customize the serialization, since you may want to use an external serializer for only one class. public class CustomSerializableType { public string Value { get; set; } } Let's say your custom CustomSerializer will serialize CustomSerializableType. public class CustomSerializer : IStreamSerializer<CustomSerializableType> { public const int TypeId = 10; public void Write(IObjectDataOutput output, CustomSerializableType t) { var array = Encoding.UTF8.GetBytes(t.Value); output.WriteInt(array.Length); output.Write(array); } public CustomSerializableType Read(IObjectDataInput input) { var len = input.ReadInt(); var array = new byte[len]; input.Read(array, 0, array.Length); return new CustomSerializableType { Value = Encoding.UTF8.GetString(array) }; } int ISerializer.TypeId => TypeId; public void Dispose() { } } Note that the serializer TypeId must be unique as Hazelcast will use it to lookup the CustomSerializer while it deserializes the object. Now the last required step is to register the CustomSerializer to the configuration. Programmatic Configuration: var hazelcastOptions = new HazelcastOptionsBuilder().Build(); hazelcastOptions.Serialization.Serializers.Add( new SerializerOptions { SerializedType = typeof(CustomSerializableType), Creator = () => new CustomSerializer() } ); Declarative Configuration: { \"hazelcast\": { \"serialization\": { \"serializers\": [ { \"serializedTypeName\": \"CustomSerializableType\", \"typeName\": \"CustomSerializer\" } ] } } } From now on, Hazelcast will use CustomSerializer to serialize CustomSerializableType objects."
  },
  "5.2.2/doc/serialization/identified.html": {
    "href": "5.2.2/doc/serialization/identified.html",
    "title": "IdentifiedDataSerializable Serialization | Hazelcast .NET Documentation",
    "keywords": "IdentifiedDataSerializable Serialization For a faster serialization of objects, Hazelcast recommends to implement the IdentifiedDataSerializable interface. The following is an example of an object implementing this interface: public class Employee : IIdentifiedDataSerializable { public const int ClassId = 100; public int Id { get; set; } public string Name { get; set; } public void ReadData(IObjectDataInput input) { Id = input.ReadInt(); Name = input.ReadString(); } public void WriteData(IObjectDataOutput output) { output.WriteInt(Id); output.WriteString(Name); } int IIdentifiedDataSerializable.FactoryId => SampleDataSerializableFactory.FactoryId; int IIdentifiedDataSerializable.ClassId => 100; } IdentifiedDataSerializable uses the Class and FactoryId properties to reconstitute the object. To complete the implementation IDataSerializableFactory should also be implemented and registered into SerializationOptions. The factory's responsibility is to return an instance of the right IIdentifiedDataSerializable object, given the class identifier. A sample IDataSerializableFactory could be implemented as following: public class SampleDataSerializableFactory : IDataSerializableFactory { public const int FactoryId = 1000; public IIdentifiedDataSerializable Create(int typeId) { if (typeId == Employee.ClassId) return new Employee(); return null; } } The last step is to register the IDataSerializableFactory to the SerializationOptions. Programmatic Configuration: var hazelcastOptions = new HazelcastOptionsBuilder().Build(); var factory = new SampleDataSerializableFactory(); hazelcastOptions.Serialization .AddDataSerializableFactory(SampleDataSerializableFactory.FactoryId, factory); Declarative Configuration: { \"hazelcast\": { \"serialization\": { \"dataSerializableFactories\": [ { \"id\": 1000, \"typeName\": \"SampleDataSerializableFactory\" } ] } } } Note that the identifier that is passed to the SerializationOptions is same as value of the FactoryId of the Employee class. Here (and in all examples below), typeName is the fully-qualified CLR type name. Depending on your code, it could be \"MyFactory\" but may have to be \"My.Namespace.Factory\" or even \"My.Namespace.Factory, My.Assembly\"."
  },
  "5.2.2/doc/serialization/json.html": {
    "href": "5.2.2/doc/serialization/json.html",
    "title": "HazelcastJsonValue Serialization | Hazelcast .NET Documentation",
    "keywords": "HazelcastJsonValue Serialization You can use the JSON formatted strings as objects in Hazelcast cluster. Starting with Hazelcast IMDG 3.12, the JSON serialization is one of the formerly supported serialization methods. Creating JSON objects in the cluster does not require any server side coding and hence you can just send a JSON formatted string object to the cluster and query these objects by fields. In order to use JSON serialization, you should use the HazelcastJsonValue object for the key or value. Here is an example IMap usage: var map = await client.GetMapAsync<string, HazelcastJsonValue>(\"map\"); We constructed a map in the cluster which has string as the key and HazelcastJsonValue as the value. HazelcastJsonValue is a simple wrapper and identifier for the JSON formatted strings. You can get the JSON string from the HazelcastJsonValue object by using the ToString() method. You can construct a HazelcastJsonValue using the HazelcastJsonValue(string jsonString) constructor. No JSON parsing is performed but it is your responsibility to provide correctly formatted JSON strings. The client will not validate the string, and it will send it to the cluster as it is. If you submit incorrectly formatted JSON strings and, later, if you query those objects, it is highly possible that you will get formatting errors since the server will fail to deserialize or find the query fields. Here is an example of how you can construct a HazelcastJsonValue and put to the map: await map.PutAsync(\"item1\", new HazelcastJsonValue(\"{ \\\"age\\\": 4 }\")); await map.PutAsync(\"item2\", new HazelcastJsonValue(\"{ \\\"age\\\": 20 }\")); You can query JSON objects in the cluster using the Predicates of your choice. An example JSON query for querying the values whose age is less than 6 is shown below: // Get the objects whose age is less than 6 var result = await map.GetValues(Predicates.IsLessThan(\"age\", 6)); Console.WriteLine($\"Retrieved {result.Count} values whose age is less than 6.\"); Console.WriteLine($\"Entry is: {result.First()}\");"
  },
  "5.2.2/doc/serialization/portable.html": {
    "href": "5.2.2/doc/serialization/portable.html",
    "title": "Portable Serialization | Hazelcast .NET Documentation",
    "keywords": "Portable Serialization As an alternative to the existing serialization methods, Hazelcast offers portable serialization. To use it, you need to implement the IPortable interface. Portable serialization has the following advantages: Supporting multiversion of the same object type. Fetching individual fields without having to rely on the reflection. Querying and indexing support without deserialization and/or reflection. In order to support these features, a serialized IPortable object contains meta information like the version and concrete location of the each field in the binary data. This way Hazelcast is able to navigate in the binary data and deserialize only the required field without actually deserializing the whole object which improves the query performance. With multiversion support, you can have two members where each of them having different versions of the same object, and Hazelcast will store both meta information and use the correct one to serialize and deserialize portable objects depending on the member. This is very helpful when you are doing a rolling upgrade without shutting down the cluster. Also note that portable serialization is totally language independent and is used as the binary protocol between Hazelcast server and clients. A sample portable implementation of a Customer class looks like the following: public class Customer : IPortable { public const int ClassId = 1; public string Name { get; set; } public int Id { get; set; } public DateTime LastOrder { get; set; } int IPortable.FactoryId => SamplePortableFactory.FactoryId; int IPortable.ClassId => ClassId; public void WritePortable(IPortableWriter writer) { writer.WriteInt(\"id\", Id); writer.WriteString(\"name\", Name); writer.WriteLong(\"lastOrder\", LastOrder.ToFileTimeUtc()); } public void ReadPortable(IPortableReader reader) { Id = reader.ReadInt(\"id\"); Name = reader.ReadString(\"name\"); LastOrder = DateTime.FromFileTimeUtc(reader.ReadLong(\"lastOrder\")); } } Similar to IIdentifiedDataSerializable, a Portable object must provide a ClassId and a FactoryId properties. The factory object will be used to create the Portable object given the classId. A sample IPortableFactory could be implemented as following: public class SamplePortableFactory : IPortableFactory { public const int FactoryId = 1; public IPortable Create(int classId) { if (classId == Customer.ClassId) return new Customer(); return null; } } The last step is to register the IPortableFactory to the SerializationOptions. Programmatic Configuration: var hazelcastOptions = new HazelcastOptionsBuilder().Build(); var factory = new SamplePortableFactory(); hazelcastOptions.Serialization .AddPortableFactory(SamplePortableFactory.FactoryId, factory); Declarative Configuration: { \"hazelcast\": { \"serialization\": { \"portableFactories\": [ { \"id\": 1, \"typeName\": \"SamplePortableFactory\" } ] } } } Note that the identifier that is passed to the SerializationConfig is same as the value of the FactoryId of the Customer class."
  },
  "5.2.2/doc/sql.html": {
    "href": "5.2.2/doc/sql.html",
    "title": "SQL | Hazelcast .NET Documentation",
    "keywords": "SQL SQL Example: How to Query an IHMap using SQL Querying IHMap Map Names Field Names Key and Value Objects Key and Value Fields \"SELECT *\" Queries Special characters in names Enumerating query result Disposing query result Cancelling query enumeration LINQ Provider Data Types Decimal String Format Date String Format Time String Format Timestamp String Format Timestamp with Timezone String Format Casting How to Cast Casting Between Types An Example of Implicit Cast An Example of Explicit Cast Important Notes About Comparison and Casting SELECT Synopsis Description Sorting Unsupported Features Expressions Lite Members More Information The SQL service provided by Hazelcast .NET client allows you to query data stored in IHMap declaratively. Example: How to Query an IHMap using SQL This SQL query returns map entries whose key are more than 2: await using var map = await client.GetMapAsync<int, string>(\"MyMap\"); await client.Sql.ExecuteCommandAsync($\"CREATE OR REPLACE MAPPING {map.Name} TYPE IMap OPTIONS ('keyFormat'='int', 'valueFormat'='varchar')\"); await map.SetAllAsync(Enumerable.Range(1, 5).ToDictionary(v => v, v => $\"val-{v}\")); await using var result = await client.Sql.ExecuteQueryAsync($\"SELECT __key, this FROM {map.Name} WHERE __key > 2\"); await foreach (var row in result) Console.WriteLine($\"{row.GetKey<int>()}: {row.GetValue<string>()}\"); NOTE: The column value is deserialized but NOT cached. Each column is deserialized on demand. Avoid getting the value of a column multiple times. Cache it in a local variable. Querying IHMap The following subsections describe how you can access Hazelcast map objects and perform queries on them. Before querying data in a map, you need to create a mapping to one. See Hazelcast docs Map Names The SQL service exposes IHMap objects as tables in the predefined partitioned schema using exact names. This schema is in the SQL service search path so that you can access the IHMap objects with or without the schema name.s Schema and table names are case-sensitive; you can access the employee map, for example, as employee or partitioned.employee, but not as Employee: SELECT * FROM employee SELECT * FROM partitioned.employee Field Names The SQL service resolves fields accessible from the SQL automatically. The service reads the first local entry pair of the IHMap to construct the list of fields. If the IHMap does not have local entries on the member where the query is started, then the list of fields cannot be resolved, and an exception is thrown. Field names are case-sensitive. Key and Value Objects An IHMap entry consists of a key and a value. These are accessible through the __key and this aliases. The following query returns the keys and values of all entries in a map: SELECT __key, this FROM employee Key and Value Fields You may also access the nested fields of a key or value. The list of exposed fields depends on the serialization format, as described below: For IdentifiedDataSerializable objects, you can use public field name or getter names. See Hazelcast docs for more information. For Portable objects, the fields written with IPortableWriter methods are exposed using their exact names. For Json objects, the fields can be accessed with JSON_QUERY(..) or JSON_VALUE(..). For example, consider this portable class: public class Employee : IPortable { int IPortable.ClassId => 123; int IPortable.FactoryId => 345; public int Age { get; set; } public string Name { get; set; } public void ReadPortable(IPortableReader reader) { Age = reader.ReadInt(nameof(Age)); Name = reader.ReadString(nameof(Name)); } public void WritePortable(IPortableWriter writer) { writer.WriteInt(nameof(Age), Age); writer.WriteString(nameof(Name), Name); } } The SQL service can access the following fields: Name SQL Type name VARCHAR age INTEGER Together with the key and value objects, you may query the following fields from IHMap<int, Employee>: SELECT __key, this, Name, Age FROM employee If both the key and value have fields with the same name, then the field of the value is exposed. \"SELECT *\" Queries You may use the SELECT * FROM <table> syntax to get all the table fields. The __key and this fields are returned by the SELECT * queries if they do not have nested fields. For IHMap<number, Employee>, the following query does not return the this field, because the value has nested fields Name and Age: -- Returns __key, Name, Age SELECT * FROM employee Special characters in names If map or field name contains non-alphanumeric characters or starts with a number, you will need to enclose it in double quotes: SELECT * FROM \"my-map\" SELECT * FROM \"2map\" Enumerating query result ISqlService.ExecuteQuery returns Hazelcast.Sql.ISqlQueryResult which provides methods to manage current query: await using var result = await client.Sql.ExecuteQueryAsync(\"SELECT Name, Age FROM employee\"); It implements IAsyncEnumerable<SqlRow> as one-off stream of rows and can be enumerated via regular foreach cycle: await foreach (var row in result) Console.WriteLine(row.GetColumn<string>(\"Name\")); Using LINQ over IAsyncEnumerable<T> is also possible but requires installing System.Linq.Async package. See SqlLinqEnumerationExample as an example. NOTE: Obtained result is not reusable as IAsyncEnumerable<SqlRow>. It will never restart enumeration but continue where previous one finished. Warning Give attention that filtering and projection is done in local of client in the example. To use LINQ which runs all query on server, please see LINQ Provider. Disposing query result ISqlQueryResult implements IAsyncDisposable. It's DisposeAsync implementation will make sure to cancel the query and free used server resources. Because of this, it is recommended to wrap operations with query into await using statement. This will ensure to send Cancel request in case if query is cancelled client-side or exception is thrown before it is completed or all rows are exhausted: await using (var result = await client.Sql.ExecuteQueryAsync(\"SELECT * FROM MyMap\")) { //... } Cancelling query enumeration You can cancel enumeration of ISqlQueryResult, via WithCancellation extension method, see SqlCancellationExample. If you're using System.Linq.Async package, you can also pass CancellationToken to ToListAsync, ToArrayAsync and related methods. NOTE: At the moment cancellation doesn't work during server query itself. Cancellation will stop the enumeration before fetching next page or switching to the next row of the current page, but won't stop executing request. This will be fixed in the later versions. Data Types The SQL service supports a set of SQL data types represented by Hazelcast.Sql.SqlColumnType enum. The table below shows SQL datatype, and corresponding .NET types: Column Type .NET VARCHAR string BOOLEAN bool TINYINT byte SMALLINT short INTEGER int BIGINT long DECIMAL Hazelcast.Sql.HBigDecimal REAL float DOUBLE double DATE Hazelcast.Sql.HLocalDate TIME Hazelcast.Sql.HLocalTime TIMESTAMP Hazelcast.Sql.HLocalDateTime TIMESTAMP_WITH_TIME_ZONE Hazelcast.Sql.HOffsetDateTime OBJECT Any class JSON Hazelcast.Core.HazelcastJsonValue NULL null All Hazelcast.Sql.* types has conversion to and from their closest built-in counterparts. Table below lists possible conversions: | Hazelcast type | To .NET Type | From .NET Type | ----------------------------------|-------------------|------------------------| | Hazelcast.Sql.HBigDecimal | decimal** | decimal | | Hazelcast.Sql.HLocalDate | DateTime* | DateTime | | Hazelcast.Sql.HLocalTime | TimeSpan | TimeSpan, DateTime | | Hazelcast.Sql.HLocalDateTime | DateTime* | DateTime | | Hazelcast.Sql.HOffsetDateTime | DateTimeOffset* | DateTimeOffset | * - Possible ArgumentOutOfRangeException ** - Possible OverflowException | Decimal String Format SQL DECIMAL type uses dot as separator. Examples: 12345, 123456.789. Date String Format SQL DATE type uses yyyy-mm-dd format. Examples: 2021-07-01, 1990-12-31. Time String Format SQL TIME uses HH:mm:ss.SSS where HH is in 24-hour format and, SSS represents nanoseconds and can be at most 9 digits long. Examples: 10:20:30, 23:59:59.999999999 Timestamp String Format SQL TIMESTAMP type uses yyyy-mm-dd(T|t)HH:mm:ss.SSS which is the combination of DATE and TIME strings. There must be a T or t letter in between. Examples: 2021-07-01T10:20:30, 1990-12-31t23:59:59.999999999 Timestamp with Timezone String Format SQL TIMESTAMP WITH TIMEZONE uses yyyy-mm-dd(T|t)HH:mm:ss.SSS{timezoneString} which is the combination of TIMESTAMP and timezone strings. The timezone string can be one of Z, +hh:mm or -hh:mm where hh represents hour-in-day, and mm represents minutes-in-hour. The timezone must be in the range [-18:00, +18:00]. 2021-07-01T10:20:30Z, 1990-12-31t23:59:59.999999999+11:30 Casting You may need to use casting when sending parameters for certain types. In general, you should try to send a parameter that has the same data type as the related column. How to Cast Casting syntax: CAST(? AS TYPE) Example casting: SELECT * FROM someMap WHERE this = CAST(? AS INTEGER) Casting Between Types When comparing a column with a parameter, your parameter must be of a compatible type. You can cast string to every SQL type. An Example of Implicit Cast In the example below, Age column is of type INTEGER. We pass parameters as shorts (TINYINT) and they are automatically casted to INTEGER for comparison. await using var result = await client.Sql.ExecuteQueryAsync( $\"SELECT Name FROM {map.Name} WHERE Age > ? AND Age < ?\", (short)20, (short)30 ); An Example of Explicit Cast In the example below, Age column is of type INTEGER. We pass parameters as strings (VARCHAR) and cast them to INTEGER for comparison. await using var result = await client.Sql.ExecuteQueryAsync( $\"SELECT Name FROM {map.Name} WHERE Age > CAST(? AS INTEGER) AND Age < CAST(? AS INTEGER)\", \"20\", \"30\" ); Important Notes About Comparison and Casting In case of comparison operators (=, <, <>, ...), if one side is ?, it's assumed to be exactly the other side's type, except that TINYINT, SMALLINT, INTEGER are all converted to BIGINT. Note, that reverse is not valid as it may lead to value loss. String parameters can be cast to any type. The cast operation may fail though. To send a DECIMAL type, use Hazelcast.Sql.HBigDecimal or an explicit CAST from string or other number type. To send date and time related types, use corresponding Hazelcast.Sql.H* type or a string with an explicit CAST. SELECT Synopsis SELECT [ * | expression [ [ AS ] expression_alias ] [, ...] ] FROM table_name [ [ AS ] table_alias ] [WHERE condition] Description The SELECT query retrieves rows from a table. A row is a sequence of expressions defined after the SELECT keyword. Expressions may have optional aliases. table_name refers to a single IHMap data structure. A table may have an optional alias. An optional WHERE clause defines a condition, that is any expression that evaluates to a result of type boolean. Any row that doesn’t satisfy the condition is eliminated from the result. Sorting You can use the standard SQL clauses ORDER BY, LIMIT, and OFFSET to sort and limit the result set. In order to do so, you need server configuration. See Hazelcast docs for more. Unsupported Features The following features are not supported and are planned for future releases: set operators (UNION, INTERSECT, MINUS) subqueries (SELECT … FROM table WHERE x = (SELECT …)) Expressions Hazelcast SQL supports logical predicates, IS predicates, comparison operators, mathematical functions and operators, string functions, and special functions. Refer to Hazelcast docs for all possible operations. Lite Members You cannot start SQL queries on lite members. This limitation will be removed in future releases. More Information Please refer to Hazelcast SQL docs for more information. For basic usage of SQL, see SqlBasicQueryExample and SqlJsonExample in Hazelcast.Net.Examples project."
  },
  "5.2.2/doc/tlsssl.html": {
    "href": "5.2.2/doc/tlsssl.html",
    "title": "TLS/SSL | Hazelcast .NET Documentation",
    "keywords": "TLS/SSL This page describes the TLS/SSL security features of Hazelcast .NET client, for connections between members and between clients and members, and mutual authentication. These security features require Hazelcast IMDG Enterprise edition. One of the offers of Hazelcast is the TLS/SSL protocol which you can use to establish an encrypted communication across your cluster with key stores and trust stores. A Java keyStore is a file that includes a private key and a public certificate. A Java trustStore is a file that includes a list of certificates trusted by your application which is named as \"certificate authority\". You should set keyStore and trustStore before starting the members. See the next section on setting keyStore and trustStore on the server side. TLS/SSL for Hazelcast Members Hazelcast allows you to encrypt socket level communication between Hazelcast members and between Hazelcast clients and members, for end to end encryption. To use it, see the TLS/SSL for Hazelcast Members section. TLS/SSL for Hazelcast .NET Clients TLS/SSL for the Hazelcast .NET client can be configured using the SslOptions class. Let's first give an example of a sample configuration and then go over the configuration options one by one: var hazelcastOptions = new HazelcastOptionsBuilder().Build(); var sslOptions = hazelcastOptions.Networking.Ssl; sslOptions.Enabled = true; sslOptions.ValidateCertificateChain = true; sslOptions.ValidateCertificateName = false; sslOptions.CheckCertificateRevocation = false; sslOptions.CertificateName = \"CN or SAN of server certificate\"; sslOptions.CertificatePath = \"client pfx file path\"; sslOptions.CertificatePassword = \"client pfx password\"; sslOptions.SslProtocol = SslProtocols.Tls12; Of course these can also be configured via command-line options or environment variables, or via the Hazelcast configuration file. See the configuration page for details. Enabling TLS/SSL TLS/SSL for the Hazelcast .NET client can be enabled/disabled using the Enabled option. When this option is set to true, TLS/SSL will be configured with respect to the other SslOptions options. Setting this option to false will result in discarding other SslOptions properties. Default value is false (disabled). Certificate Chain validation Remote SSL certificate chain validation can be enabled/disabled using the SslOptions.ValidateCertificateChain option. It is enabled by default. If you need to bypass certificate validation for some reason, you can disable it by setting the value to false. Validation is done by .NET and delegated to OS, and you need to make sure your server certificate is trusted by your OS. Please refer to this blog for information on how to configure your OS to trust your server certificates. Certificate Name Validation Server certificate CN or SAN field can be validated against a value you set into configuration. This option is disabled by default. You can enable it by setting SslOptions.ValidateCertificateName to true and providing a name with SslOptions.CertificateName. TLS/SSL Protocol You can configure the TLS/SSL protocol using the SslOptions.Protocol option. Valid options are values of the System.Security.Authentication.SslProtocols enum. Depending on your .NET version, below values are valid: None : Allows the operating system to choose the best protocol to use. Ssl2 : SSL 2.0 Protocol. RFC 6176 prohibits the usage of SSL 2.0. Ssl3 : SSL 3.0 Protocol. RFC 7568 prohibits the usage of SSL 3.0. Tls : TLS 1.0 Protocol described in RFC 2246. deprecated. Tls11 : TLS 1.1 Protocol described in RFC 4346. deprecated. Tls12 : TLS 1.2 Protocol described in RFC 5246. recommended. Mutual Authentication As explained above, Hazelcast members have key stores used to identify themselves (to other members) and Hazelcast clients have trust stores used to define which members they can trust. Using mutual authentication, the clients also have their key stores and members have their trust stores so that the members can know which clients they can trust. To enable mutual authentication, firstly, you need to set the following property on the server side in the hazelcast.xml file: <network> <ssl enabled=\"true\"> <properties> <property name=\"javax.net.ssl.mutualAuthentication\">REQUIRED</property> </properties> </ssl> </network> You can see the details of setting mutual authentication on the server side in the Mutual Authentication section of the Hazelcast IMDG Reference Manual. On the client side, you have to provide the client certificate and its password if there is one. Here is how you do it: sslOptions.CertificatePath = \"client pfx file path\"; sslOptions.CertificatePassword = \"client pfx password\"; The provided certificate file should be a PFX file that has private and public keys. The file path should be set with SslOptions.CertificatePath. If you choose to set a password to it, you need to provide it to the configuration using the SslOptions.CertificatePassword option."
  },
  "5.2.2/doc/transactions.html": {
    "href": "5.2.2/doc/transactions.html",
    "title": "Transactions | Hazelcast .NET Documentation",
    "keywords": "Transactions The Hazelcast .NET client supports transaction-aware versions of: Lists: IHTxList<TItem> Sets: IHTxSet<TItem> Queues: IHTxQueue<TItem> Maps: IHTxMap<TKey, TValue> Multi-maps: IHTxMultiMap<TKey, TValue> This page documents the .NET client-side aspects of transactions. See the Transactions section of the Reference Manual for more details. Transaction Management A transaction is started through the client, which then returns an ITransactionContext instance. Transactions by default follow the Microsoft's transaction pattern: they must be disposed, and commit or roll back depending on whether they have been completed. For example: await using (var transaction = await client.BeginTransactionAsync()) { // ... do transaction work ... transaction.Complete(); } Here, the transaction will commit when transaction is disposed, because it has been completed. Had it not been completed, it would have rolled back. Note that the explicit pattern is also supported, although less recommended: var transaction = await client.BeginTransactionAsync(); // ... do transaction work ... await transactionContext.CommitAsync(); // commmit, or... await transactionContext.DisposeAsync(); // roll back await transaction.DisposeAsync(); Transaction-aware Objects Transaction-aware objects are obtained from the transaction context. For example: await using (var transaction = await client.BeginTransactionAsync()) { var queue = await transaction.GetQueueAsync<string>(\"my-queue\"); var map = await transaction.GetMapAsync<string, string>(\"my-map\"); var set = await transaction.GetSetAsync<string>(\"my-set\"); try { var o = await queue.PollAsync(); // process the object... await map.PutAsync(\"1\", \"value-1\"); await set.AddAsync(\"value\"); // do more things... transaction.Complete(); } catch { // report the error // don't Complete = transaction will roll back automatically } } In this example, either all operations are executed, or none. Transaction Options Transactions can be configured via TransactionOptions that can be passed to the BeginTransactionAsync(TransactionOptions) method. These options are: Durability specifies the durability of the transaction (see below) Timeout specifies the timeout of the transaction Type can be either TwoPhase (by default) or OnePhase, See the Reference Manual for details The durability of a transaction is the number of members in the cluster that can take over if a member fails during a transaction commit or rollback. This value only has meaning when the Type is TwoPhase."
  },
  "5.2.2/index.html": {
    "href": "5.2.2/index.html",
    "title": "Welcome! | Hazelcast .NET Documentation",
    "keywords": "Welcome! Here you can find: General documentation for the .NET Client: introductions, guides, examples and FAQs. If unsure, this is your best bet. Complete reference documentation for the .NET Client public API, generated from source-code-level comments."
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome! | Hazelcast .NET Documentation",
    "keywords": "Welcome! Hazelcast .NET brings the full power of the Hazelcast high-performance, in-memory computing platform to the Microsoft .NET ecosystem. The Hazelcast .NET Client allows you to elastically scale your .NET caches at high read speeds, to access all of Hazelcast data structures such as distributed maps, queues, topics and more. All, with enterprise level security through SSL and mutual authentication. On this site you can find: General documentation for latest version of the .NET Client: introductions, guides, examples and FAQs. If unsure, this is your best bet. Complete reference documentation for the latest version of the .NET Client public API, generated from source-code-level comments. Documentation for all versions of the .NET Client. This includes past versions, and may also include previews of future versions. Hazelcast .NET only provides a client-side implementation, and needs to connect to a fully configured Hazelcast cluster. Refer to the Hazelcast General Documentation for a complete documentation of the server side of Hazelcast. The Hazelcast .NET solution is Open Source, released under the Apache License 2.0, and welcomes contributions. The project lives on GitHub. In the documentation you can also find out how to obtain the source code, build the solution, interact with the community, and contribute. Oh, and a documentation documentation site is, usually, a never-ending work-in-progress. Documentation itself is open to contributions, too. Find anything that you think could be improved? Reach out to us!"
  },
  "versions.html": {
    "href": "versions.html",
    "title": "Versions | Hazelcast .NET Documentation",
    "keywords": "Versions Hazelcast .NET brings the full power of the Hazelcast high-performance, in-memory computing platform to the Microsoft .NET ecosystem. The Hazelcast .NET Client allows you to elastically scale your .NET caches at high read speeds, to access all of Hazelcast data structures such as distributed maps, queues, topics and more. All, with enterprise level security through SSL and mutual authentication. Versions lifecycle and support period follows the Hazelcast Version Support Windows policy. Current Version 5.2.1 general documentation and API reference Preview $version general documentation and API reference Previous Versions 5.2.0 general documentation and API reference 5.1.1 general documentation and API reference 5.1.0 general documentation and API reference 5.0.2 general documentation and API reference 5.0.1 general documentation and API reference 5.0.0 general documentation and API reference 4.1.0 general documentation and API reference Unsupported Versions 4.0.2 general documentation and API reference 4.0.1 general documentation and API reference 4.0.0 general documentation and API reference 3.12.3 README and API reference 3.12.2 README and API reference .NET support The following table defines the .NET versions that were active and supported by each version of the Hazelcast .NET Client, at the time it was released. The Hazelcast .NET Client remains supported on these .NET versions for as long as they have not reached their end of support from Microsoft. Version .NET Framework 4.5-4.6.1 .NET Framework 4.6.2-4.8 .NET Core 2.1 .NET Core 3.1 (LTS) .NET 5.0 .NET 6.0 (LTS) .NET 7.0 5.2 No Yes No No (note) No (note) Yes Yes 5.1 No Yes No Yes Yes Yes No 5.0 No Yes No (note) Yes Yes No No 4.x No (note) Yes Yes Yes No No No 3.x Yes Yes No No No No No Note that .NET Framework runs on Windows exclusively, whereas .NET Core and .NET 5.0+ run on Windows, Linux and MacOS. Note As per Microsoft's .NET Framework Support Policy, versions 4.5.2, 4.6, and 4.6.1 will reach end of support on April 26, 2022. We do not support these versions starting with Hazelcast 4. We recommend that all Hazelcast 3 users migrate to at least .NET Framework 4.6.2, and ideally to .NET Framework 4.8. As per Microsoft's .NET and .NET Core Support Policy and LifeCycle, versions 2.1 to 5.0 are not supported anymore. We recommend that all users use versions of .NET supported by Microsoft."
  }
}