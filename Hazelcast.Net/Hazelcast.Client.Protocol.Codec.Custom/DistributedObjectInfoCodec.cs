// Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

using System;
using System.Collections;
using System.Collections.Generic;
using Hazelcast.Client.Protocol;
using Hazelcast.Client.Protocol.Codec.BuiltIn;
using Hazelcast.Client.Protocol.Util;
using Hazelcast.IO;
using Hazelcast.IO.Serialization;
using static Hazelcast.Client.Protocol.Codec.BuiltIn.FixedSizeTypesCodec;
using static Hazelcast.Client.Protocol.ClientMessage;
using static Hazelcast.IO.Bits;

namespace Hazelcast.Client.Protocol.Codec.Custom
{
    // This file is auto-generated by the Hazelcast Client Protocol Code Generator.
    // To change this file, edit the templates or the protocol
    // definitions on the https://github.com/hazelcast/hazelcast-client-protocol
    // and regenerate it.

    internal static class DistributedObjectInfoCodec
    {

        public static void Encode(ClientMessage clientMessage, Hazelcast.Client.DistributedObjectInfo distributedObjectInfo)
        {
            clientMessage.Add(BeginFrame.Copy());

            StringCodec.Encode(clientMessage, distributedObjectInfo.ServiceName);
            StringCodec.Encode(clientMessage, distributedObjectInfo.Name);

            clientMessage.Add(EndFrame);
        }

        public static Hazelcast.Client.DistributedObjectInfo Decode(FrameIterator iterator)
        {
            // begin frame
            iterator.Next();

            var serviceName = StringCodec.Decode(iterator);
            var name = StringCodec.Decode(iterator);

            CodecUtil.FastForwardToEndFrame(iterator);

            return new Hazelcast.Client.DistributedObjectInfo(serviceName, name);
        }
    }
}