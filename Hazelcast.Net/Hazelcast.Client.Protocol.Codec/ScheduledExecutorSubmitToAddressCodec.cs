// Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

using System;
using System.Collections;
using System.Collections.Generic;
using Hazelcast.Client.Protocol;
using Hazelcast.Client.Protocol.Codec.BuiltIn;
using Hazelcast.Client.Protocol.Codec.Custom;
using Hazelcast.Client.Protocol.Util;
using Hazelcast.IO;
using Hazelcast.IO.Serialization;
using static Hazelcast.Client.Protocol.Codec.BuiltIn.FixedSizeTypesCodec;
using static Hazelcast.Client.Protocol.ClientMessage;
using static Hazelcast.IO.Bits;

namespace Hazelcast.Client.Protocol.Codec
{
    // This file is auto-generated by the Hazelcast Client Protocol Code Generator.
    // To change this file, edit the templates or the protocol
    // definitions on the https://github.com/hazelcast/hazelcast-client-protocol
    // and regenerate it.

    /// <summary>
    /// Submits the task to a member for execution, member is provided in the form of an address.
    ///</summary>
    internal static class ScheduledExecutorSubmitToAddressCodec 
    {
        //hex: 0x1D0300
        public const int RequestMessageType = 1901312;
        //hex: 0x1D0301
        public const int ResponseMessageType = 1901313;
        private const int RequestTypeFieldOffset = PartitionIdFieldOffset + IntSizeInBytes;
        private const int RequestInitialDelayInMillisFieldOffset = RequestTypeFieldOffset + ByteSizeInBytes;
        private const int RequestPeriodInMillisFieldOffset = RequestInitialDelayInMillisFieldOffset + LongSizeInBytes;
        private const int RequestInitialFrameSize = RequestPeriodInMillisFieldOffset + LongSizeInBytes;
        private const int ResponseInitialFrameSize = ResponseBackupAcksFieldOffset + IntSizeInBytes;

        public class RequestParameters 
        {

            /// <summary>
            /// The name of the scheduler.
            ///</summary>
            public string SchedulerName;

            /// <summary>
            /// The address of the member where the task will get scheduled.
            ///</summary>
            public com.hazelcast.nio.Address Address;

            /// <summary>
            /// type of schedule logic, values 0 for SINGLE_RUN, 1 for AT_FIXED_RATE
            ///</summary>
            public byte Type;

            /// <summary>
            /// The name of the task
            ///</summary>
            public string TaskName;

            /// <summary>
            /// Name The name of the task
            ///</summary>
            public IData Task;

            /// <summary>
            /// initial delay in milliseconds
            ///</summary>
            public long InitialDelayInMillis;

            /// <summary>
            /// period between each run in milliseconds
            ///</summary>
            public long PeriodInMillis;
        }

        public static ClientMessage EncodeRequest(string schedulerName, com.hazelcast.nio.Address address, byte type, string taskName, IData task, long initialDelayInMillis, long periodInMillis) 
        {
            var clientMessage = CreateForEncode();
            clientMessage.IsRetryable = true;
            clientMessage.AcquiresResource = false;
            clientMessage.OperationName = "ScheduledExecutor.SubmitToAddress";
            var initialFrame = new Frame(new byte[RequestInitialFrameSize], UnfragmentedMessage);
            EncodeInt(initialFrame.Content, TypeFieldOffset, RequestMessageType);
            EncodeByte(initialFrame.Content, RequestTypeFieldOffset, type);
            EncodeLong(initialFrame.Content, RequestInitialDelayInMillisFieldOffset, initialDelayInMillis);
            EncodeLong(initialFrame.Content, RequestPeriodInMillisFieldOffset, periodInMillis);
            clientMessage.Add(initialFrame);
            StringCodec.Encode(clientMessage, schedulerName);
            AddressCodec.Encode(clientMessage, address);
            StringCodec.Encode(clientMessage, taskName);
            DataCodec.Encode(clientMessage, task);
            return clientMessage;
        }

        public static ScheduledExecutorSubmitToAddressCodec.RequestParameters DecodeRequest(ClientMessage clientMessage) 
        {
            var iterator = clientMessage.GetIterator();
            var request = new RequestParameters();
            var initialFrame = iterator.Next();
            request.Type =  DecodeByte(initialFrame.Content, RequestTypeFieldOffset);
            request.InitialDelayInMillis =  DecodeLong(initialFrame.Content, RequestInitialDelayInMillisFieldOffset);
            request.PeriodInMillis =  DecodeLong(initialFrame.Content, RequestPeriodInMillisFieldOffset);
            request.SchedulerName = StringCodec.Decode(ref iterator);
            request.Address = AddressCodec.Decode(ref iterator);
            request.TaskName = StringCodec.Decode(ref iterator);
            request.Task = DataCodec.Decode(ref iterator);
            return request;
        }

        public class ResponseParameters 
        {
        }

        public static ClientMessage EncodeResponse() 
        {
            var clientMessage = CreateForEncode();
            var initialFrame = new Frame(new byte[ResponseInitialFrameSize], UnfragmentedMessage);
            EncodeInt(initialFrame.Content, TypeFieldOffset, ResponseMessageType);
            clientMessage.Add(initialFrame);

            return clientMessage;
        }

        public static ScheduledExecutorSubmitToAddressCodec.ResponseParameters DecodeResponse(ClientMessage clientMessage)
        {
            var iterator = clientMessage.GetIterator();
            var response = new ResponseParameters();
            //empty initial frame
            iterator.Next();
            return response;
        }
    }
}