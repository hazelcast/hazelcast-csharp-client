// Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

using System;
using System.Collections;
using System.Collections.Generic;
using Hazelcast.Client.Protocol;
using Hazelcast.Client.Protocol.Codec.BuiltIn;
using Hazelcast.Client.Protocol.Codec.Custom;
using Hazelcast.Client.Protocol.Util;
using Hazelcast.IO;
using Hazelcast.IO.Serialization;
using static Hazelcast.Client.Protocol.Codec.BuiltIn.FixedSizeTypesCodec;
using static Hazelcast.Client.Protocol.ClientMessage;
using static Hazelcast.IO.Bits;

namespace Hazelcast.Client.Protocol.Codec
{
    // This file is auto-generated by the Hazelcast Client Protocol Code Generator.
    // To change this file, edit the templates or the protocol
    // definitions on the https://github.com/hazelcast/hazelcast-client-protocol
    // and regenerate it.

    /// <summary>
    /// Reads from the map event journal in batches. You may specify the start sequence,
    /// the minumum required number of items in the response, the maximum number of items
    /// in the response, a predicate that the events should pass and a projection to
    /// apply to the events in the journal.
    /// If the event journal currently contains less events than {@code minSize}, the
    /// call will wait until it has sufficient items.
    /// The predicate, filter and projection may be {@code null} in which case all elements are returned
    /// and no projection is applied.
    ///</summary>
    internal static class MapEventJournalReadCodec
    {
        //hex: 0x014500
        public const int RequestMessageType = 83200;
        //hex: 0x014501
        public const int ResponseMessageType = 83201;
        private const int RequestStartSequenceFieldOffset = PartitionIdFieldOffset + IntSizeInBytes;
        private const int RequestMinSizeFieldOffset = RequestStartSequenceFieldOffset + LongSizeInBytes;
        private const int RequestMaxSizeFieldOffset = RequestMinSizeFieldOffset + IntSizeInBytes;
        private const int RequestInitialFrameSize = RequestMaxSizeFieldOffset + IntSizeInBytes;
        private const int ResponseReadCountFieldOffset = ResponseBackupAcksFieldOffset + IntSizeInBytes;
        private const int ResponseNextSeqFieldOffset = ResponseReadCountFieldOffset + IntSizeInBytes;
        private const int ResponseInitialFrameSize = ResponseNextSeqFieldOffset + LongSizeInBytes;

        public class RequestParameters
        {

            /// <summary>
            /// name of the map
            ///</summary>
            public string Name;

            /// <summary>
            /// the startSequence of the first item to read
            ///</summary>
            public long StartSequence;

            /// <summary>
            /// the minimum number of items to read.
            ///</summary>
            public int MinSize;

            /// <summary>
            /// the maximum number of items to read.
            ///</summary>
            public int MaxSize;

            /// <summary>
            /// the predicate to apply before processing events
            ///</summary>
            public IData Predicate;

            /// <summary>
            /// the projection to apply to journal events
            ///</summary>
            public IData Projection;
        }

        public static ClientMessage EncodeRequest(string name, long startSequence, int minSize, int maxSize, IData predicate, IData projection)
        {
            var clientMessage = CreateForEncode();
            clientMessage.IsRetryable = true;
            clientMessage.AcquiresResource = false;
            clientMessage.OperationName = "Map.EventJournalRead";
            var initialFrame = new Frame(new byte[RequestInitialFrameSize], UnfragmentedMessage);
            EncodeInt(initialFrame.Content, TypeFieldOffset, RequestMessageType);
            EncodeLong(initialFrame.Content, RequestStartSequenceFieldOffset, startSequence);
            EncodeInt(initialFrame.Content, RequestMinSizeFieldOffset, minSize);
            EncodeInt(initialFrame.Content, RequestMaxSizeFieldOffset, maxSize);
            clientMessage.Add(initialFrame);
            StringCodec.Encode(clientMessage, name);
            CodecUtil.EncodeNullable(clientMessage, predicate, DataCodec.Encode);
            CodecUtil.EncodeNullable(clientMessage, projection, DataCodec.Encode);
            return clientMessage;
        }

        public static RequestParameters DecodeRequest(ClientMessage clientMessage)
        {
            var iterator = clientMessage.GetIterator();
            var request = new RequestParameters();
            var initialFrame = iterator.Next();
            request.StartSequence =  DecodeLong(initialFrame.Content, RequestStartSequenceFieldOffset);
            request.MinSize =  DecodeInt(initialFrame.Content, RequestMinSizeFieldOffset);
            request.MaxSize =  DecodeInt(initialFrame.Content, RequestMaxSizeFieldOffset);
            request.Name = StringCodec.Decode(iterator);
            request.Predicate = CodecUtil.DecodeNullable(iterator, DataCodec.Decode);
            request.Projection = CodecUtil.DecodeNullable(iterator, DataCodec.Decode);
            return request;
        }

        public class ResponseParameters
        {

            /// <summary>
            /// TODO DOC
            ///</summary>
            public int ReadCount;

            /// <summary>
            /// TODO DOC
            ///</summary>
            public IList<IData> Items;

            /// <summary>
            /// TODO DOC
            ///</summary>
            public long[] ItemSeqs;

            /// <summary>
            /// TODO DOC
            ///</summary>
            public long NextSeq;
        }

        public static ClientMessage EncodeResponse(int readCount, IEnumerable<IData> items, long[] itemSeqs, long nextSeq)
        {
            var clientMessage = CreateForEncode();
            var initialFrame = new Frame(new byte[ResponseInitialFrameSize], UnfragmentedMessage);
            EncodeInt(initialFrame.Content, TypeFieldOffset, ResponseMessageType);
            clientMessage.Add(initialFrame);

            EncodeInt(initialFrame.Content, ResponseReadCountFieldOffset, readCount);
            EncodeLong(initialFrame.Content, ResponseNextSeqFieldOffset, nextSeq);
            ListMultiFrameCodec.Encode(clientMessage, items, DataCodec.Encode);
            CodecUtil.EncodeNullable(clientMessage, itemSeqs, LongArrayCodec.Encode);
            return clientMessage;
        }

        public static ResponseParameters DecodeResponse(ClientMessage clientMessage)
        {
            var iterator = clientMessage.GetIterator();
            var response = new ResponseParameters();
            var initialFrame = iterator.Next();
            response.ReadCount = DecodeInt(initialFrame.Content, ResponseReadCountFieldOffset);
            response.NextSeq = DecodeLong(initialFrame.Content, ResponseNextSeqFieldOffset);
            response.Items = ListMultiFrameCodec.Decode(iterator, DataCodec.Decode);
            response.ItemSeqs = CodecUtil.DecodeNullable(iterator, LongArrayCodec.Decode);
            return response;
        }
    }
}