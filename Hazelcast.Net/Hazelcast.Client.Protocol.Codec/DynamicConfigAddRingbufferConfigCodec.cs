// Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

using System;
using System.Collections;
using System.Collections.Generic;
using Hazelcast.Client.Protocol;
using Hazelcast.Client.Protocol.Codec.BuiltIn;
using Hazelcast.Client.Protocol.Codec.Custom;
using Hazelcast.Client.Protocol.Util;
using Hazelcast.IO;
using Hazelcast.IO.Serialization;
using static Hazelcast.Client.Protocol.Codec.BuiltIn.FixedSizeTypesCodec;
using static Hazelcast.Client.Protocol.ClientMessage;
using static Hazelcast.IO.Bits;

namespace Hazelcast.Client.Protocol.Codec
{
    // This file is auto-generated by the Hazelcast Client Protocol Code Generator.
    // To change this file, edit the templates or the protocol
    // definitions on the https://github.com/hazelcast/hazelcast-client-protocol
    // and regenerate it.

    /// <summary>
    /// Adds a new ringbuffer configuration to a running cluster.
    /// If a ringbuffer configuration with the given {@code name} already exists, then
    /// the new ringbuffer config is ignored and the existing one is preserved.
    ///</summary>
    internal static class DynamicConfigAddRingbufferConfigCodec 
    {
        //hex: 0x1E0200
        public const int RequestMessageType = 1966592;
        //hex: 0x1E0201
        public const int ResponseMessageType = 1966593;
        private const int RequestCapacityFieldOffset = PartitionIdFieldOffset + IntSizeInBytes;
        private const int RequestBackupCountFieldOffset = RequestCapacityFieldOffset + IntSizeInBytes;
        private const int RequestAsyncBackupCountFieldOffset = RequestBackupCountFieldOffset + IntSizeInBytes;
        private const int RequestTimeToLiveSecondsFieldOffset = RequestAsyncBackupCountFieldOffset + IntSizeInBytes;
        private const int RequestMergeBatchSizeFieldOffset = RequestTimeToLiveSecondsFieldOffset + IntSizeInBytes;
        private const int RequestInitialFrameSize = RequestMergeBatchSizeFieldOffset + IntSizeInBytes;
        private const int ResponseInitialFrameSize = ResponseBackupAcksFieldOffset + IntSizeInBytes;

        public class RequestParameters 
        {

            /// <summary>
            /// ringbuffer configuration name
            ///</summary>
            public string Name;

            /// <summary>
            /// capacity of the ringbuffer
            ///</summary>
            public int Capacity;

            /// <summary>
            /// number of synchronous backups
            ///</summary>
            public int BackupCount;

            /// <summary>
            /// number of asynchronous backups
            ///</summary>
            public int AsyncBackupCount;

            /// <summary>
            /// maximum number of seconds for each entry to stay in the ringbuffer
            ///</summary>
            public int TimeToLiveSeconds;

            /// <summary>
            /// in memory format of items in the ringbuffer. Valid options are {@code BINARY}
            /// and {@code OBJECT}
            ///</summary>
            public string InMemoryFormat;

            /// <summary>
            /// backing ringbuffer store configuration
            ///</summary>
            public com.hazelcast.client.impl.protocol.task.dynamicconfig.RingbufferStoreConfigHolder RingbufferStoreConfig;

            /// <summary>
            /// name of an existing configured split brain protection to be used to determine the minimum number of members
            /// required in the cluster for the lock to remain functional. When {@code null}, split brain protection does not
            /// apply to this lock configuration's operations.
            ///</summary>
            public string SplitBrainProtectionName;

            /// <summary>
            /// TODO DOC
            ///</summary>
            public string MergePolicy;

            /// <summary>
            /// TODO DOC
            ///</summary>
            public int MergeBatchSize;
        }

        public static ClientMessage EncodeRequest(string name, int capacity, int backupCount, int asyncBackupCount, int timeToLiveSeconds, string inMemoryFormat, com.hazelcast.client.impl.protocol.task.dynamicconfig.RingbufferStoreConfigHolder ringbufferStoreConfig, string splitBrainProtectionName, string mergePolicy, int mergeBatchSize) 
        {
            var clientMessage = CreateForEncode();
            clientMessage.IsRetryable = false;
            clientMessage.AcquiresResource = false;
            clientMessage.OperationName = "DynamicConfig.AddRingbufferConfig";
            var initialFrame = new Frame(new byte[RequestInitialFrameSize], UnfragmentedMessage);
            EncodeInt(initialFrame.Content, TypeFieldOffset, RequestMessageType);
            EncodeInt(initialFrame.Content, RequestCapacityFieldOffset, capacity);
            EncodeInt(initialFrame.Content, RequestBackupCountFieldOffset, backupCount);
            EncodeInt(initialFrame.Content, RequestAsyncBackupCountFieldOffset, asyncBackupCount);
            EncodeInt(initialFrame.Content, RequestTimeToLiveSecondsFieldOffset, timeToLiveSeconds);
            EncodeInt(initialFrame.Content, RequestMergeBatchSizeFieldOffset, mergeBatchSize);
            clientMessage.Add(initialFrame);
            StringCodec.Encode(clientMessage, name);
            StringCodec.Encode(clientMessage, inMemoryFormat);
            CodecUtil.EncodeNullable(clientMessage, ringbufferStoreConfig, RingbufferStoreConfigHolderCodec.Encode);
            CodecUtil.EncodeNullable(clientMessage, splitBrainProtectionName, StringCodec.Encode);
            StringCodec.Encode(clientMessage, mergePolicy);
            return clientMessage;
        }

        public static DynamicConfigAddRingbufferConfigCodec.RequestParameters DecodeRequest(ClientMessage clientMessage) 
        {
            var iterator = clientMessage.GetIterator();
            var request = new RequestParameters();
            var initialFrame = iterator.Next();
            request.Capacity =  DecodeInt(initialFrame.Content, RequestCapacityFieldOffset);
            request.BackupCount =  DecodeInt(initialFrame.Content, RequestBackupCountFieldOffset);
            request.AsyncBackupCount =  DecodeInt(initialFrame.Content, RequestAsyncBackupCountFieldOffset);
            request.TimeToLiveSeconds =  DecodeInt(initialFrame.Content, RequestTimeToLiveSecondsFieldOffset);
            request.MergeBatchSize =  DecodeInt(initialFrame.Content, RequestMergeBatchSizeFieldOffset);
            request.Name = StringCodec.Decode(ref iterator);
            request.InMemoryFormat = StringCodec.Decode(ref iterator);
            request.RingbufferStoreConfig = CodecUtil.DecodeNullable(ref iterator, RingbufferStoreConfigHolderCodec.Decode);
            request.SplitBrainProtectionName = CodecUtil.DecodeNullable(ref iterator, StringCodec.Decode);
            request.MergePolicy = StringCodec.Decode(ref iterator);
            return request;
        }

        public class ResponseParameters 
        {
        }

        public static ClientMessage EncodeResponse() 
        {
            var clientMessage = CreateForEncode();
            var initialFrame = new Frame(new byte[ResponseInitialFrameSize], UnfragmentedMessage);
            EncodeInt(initialFrame.Content, TypeFieldOffset, ResponseMessageType);
            clientMessage.Add(initialFrame);

            return clientMessage;
        }

        public static DynamicConfigAddRingbufferConfigCodec.ResponseParameters DecodeResponse(ClientMessage clientMessage)
        {
            var iterator = clientMessage.GetIterator();
            var response = new ResponseParameters();
            //empty initial frame
            iterator.Next();
            return response;
        }
    }
}