/*
 * Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System.Collections;
using System.Collections.Generic;
using Hazelcast.Client.Protocol;
using Hazelcast.Client.Protocol.Codec.BuiltIn;
using Hazelcast.Client.Protocol.Util;
using Hazelcast.IO;
using static Hazelcast.Client.Protocol.Codec.BuiltIn.FixedSizeTypesCodec;
using static Hazelcast.Client.Protocol.ClientMessage;
using static Hazelcast.IO.Bits;

namespace Hazelcast.Client.Protocol.Codec
{
    /*
    * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
    * To change this file, edit the templates or the protocol
    * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
    * and regenerate it.
    */

    /// <summary>
    /// TODO DOC
    ///</summary>
    internal static class ContinuousQueryPublisherCreateWithValueCodec 
    {
        public const int RequestMessageType = 0x180100;
        public const int ResponseMessageType = 0x180101;
        private const int RequestBatchSizeFieldOffset = PartitionIdFieldOffset + IntSizeInBytes;
        private const int RequestBufferSizeFieldOffset = RequestbatchSizeFieldOffset + IntSizeInBytes;
        private const int RequestDelaySecondsFieldOffset = RequestbufferSizeFieldOffset + IntSizeInBytes;
        private const int RequestPopulateFieldOffset = RequestdelaySecondsFieldOffset + LongSizeInBytes;
        private const int RequestCoalesceFieldOffset = RequestpopulateFieldOffset + BooleanSizeInBytes;
        private const int RequestInitialFrameSize = RequestCoalesceFieldOffset + BooleanSizeInBytes;
        private const int ResponseInitialFrameSize = CorrelationIdFieldOffset + LongSizeInBytes;

        public class RequestParameters 
        {

            /// <summary>
            /// Name of the map.
            ///</summary>
            public string MapName;

            /// <summary>
            /// Name of the cache for query cache.
            ///</summary>
            public string CacheName;

            /// <summary>
            /// The predicate to filter events which will be applied to the QueryCache.
            ///</summary>
            public IData Predicate;

            /// <summary>
            /// The size of batch. After reaching this minimum size, node immediately sends buffered events to QueryCache.
            ///</summary>
            public int BatchSize;

            /// <summary>
            /// Maximum number of events which can be stored in a buffer of partition.
            ///</summary>
            public int BufferSize;

            /// <summary>
            /// The minimum number of delay seconds which an event waits in the buffer of node.
            ///</summary>
            public long DelaySeconds;

            /// <summary>
            /// Flag to enable/disable initial population of the QueryCache.
            ///</summary>
            public bool Populate;

            /// <summary>
            /// Flag to enable/disable coalescing. If true, then only the last updated value for a key is placed in the
            /// batch, otherwise all changed values are included in the update.
            ///</summary>
            public bool Coalesce;
        }

        public static ClientMessage EncodeRequest(string mapName, string cacheName, IData predicate, int batchSize, int bufferSize, long delaySeconds, bool populate, bool coalesce) 
        {
            var clientMessage = CreateForEncode();
            clientMessage.IsRetryable = true;
            clientMessage.AcquiresResource = false;
            clientMessage.OperationName = "ContinuousQuery.PublisherCreateWithValue";
            var initialFrame = new Frame(new byte[RequestInitialFrameSize], UnfragmentedMessage);
            EncodeInt(initialFrame.Content, TypeFieldOffset, RequestMessageType);
            EncodeInt(initialFrame.Content, RequestBatchSizeFieldOffset, batchSize);
            EncodeInt(initialFrame.Content, RequestBufferSizeFieldOffset, bufferSize);
            EncodeLong(initialFrame.Content, RequestDelaySecondsFieldOffset, delaySeconds);
            EncodeBool(initialFrame.Content, RequestPopulateFieldOffset, populate);
            EncodeBool(initialFrame.Content, RequestCoalesceFieldOffset, coalesce);
            clientMessage.Add(initialFrame);
            StringCodec.Encode(clientMessage, mapName);
            StringCodec.Encode(clientMessage, cacheName);
            DataCodec.Encode(clientMessage, predicate);
            return clientMessage;
        }

        public static ContinuousQueryPublisherCreateWithValueCodec.RequestParameters DecodeRequest(ClientMessage clientMessage) 
        {
            var iterator = clientMessage.GetIterator();
            var request = new RequestParameters();
            var initialFrame = iterator.Next();
            request.BatchSize =  DecodeInt(initialFrame.Content, RequestBatchSizeFieldOffset);
            request.BufferSize =  DecodeInt(initialFrame.Content, RequestBufferSizeFieldOffset);
            request.DelaySeconds =  DecodeLong(initialFrame.Content, RequestDelaySecondsFieldOffset);
            request.Populate =  DecodeBool(initialFrame.Content, RequestPopulateFieldOffset);
            request.Coalesce =  DecodeBool(initialFrame.Content, RequestCoalesceFieldOffset);
            request.MapName = StringCodec.Decode(ref iterator);
            request.CacheName = StringCodec.Decode(ref iterator);
            request.Predicate = DataCodec.Decode(ref iterator);
            return request;
        }

        public class ResponseParameters 
        {

             /// <summary>
            /// Array of key-value pairs.
            ///</summary>
            public IEnumerable<KeyValuePair<IData, IData>> Response;
        }

        public static ClientMessage EncodeResponse(IEnumerable<KeyValuePair<IData, IData>> response) 
        {
            var clientMessage = CreateForEncode();
            var initialFrame = new Frame(new byte[ResponseInitialFrameSize], UnfragmentedMessage);
            EncodeInt(initialFrame.Content, TypeFieldOffset, ResponseMessageType);
            clientMessage.Add(initialFrame);

            EntryListDataDataCodec.Encode(clientMessage, response);
            return clientMessage;
        }

        public static ContinuousQueryPublisherCreateWithValueCodec.ResponseParameters DecodeResponse(ClientMessage clientMessage)
        {
            var iterator = clientMessage.GetIterator();
            var response = new ResponseParameters();
            //empty initial frame
            iterator.Next();
            response.Response = EntryListDataDataCodec.Decode(ref iterator);
            return response;
        }
    }
}