// Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

using System;
using System.Collections;
using System.Collections.Generic;
using Hazelcast.Client.Protocol;
using Hazelcast.Client.Protocol.Codec.BuiltIn;
using Hazelcast.Client.Protocol.Codec.Custom;
using Hazelcast.Client.Protocol.Util;
using Hazelcast.IO;
using Hazelcast.IO.Serialization;
using static Hazelcast.Client.Protocol.Codec.BuiltIn.FixedSizeTypesCodec;
using static Hazelcast.Client.Protocol.ClientMessage;
using static Hazelcast.IO.Bits;

namespace Hazelcast.Client.Protocol.Codec
{
    // This file is auto-generated by the Hazelcast Client Protocol Code Generator.
    // To change this file, edit the templates or the protocol
    // definitions on the https://github.com/hazelcast/hazelcast-client-protocol
    // and regenerate it.

    /// <summary>
    /// TODO DOC
    ///</summary>
    internal static class CachePutCodec 
    {
        //hex: 0x151400
        public const int RequestMessageType = 1381376;
        //hex: 0x151401
        public const int ResponseMessageType = 1381377;
        private const int RequestGetFieldOffset = PartitionIdFieldOffset + IntSizeInBytes;
        private const int RequestCompletionIdFieldOffset = RequestGetFieldOffset + BoolSizeInBytes;
        private const int RequestInitialFrameSize = RequestCompletionIdFieldOffset + IntSizeInBytes;
        private const int ResponseInitialFrameSize = ResponseBackupAcksFieldOffset + IntSizeInBytes;

        public class RequestParameters 
        {

            /// <summary>
            /// Name of the cache.
            ///</summary>
            public string Name;

            /// <summary>
            /// The key that has the specified value associated with it.
            ///</summary>
            public IData Key;

            /// <summary>
            /// The value to be associated with the key.
            ///</summary>
            public IData Value;

            /// <summary>
            /// Expiry policy for the entry. Byte-array which is serialized from an object implementing
            /// javax.cache.expiry.ExpiryPolicy interface.
            ///</summary>
            public IData ExpiryPolicy;

            /// <summary>
            /// boolean flag indicating if the previous value should be retrieved.
            ///</summary>
            public bool Get;

            /// <summary>
            /// User generated id which shall be received as a field of the cache event upon completion of
            /// the request in the cluster.
            ///</summary>
            public int CompletionId;
        }

        public static ClientMessage EncodeRequest(string name, IData key, IData value, IData expiryPolicy, bool get, int completionId) 
        {
            var clientMessage = CreateForEncode();
            clientMessage.IsRetryable = false;
            clientMessage.AcquiresResource = false;
            clientMessage.OperationName = "Cache.Put";
            var initialFrame = new Frame(new byte[RequestInitialFrameSize], UnfragmentedMessage);
            EncodeInt(initialFrame.Content, TypeFieldOffset, RequestMessageType);
            EncodeBool(initialFrame.Content, RequestGetFieldOffset, get);
            EncodeInt(initialFrame.Content, RequestCompletionIdFieldOffset, completionId);
            clientMessage.Add(initialFrame);
            StringCodec.Encode(clientMessage, name);
            DataCodec.Encode(clientMessage, key);
            DataCodec.Encode(clientMessage, value);
            CodecUtil.EncodeNullable(clientMessage, expiryPolicy, DataCodec.Encode);
            return clientMessage;
        }

        public static CachePutCodec.RequestParameters DecodeRequest(ClientMessage clientMessage) 
        {
            var iterator = clientMessage.GetIterator();
            var request = new RequestParameters();
            var initialFrame = iterator.Next();
            request.Get =  DecodeBool(initialFrame.Content, RequestGetFieldOffset);
            request.CompletionId =  DecodeInt(initialFrame.Content, RequestCompletionIdFieldOffset);
            request.Name = StringCodec.Decode(ref iterator);
            request.Key = DataCodec.Decode(ref iterator);
            request.Value = DataCodec.Decode(ref iterator);
            request.ExpiryPolicy = CodecUtil.DecodeNullable(ref iterator, DataCodec.Decode);
            return request;
        }

        public class ResponseParameters 
        {

            /// <summary>
            /// The value previously assigned to the given key, or null if not assigned.
            ///</summary>
            public IData Response;
        }

        public static ClientMessage EncodeResponse(IData response) 
        {
            var clientMessage = CreateForEncode();
            var initialFrame = new Frame(new byte[ResponseInitialFrameSize], UnfragmentedMessage);
            EncodeInt(initialFrame.Content, TypeFieldOffset, ResponseMessageType);
            clientMessage.Add(initialFrame);

            CodecUtil.EncodeNullable(clientMessage, response, DataCodec.Encode);
            return clientMessage;
        }

        public static CachePutCodec.ResponseParameters DecodeResponse(ClientMessage clientMessage)
        {
            var iterator = clientMessage.GetIterator();
            var response = new ResponseParameters();
            //empty initial frame
            iterator.Next();
            response.Response = CodecUtil.DecodeNullable(ref iterator, DataCodec.Decode);
            return response;
        }
    }
}