/*
 * Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System.Collections;
using System.Collections.Generic;
using Hazelcast.Client.Protocol;
using Hazelcast.Client.Protocol.Codec.BuiltIn;
using Hazelcast.Client.Protocol.Util;
using Hazelcast.IO;
using static Hazelcast.Client.Protocol.Codec.BuiltIn.FixedSizeTypesCodec;
using static Hazelcast.Client.Protocol.ClientMessage;
using static Hazelcast.IO.Bits;

namespace Hazelcast.Client.Protocol.Codec
{
    /*
    * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
    * To change this file, edit the templates or the protocol
    * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
    * and regenerate it.
    */

    /// <summary>
    /// Causes the current thread to wait until it is signalled or Thread#interrupt interrupted. The lock associated with
    /// this Condition is atomically released and the current thread becomes disabled for thread scheduling purposes and
    /// lies dormant until one of four things happens:
    /// Some other thread invokes the #signal method for this Condition and the current thread happens to be chosen as the
    /// thread to be awakened; or Some other thread invokes the #signalAll method for this Condition; or Some other thread
    /// Thread#interrupt interrupts the current thread, and interruption of thread suspension is supported; or A spurious wakeup occurs.
    /// In all cases, before this method can return the current thread must re-acquire the lock associated with this condition.
    /// When the thread returns it is guaranteed to hold this lock. If the current thread: has its interrupted status set
    /// on entry to this method; or is Thread#interrupt interrupted while waiting and interruption of thread suspension
    /// is supported, then INTERRUPTED is thrown and the current thread's interrupted status is cleared. It is
    /// not specified, in the first case, whether or not the test for interruption occurs before the lock is released.
    /// The current thread is assumed to hold the lock associated with this Condition when this method is called.
    /// It is up to the implementation to determine if this is the case and if not, how to respond. Typically, an exception will be
    /// thrown (such as ILLEGAL_MONITOR_STATE) and the implementation must document that fact.
    /// An implementation can favor responding to an interrupt over normal method return in response to a signal. In that
    /// case the implementation must ensure that the signal is redirected to another waiting thread, if there is one.
    ///</summary>
    internal static class ConditionBeforeAwaitCodec 
    {
        public const int RequestMessageType = 0x080200;
        public const int ResponseMessageType = 0x080201;
        private const int RequestThreadIdFieldOffset = PartitionIdFieldOffset + IntSizeInBytes;
        private const int RequestReferenceIdFieldOffset = RequestthreadIdFieldOffset + LongSizeInBytes;
        private const int RequestInitialFrameSize = RequestReferenceIdFieldOffset + LongSizeInBytes;
        private const int ResponseInitialFrameSize = CorrelationIdFieldOffset + LongSizeInBytes;

        public class RequestParameters 
        {

            /// <summary>
            /// Name of the Condition
            ///</summary>
            public string Name;

            /// <summary>
            /// The id of the user thread performing the operation. It is used to guarantee that only the lock holder thread (if a lock exists on the entry) can perform the requested operation.
            ///</summary>
            public long ThreadId;

            /// <summary>
            /// Name of the lock to wait on.
            ///</summary>
            public string LockName;

            /// <summary>
            /// The client-wide unique id for this request. It is used to make the request idempotent by sending the same reference id during retries.
            ///</summary>
            public long ReferenceId;
        }

        public static ClientMessage EncodeRequest(string name, long threadId, string lockName, long referenceId) 
        {
            var clientMessage = CreateForEncode();
            clientMessage.IsRetryable = true;
            clientMessage.AcquiresResource = false;
            clientMessage.OperationName = "Condition.BeforeAwait";
            var initialFrame = new Frame(new byte[RequestInitialFrameSize], UnfragmentedMessage);
            EncodeInt(initialFrame.Content, TypeFieldOffset, RequestMessageType);
            EncodeLong(initialFrame.Content, RequestThreadIdFieldOffset, threadId);
            EncodeLong(initialFrame.Content, RequestReferenceIdFieldOffset, referenceId);
            clientMessage.Add(initialFrame);
            StringCodec.Encode(clientMessage, name);
            StringCodec.Encode(clientMessage, lockName);
            return clientMessage;
        }

        public static ConditionBeforeAwaitCodec.RequestParameters DecodeRequest(ClientMessage clientMessage) 
        {
            var iterator = clientMessage.GetIterator();
            var request = new RequestParameters();
            var initialFrame = iterator.Next();
            request.ThreadId =  DecodeLong(initialFrame.Content, RequestThreadIdFieldOffset);
            request.ReferenceId =  DecodeLong(initialFrame.Content, RequestReferenceIdFieldOffset);
            request.Name = StringCodec.Decode(ref iterator);
            request.LockName = StringCodec.Decode(ref iterator);
            return request;
        }

        public class ResponseParameters 
        {
        }

        public static ClientMessage EncodeResponse() 
        {
            var clientMessage = CreateForEncode();
            var initialFrame = new Frame(new byte[ResponseInitialFrameSize], UnfragmentedMessage);
            EncodeInt(initialFrame.Content, TypeFieldOffset, ResponseMessageType);
            clientMessage.Add(initialFrame);

            return clientMessage;
        }

        public static ConditionBeforeAwaitCodec.ResponseParameters DecodeResponse(ClientMessage clientMessage)
        {
            var iterator = clientMessage.GetIterator();
            var response = new ResponseParameters();
            //empty initial frame
            iterator.Next();
            return response;
        }
    }
}