// Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

using System;
using System.Collections;
using System.Collections.Generic;
using Hazelcast.Client.Protocol;
using Hazelcast.Client.Protocol.Codec.BuiltIn;
using Hazelcast.Client.Protocol.Util;
using Hazelcast.IO;
using static Hazelcast.Client.Protocol.Codec.BuiltIn.FixedSizeTypesCodec;
using static Hazelcast.Client.Protocol.ClientMessage;
using static Hazelcast.IO.Bits;

namespace Hazelcast.Client.Protocol.Codec.Custom
{
    // This file is auto-generated by the Hazelcast Client Protocol Code Generator.
    // To change this file, edit the templates or the protocol
    // definitions on the https://github.com/hazelcast/hazelcast-client-protocol
    // and regenerate it.

    internal static class QueryCacheConfigHolderCodec 
    {
        private const int BatchSizeFieldOffset = 0;
        private const int BufferSizeFieldOffset = BatchSizeFieldOffset + IntSizeInBytes;
        private const int DelaySecondsFieldOffset = BufferSizeFieldOffset + IntSizeInBytes;
        private const int IncludeValueFieldOffset = DelaySecondsFieldOffset + IntSizeInBytes;
        private const int PopulateFieldOffset = IncludeValueFieldOffset + BoolSizeInBytes;
        private const int CoalesceFieldOffset = PopulateFieldOffset + BoolSizeInBytes;
        private const int InitialFrameSize = CoalesceFieldOffset + BoolSizeInBytes;

        public static void Encode(ClientMessage clientMessage, com.hazelcast.client.impl.protocol.task.dynamicconfig.QueryCacheConfigHolder queryCacheConfigHolder) 
        {
            clientMessage.Add(BeginFrame);

            var initialFrame = new Frame(new byte[InitialFrameSize]);
            EncodeInt(initialFrame.Content, BatchSizeFieldOffset, queryCacheConfigHolder.BatchSize);
            EncodeInt(initialFrame.Content, BufferSizeFieldOffset, queryCacheConfigHolder.BufferSize);
            EncodeInt(initialFrame.Content, DelaySecondsFieldOffset, queryCacheConfigHolder.DelaySeconds);
            EncodeBool(initialFrame.Content, IncludeValueFieldOffset, queryCacheConfigHolder.IsIncludeValue);
            EncodeBool(initialFrame.Content, PopulateFieldOffset, queryCacheConfigHolder.IsPopulate);
            EncodeBool(initialFrame.Content, CoalesceFieldOffset, queryCacheConfigHolder.IsCoalesce);
            clientMessage.Add(initialFrame);

            StringCodec.Encode(clientMessage, queryCacheConfigHolder.InMemoryFormat);
            StringCodec.Encode(clientMessage, queryCacheConfigHolder.Name);
            PredicateConfigHolderCodec.Encode(clientMessage, queryCacheConfigHolder.PredicateConfigHolder);
            EvictionConfigHolderCodec.Encode(clientMessage, queryCacheConfigHolder.EvictionConfigHolder);
            ListMultiFrameCodec.EncodeNullable(clientMessage, queryCacheConfigHolder.ListenerConfigs, ListenerConfigHolderCodec.Encode);
            ListMultiFrameCodec.EncodeNullable(clientMessage, queryCacheConfigHolder.IndexConfigs, IndexConfigCodec.Encode);

            clientMessage.Add(EndFrame);
        }

        public static com.hazelcast.client.impl.protocol.task.dynamicconfig.QueryCacheConfigHolder Decode(ref FrameIterator iterator) 
        {
            // begin frame
            iterator.Next();

            ref var initialFrame = ref iterator.Next();
            var batchSize = DecodeInt(initialFrame.Content, BatchSizeFieldOffset);
            var bufferSize = DecodeInt(initialFrame.Content, BufferSizeFieldOffset);
            var delaySeconds = DecodeInt(initialFrame.Content, DelaySecondsFieldOffset);
            var includeValue = DecodeBool(initialFrame.Content, IncludeValueFieldOffset);
            var populate = DecodeBool(initialFrame.Content, PopulateFieldOffset);
            var coalesce = DecodeBool(initialFrame.Content, CoalesceFieldOffset);

            var inMemoryFormat = StringCodec.Decode(ref iterator);
            var name = StringCodec.Decode(ref iterator);
            var predicateConfigHolder = PredicateConfigHolderCodec.Decode(ref iterator);
            var evictionConfigHolder = EvictionConfigHolderCodec.Decode(ref iterator);
            var listenerConfigs = ListMultiFrameCodec.DecodeNullable(ref iterator, ListenerConfigHolderCodec.Decode);
            var indexConfigs = ListMultiFrameCodec.DecodeNullable(ref iterator, IndexConfigCodec.Decode);

            CodecUtil.FastForwardToEndFrame(ref iterator);

            return new com.hazelcast.client.impl.protocol.task.dynamicconfig.QueryCacheConfigHolder(batchSize, bufferSize, delaySeconds, includeValue, populate, coalesce, inMemoryFormat, name, predicateConfigHolder, evictionConfigHolder, listenerConfigs, indexConfigs);
        }
    }
}