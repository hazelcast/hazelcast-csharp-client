// Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

using System;
using System.Collections;
using System.Collections.Generic;
using Hazelcast.Client.Protocol;
using Hazelcast.Client.Protocol.Codec.BuiltIn;
using Hazelcast.Client.Protocol.Codec.Custom;
using Hazelcast.Client.Protocol.Util;
using Hazelcast.IO;
using Hazelcast.IO.Serialization;
using static Hazelcast.Client.Protocol.Codec.BuiltIn.FixedSizeTypesCodec;
using static Hazelcast.Client.Protocol.ClientMessage;
using static Hazelcast.IO.Bits;
using Hazelcast.Logging;

namespace Hazelcast.Client.Protocol.Codec
{
    // This file is auto-generated by the Hazelcast Client Protocol Code Generator.
    // To change this file, edit the templates or the protocol
    // definitions on the https://github.com/hazelcast/hazelcast-client-protocol
    // and regenerate it.

    /// <summary>
    /// TODO DOC
    ///</summary>
    internal static class ContinuousQueryAddListenerCodec 
    {
        //hex: 0x160400
        public const int RequestMessageType = 1442816;
        //hex: 0x160401
        public const int ResponseMessageType = 1442817;
        private const int RequestLocalOnlyFieldOffset = PartitionIdFieldOffset + IntSizeInBytes;
        private const int RequestInitialFrameSize = RequestLocalOnlyFieldOffset + BoolSizeInBytes;
        private const int ResponseResponseFieldOffset = ResponseBackupAcksFieldOffset + IntSizeInBytes;
        private const int ResponseInitialFrameSize = ResponseResponseFieldOffset + GuidSizeInBytes;
        private const int EventQueryCacheSingleInitialFrameSize = PartitionIdFieldOffset + IntSizeInBytes;
        // hex: 0x160402
        private const int EventQueryCacheSingleMessageType = 1442818;
        private const int EventQueryCacheBatchPartitionIdFieldOffset = PartitionIdFieldOffset + IntSizeInBytes;
        private const int EventQueryCacheBatchInitialFrameSize = EventQueryCacheBatchPartitionIdFieldOffset + IntSizeInBytes;
        // hex: 0x160403
        private const int EventQueryCacheBatchMessageType = 1442819;

        public class RequestParameters 
        {

            /// <summary>
            /// Name of the MapListener which will be used to listen this QueryCache
            ///</summary>
            public string ListenerName;

            /// <summary>
            /// if true fires events that originated from this node only, otherwise fires all events
            ///</summary>
            public bool LocalOnly;
        }

        public static ClientMessage EncodeRequest(string listenerName, bool localOnly) 
        {
            var clientMessage = CreateForEncode();
            clientMessage.IsRetryable = false;
            clientMessage.AcquiresResource = false;
            clientMessage.OperationName = "ContinuousQuery.AddListener";
            var initialFrame = new Frame(new byte[RequestInitialFrameSize], UnfragmentedMessage);
            EncodeInt(initialFrame.Content, TypeFieldOffset, RequestMessageType);
            EncodeBool(initialFrame.Content, RequestLocalOnlyFieldOffset, localOnly);
            clientMessage.Add(initialFrame);
            StringCodec.Encode(clientMessage, listenerName);
            return clientMessage;
        }

        public static ContinuousQueryAddListenerCodec.RequestParameters DecodeRequest(ClientMessage clientMessage) 
        {
            var iterator = clientMessage.GetIterator();
            var request = new RequestParameters();
            var initialFrame = iterator.Next();
            request.LocalOnly =  DecodeBool(initialFrame.Content, RequestLocalOnlyFieldOffset);
            request.ListenerName = StringCodec.Decode(ref iterator);
            return request;
        }

        public class ResponseParameters 
        {

            /// <summary>
            /// Registration id for the listener.
            ///</summary>
            public Guid Response;
        }

        public static ClientMessage EncodeResponse(Guid response) 
        {
            var clientMessage = CreateForEncode();
            var initialFrame = new Frame(new byte[ResponseInitialFrameSize], UnfragmentedMessage);
            EncodeInt(initialFrame.Content, TypeFieldOffset, ResponseMessageType);
            clientMessage.Add(initialFrame);

            EncodeGuid(initialFrame.Content, ResponseResponseFieldOffset, response);
            return clientMessage;
        }

        public static ContinuousQueryAddListenerCodec.ResponseParameters DecodeResponse(ClientMessage clientMessage)
        {
            var iterator = clientMessage.GetIterator();
            var response = new ResponseParameters();
            var initialFrame = iterator.Next();
            response.Response = DecodeGuid(initialFrame.Content, ResponseResponseFieldOffset);
            return response;
        }
    
        public static ClientMessage EncodeQueryCacheSingleEvent(Hazelcast.Map.QueryCacheEventData data) 
        {
            var clientMessage = CreateForEncode();
            var initialFrame = new Frame(new byte[EventQueryCacheSingleInitialFrameSize], UnfragmentedMessage);
            initialFrame.Flags |= IsEventFlag;
            EncodeInt(initialFrame.Content, TypeFieldOffset, EventQueryCacheSingleMessageType);
            clientMessage.Add(initialFrame);
            QueryCacheEventDataCodec.Encode(clientMessage, data);
            return clientMessage;
        }
    
        public static ClientMessage EncodeQueryCacheBatchEvent(IEnumerable<Hazelcast.Map.QueryCacheEventData> events, string source, int partitionId) 
        {
            var clientMessage = CreateForEncode();
            var initialFrame = new Frame(new byte[EventQueryCacheBatchInitialFrameSize], UnfragmentedMessage);
            initialFrame.Flags |= IsEventFlag;
            EncodeInt(initialFrame.Content, TypeFieldOffset, EventQueryCacheBatchMessageType);
            EncodeInt(initialFrame.Content, EventQueryCacheBatchPartitionIdFieldOffset, partitionId);
            clientMessage.Add(initialFrame);
            ListMultiFrameCodec.Encode(clientMessage, events, QueryCacheEventDataCodec.Encode);
            StringCodec.Encode(clientMessage, source);
            return clientMessage;
        }

        public abstract class AbstractEventHandler 
        {
            public void Handle(ClientMessage clientMessage) 
            {
                var messageType = clientMessage.MessageType;
                var iterator = clientMessage.GetIterator();
                if (messageType == EventQueryCacheSingleMessageType) {
                    //empty initial frame
                    iterator.Next();
                    Hazelcast.Map.QueryCacheEventData data = QueryCacheEventDataCodec.Decode(ref iterator);
                    HandleQueryCacheSingleEvent(data);
                    return;
                }
                if (messageType == EventQueryCacheBatchMessageType) {
                    var initialFrame = iterator.Next();
                    int partitionId =  DecodeInt(initialFrame.Content, EventQueryCacheBatchPartitionIdFieldOffset);
                    IList<Hazelcast.Map.QueryCacheEventData> events = ListMultiFrameCodec.Decode(ref iterator, QueryCacheEventDataCodec.Decode);
                    string source = StringCodec.Decode(ref iterator);
                    HandleQueryCacheBatchEvent(events, source, partitionId);
                    return;
                }
                Logger.GetLogger(GetType()).Finest("Unknown message type received on event handler :" + messageType);
            }

            public abstract void HandleQueryCacheSingleEvent(Hazelcast.Map.QueryCacheEventData data);

            public abstract void HandleQueryCacheBatchEvent(IEnumerable<Hazelcast.Map.QueryCacheEventData> events, string source, int partitionId);
        }
    }
}