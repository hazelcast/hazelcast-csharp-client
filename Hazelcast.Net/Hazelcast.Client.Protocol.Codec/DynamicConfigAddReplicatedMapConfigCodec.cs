// Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

using System;
using System.Collections;
using System.Collections.Generic;
using Hazelcast.Client.Protocol;
using Hazelcast.Client.Protocol.Codec.BuiltIn;
using Hazelcast.Client.Protocol.Codec.Custom;
using Hazelcast.Client.Protocol.Util;
using Hazelcast.IO;
using Hazelcast.IO.Serialization;
using static Hazelcast.Client.Protocol.Codec.BuiltIn.FixedSizeTypesCodec;
using static Hazelcast.Client.Protocol.ClientMessage;
using static Hazelcast.IO.Bits;

namespace Hazelcast.Client.Protocol.Codec
{
    // This file is auto-generated by the Hazelcast Client Protocol Code Generator.
    // To change this file, edit the templates or the protocol
    // definitions on the https://github.com/hazelcast/hazelcast-client-protocol
    // and regenerate it.

    /// <summary>
    /// Adds a new replicated map configuration to a running cluster.
    /// If a replicated map configuration with the given {@code name} already exists, then
    /// the new configuration is ignored and the existing one is preserved.
    ///</summary>
    internal static class DynamicConfigAddReplicatedMapConfigCodec 
    {
        //hex: 0x1B0600
        public const int RequestMessageType = 1771008;
        //hex: 0x1B0601
        public const int ResponseMessageType = 1771009;
        private const int RequestAsyncFillupFieldOffset = PartitionIdFieldOffset + IntSizeInBytes;
        private const int RequestStatisticsEnabledFieldOffset = RequestAsyncFillupFieldOffset + BoolSizeInBytes;
        private const int RequestMergeBatchSizeFieldOffset = RequestStatisticsEnabledFieldOffset + BoolSizeInBytes;
        private const int RequestInitialFrameSize = RequestMergeBatchSizeFieldOffset + IntSizeInBytes;
        private const int ResponseInitialFrameSize = ResponseBackupAcksFieldOffset + IntSizeInBytes;

        public class RequestParameters 
        {

            /// <summary>
            /// name of the replicated map configuration
            ///</summary>
            public string Name;

            /// <summary>
            /// data type used to store entries. Valid values are {@code "BINARY"}, {@code "OBJECT"}
            /// and {@code "NATIVE"}.
            ///</summary>
            public string InMemoryFormat;

            /// <summary>
            /// {@code true} to make the replicated map available for reads before initial replication
            /// is completed, {@code false} otherwise.
            ///</summary>
            public bool AsyncFillup;

            /// <summary>
            /// {@code true} to enable gathering of statistics, otherwise {@code false}
            ///</summary>
            public bool StatisticsEnabled;

            /// <summary>
            /// class name of a class implementing
            /// {@code com.hazelcast.replicatedmap.merge.ReplicatedMapMergePolicy} to merge entries
            /// while recovering from a split brain
            ///</summary>
            public string MergePolicy;

            /// <summary>
            /// entry listener configurations
            ///</summary>
            public IList<com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder> ListenerConfigs;

            /// <summary>
            /// name of an existing configured split brain protection to be used to determine the minimum number of members
            /// required in the cluster for the lock to remain functional. When {@code null}, split brain protection does not
            /// apply to this lock configuration's operations.
            ///</summary>
            public string SplitBrainProtectionName;

            /// <summary>
            /// TODO DOC
            ///</summary>
            public int MergeBatchSize;
        }

        public static ClientMessage EncodeRequest(string name, string inMemoryFormat, bool asyncFillup, bool statisticsEnabled, string mergePolicy, IEnumerable<com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder> listenerConfigs, string splitBrainProtectionName, int mergeBatchSize) 
        {
            var clientMessage = CreateForEncode();
            clientMessage.IsRetryable = false;
            clientMessage.AcquiresResource = false;
            clientMessage.OperationName = "DynamicConfig.AddReplicatedMapConfig";
            var initialFrame = new Frame(new byte[RequestInitialFrameSize], UnfragmentedMessage);
            EncodeInt(initialFrame.Content, TypeFieldOffset, RequestMessageType);
            EncodeBool(initialFrame.Content, RequestAsyncFillupFieldOffset, asyncFillup);
            EncodeBool(initialFrame.Content, RequestStatisticsEnabledFieldOffset, statisticsEnabled);
            EncodeInt(initialFrame.Content, RequestMergeBatchSizeFieldOffset, mergeBatchSize);
            clientMessage.Add(initialFrame);
            StringCodec.Encode(clientMessage, name);
            StringCodec.Encode(clientMessage, inMemoryFormat);
            StringCodec.Encode(clientMessage, mergePolicy);
            ListMultiFrameCodec.EncodeNullable(clientMessage, listenerConfigs, ListenerConfigHolderCodec.Encode);
            CodecUtil.EncodeNullable(clientMessage, splitBrainProtectionName, StringCodec.Encode);
            return clientMessage;
        }

        public static DynamicConfigAddReplicatedMapConfigCodec.RequestParameters DecodeRequest(ClientMessage clientMessage) 
        {
            var iterator = clientMessage.GetIterator();
            var request = new RequestParameters();
            var initialFrame = iterator.Next();
            request.AsyncFillup =  DecodeBool(initialFrame.Content, RequestAsyncFillupFieldOffset);
            request.StatisticsEnabled =  DecodeBool(initialFrame.Content, RequestStatisticsEnabledFieldOffset);
            request.MergeBatchSize =  DecodeInt(initialFrame.Content, RequestMergeBatchSizeFieldOffset);
            request.Name = StringCodec.Decode(ref iterator);
            request.InMemoryFormat = StringCodec.Decode(ref iterator);
            request.MergePolicy = StringCodec.Decode(ref iterator);
            request.ListenerConfigs = ListMultiFrameCodec.DecodeNullable(ref iterator, ListenerConfigHolderCodec.Decode);
            request.SplitBrainProtectionName = CodecUtil.DecodeNullable(ref iterator, StringCodec.Decode);
            return request;
        }

        public class ResponseParameters 
        {
        }

        public static ClientMessage EncodeResponse() 
        {
            var clientMessage = CreateForEncode();
            var initialFrame = new Frame(new byte[ResponseInitialFrameSize], UnfragmentedMessage);
            EncodeInt(initialFrame.Content, TypeFieldOffset, ResponseMessageType);
            clientMessage.Add(initialFrame);

            return clientMessage;
        }

        public static DynamicConfigAddReplicatedMapConfigCodec.ResponseParameters DecodeResponse(ClientMessage clientMessage)
        {
            var iterator = clientMessage.GetIterator();
            var response = new ResponseParameters();
            //empty initial frame
            iterator.Next();
            return response;
        }
    }
}