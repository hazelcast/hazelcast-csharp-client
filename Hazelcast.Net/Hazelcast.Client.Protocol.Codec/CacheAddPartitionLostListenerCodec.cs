/*
 * Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System.Collections;
using System.Collections.Generic;
using Hazelcast.Client.Protocol;
using Hazelcast.Client.Protocol.Codec.BuiltIn;
using Hazelcast.Client.Protocol.Util;
using Hazelcast.IO;
using static Hazelcast.Client.Protocol.Codec.BuiltIn.FixedSizeTypesCodec;
using static Hazelcast.Client.Protocol.ClientMessage;
using static Hazelcast.IO.Bits;
using Hazelcast.Logging;

namespace Hazelcast.Client.Protocol.Codec
{
    /*
    * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
    * To change this file, edit the templates or the protocol
    * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
    * and regenerate it.
    */

    /// <summary>
    /// Adds a CachePartitionLostListener. The addPartitionLostListener returns a registration ID. This ID is needed to remove the
    /// CachePartitionLostListener using the #removePartitionLostListener(UUID) method. There is no check for duplicate
    /// registrations, so if you register the listener twice, it will get events twice.Listeners registered from
    /// HazelcastClient may miss some of the cache partition lost events due to design limitations.
    ///</summary>
    internal static class CacheAddPartitionLostListenerCodec 
    {
        public const int RequestMessageType = 0x151A00;
        public const int ResponseMessageType = 0x151A01;
        private const int RequestLocalOnlyFieldOffset = PartitionIdFieldOffset + IntSizeInBytes;
        private const int RequestInitialFrameSize = RequestLocalOnlyFieldOffset + BooleanSizeInBytes;
        private const int ResponseResponseFieldOffset = CorrelationIdFieldOffset + LongSizeInBytes;
        private const int ResponseInitialFrameSize = ResponseResponseFieldOffset + UUIDSizeInBytes;
        private const int EventCachePartitionLostpartitionIdFieldOffset = PartitionIdFieldOffset + IntSizeInBytes;
        private const int EventCachePartitionLostuuidFieldOffset = EventCachePartitionLostpartitionIdFieldOffset + IntSizeInBytes;
        private const int EventCachePartitionLostInitialFrameSize = EventCachePartitionLostuuidFieldOffset + UUIDSizeInBytes;
        private const int EventCachePartitionLostMessageType = 0x151A02;

        public class RequestParameters 
        {

            /// <summary>
            /// Name of the cache
            ///</summary>
            public string Name;

            /// <summary>
            /// if true only node that has the partition sends the request, if false
            /// sends all partition lost events.
            ///</summary>
            public bool LocalOnly;
        }

        public static ClientMessage EncodeRequest(string name, bool localOnly) 
        {
            var clientMessage = CreateForEncode();
            clientMessage.IsRetryable = false;
            clientMessage.AcquiresResource = false;
            clientMessage.OperationName = "Cache.AddPartitionLostListener";
            var initialFrame = new Frame(new byte[RequestInitialFrameSize], UnfragmentedMessage);
            EncodeInt(initialFrame.Content, TypeFieldOffset, RequestMessageType);
            EncodeBool(initialFrame.Content, RequestLocalOnlyFieldOffset, localOnly);
            clientMessage.Add(initialFrame);
            StringCodec.Encode(clientMessage, name);
            return clientMessage;
        }

        public static CacheAddPartitionLostListenerCodec.RequestParameters DecodeRequest(ClientMessage clientMessage) 
        {
            var iterator = clientMessage.GetIterator();
            var request = new RequestParameters();
            var initialFrame = iterator.Next();
            request.LocalOnly =  DecodeBool(initialFrame.Content, RequestLocalOnlyFieldOffset);
            request.Name = StringCodec.Decode(ref iterator);
            return request;
        }

        public class ResponseParameters 
        {

             /// <summary>
            /// returns the registration id for the CachePartitionLostListener.
            ///</summary>
            public Guid Response;
        }

        public static ClientMessage EncodeResponse(Guid response) 
        {
            var clientMessage = CreateForEncode();
            var initialFrame = new Frame(new byte[ResponseInitialFrameSize], UnfragmentedMessage);
            EncodeInt(initialFrame.Content, TypeFieldOffset, ResponseMessageType);
            clientMessage.Add(initialFrame);

            EncodeGuid(initialFrame.Content, ResponseResponseFieldOffset, response);
            return clientMessage;
        }

        public static CacheAddPartitionLostListenerCodec.ResponseParameters DecodeResponse(ClientMessage clientMessage)
        {
            var iterator = clientMessage.GetIterator();
            var response = new ResponseParameters();
            var initialFrame = iterator.Next();
            response.Response = DecodeGuid(initialFrame.Content, ResponseResponseFieldOffset);
            return response;
        }
    
        public static ClientMessage EncodeCachePartitionLostEvent(int partitionId, Guid uuid) 
        {
            var clientMessage = CreateForEncode();
            var initialFrame = new Frame(new byte[EventCachePartitionLostInitialFrameSize], UnfragmentedMessage);
            initialFrame.Flags |= IsEventFlag;
            EncodeInt(initialFrame.Content, TypeFieldOffset, EventCachePartitionLostMessageType);
            EncodeInt(initialFrame.Content, EventCachePartitionLostpartitionIdFieldOffset, partitionId);
            EncodeGuid(initialFrame.Content, EventCachePartitionLostuuidFieldOffset, uuid);
            clientMessage.Add(initialFrame);
            return clientMessage;
        }

        public abstract class AbstractEventHandler 
        {
            public void Handle(ClientMessage clientMessage) 
            {
                var messageType = clientMessage.MessageType;
                var iterator = clientMessage.GetIterator();
                if (messageType == EventCachePartitionLostMessageType) {
                    var initialFrame = iterator.Next();
                    int partitionId =  DecodeInt(initialFrame.Content, EventCachePartitionLostpartitionIdFieldOffset);
                    Guid uuid =  DecodeGuid(initialFrame.Content, EventCachePartitionLostuuidFieldOffset);
                    HandleCachePartitionLostEvent(partitionId, uuid);
                    return;
                }
                Logger.GetLogger(GetType()).Finest("Unknown message type received on event handler :" + messageType);
            }

            public abstract void HandleCachePartitionLostEvent(int partitionId, Guid uuid);
        }
    }
}