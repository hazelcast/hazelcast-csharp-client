// Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

using System;
using System.Collections;
using System.Collections.Generic;
using Hazelcast.Client.Protocol;
using Hazelcast.Client.Protocol.Codec.BuiltIn;
using Hazelcast.Client.Protocol.Codec.Custom;
using Hazelcast.Client.Protocol.Util;
using Hazelcast.IO;
using Hazelcast.IO.Serialization;
using static Hazelcast.Client.Protocol.Codec.BuiltIn.FixedSizeTypesCodec;
using static Hazelcast.Client.Protocol.ClientMessage;
using static Hazelcast.IO.Bits;

namespace Hazelcast.Client.Protocol.Codec
{
    // This file is auto-generated by the Hazelcast Client Protocol Code Generator.
    // To change this file, edit the templates or the protocol
    // definitions on the https://github.com/hazelcast/hazelcast-client-protocol
    // and regenerate it.

    /// <summary>
    /// Returns all scheduled tasks in for a given scheduler in the given member.
    ///</summary>
    internal static class ScheduledExecutorGetAllScheduledFuturesCodec 
    {
        //hex: 0x1A0400
        public const int RequestMessageType = 1704960;
        //hex: 0x1A0401
        public const int ResponseMessageType = 1704961;
        private const int RequestInitialFrameSize = PartitionIdFieldOffset + IntSizeInBytes;
        private const int ResponseInitialFrameSize = ResponseBackupAcksFieldOffset + IntSizeInBytes;

        public class RequestParameters 
        {

            /// <summary>
            /// The name of the scheduler.
            ///</summary>
            public string SchedulerName;
        }

        public static ClientMessage EncodeRequest(string schedulerName) 
        {
            var clientMessage = CreateForEncode();
            clientMessage.IsRetryable = true;
            clientMessage.AcquiresResource = false;
            clientMessage.OperationName = "ScheduledExecutor.GetAllScheduledFutures";
            var initialFrame = new Frame(new byte[RequestInitialFrameSize], UnfragmentedMessage);
            EncodeInt(initialFrame.Content, TypeFieldOffset, RequestMessageType);
            clientMessage.Add(initialFrame);
            StringCodec.Encode(clientMessage, schedulerName);
            return clientMessage;
        }

        public static ScheduledExecutorGetAllScheduledFuturesCodec.RequestParameters DecodeRequest(ClientMessage clientMessage) 
        {
            var iterator = clientMessage.GetIterator();
            var request = new RequestParameters();
            //empty initial frame
            iterator.Next();
            request.SchedulerName = StringCodec.Decode(ref iterator);
            return request;
        }

        public class ResponseParameters 
        {

            /// <summary>
            /// A list of scheduled task handlers used to construct the future proxies.
            ///</summary>
            public IList<KeyValuePair<com.hazelcast.cluster.Member, IList<com.hazelcast.scheduledexecutor.ScheduledTaskHandler>>> Handlers;
        }

        public static ClientMessage EncodeResponse(IEnumerable<KeyValuePair<com.hazelcast.cluster.Member, IEnumerable<com.hazelcast.scheduledexecutor.ScheduledTaskHandler>>> handlers) 
        {
            var clientMessage = CreateForEncode();
            var initialFrame = new Frame(new byte[ResponseInitialFrameSize], UnfragmentedMessage);
            EncodeInt(initialFrame.Content, TypeFieldOffset, ResponseMessageType);
            clientMessage.Add(initialFrame);

            EntryListMemberListScheduledTaskHandlerCodec.Encode(clientMessage, handlers);
            return clientMessage;
        }

        public static ScheduledExecutorGetAllScheduledFuturesCodec.ResponseParameters DecodeResponse(ClientMessage clientMessage)
        {
            var iterator = clientMessage.GetIterator();
            var response = new ResponseParameters();
            //empty initial frame
            iterator.Next();
            response.Handlers = EntryListMemberListScheduledTaskHandlerCodec.Decode(ref iterator);
            return response;
        }
    }
}