// Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

using System;
using System.Collections;
using System.Collections.Generic;
using Hazelcast.Client.Protocol;
using Hazelcast.Client.Protocol.Codec.BuiltIn;
using Hazelcast.Client.Protocol.Codec.Custom;
using Hazelcast.Client.Protocol.Util;
using Hazelcast.IO;
using Hazelcast.IO.Serialization;
using static Hazelcast.Client.Protocol.Codec.BuiltIn.FixedSizeTypesCodec;
using static Hazelcast.Client.Protocol.ClientMessage;
using static Hazelcast.IO.Bits;

namespace Hazelcast.Client.Protocol.Codec
{
    // This file is auto-generated by the Hazelcast Client Protocol Code Generator.
    // To change this file, edit the templates or the protocol
    // definitions on the https://github.com/hazelcast/hazelcast-client-protocol
    // and regenerate it.

    /// <summary>
    /// TODO DOC
    ///</summary>
    internal static class ClientAuthenticationCodec
    {
        //hex: 0x000100
        public const int RequestMessageType = 256;
        //hex: 0x000101
        public const int ResponseMessageType = 257;
        private const int RequestUuidFieldOffset = PartitionIdFieldOffset + IntSizeInBytes;
        private const int RequestSerializationVersionFieldOffset = RequestUuidFieldOffset + GuidSizeInBytes;
        private const int RequestPartitionCountFieldOffset = RequestSerializationVersionFieldOffset + ByteSizeInBytes;
        private const int RequestClusterIdFieldOffset = RequestPartitionCountFieldOffset + IntSizeInBytes;
        private const int RequestInitialFrameSize = RequestClusterIdFieldOffset + GuidSizeInBytes;
        private const int ResponseStatusFieldOffset = ResponseBackupAcksFieldOffset + IntSizeInBytes;
        private const int ResponseUuidFieldOffset = ResponseStatusFieldOffset + ByteSizeInBytes;
        private const int ResponseSerializationVersionFieldOffset = ResponseUuidFieldOffset + GuidSizeInBytes;
        private const int ResponsePartitionCountFieldOffset = ResponseSerializationVersionFieldOffset + ByteSizeInBytes;
        private const int ResponseClusterIdFieldOffset = ResponsePartitionCountFieldOffset + IntSizeInBytes;
        private const int ResponseInitialFrameSize = ResponseClusterIdFieldOffset + GuidSizeInBytes;

        public class RequestParameters
        {

            /// <summary>
            /// Cluster name that client will connect to.
            ///</summary>
            public string ClusterName;

            /// <summary>
            /// Name of the user for authentication.
            /// Used in case Client Identity Config, otherwise it should be passed null.
            ///</summary>
            public string Username;

            /// <summary>
            /// Password for the user.
            /// Used in case Client Identity Config, otherwise it should be passed null.
            ///</summary>
            public string Password;

            /// <summary>
            /// Unique string identifying the connected client uniquely.
            ///</summary>
            public Guid Uuid;

            /// <summary>
            /// The type of the client. E.g. JAVA, CPP, CSHARP, etc.
            ///</summary>
            public string ClientType;

            /// <summary>
            /// client side supported version to inform server side
            ///</summary>
            public byte SerializationVersion;

            /// <summary>
            /// The Hazelcast version of the client. (e.g. 3.7.2)
            ///</summary>
            public string ClientHazelcastVersion;

            /// <summary>
            /// the name of the client instance
            ///</summary>
            public string ClientName;

            /// <summary>
            /// User defined labels of the client instance
            ///</summary>
            public IList<string> Labels;

            /// <summary>
            /// the expected partition count of the cluster. Checked on the server side when provided.
            /// Authentication fails and 3:NOT_ALLOWED_IN_CLUSTER returned, in case of mismatch
            ///</summary>
            public int PartitionCount;

            /// <summary>
            /// the expected id of the cluster. Checked on the server side when provided.
            /// Authentication fails and 3:NOT_ALLOWED_IN_CLUSTER returned, in case of mismatch
            ///</summary>
            public Guid ClusterId;
        }

        public static ClientMessage EncodeRequest(string clusterName, string username, string password, Guid uuid, string clientType, byte serializationVersion, string clientHazelcastVersion, string clientName, IEnumerable<string> labels, int partitionCount, Guid clusterId)
        {
            var clientMessage = CreateForEncode();
            clientMessage.IsRetryable = true;
            clientMessage.AcquiresResource = false;
            clientMessage.OperationName = "Client.Authentication";
            var initialFrame = new Frame(new byte[RequestInitialFrameSize], UnfragmentedMessage);
            EncodeInt(initialFrame.Content, TypeFieldOffset, RequestMessageType);
            EncodeGuid(initialFrame.Content, RequestUuidFieldOffset, uuid);
            EncodeByte(initialFrame.Content, RequestSerializationVersionFieldOffset, serializationVersion);
            EncodeInt(initialFrame.Content, RequestPartitionCountFieldOffset, partitionCount);
            EncodeGuid(initialFrame.Content, RequestClusterIdFieldOffset, clusterId);
            clientMessage.Add(initialFrame);
            StringCodec.Encode(clientMessage, clusterName);
            CodecUtil.EncodeNullable(clientMessage, username, StringCodec.Encode);
            CodecUtil.EncodeNullable(clientMessage, password, StringCodec.Encode);
            StringCodec.Encode(clientMessage, clientType);
            StringCodec.Encode(clientMessage, clientHazelcastVersion);
            StringCodec.Encode(clientMessage, clientName);
            ListMultiFrameCodec.Encode(clientMessage, labels, StringCodec.Encode);
            return clientMessage;
        }

        public static RequestParameters DecodeRequest(ClientMessage clientMessage)
        {
            var iterator = clientMessage.GetIterator();
            var request = new RequestParameters();
            var initialFrame = iterator.Next();
            request.Uuid =  DecodeGuid(initialFrame.Content, RequestUuidFieldOffset);
            request.SerializationVersion =  DecodeByte(initialFrame.Content, RequestSerializationVersionFieldOffset);
            request.PartitionCount =  DecodeInt(initialFrame.Content, RequestPartitionCountFieldOffset);
            request.ClusterId =  DecodeGuid(initialFrame.Content, RequestClusterIdFieldOffset);
            request.ClusterName = StringCodec.Decode(iterator);
            request.Username = CodecUtil.DecodeNullable(iterator, StringCodec.Decode);
            request.Password = CodecUtil.DecodeNullable(iterator, StringCodec.Decode);
            request.ClientType = StringCodec.Decode(iterator);
            request.ClientHazelcastVersion = StringCodec.Decode(iterator);
            request.ClientName = StringCodec.Decode(iterator);
            request.Labels = ListMultiFrameCodec.Decode(iterator, StringCodec.Decode);
            return request;
        }

        public class ResponseParameters
        {

            /// <summary>
            /// TODO DOC
            ///</summary>
            public byte Status;

            /// <summary>
            /// TODO DOC
            ///</summary>
            public Hazelcast.IO.Address Address;

            /// <summary>
            /// Unique string identifying the connected client uniquely.
            ///</summary>
            public Guid Uuid;

            /// <summary>
            /// client side supported version to inform server side
            ///</summary>
            public byte SerializationVersion;

            /// <summary>
            /// TODO DOC
            ///</summary>
            public string ServerHazelcastVersion;

            /// <summary>
            /// the expected partition count of the cluster. Checked on the server side when provided.
            /// Authentication fails and 3:NOT_ALLOWED_IN_CLUSTER returned, in case of mismatch
            ///</summary>
            public int PartitionCount;

            /// <summary>
            /// the expected id of the cluster. Checked on the server side when provided.
            /// Authentication fails and 3:NOT_ALLOWED_IN_CLUSTER returned, in case of mismatch
            ///</summary>
            public Guid ClusterId;
        }

        public static ClientMessage EncodeResponse(byte status, Hazelcast.IO.Address address, Guid uuid, byte serializationVersion, string serverHazelcastVersion, int partitionCount, Guid clusterId)
        {
            var clientMessage = CreateForEncode();
            var initialFrame = new Frame(new byte[ResponseInitialFrameSize], UnfragmentedMessage);
            EncodeInt(initialFrame.Content, TypeFieldOffset, ResponseMessageType);
            clientMessage.Add(initialFrame);

            EncodeByte(initialFrame.Content, ResponseStatusFieldOffset, status);
            EncodeGuid(initialFrame.Content, ResponseUuidFieldOffset, uuid);
            EncodeByte(initialFrame.Content, ResponseSerializationVersionFieldOffset, serializationVersion);
            EncodeInt(initialFrame.Content, ResponsePartitionCountFieldOffset, partitionCount);
            EncodeGuid(initialFrame.Content, ResponseClusterIdFieldOffset, clusterId);
            CodecUtil.EncodeNullable(clientMessage, address, AddressCodec.Encode);
            StringCodec.Encode(clientMessage, serverHazelcastVersion);
            return clientMessage;
        }

        public static ResponseParameters DecodeResponse(ClientMessage clientMessage)
        {
            var iterator = clientMessage.GetIterator();
            var response = new ResponseParameters();
            var initialFrame = iterator.Next();
            response.Status = DecodeByte(initialFrame.Content, ResponseStatusFieldOffset);
            response.Uuid = DecodeGuid(initialFrame.Content, ResponseUuidFieldOffset);
            response.SerializationVersion = DecodeByte(initialFrame.Content, ResponseSerializationVersionFieldOffset);
            response.PartitionCount = DecodeInt(initialFrame.Content, ResponsePartitionCountFieldOffset);
            response.ClusterId = DecodeGuid(initialFrame.Content, ResponseClusterIdFieldOffset);
            response.Address = CodecUtil.DecodeNullable(iterator, AddressCodec.Decode);
            response.ServerHazelcastVersion = StringCodec.Decode(iterator);
            return response;
        }
    }
}